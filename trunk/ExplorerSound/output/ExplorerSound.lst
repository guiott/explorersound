FILE: .\boot.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#895 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.18
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0002: 30       HALT                     
0003: 30       HALT                     
0004: 30       HALT                     (0118)     halt                           ;Stop execution if power falls too low
                                        (0119) 
                                        (0120)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0121)     // call	void_handler
0005: 30       HALT                     
0006: 30       HALT                     
0007: 30       HALT                     
0008: 7E       RETI                     (0122)     reti
                                        (0123) 
                                        (0124)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0125)     // call	void_handler
0009: 30       HALT                     
000A: 30       HALT                     
000B: 30       HALT                     
000C: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0129)     // call	void_handler
000D: 30       HALT                     
000E: 30       HALT                     
000F: 30       HALT                     
0010: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0133)     // call	void_handler
0011: 30       HALT                     
0012: 30       HALT                     
0013: 30       HALT                     
0014: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   18h                      ;VC3 Interrupt Vector
                                        (0137)     // call	void_handler
0015: 30       HALT                     
0016: 30       HALT                     
0017: 30       HALT                     
0018: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0141)     // call	void_handler
0019: 30       HALT                     
001A: 30       HALT                     
001B: 30       HALT                     
001C: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
001D: 30       HALT                     
001E: 30       HALT                     
001F: 30       HALT                     
0020: 7D 0A D0 LJMP  0x0AD0             (0145)     ljmp	_ADCINCVR_mes_CNT_ISR
0023: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0149)     // call	void_handler
0024: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0025: 30       HALT                     
0026: 30       HALT                     
0027: 30       HALT                     
0028: 7D 0A D3 LJMP  0x0AD3             (0153)     ljmp	_ADCINCVR_mes_PWM16_ISR
002B: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 09 8B LJMP  0x098B             (0157)     ljmp	_ADCINCVR_pot_CNT_ISR
002F: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0161)     // call	void_handler
0030: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
0031: 30       HALT                     
0032: 30       HALT                     
0033: 30       HALT                     
0034: 7D 09 8E LJMP  0x098E             (0165)     ljmp	_ADCINCVR_pot_PWM16_ISR
0037: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0169)     // call	void_handler
0038: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0173)     // call	void_handler
0039: 30       HALT                     
003A: 30       HALT                     
003B: 30       HALT                     
003C: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0177)     // call	void_handler
003D: 30       HALT                     
003E: 30       HALT                     
003F: 30       HALT                     
0040: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
0041: 30       HALT                     
0042: 30       HALT                     
0043: 30       HALT                     
0044: 7D 07 F8 LJMP  0x07F8             (0181)     ljmp	_HB_Tmr_ISR
0047: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0185)     // call	void_handler
0048: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0189)     // call	void_handler
0049: 30       HALT                     
004A: 30       HALT                     
004B: 30       HALT                     
004C: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0193)     // call	void_handler
004D: 30       HALT                     
004E: 30       HALT                     
004F: 30       HALT                     
0050: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0197)     // call	void_handler
0051: 30       HALT                     
0052: 30       HALT                     
0053: 30       HALT                     
0054: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0201)     // call	void_handler
0055: 30       HALT                     
0056: 30       HALT                     
0057: 30       HALT                     
0058: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0205)     // call	void_handler
0059: 30       HALT                     
005A: 30       HALT                     
005B: 30       HALT                     
005C: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   60h                      ;PSoC I2C Interrupt Vector
005D: 30       HALT                     
005E: 30       HALT                     
005F: 30       HALT                     
0060: 7D 06 E2 LJMP  0x06E2             (0209)     ljmp	_I2CHW_ISR
0063: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0213)     // call	void_handler
0064: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  Start of Execution.
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0220) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0221) ;
                                        (0222) 
                                        (0223) IF	(TOOLCHAIN & HITECH)
                                        (0224)  	AREA PD_startup(CODE, REL, CON)
                                        (0225) ELSE
                                        (0226)     org 68h
                                        (0227) ENDIF
                                        (0228) __Start:
                                        (0229) 
                                        (0230)     ; initialize SMP values for voltage stabilization, if required,
                                        (0231)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0232)     ; least for now. 
                                        (0233)     ;
0065: 30       HALT                     
0066: 30       HALT                     
0067: 30       HALT                     
0068: 71 10    OR    F,0x10             (0234)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0235)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 86 MOV   REG[0xE3],0x86     (0236)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             (0237)     M8C_SetBank0
                                        (0238) 
                                        (0239)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0240)     mov   A, 20h
0074: 28       ROMX                     (0241)     romx
0075: 50 40    MOV   A,0x40             (0242)     mov   A, 40h
0077: 28       ROMX                     (0243)     romx
0078: 50 60    MOV   A,0x60             (0244)     mov   A, 60h
007A: 28       ROMX                     (0245)     romx
                                        (0246)     ; %45%20%46%46% End workaround
                                        (0247) 
                                        (0248) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0249)     M8C_EnableWatchDog
                                        (0250) ENDIF
                                        (0251) 
                                        (0252) IF ( SELECT_32K )
                                        (0253)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0254) ELSE
007B: 41 FE FB AND   REG[0xFE],0xFB     (0255)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0256) ENDIF
                                        (0257) 
                                        (0258)     ;---------------------------
                                        (0259)     ; Set up the Temporary stack
                                        (0260)     ;---------------------------
                                        (0261)     ; A temporary stack is set up for the SSC instructions.
                                        (0262)     ; The real stack start will be assigned later.
                                        (0263)     ;
                                        (0264) _stack_start:          equ 80h
007E: 50 80    MOV   A,0x80             (0265)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0080: 4E       SWAP  SP,A               (0266)     swap  SP, A                    ; This is only temporary if going to LMM
                                        (0267) 
                                        (0268)     ;-----------------------------------------------
                                        (0269)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0270)     ;-----------------------------------------------
                                        (0271) 
                                        (0272) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0273)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0274)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0275)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0276)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0277)   IF ( AGND_BYPASS )
                                        (0278)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0279)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0280)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0281)     ; value using the proper trim values.
                                        (0282)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0283)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0284)   ENDIF
                                        (0285)  ENDIF
                                        (0286) ENDIF ; 5.0 V Operation
                                        (0287) 
                                        (0288) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0289)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0290)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0291)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0292)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0293)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0294)  ENDIF
                                        (0295) ENDIF ; 3.3 Volt Operation
                                        (0296) 
0081: 55 F8 00 MOV   [TmrFlag+205],0x0  (0297)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
0084: 55 F9 00 MOV   [TmrFlag+206],0x0  (0298)     mov  [bSSC_KEYSP], 0
                                        (0299) 
                                        (0300)     ;---------------------------------------
                                        (0301)     ; Initialize Crystal Oscillator and PLL
                                        (0302)     ;---------------------------------------
                                        (0303) 
                                        (0304) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0305)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0306)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0307)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0308)     ; the ECO to stabilize.
                                        (0309)     ;
                                        (0310)     M8C_SetBank1
                                        (0311)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0312)     M8C_SetBank0
                                        (0313)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0314)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0315)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0316) .WaitFor1s:
                                        (0317)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0318)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0319)                                           ;   since interrupts are not globally enabled
                                        (0320) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0321)     ; Either no ECO, or waiting for stable clock is to be done in main
0087: 71 10    OR    F,0x10             (0322)     M8C_SetBank1
0089: 62 E0 0A MOV   REG[0xE0],0xA      (0323)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
008C: 70 EF    AND   F,0xEF             (0324)     M8C_SetBank0
008E: 62 E3 38 MOV   REG[0xE3],0x38     (0325)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0326) 
                                        (0327) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0328) 
                                        (0329) IF ( PLL_MODE )
                                        (0330)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0331)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0332)     ;
                                        (0333)     M8C_SetBank1
                                        (0334)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0335)     M8C_SetBank0
                                        (0336)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0337)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0338) 
                                        (0339) .WaitFor16ms:
                                        (0340)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0341)     jz   .WaitFor16ms
                                        (0342)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0343)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0344)     M8C_SetBank0
                                        (0345) 
                                        (0346) IF      ( WAIT_FOR_32K )
                                        (0347) ELSE ; !( WAIT_FOR_32K )
                                        (0348)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0349)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0350) ENDIF ;(WAIT_FOR_32K)
                                        (0351) ENDIF ;(PLL_MODE)
                                        (0352) 
                                        (0353)     ;------------------------
                                        (0354)     ; Close CT leakage path.
                                        (0355)     ;------------------------
0091: 62 71 05 MOV   REG[0x71],0x5      (0356)     mov   reg[ACB00CR0], 05h
0094: 62 75 05 MOV   REG[0x75],0x5      (0357)     mov   reg[ACB01CR0], 05h
0097: 62 79 05 MOV   REG[0x79],0x5      (0358)     mov   reg[ACB02CR0], 05h
009A: 62 7D 05 MOV   REG[0x7D],0x5      (0359)     mov   reg[ACB03CR0], 05h
                                        (0360) 
                                        (0361) 
                                        (0362) IF	(TOOLCHAIN & HITECH)
                                        (0363)     ;---------------------------------------------
                                        (0364)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0365)     ;---------------------------------------------
                                        (0366) 	global		__Lstackps
                                        (0367) 	mov     a,low __Lstackps
                                        (0368) 	swap    a,sp
                                        (0369) 
                                        (0370) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0371)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0372)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0373)     RAM_SETPAGE_CUR 0
                                        (0374)     RAM_SETPAGE_MVW 0
                                        (0375)     RAM_SETPAGE_MVR 0
                                        (0376)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0377)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0378)     ELSE
                                        (0379)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0380)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0381) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0382) ELSE
                                        (0383)     ;---------------------------------------------
                                        (0384)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0385)     ;---------------------------------------------
                                        (0386) IF ( SYSTEM_LARGE_MEMORY_MODEL )
009D: 62 D1 07 MOV   REG[0xD1],0x7      (0387)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A0: 50 00    MOV   A,0x0              (0388)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A2: 4E       SWAP  SP,A               (0389)     swap  A, SP
00A3: 62 D3 07 MOV   REG[0xD3],0x7      (0390)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
00A6: 62 D0 00 MOV   REG[0xD0],0x0      (0391)     RAM_SETPAGE_CUR 0
00A9: 62 D5 00 MOV   REG[0xD5],0x0      (0392)     RAM_SETPAGE_MVW 0
00AC: 62 D4 00 MOV   REG[0xD4],0x0      (0393)     RAM_SETPAGE_MVR 0
                                        (0394) 
                                        (0395)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00AF: 71 C0    OR    F,0xC0             (0396)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0397)   ELSE
                                        (0398)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0399)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0400) ELSE
                                        (0401)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0402)     swap  SP, A
                                        (0403) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0404) ENDIF ;	TOOLCHAIN
                                        (0405) 
                                        (0406)     ;-------------------------
                                        (0407)     ; Load Base Configuration
                                        (0408)     ;-------------------------
                                        (0409)     ; Load global parameter settings and load the user modules in the
                                        (0410)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0411)     ; to minimize start up time; (2) We may still need to play with the
                                        (0412)     ; Sleep Timer.
                                        (0413)     ;
00B1: 7C 03 F4 LCALL 0x03F4             (0414)     lcall LoadConfigInit
                                        (0415) 
                                        (0416)     ;-----------------------------------
                                        (0417)     ; Initialize C Run-Time Environment
                                        (0418)     ;-----------------------------------
                                        (0419) IF ( C_LANGUAGE_SUPPORT )
                                        (0420) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0421)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0422)     mov  [__r0],<__bss_start
                                        (0423) BssLoop:
                                        (0424)     cmp  [__r0],<__bss_end
                                        (0425)     jz   BssDone
                                        (0426)     mvi  [__r0],A
                                        (0427)     jmp  BssLoop
                                        (0428) BssDone:
                                        (0429)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0430)     mov  X,<__idata_start
                                        (0431)     mov  [__r0],<__data_start
                                        (0432) IDataLoop:
                                        (0433)     cmp  [__r0],<__data_end
                                        (0434)     jz   C_RTE_Done
                                        (0435)     push A
                                        (0436)     romx
                                        (0437)     mvi  [__r0],A
                                        (0438)     pop  A
                                        (0439)     inc  X
                                        (0440)     adc  A,0
                                        (0441)     jmp  IDataLoop
                                        (0442) 
                                        (0443) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0444) 
                                        (0445) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00B4: 62 D0 00 MOV   REG[0xD0],0x0      (0446)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0447)                                        ; to use the Virtual Register page.
                                        (0448) 
                                        (0449)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0450)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0451)     ; text segment and may have been relocated by the Code Compressor.
                                        (0452)     ;
00B7: 50 03    MOV   A,0x3              (0453)     mov   A, >__pXIData                ; Get the address of the flash
00B9: 57 F2    MOV   X,0xF2             (0454)     mov   X, <__pXIData                ;   pointer to the xidata area.
00BB: 08       PUSH  A                  (0455)     push  A
00BC: 28       ROMX                     (0456)     romx                               ; get the MSB of xidata's address
00BD: 53 20    MOV   [__r0],A           (0457)     mov   [__r0], A
00BF: 18       POP   A                  (0458)     pop   A
00C0: 75       INC   X                  (0459)     inc   X
00C1: 09 00    ADC   A,0x0              (0460)     adc   A, 0
00C3: 28       ROMX                     (0461)     romx                               ; get the LSB of xidata's address
00C4: 4B       SWAP  A,X                (0462)     swap  A, X
00C5: 51 20    MOV   A,[__r0]           (0463)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0464)                                        ;   XIData structure list in flash
00C7: 80 04    JMP   0x00CC             (0465)     jmp   .AccessStruct
                                        (0466) 
                                        (0467)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0468)     ; values of C variables. Each structure contains 3 member elements.
                                        (0469)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0470)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0471)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0472)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0473)     ; value in the second member element, an unsigned byte:
                                        (0474)     ; (1) If the value of the second element is non-zero, it represents
                                        (0475)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0476)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0477)     ; the bytes are copied to the block of RAM.
                                        (0478)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0479)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0480)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0481) 
                                        (0482) .AccessNextStructLoop:
00C9: 75       INC   X                  (0483)     inc   X                            ; pXIData++
00CA: 09 00    ADC   A,0x0              (0484)     adc   A, 0
                                        (0485) .AccessStruct:                         ; Entry point for first block
                                        (0486)     ;
                                        (0487)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0488)     ;
00CC: 62 E3 00 MOV   REG[0xE3],0x0      (0489)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00CF: 08       PUSH  A                  (0490)     push  A
00D0: 28       ROMX                     (0491)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D1: 60 D5    MOV   REG[0xD5],A        (0492)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D3: 74       INC   A                  (0493)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00D4: A0 4B    JZ    0x0120             (0494)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00D6: 18       POP   A                  (0495)     pop   A                            ; restore pXIData to [A,X]
00D7: 75       INC   X                  (0496)     inc   X                            ; pXIData++
00D8: 09 00    ADC   A,0x0              (0497)     adc   A, 0
00DA: 08       PUSH  A                  (0498)     push  A
00DB: 28       ROMX                     (0499)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00DC: 53 20    MOV   [__r0],A           (0500)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00DE: 18       POP   A                  (0501)     pop   A                            ; restore pXIData to [A,X]
00DF: 75       INC   X                  (0502)     inc   X                            ; pXIData++ (point to size)
00E0: 09 00    ADC   A,0x0              (0503)     adc   A, 0
00E2: 08       PUSH  A                  (0504)     push  A
00E3: 28       ROMX                     (0505)     romx                               ; Get the size (CPU.A <- *pXIData)
00E4: A0 1C    JZ    0x0101             (0506)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00E6: 53 1F    MOV   [__r1],A           (0507)     mov   [__r1], A                    ;             else downcount in __r1
00E8: 18       POP   A                  (0508)     pop   A                            ; restore pXIData to [A,X]
                                        (0509) 
                                        (0510) .CopyNextByteLoop:
                                        (0511)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0512)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0513)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0514)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0515)     ;
00E9: 75       INC   X                  (0516)     inc   X                            ; pXIData++ (point to next data byte)
00EA: 09 00    ADC   A,0x0              (0517)     adc   A, 0
00EC: 08       PUSH  A                  (0518)     push  A
00ED: 28       ROMX                     (0519)     romx                               ; Get the data value (CPU.A <- *pXIData)
00EE: 3F 20    MVI   [__r0],A           (0520)     mvi   [__r0], A                    ; Transfer the data to RAM
00F0: 47 20 FF TST   [__r0],0xFF        (0521)     tst   [__r0], 0xff                 ; Check for page crossing
00F3: B0 06    JNZ   0x00FA             (0522)     jnz   .CopyLoopTail                ;   No crossing, keep going
00F5: 5D D5    MOV   A,REG[0xD5]        (0523)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00F7: 74       INC   A                  (0524)     inc   A
00F8: 60 D5    MOV   REG[0xD5],A        (0525)     mov   reg[ MVW_PP], A
                                        (0526) .CopyLoopTail:
00FA: 18       POP   A                  (0527)     pop   A                            ; restore pXIData to [A,X]
00FB: 7A 1F    DEC   [__r1]             (0528)     dec   [__r1]                       ; End of this array in flash?
00FD: BF EB    JNZ   0x00E9             (0529)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
00FF: 8F C9    JMP   0x00C9             (0530)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0531) 
                                        (0532) .ClearRAMBlockToZero:
0101: 18       POP   A                  (0533)     pop   A                            ; restore pXIData to [A,X]
0102: 75       INC   X                  (0534)     inc   X                            ; pXIData++ (point to next data byte)
0103: 09 00    ADC   A,0x0              (0535)     adc   A, 0
0105: 08       PUSH  A                  (0536)     push  A
0106: 28       ROMX                     (0537)     romx                               ; Get the run length (CPU.A <- *pXIData)
0107: 53 1F    MOV   [__r1],A           (0538)     mov   [__r1], A                    ; Initialize downcounter
0109: 50 00    MOV   A,0x0              (0539)     mov   A, 0                         ; Initialize source data
                                        (0540) 
                                        (0541) .ClearRAMBlockLoop:
                                        (0542)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0543)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0544)     ;
010B: 3F 20    MVI   [__r0],A           (0545)     mvi   [__r0], A                    ; Clear a byte
010D: 47 20 FF TST   [__r0],0xFF        (0546)     tst   [__r0], 0xff                 ; Check for page crossing
0110: B0 08    JNZ   0x0119             (0547)     jnz   .ClearLoopTail               ;   No crossing, keep going
0112: 5D D5    MOV   A,REG[0xD5]        (0548)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0114: 74       INC   A                  (0549)     inc   A
0115: 60 D5    MOV   REG[0xD5],A        (0550)     mov   reg[ MVW_PP], A
0117: 50 00    MOV   A,0x0              (0551)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0552) .ClearLoopTail:
0119: 7A 1F    DEC   [__r1]             (0553)     dec   [__r1]                       ; Was this the last byte?
011B: BF EF    JNZ   0x010B             (0554)     jnz   .ClearRAMBlockLoop           ;   No,  continue
011D: 18       POP   A                  (0555)     pop   A                            ;   Yes, restore pXIData to [A,X] and
011E: 8F AA    JMP   0x00C9             (0556)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0557) 
                                        (0558) .C_RTE_WrapUp:
0120: 18       POP   A                  (0559)     pop   A                            ; balance stack
                                        (0560) 
                                        (0561) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0562) 
                                        (0563) C_RTE_Done:
                                        (0564) 
                                        (0565) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0566) 
                                        (0567)     ;-------------------------------
                                        (0568)     ; Voltage Stabilization for SMP
                                        (0569)     ;-------------------------------
                                        (0570) 
                                        (0571) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0572) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0573)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0574)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0575)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0576)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0577)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0578)     M8C_SetBank1
                                        (0579)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0580)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0581)     M8C_SetBank0
                                        (0582)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0583)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0584) .WaitFor2ms:
                                        (0585)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0586)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0587) ENDIF ; SMP is operational
                                        (0588) ENDIF ; 5.0V Operation
                                        (0589) 
                                        (0590)     ;-------------------------------
                                        (0591)     ; Set Power-On Reset (POR) Level
                                        (0592)     ;-------------------------------
                                        (0593) 
                                        (0594)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0595)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0596)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. These
                                        (0597)     ;  values should not be changed from the settings here. Failure to follow this instruction could 
                                        (0598)     ;  lead to corruption of PSoC flash.
                                        (0599) 
0121: 71 10    OR    F,0x10             (0600)     M8C_SetBank1
                                        (0601) 
                                        (0602) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0603)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0604)  ELSE                                       ;    No, fast mode
                                        (0605)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0606)                                             ;       no, set midpoint POR in user code, if desired
                                        (0607)   ELSE ; 24HMz                              ;
0123: 43 E3 20 OR    REG[0xE3],0x20     (0608)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0609)   ENDIF ; 24MHz
                                        (0610)  ENDIF ; Slow Mode
                                        (0611) ENDIF ; 5.0V Operation
                                        (0612) 
0126: 70 EF    AND   F,0xEF             (0613)     M8C_SetBank0
                                        (0614) 
                                        (0615)     ;----------------------------
                                        (0616)     ; Wrap up and invoke "main"
                                        (0617)     ;----------------------------
                                        (0618) 
                                        (0619)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0620)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0621)     ;
0128: 62 E0 00 MOV   REG[0xE0],0x0      (0622)     mov  reg[INT_MSK0],0
                                        (0623) 
                                        (0624)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0625)     ; And put decimator in full mode so it does not consume too much current.
                                        (0626)     ;
012B: 71 10    OR    F,0x10             (0627)     M8C_SetBank1
012D: 62 E0 0B MOV   REG[0xE0],0xB      (0628)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0130: 43 E7 80 OR    REG[0xE7],0x80     (0629)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0133: 70 EF    AND   F,0xEF             (0630)     M8C_SetBank0
                                        (0631) 
                                        (0632)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0633)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0634)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0635)     ;
0135: 62 E2 00 MOV   REG[0xE2],0x0      (0636)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0637)                                    ; have been set during the boot process.
                                        (0638) IF	(TOOLCHAIN & HITECH)
                                        (0639) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0640) ELSE
                                        (0641) IF ENABLE_LJMP_TO_MAIN
                                        (0642)     ljmp  _main                    ; goto main (no return)
                                        (0643) ELSE
0138: 7C 0C 29 LCALL _main              (0644)     lcall _main                    ; call main
                                        (0645) .Exit:
013B: 8F FF    JMP   0x013B             (0646)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0647) ENDIF
                                        (0648) ENDIF ; TOOLCHAIN
                                        (0649) 
                                        (0650)     ;---------------------------------
                                        (0651)     ; Library Access to Global Parms
                                        (0652)     ;---------------------------------
                                        (0653)     ;
                                        (0654)  bGetPowerSetting:
                                        (0655) _bGetPowerSetting:
                                        (0656)     ; Returns value of POWER_SETTING in the A register.
                                        (0657)     ; No inputs. No Side Effects.
                                        (0658)     ;
013D: 50 10    MOV   A,0x10             (0659)     mov   A, POWER_SETTING
013F: 7F       RET                      (0660)     ret
(0661) 
(0662) IF	(TOOLCHAIN & HITECH)
(0663) ELSE
(0664)     ;---------------------------------
(0665)     ; Order Critical RAM & ROM AREAs
(0666)     ;---------------------------------
(0667)     ;  'TOP' is all that has been defined so far...
(0668) 
(0669)     ;  ROM AREAs for C CONST, static & global items
(0670)     ;
(0671)     AREA lit               (ROM, REL, CON)   ; 'const' definitions
(0672)     AREA idata             (ROM, REL, CON)   ; Constants for initializing RAM
(0673) __idata_start:
(0674) 
(0675)     AREA func_lit          (ROM, REL, CON)   ; Function Pointers
(0676) __func_lit_start:
(0677) 
(0678) IF ( SYSTEM_LARGE_MEMORY_MODEL )
(0679)     ; We use the func_lit area to store a pointer to extended initialized
(0680)     ; data (xidata) area that follows the text area. Func_lit isn't
(0681)     ; relocated by the code compressor, but the text area may shrink and
(0682)     ; that moves xidata around.
(0683)     ;
(0684) __pXIData:         word __text_end           ; ptr to extended idata
(0685) ENDIF
(0686) 
(0687)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
(0688)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
(0689) 
(0690)     ; CODE segment for general use
(0691)     ;
(0692)     AREA text (ROM, REL, CON)
(0693) __text_start:
(0694) 
(0695)     ; RAM area usage
(0696)     ;
(0697)     AREA data              (RAM, REL, CON)   ; initialized RAM
(0698) __data_start:
(0699) 
(0700)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
(0701)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
(0702)     AREA bss               (RAM, REL, CON)   ; general use
(0703) __bss_start:
(0704) 
(0705) ENDIF ; TOOLCHAIN
(0706) 
(0707) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_explorersound_Bank1
                                        (0006) export LoadConfigTBL_explorersound_Bank0
                                        (0007) export LoadConfigTBL_explorersound_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_explorersound_Bank0:
                                        (0010) ;  Instance name ADCINCVR_mes, User Module ADCINCVR
                                        (0011) ;       Instance name ADCINCVR_mes, Block Name ADC(ASD13)
                                        (0012) 	db		8ch, 90h		;ADCINCVR_mes_bfAtoDcr0       (ASD13CR0)
                                        (0013) 	db		8dh, 20h		;ADCINCVR_mes_bfAtoDcr1       (ASD13CR1)
                                        (0014) 	db		8eh, 61h		;ADCINCVR_mes_bfAtoDcr2       (ASD13CR2)
                                        (0015) 	db		8fh, f0h		;ADCINCVR_mes_bfAtoDcr3       (ASD13CR3)
                                        (0016) ;       Instance name ADCINCVR_mes, Block Name CNT(DBB00)
                                        (0017) 	db		23h, 00h		;ADCINCVR_mes_bCounter_CR0    (DBB00CR0)
                                        (0018) 	db		21h, 00h		;ADCINCVR_mes_bPeriod         (DBB00DR1)
                                        (0019) 	db		22h, 00h		;ADCINCVR_mes_bCompare        (DBB00DR2)
                                        (0020) ;       Instance name ADCINCVR_mes, Block Name PWM16_LSB(DBB01)
                                        (0021) 	db		27h, 00h		;ADCINCVR_mes_fPWM_LSB_CR0    (DBB01CR0)
                                        (0022) 	db		25h, 00h		;ADCINCVR_mes_bPWM_Period_LSB (DBB01DR1)
                                        (0023) 	db		26h, 00h		;ADCINCVR_mes_bPWM_IntTime_LSB(DBB01DR2)
                                        (0024) ;       Instance name ADCINCVR_mes, Block Name PWM16_MSB(DCB02)
                                        (0025) 	db		2bh, 00h		;ADCINCVR_mes_fPWM_MSB_CR0    (DCB02CR0)
                                        (0026) 	db		29h, 00h		;ADCINCVR_mes_bPWM_Period_MSB (DCB02DR1)
                                        (0027) 	db		2ah, 00h		;ADCINCVR_mes_bPWM_IntTime_MSB(DCB02DR2)
                                        (0028) ;  Instance name ADCINCVR_pot, User Module ADCINCVR
                                        (0029) ;       Instance name ADCINCVR_pot, Block Name ADC(ASD22)
                                        (0030) 	db		98h, d0h		;ADCINCVR_pot_bfAtoDcr0       (ASD22CR0)
                                        (0031) 	db		99h, 40h		;ADCINCVR_pot_bfAtoDcr1       (ASD22CR1)
                                        (0032) 	db		9ah, 61h		;ADCINCVR_pot_bfAtoDcr2       (ASD22CR2)
                                        (0033) 	db		9bh, f0h		;ADCINCVR_pot_bfAtoDcr3       (ASD22CR3)
                                        (0034) ;       Instance name ADCINCVR_pot, Block Name CNT(DCB03)
                                        (0035) 	db		2fh, 00h		;ADCINCVR_pot_bCounter_CR0    (DCB03CR0)
                                        (0036) 	db		2dh, 00h		;ADCINCVR_pot_bPeriod         (DCB03DR1)
                                        (0037) 	db		2eh, 00h		;ADCINCVR_pot_bCompare        (DCB03DR2)
                                        (0038) ;       Instance name ADCINCVR_pot, Block Name PWM16_LSB(DBB10)
                                        (0039) 	db		33h, 00h		;ADCINCVR_pot_fPWM_LSB_CR0    (DBB10CR0)
                                        (0040) 	db		31h, 00h		;ADCINCVR_pot_bPWM_Period_LSB (DBB10DR1)
                                        (0041) 	db		32h, 00h		;ADCINCVR_pot_bPWM_IntTime_LSB(DBB10DR2)
                                        (0042) ;       Instance name ADCINCVR_pot, Block Name PWM16_MSB(DBB11)
                                        (0043) 	db		37h, 00h		;ADCINCVR_pot_fPWM_MSB_CR0    (DBB11CR0)
                                        (0044) 	db		35h, 00h		;ADCINCVR_pot_bPWM_Period_MSB (DBB11DR1)
                                        (0045) 	db		36h, 00h		;ADCINCVR_pot_bPWM_IntTime_MSB(DBB11DR2)
                                        (0046) ;  Instance name AMUX4_mic, User Module AMUX4
                                        (0047) ;  Instance name BPF4_4KHz, User Module BPF4
                                        (0048) ;       Instance name BPF4_4KHz, Block Name FLFBH(ASD11)
                                        (0049) 	db		84h, 85h		;BPF4_4KHz_FLFBH_CR0(ASD11CR0)
                                        (0050) 	db		85h, 60h		;BPF4_4KHz_FLFBH_CR1(ASD11CR1)
                                        (0051) 	db		86h, 00h		;BPF4_4KHz_FLFBH_CR2(ASD11CR2)
                                        (0052) 	db		87h, 20h		;BPF4_4KHz_FLFBH_CR3(ASD11CR3)
                                        (0053) ;       Instance name BPF4_4KHz, Block Name FLFBL(ASD20)
                                        (0054) 	db		90h, 85h		;BPF4_4KHz_FLFBL_CR0(ASD20CR0)
                                        (0055) 	db		91h, 00h		;BPF4_4KHz_FLFBL_CR1(ASD20CR1)
                                        (0056) 	db		92h, 00h		;BPF4_4KHz_FLFBL_CR2(ASD20CR2)
                                        (0057) 	db		93h, 20h		;BPF4_4KHz_FLFBL_CR3(ASD20CR3)
                                        (0058) ;       Instance name BPF4_4KHz, Block Name FLINH(ASC21)
                                        (0059) 	db		94h, a1h		;BPF4_4KHz_FLINH_CR0(ASC21CR0)
                                        (0060) 	db		95h, 94h		;BPF4_4KHz_FLINH_CR1(ASC21CR1)
                                        (0061) 	db		96h, 85h		;BPF4_4KHz_FLINH_CR2(ASC21CR2)
                                        (0062) 	db		97h, 20h		;BPF4_4KHz_FLINH_CR3(ASC21CR3)
                                        (0063) ;       Instance name BPF4_4KHz, Block Name FLINL(ASC10)
                                        (0064) 	db		80h, a1h		;BPF4_4KHz_FLINL_CR0(ASC10CR0)
                                        (0065) 	db		81h, b3h		;BPF4_4KHz_FLINL_CR1(ASC10CR1)
                                        (0066) 	db		82h, 05h		;BPF4_4KHz_FLINL_CR2(ASC10CR2)
                                        (0067) 	db		83h, 2ch		;BPF4_4KHz_FLINL_CR3(ASC10CR3)
                                        (0068) ;  Instance name DIGITAL_OUT, User Module LED
                                        (0069) ;  Instance name HB_Tmr, User Module Timer16
                                        (0070) ;       Instance name HB_Tmr, Block Name TIMER16_LSB(DBB20)
                                        (0071) 	db		43h, 00h		;HB_Tmr_CONTROL_LSB_REG(DBB20CR0)
                                        (0072) 	db		41h, 7fh		;HB_Tmr_PERIOD_LSB_REG(DBB20DR1)
                                        (0073) 	db		42h, 00h		;HB_Tmr_COMPARE_LSB_REG(DBB20DR2)
                                        (0074) ;       Instance name HB_Tmr, Block Name TIMER16_MSB(DBB21)
                                        (0075) 	db		47h, 04h		;HB_Tmr_CONTROL_MSB_REG(DBB21CR0)
                                        (0076) 	db		45h, 0ch		;HB_Tmr_PERIOD_MSB_REG(DBB21DR1)
                                        (0077) 	db		46h, 00h		;HB_Tmr_COMPARE_MSB_REG(DBB21DR2)
                                        (0078) ;  Instance name I2CHW, User Module I2CHW
                                        (0079) ;  Instance name LED_1, User Module LED
                                        (0080) ;  Instance name LED_2, User Module LED
                                        (0081) ;  Instance name LED_3, User Module LED
                                        (0082) ;  Instance name PGA_out, User Module PGA
                                        (0083) ;       Instance name PGA_out, Block Name GAIN(ACB02)
                                        (0084) 	db		79h, 1dh		;PGA_out_GAIN_CR0(ACB02CR0)
                                        (0085) 	db		7ah, a1h		;PGA_out_GAIN_CR1(ACB02CR1)
                                        (0086) 	db		7bh, 20h		;PGA_out_GAIN_CR2(ACB02CR2)
                                        (0087) 	db		78h, 00h		;PGA_out_GAIN_CR3(ACB02CR3)
                                        (0088) ;  Instance name PGA_pre, User Module PGA
                                        (0089) ;       Instance name PGA_pre, Block Name GAIN(ACB00)
                                        (0090) 	db		71h, 4dh		;PGA_pre_GAIN_CR0(ACB00CR0)
                                        (0091) 	db		72h, a1h		;PGA_pre_GAIN_CR1(ACB00CR1)
                                        (0092) 	db		73h, 20h		;PGA_pre_GAIN_CR2(ACB00CR2)
                                        (0093) 	db		70h, 00h		;PGA_pre_GAIN_CR3(ACB00CR3)
                                        (0094) ;  Instance name RefMux_1, User Module RefMux
                                        (0095) ;       Instance name RefMux_1, Block Name REFMUX(ACB03)
                                        (0096) 	db		7dh, 01h		;RefMux_1_REFMUX_CR0(ACB03CR0)
                                        (0097) 	db		7eh, 09h		;RefMux_1_REFMUX_CR1(ACB03CR1)
                                        (0098) 	db		7fh, 14h		;RefMux_1_REFMUX_CR2(ACB03CR2)
                                        (0099) 	db		7ch, 00h		;RefMux_1_REFMUX_CR3(ACB03CR3)
                                        (0100) ;  Instance name SCBLOCK_inbuff, User Module SCBLOCK
                                        (0101) ;       Instance name SCBLOCK_inbuff, Block Name SCBLK(ASC23)
                                        (0102) 	db		9ch, 00h		;SCBLOCK_inbuff_cr0(ASC23CR0)
                                        (0103) 	db		9dh, 51h		;SCBLOCK_inbuff_cr1(ASC23CR1)
                                        (0104) 	db		9eh, 20h		;SCBLOCK_inbuff_cr2(ASC23CR2)
                                        (0105) 	db		9fh, 3bh		;SCBLOCK_inbuff_cr3(ASC23CR3)
                                        (0106) ;  Instance name TX8, User Module TX8
                                        (0107) ;       Instance name TX8, Block Name TX8(DCB13)
                                        (0108) 	db		3fh, 00h		;TX8_CONTROL_REG  (DCB13CR0)
                                        (0109) 	db		3dh, 00h		;TX8_TX_BUFFER_REG(DCB13DR1)
                                        (0110) 	db		3eh, 00h		;TX8_(DCB13DR2)
                                        (0111) ;  Global Register values Bank 0
                                        (0112) 	db		60h, e4h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0113) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0114) 	db		63h, 57h		; AnalogReferenceControl register (ARF_CR)
                                        (0115) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0116) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0117) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0118) 	db		d6h, 04h		; I2CConfig register (I2C_CFG)
                                        (0119) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0120) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0121) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0122) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0123) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0124) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0125) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0126) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0127) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0128) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0129) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0130) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0131) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0132) 	db		beh, 04h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0133) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0134) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0135) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0136) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0137) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0138) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0139) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0140) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0141) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0142) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0143) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0144) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0145) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0146) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0147) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0148) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0149) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0150) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0151) 	db		ffh
                                        (0152) LoadConfigTBL_explorersound_Bank1:
                                        (0153) ;  Instance name ADCINCVR_mes, User Module ADCINCVR
                                        (0154) ;       Instance name ADCINCVR_mes, Block Name ADC(ASD13)
                                        (0155) ;       Instance name ADCINCVR_mes, Block Name CNT(DBB00)
                                        (0156) 	db		20h, 21h		;ADCINCVR_mes_fCounterFN      (DBB00FN)
                                        (0157) 	db		21h, 75h		;ADCINCVR_mes_fCounterSL      (DBB00IN)
                                        (0158) 	db		22h, 40h		;ADCINCVR_mes_fCounterOS      (DBB00OU)
                                        (0159) ;       Instance name ADCINCVR_mes, Block Name PWM16_LSB(DBB01)
                                        (0160) 	db		24h, 01h		;ADCINCVR_mes_bfPWM_LSB_FN    (DBB01FN)
                                        (0161) 	db		25h, 15h		;ADCINCVR_mes_(DBB01IN)
                                        (0162) 	db		26h, 40h		;ADCINCVR_mes_(DBB01OU)
                                        (0163) ;       Instance name ADCINCVR_mes, Block Name PWM16_MSB(DCB02)
                                        (0164) 	db		28h, 21h		;ADCINCVR_mes_bfPWM_MSB_FN    (DCB02FN)
                                        (0165) 	db		29h, 35h		;ADCINCVR_mes_(DCB02IN)
                                        (0166) 	db		2ah, 40h		;ADCINCVR_mes_(DCB02OU)
                                        (0167) ;  Instance name ADCINCVR_pot, User Module ADCINCVR
                                        (0168) ;       Instance name ADCINCVR_pot, Block Name ADC(ASD22)
                                        (0169) ;       Instance name ADCINCVR_pot, Block Name CNT(DCB03)
                                        (0170) 	db		2ch, 21h		;ADCINCVR_pot_fCounterFN      (DCB03FN)
                                        (0171) 	db		2dh, 65h		;ADCINCVR_pot_fCounterSL      (DCB03IN)
                                        (0172) 	db		2eh, 40h		;ADCINCVR_pot_fCounterOS      (DCB03OU)
                                        (0173) ;       Instance name ADCINCVR_pot, Block Name PWM16_LSB(DBB10)
                                        (0174) 	db		30h, 01h		;ADCINCVR_pot_bfPWM_LSB_FN    (DBB10FN)
                                        (0175) 	db		31h, 15h		;ADCINCVR_pot_(DBB10IN)
                                        (0176) 	db		32h, 40h		;ADCINCVR_pot_(DBB10OU)
                                        (0177) ;       Instance name ADCINCVR_pot, Block Name PWM16_MSB(DBB11)
                                        (0178) 	db		34h, 21h		;ADCINCVR_pot_bfPWM_MSB_FN    (DBB11FN)
                                        (0179) 	db		35h, 35h		;ADCINCVR_pot_(DBB11IN)
                                        (0180) 	db		36h, 40h		;ADCINCVR_pot_(DBB11OU)
                                        (0181) ;  Instance name AMUX4_mic, User Module AMUX4
                                        (0182) ;  Instance name BPF4_4KHz, User Module BPF4
                                        (0183) ;       Instance name BPF4_4KHz, Block Name FLFBH(ASD11)
                                        (0184) ;       Instance name BPF4_4KHz, Block Name FLFBL(ASD20)
                                        (0185) ;       Instance name BPF4_4KHz, Block Name FLINH(ASC21)
                                        (0186) ;       Instance name BPF4_4KHz, Block Name FLINL(ASC10)
                                        (0187) ;  Instance name DIGITAL_OUT, User Module LED
                                        (0188) ;  Instance name HB_Tmr, User Module Timer16
                                        (0189) ;       Instance name HB_Tmr, Block Name TIMER16_LSB(DBB20)
                                        (0190) 	db		40h, 10h		;HB_Tmr_FUNC_LSB_REG(DBB20FN)
                                        (0191) 	db		41h, 06h		;HB_Tmr_INPUT_LSB_REG(DBA20IN)
                                        (0192) 	db		42h, 40h		;HB_Tmr_OUTPUT_LSB_REG(DBA20OU)
                                        (0193) ;       Instance name HB_Tmr, Block Name TIMER16_MSB(DBB21)
                                        (0194) 	db		44h, 30h		;HB_Tmr_FUNC_MSB_REG(DBB21FN)
                                        (0195) 	db		45h, 36h		;HB_Tmr_INPUT_MSB_REG(DBB21IN)
                                        (0196) 	db		46h, 40h		;HB_Tmr_OUTPUT_MSB_REG(DBB21OU)
                                        (0197) ;  Instance name I2CHW, User Module I2CHW
                                        (0198) ;  Instance name LED_1, User Module LED
                                        (0199) ;  Instance name LED_2, User Module LED
                                        (0200) ;  Instance name LED_3, User Module LED
                                        (0201) ;  Instance name PGA_out, User Module PGA
                                        (0202) ;       Instance name PGA_out, Block Name GAIN(ACB02)
                                        (0203) ;  Instance name PGA_pre, User Module PGA
                                        (0204) ;       Instance name PGA_pre, Block Name GAIN(ACB00)
                                        (0205) ;  Instance name RefMux_1, User Module RefMux
                                        (0206) ;       Instance name RefMux_1, Block Name REFMUX(ACB03)
                                        (0207) ;  Instance name SCBLOCK_inbuff, User Module SCBLOCK
                                        (0208) ;       Instance name SCBLOCK_inbuff, Block Name SCBLK(ASC23)
                                        (0209) ;  Instance name TX8, User Module TX8
                                        (0210) ;       Instance name TX8, Block Name TX8(DCB13)
                                        (0211) 	db		3ch, 0dh		;TX8_FUNC_REG     (DCB13FN)
                                        (0212) 	db		3dh, 01h		;TX8_INPUT_REG    (DCB13IN)
                                        (0213) 	db		3eh, 46h		;TX8_OUTPUT_REG   (DCB13OU)
                                        (0214) ;  Global Register values Bank 1
                                        (0215) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0216) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0217) 	db		60h, 05h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0218) 	db		62h, 35h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0219) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0220) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0221) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0222) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0223) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0224) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0225) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0226) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0227) 	db		e1h, 4eh		; OscillatorControl_1 register (OSC_CR1)
                                        (0228) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0229) 	db		dfh, 19h		; OscillatorControl_3 register (OSC_CR3)
                                        (0230) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0231) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0232) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0233) 	db		ffh
                                        (0234) LoadConfigTBL_explorersound_Ordered:
                                        (0235) ;  Ordered Global Register values

(0236) 	M8C_SetBank1
0308: 10       PUSH  X                  
0309: 62 00 00 MOV   REG[0x0],0x0       (0237) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
030C: 62 01 FF MOV   REG[0x1],0xFF      (0238) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
030F: 70 EF    AND   F,0xEF             (0239) 	M8C_SetBank0
0311: 62 03 FF MOV   REG[0x3],0xFF      (0240) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
0314: 62 02 00 MOV   REG[0x2],0x0       (0241) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0317: 71 10    OR    F,0x10             (0242) 	M8C_SetBank1
0319: 62 02 00 MOV   REG[0x2],0x0       (0243) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
031C: 62 03 00 MOV   REG[0x3],0x0       (0244) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
031F: 70 EF    AND   F,0xEF             (0245) 	M8C_SetBank0
0321: 62 01 00 MOV   REG[0x1],0x0       (0246) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0324: 71 10    OR    F,0x10             (0247) 	M8C_SetBank1
0326: 62 04 A4 MOV   REG[0x4],0xA4      (0248) 	mov	reg[04h], a4h		; Port_1_DriveMode_0 register (PRT1DM0)
0329: 62 05 FB MOV   REG[0x5],0xFB      (0249) 	mov	reg[05h], fbh		; Port_1_DriveMode_1 register (PRT1DM1)
032C: 70 EF    AND   F,0xEF             (0250) 	M8C_SetBank0
032E: 62 07 FB MOV   REG[0x7],0xFB      (0251) 	mov	reg[07h], fbh		; Port_1_DriveMode_2 register (PRT1DM2)
0331: 62 06 04 MOV   REG[0x6],0x4       (0252) 	mov	reg[06h], 04h		; Port_1_GlobalSelect register (PRT1GS)
0334: 71 10    OR    F,0x10             (0253) 	M8C_SetBank1
0336: 62 06 00 MOV   REG[0x6],0x0       (0254) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0339: 62 07 00 MOV   REG[0x7],0x0       (0255) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
033C: 70 EF    AND   F,0xEF             (0256) 	M8C_SetBank0
033E: 62 05 00 MOV   REG[0x5],0x0       (0257) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0341: 71 10    OR    F,0x10             (0258) 	M8C_SetBank1
0343: 62 08 F0 MOV   REG[0x8],0xF0      (0259) 	mov	reg[08h], f0h		; Port_2_DriveMode_0 register (PRT2DM0)
0346: 62 09 0F MOV   REG[0x9],0xF       (0260) 	mov	reg[09h], 0fh		; Port_2_DriveMode_1 register (PRT2DM1)
0349: 70 EF    AND   F,0xEF             (0261) 	M8C_SetBank0
034B: 62 0B 0F MOV   REG[0xB],0xF       (0262) 	mov	reg[0bh], 0fh		; Port_2_DriveMode_2 register (PRT2DM2)
034E: 62 0A 00 MOV   REG[0xA],0x0       (0263) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0351: 71 10    OR    F,0x10             (0264) 	M8C_SetBank1
0353: 62 0A 00 MOV   REG[0xA],0x0       (0265) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0356: 62 0B 00 MOV   REG[0xB],0x0       (0266) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0359: 70 EF    AND   F,0xEF             (0267) 	M8C_SetBank0
035B: 62 09 00 MOV   REG[0x9],0x0       (0268) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
035E: 71 10    OR    F,0x10             (0269) 	M8C_SetBank1
0360: 62 0C 00 MOV   REG[0xC],0x0       (0270) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0363: 62 0D 00 MOV   REG[0xD],0x0       (0271) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0366: 70 EF    AND   F,0xEF             (0272) 	M8C_SetBank0
0368: 62 0F 00 MOV   REG[0xF],0x0       (0273) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
036B: 62 0E 00 MOV   REG[0xE],0x0       (0274) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
036E: 71 10    OR    F,0x10             (0275) 	M8C_SetBank1
0370: 62 0E 00 MOV   REG[0xE],0x0       (0276) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0373: 62 0F 00 MOV   REG[0xF],0x0       (0277) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0376: 70 EF    AND   F,0xEF             (0278) 	M8C_SetBank0
0378: 62 0D 00 MOV   REG[0xD],0x0       (0279) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
037B: 71 10    OR    F,0x10             (0280) 	M8C_SetBank1
037D: 62 10 00 MOV   REG[0x10],0x0      (0281) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0380: 62 11 00 MOV   REG[0x11],0x0      (0282) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0383: 70 EF    AND   F,0xEF             (0283) 	M8C_SetBank0
0385: 62 13 00 MOV   REG[0x13],0x0      (0284) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0388: 62 12 00 MOV   REG[0x12],0x0      (0285) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
038B: 71 10    OR    F,0x10             (0286) 	M8C_SetBank1
038D: 62 12 00 MOV   REG[0x12],0x0      (0287) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0390: 62 13 00 MOV   REG[0x13],0x0      (0288) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0393: 70 EF    AND   F,0xEF             (0289) 	M8C_SetBank0
0395: 62 11 00 MOV   REG[0x11],0x0      (0290) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0398: 71 10    OR    F,0x10             (0291) 	M8C_SetBank1
039A: 62 14 00 MOV   REG[0x14],0x0      (0292) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
039D: 62 15 00 MOV   REG[0x15],0x0      (0293) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
03A0: 70 EF    AND   F,0xEF             (0294) 	M8C_SetBank0
03A2: 62 17 00 MOV   REG[0x17],0x0      (0295) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
03A5: 62 16 00 MOV   REG[0x16],0x0      (0296) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
03A8: 71 10    OR    F,0x10             (0297) 	M8C_SetBank1
03AA: 62 16 00 MOV   REG[0x16],0x0      (0298) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
03AD: 62 17 00 MOV   REG[0x17],0x0      (0299) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
03B0: 70 EF    AND   F,0xEF             (0300) 	M8C_SetBank0
03B2: 62 15 00 MOV   REG[0x15],0x0      (0301) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
03B5: 71 10    OR    F,0x10             (0302) 	M8C_SetBank1
03B7: 62 18 00 MOV   REG[0x18],0x0      (0303) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
03BA: 62 19 00 MOV   REG[0x19],0x0      (0304) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
03BD: 70 EF    AND   F,0xEF             (0305) 	M8C_SetBank0
03BF: 62 1B 00 MOV   REG[0x1B],0x0      (0306) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
03C2: 62 1A 00 MOV   REG[0x1A],0x0      (0307) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
03C5: 71 10    OR    F,0x10             (0308) 	M8C_SetBank1
03C7: 62 1A 00 MOV   REG[0x1A],0x0      (0309) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
03CA: 62 1B 00 MOV   REG[0x1B],0x0      (0310) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
03CD: 70 EF    AND   F,0xEF             (0311) 	M8C_SetBank0
03CF: 62 19 00 MOV   REG[0x19],0x0      (0312) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
03D2: 71 10    OR    F,0x10             (0313) 	M8C_SetBank1
03D4: 62 1C 00 MOV   REG[0x1C],0x0      (0314) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
03D7: 62 1D 00 MOV   REG[0x1D],0x0      (0315) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
03DA: 70 EF    AND   F,0xEF             (0316) 	M8C_SetBank0
03DC: 62 1F 00 MOV   REG[0x1F],0x0      (0317) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
03DF: 62 1E 00 MOV   REG[0x1E],0x0      (0318) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
03E2: 71 10    OR    F,0x10             (0319) 	M8C_SetBank1
03E4: 62 1E 00 MOV   REG[0x1E],0x0      (0320) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
03E7: 62 1F 00 MOV   REG[0x1F],0x0      (0321) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
03EA: 70 EF    AND   F,0xEF             (0322) 	M8C_SetBank0
03EC: 62 1D 00 MOV   REG[0x1D],0x0      (0323) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
03EF: 70 EF    AND   F,0xEF             (0324) 	M8C_SetBank0
03F1: 7F       RET                      (0325) 	ret
(0326) 
(0327) 
(0328) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_explorersound
                                        (0026) export _LoadConfig_explorersound
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) 
                                        (0030) 
                                        (0031) export NO_SHADOW
                                        (0032) export _NO_SHADOW
                                        (0033) 
                                        (0034) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0035) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0036) 
                                        (0037) AREA psoc_config(rom, rel)
                                        (0038) 
                                        (0039) ;---------------------------------------------------------------------------
                                        (0040) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0041) ;                  parameters handled by boot code, like CPU speed). This
                                        (0042) ;                  function can be called from user code, but typically it
                                        (0043) ;                  is only called from boot.
                                        (0044) ;
                                        (0045) ;       INPUTS: None.
                                        (0046) ;      RETURNS: Nothing.
                                        (0047) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0048) ;               In the large memory model currently only the page
                                        (0049) ;               pointer registers listed below are modified.  This does
                                        (0050) ;               not guarantee that in future implementations of this
                                        (0051) ;               function other page pointer registers will not be
                                        (0052) ;               modified.
                                        (0053) ;          
                                        (0054) ;               Page Pointer Registers Modified: 
                                        (0055) ;               CUR_PP
                                        (0056) ;
                                        (0057) _LoadConfigInit:
                                        (0058)  LoadConfigInit:
                                        (0059)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0060)     

03F4: 55 00 00 MOV   [0x0],0x0          (0061) 	mov		[Port_2_Data_SHADE], 0h
                                        (0062) 
03F7: 7C 03 FE LCALL 0x03FE             (0063) 	lcall	LoadConfig_explorersound
03FA: 7C 03 07 LCALL 0x0307             (0064) 	lcall	LoadConfigTBL_explorersound_Ordered
                                        (0065) 
                                        (0066) 
                                        (0067)     RAM_EPILOGUE RAM_USE_CLASS_4
03FD: 7F       RET                      (0068)     ret
                                        (0069) 
                                        (0070) ;---------------------------------------------------------------------------
                                        (0071) ; Load Configuration explorersound
                                        (0072) ;
                                        (0073) ;    Load configuration registers for explorersound.
                                        (0074) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0075) ;
                                        (0076) ;       INPUTS: None.
                                        (0077) ;      RETURNS: Nothing.
                                        (0078) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0079) ;               modified as may the Page Pointer registers!
                                        (0080) ;               In the large memory model currently only the page
                                        (0081) ;               pointer registers listed below are modified.  This does
                                        (0082) ;               not guarantee that in future implementations of this
                                        (0083) ;               function other page pointer registers will not be
                                        (0084) ;               modified.
                                        (0085) ;          
                                        (0086) ;               Page Pointer Registers Modified: 
                                        (0087) ;               CUR_PP
                                        (0088) ;
                                        (0089) _LoadConfig_explorersound:
                                        (0090)  LoadConfig_explorersound:
                                        (0091)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0092) 
03FE: 10       PUSH  X                  (0093) 	push	x
03FF: 70 EF    AND   F,0xEF             (0094)     M8C_SetBank0                    ; Force bank 0
0401: 50 00    MOV   A,0x0              (0095)     mov     a, 0                    ; Specify bank 0
0403: 67       ASR   A                  (0096)     asr     a                       ; Store in carry flag
                                        (0097)                                     ; Load bank 0 table:
0404: 50 01    MOV   A,0x1              (0098)     mov     A, >LoadConfigTBL_explorersound_Bank0
0406: 57 D7    MOV   X,0xD7             (0099)     mov     X, <LoadConfigTBL_explorersound_Bank0
0408: 7C 04 19 LCALL 0x0419             (0100)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0101) 
040B: 50 01    MOV   A,0x1              (0102)     mov     a, 1                    ; Specify bank 1
040D: 67       ASR   A                  (0103)     asr     a                       ; Store in carry flag
                                        (0104)                                     ; Load bank 1 table:
040E: 50 02    MOV   A,0x2              (0105)     mov     A, >LoadConfigTBL_explorersound_Bank1
0410: 57 AC    MOV   X,0xAC             (0106)     mov     X, <LoadConfigTBL_explorersound_Bank1
0412: 7C 04 19 LCALL 0x0419             (0107)     lcall   LoadConfig              ; Load the bank 1 values
                                        (0108) 
0415: 70 EF    AND   F,0xEF             (0109)     M8C_SetBank0                    ; Force return to bank 0
0417: 20       POP   X                  (0110) 	pop		x
                                        (0111) 
                                        (0112)     RAM_EPILOGUE RAM_USE_CLASS_4
0418: 7F       RET                      (0113)     ret
                                        (0114) 
                                        (0115) 
                                        (0116) 
                                        (0117) 
                                        (0118) ;---------------------------------------------------------------------------
                                        (0119) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0120) ;              pairs. Terminate on address=0xFF.
                                        (0121) ;
                                        (0122) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0123) ;           Flag Register Carry bit encodes the Register Bank
                                        (0124) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0125) ;
                                        (0126) ;  RETURNS: nothing.
                                        (0127) ;
                                        (0128) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0129) ;                X-3 Temporary store for register address
                                        (0130) ;                X-2 LSB of config table address
                                        (0131) ;                X-1 MSB of config table address
                                        (0132) ;
                                        (0133) LoadConfig:
                                        (0134)     RAM_PROLOGUE RAM_USE_CLASS_2
0419: 38 02    ADD   SP,0x2             (0135)     add     SP, 2                   ; Set up local vars
041B: 10       PUSH  X                  (0136)     push    X                       ; Save config table address on stack
041C: 08       PUSH  A                  (0137)     push    A
041D: 4F       MOV   X,SP               (0138)     mov     X, SP
041E: 56 FC 00 MOV   [X-4],0x0          (0139)     mov     [X-4], 0                ; Set default Destination to Bank 0
0421: D0 04    JNC   0x0426             (0140)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0423: 56 FC 01 MOV   [X-4],0x1          (0141)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0142) .BankSelectSaved:
0426: 18       POP   A                  (0143)     pop     A
0427: 20       POP   X                  (0144)     pop     X
                                        (0145) 
                                        (0146) LoadConfigLp:
0428: 70 EF    AND   F,0xEF             (0147)     M8C_SetBank0                    ; Switch to bank 0
042A: 62 E3 00 MOV   REG[0xE3],0x0      (0148)     M8C_ClearWDT                    ; Clear the watchdog for long inits
042D: 10       PUSH  X                  (0149)     push    X                       ; Preserve the config table address
042E: 08       PUSH  A                  (0150)     push    A
042F: 28       ROMX                     (0151)     romx                            ; Load register address from table
0430: 39 FF    CMP   A,0xFF             (0152)     cmp     A, END_CONFIG_TABLE     ; End of table?
0432: A0 1F    JZ    0x0452             (0153)     jz      EndLoadConfig           ;   Yes, go wrap it up
0434: 4F       MOV   X,SP               (0154)     mov     X, SP                   ;
0435: 48 FC 01 TST   [X-4],0x1          (0155)     tst     [X-4], 1                ; Loading IO Bank 1?
0438: A0 03    JZ    0x043C             (0156)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
043A: 71 10    OR    F,0x10             (0157)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0158) .IOBankNowSet:
043C: 54 FD    MOV   [X-3],A            (0159)     mov     [X-3], A                ; Stash the register address
043E: 18       POP   A                  (0160)     pop     A                       ; Retrieve the table address
043F: 20       POP   X                  (0161)     pop     X
0440: 75       INC   X                  (0162)     inc     X                       ; Advance to the data byte
0441: 09 00    ADC   A,0x0              (0163)     adc     A, 0
0443: 10       PUSH  X                  (0164)     push    X                       ; Save the config table address again
0444: 08       PUSH  A                  (0165)     push    A
0445: 28       ROMX                     (0166)     romx                            ; load config data from the table
0446: 4F       MOV   X,SP               (0167)     mov     X, SP                   ; retrieve the register address
0447: 59 FD    MOV   X,[X-3]            (0168)     mov     X, [X-3]
0449: 61 00    MOV   REG[X+0x0],A       (0169)     mov     reg[X], A               ; Configure the register
044B: 18       POP   A                  (0170)     pop     A                       ; retrieve the table address
044C: 20       POP   X                  (0171)     pop     X
044D: 75       INC   X                  (0172)     inc     X                       ; advance to next table entry
044E: 09 00    ADC   A,0x0              (0173)     adc     A, 0
0450: 8F D7    JMP   0x0428             (0174)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0175) EndLoadConfig:
0452: 38 FC    ADD   SP,0xFC            (0176)     add     SP, -4
0454: 70 3F    AND   F,0x3F             
0456: 71 C0    OR    F,0xC0             (0177)     RAM_EPILOGUE RAM_USE_CLASS_2
0458: 7F       RET                      (0178)     ret
(0179) 
(0180) AREA InterruptRAM(ram, rel)
(0181) 
(0182) NO_SHADOW:
(0183) _NO_SHADOW:
(0184) ; write only register shadows
(0185) _Port_2_Data_SHADE:
(0186) Port_2_Data_SHADE:	BLK	1
(0187) 
FILE: lib\tx8.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: TX8.asm
                                        (0004) ;;   Version: 3.3, Updated on 2009/10/23 at 10:13:12
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: TX8 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;-----------------------------------------------
                                        (0023) ; include instance specific register definitions
                                        (0024) ;-----------------------------------------------
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "TX8.inc"
                                        (0028) 
                                        (0029) area UserModules (ROM, REL)
                                        (0030) ;-----------------------------------------------
                                        (0031) ;  Global Symbols
                                        (0032) ;-----------------------------------------------
                                        (0033) export   TX8_SetTxIntMode
                                        (0034) export  _TX8_SetTxIntMode
                                        (0035) export   TX8_EnableInt
                                        (0036) export  _TX8_EnableInt
                                        (0037) export   TX8_DisableInt
                                        (0038) export  _TX8_DisableInt
                                        (0039) export   TX8_Start
                                        (0040) export  _TX8_Start
                                        (0041) export   TX8_Stop
                                        (0042) export  _TX8_Stop
                                        (0043) export   TX8_SendData
                                        (0044) export  _TX8_SendData
                                        (0045) export   TX8_bReadTxStatus
                                        (0046) export  _TX8_bReadTxStatus
                                        (0047) 
                                        (0048) // Old labels, will be removed in future release
                                        (0049) // Do Not Use.
                                        (0050) export   bTX8_ReadTxStatus
                                        (0051) export  _bTX8_ReadTxStatus
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  High Level TX functions
                                        (0055) ;-----------------------------------------------
                                        (0056) export  TX8_PutSHexByte
                                        (0057) export _TX8_PutSHexByte
                                        (0058) export  TX8_PutSHexInt
                                        (0059) export _TX8_PutSHexInt
                                        (0060) 
                                        (0061) export  TX8_CPutString
                                        (0062) export _TX8_CPutString
                                        (0063) export  TX8_PutString
                                        (0064) export _TX8_PutString
                                        (0065) export  TX8_PutChar
                                        (0066) export _TX8_PutChar
                                        (0067) export  TX8_Write
                                        (0068) export _TX8_Write
                                        (0069) export  TX8_CWrite
                                        (0070) export _TX8_CWrite
                                        (0071) export  TX8_PutCRLF
                                        (0072) export _TX8_PutCRLF 
                                        (0073) 
                                        (0074) ;-----------------------------------------------
                                        (0075) ;  EQUATES
                                        (0076) ;-----------------------------------------------
                                        (0077) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                        (0078) bfFUNCTION_REG_TX_INT_MODE_BIT:	equ 0x10	; the TX Int Mode bit
                                        (0079) 
                                        (0080) AREA UserModules (ROM, REL)
                                        (0081) 
                                        (0082) .SECTION
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;  FUNCTION NAME: TX8_EnableInt
                                        (0085) ;
                                        (0086) ;  DESCRIPTION:
                                        (0087) ;     Enables this Transmitter's interrupt by setting the interrupt enable mask
                                        (0088) ;     bit associated with this User Module. Remember to call the global interrupt
                                        (0089) ;     enable function by using the macro: M8C_EnableGInt.
                                        (0090) ;
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;
                                        (0093) ;  ARGUMENTS: none
                                        (0094) ;
                                        (0095) ;  RETURNS: none
                                        (0096) ;
                                        (0097) ;  SIDE EFFECTS:
                                        (0098) ;    The A and X registers may be modified by this or future implementations
                                        (0099) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0100) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0101) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0102) ;    functions.
                                        (0103) ;
                                        (0104)  TX8_EnableInt:
                                        (0105) _TX8_EnableInt:
                                        (0106)    RAM_PROLOGUE RAM_USE_CLASS_1
0459: 43 E1 80 OR    REG[0xE1],0x80     (0107)    M8C_EnableIntMask  TX8_INT_REG, TX8_bINT_MASK
                                        (0108)    RAM_EPILOGUE RAM_USE_CLASS_1
045C: 7F       RET                      (0109)    ret
                                        (0110) .ENDSECTION
                                        (0111) 
                                        (0112) .SECTION
                                        (0113) ;-----------------------------------------------------------------------------
                                        (0114) ;  FUNCTION NAME: TX8_DisableInt
                                        (0115) ;
                                        (0116) ;  DESCRIPTION:
                                        (0117) ;     Disables this TX8's interrupt by clearing the interrupt enable mask bit
                                        (0118) ;     associated with this User Module.
                                        (0119) ;
                                        (0120) ;-----------------------------------------------------------------------------
                                        (0121) ;
                                        (0122) ;  ARGUMENTS:  none
                                        (0123) ;
                                        (0124) ;  RETURNS:  none
                                        (0125) ;
                                        (0126) ;  SIDE EFFECTS:
                                        (0127) ;    The A and X registers may be modified by this or future implementations
                                        (0128) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0129) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0130) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0131) ;    functions.
                                        (0132) ;
                                        (0133)  TX8_DisableInt:
                                        (0134) _TX8_DisableInt:
                                        (0135)    RAM_PROLOGUE RAM_USE_CLASS_1
045D: 41 E1 7F AND   REG[0xE1],0x7F     (0136)    M8C_DisableIntMask TX8_INT_REG, TX8_bINT_MASK
                                        (0137)    RAM_EPILOGUE RAM_USE_CLASS_1
0460: 7F       RET                      (0138)    ret
                                        (0139) .ENDSECTION
                                        (0140) 
                                        (0141) .SECTION
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;  FUNCTION NAME: TX8_SetTxIntMode(BYTE bTxIntMode)
                                        (0144) ;
                                        (0145) ;  DESCRIPTION:
                                        (0146) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0147) ;
                                        (0148) ;  ARGUMENTS:
                                        (0149) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0150) ;        Passed in the A register
                                        (0151) ;
                                        (0152) ;  RETURNS:
                                        (0153) ;     none.
                                        (0154) ;
                                        (0155) ;  SIDE EFFECTS:
                                        (0156) ;    The A and X registers may be modified by this or future implementations
                                        (0157) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0158) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0159) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0160) ;    functions.
                                        (0161) ;
                                        (0162) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0163) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0164) ;     on TX register empty or TX transmit complete
                                        (0165) ;
                                        (0166)  TX8_SetTxIntMode:
                                        (0167) _TX8_SetTxIntMode:
                                        (0168)    RAM_PROLOGUE RAM_USE_CLASS_1
0461: 71 10    OR    F,0x10             (0169)    M8C_SetBank1
0463: 21 01    AND   A,0x1              (0170)    and   A, TX8_INT_MODE_TX_COMPLETE
0465: A0 07    JZ    0x046D             (0171)    jz    .SetModeRegEmpty
0467: 43 3C 10 OR    REG[0x3C],0x10     (0172)    or    REG[TX8_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
046A: 70 EF    AND   F,0xEF             (0173)    M8C_SetBank0
                                        (0174)    RAM_EPILOGUE RAM_USE_CLASS_1
046C: 7F       RET                      (0175)    ret
                                        (0176) 
                                        (0177) .SetModeRegEmpty:
046D: 41 3C EF AND   REG[0x3C],0xEF     (0178)    and   REG[TX8_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
0470: 70 EF    AND   F,0xEF             (0179)    M8C_SetBank0
                                        (0180)    RAM_EPILOGUE RAM_USE_CLASS_1
0472: 7F       RET                      (0181)    ret
                                        (0182) .ENDSECTION
                                        (0183) 
                                        (0184) .SECTION
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;  FUNCTION NAME: TX8_Start(BYTE bParity)
                                        (0187) ;
                                        (0188) ;  DESCRIPTION:
                                        (0189) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0190) ;     The transmitter will begin transmitting if a byte has been written into the
                                        (0191) ;     transmit buffer.
                                        (0192) ;
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;    BYTE bParity - parity of transmitted data.  Use defined masks.
                                        (0197) ;
                                        (0198) ;  RETURNS:  none
                                        (0199) ;
                                        (0200) ;  SIDE EFFECTS:
                                        (0201) ;    The A and X registers may be modified by this or future implementations
                                        (0202) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0203) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0204) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0205) ;    functions.
                                        (0206) ;
                                        (0207)  TX8_Start:
                                        (0208) _TX8_Start:
                                        (0209)    RAM_PROLOGUE RAM_USE_CLASS_1
0473: 29 01    OR    A,0x1              (0210)    or    A, bfCONTROL_REG_START_BIT
0475: 60 3F    MOV   REG[0x3F],A        (0211)    mov   REG[TX8_CONTROL_REG], A
                                        (0212)    RAM_EPILOGUE RAM_USE_CLASS_1
0477: 7F       RET                      (0213)    ret
                                        (0214) .ENDSECTION
                                        (0215) 
                                        (0216) .SECTION
                                        (0217) ;-----------------------------------------------------------------------------
                                        (0218) ;  FUNCTION NAME: TX8_Stop
                                        (0219) ;
                                        (0220) ;  DESCRIPTION:
                                        (0221) ;     Disables TX8 operation.
                                        (0222) ;
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:  none
                                        (0226) ;
                                        (0227) ;  RETURNS:  none
                                        (0228) ;
                                        (0229) ;  SIDE EFFECTS:
                                        (0230) ;    The A and X registers may be modified by this or future implementations
                                        (0231) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0232) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0233) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0234) ;    functions.
                                        (0235) ;
                                        (0236)  TX8_Stop:
                                        (0237) _TX8_Stop:
                                        (0238)    RAM_PROLOGUE RAM_USE_CLASS_1
0478: 41 3F FE AND   REG[0x3F],0xFE     (0239)    and   REG[TX8_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
047B: 7F       RET                      (0241)    ret
                                        (0242) .ENDSECTION
                                        (0243) 
                                        (0244) .SECTION
                                        (0245) ;-----------------------------------------------------------------------------
                                        (0246) ;  FUNCTION NAME: TX8_SendData
                                        (0247) ;
                                        (0248) ;  DESCRIPTION:
                                        (0249) ;     Sends one byte through serial port.
                                        (0250) ;
                                        (0251) ;-----------------------------------------------------------------------------
                                        (0252) ;
                                        (0253) ;  ARGUMENTS:
                                        (0254) ;     BYTE  TxData - data to transmit.
                                        (0255) ;
                                        (0256) ;  RETURNS:
                                        (0257) ;
                                        (0258) ;  SIDE EFFECTS:
                                        (0259) ;    The A and X registers may be modified by this or future implementations
                                        (0260) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0261) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0262) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0263) ;    functions.
                                        (0264) ;
                                        (0265)  TX8_SendData:
                                        (0266) _TX8_SendData:
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
047C: 60 3D    MOV   REG[0x3D],A        (0268)    mov REG[TX8_TX_BUFFER_REG], A
                                        (0269)    RAM_EPILOGUE RAM_USE_CLASS_1
047E: 7F       RET                      (0270)    ret
                                        (0271) .ENDSECTION
                                        (0272) 
                                        (0273) .SECTION
                                        (0274) ;-----------------------------------------------------------------------------
                                        (0275) ;  FUNCTION NAME: TX8_bReadTxStatus
                                        (0276) ;
                                        (0277) ;  DESCRIPTION:
                                        (0278) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0279) ;
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS:
                                        (0283) ;
                                        (0284) ;  RETURNS:
                                        (0285) ;     BYTE  bTxStatus - transmit status data.  Use the following defined bits
                                        (0286) ;                       masks: TX_COMPLETE and TX_BUFFER_EMPTY
                                        (0287) ;
                                        (0288) ;  SIDE EFFECTS:
                                        (0289) ;    The A and X registers may be modified by this or future implementations
                                        (0290) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0291) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0292) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0293) ;    functions.
                                        (0294) ;
                                        (0295)  TX8_bReadTxStatus:
                                        (0296) _TX8_bReadTxStatus:
                                        (0297)  bTX8_ReadTxStatus:
                                        (0298) _bTX8_ReadTxStatus:
                                        (0299)    RAM_PROLOGUE RAM_USE_CLASS_1
047F: 5D 3F    MOV   A,REG[0x3F]        (0300)    mov A,  REG[TX8_CONTROL_REG]
                                        (0301)    RAM_EPILOGUE RAM_USE_CLASS_1
0481: 7F       RET                      (0302)    ret
                                        (0303) 
                                        (0304) .ENDSECTION
                                        (0305) 
                                        (0306) ;-----------------------------------------------------------------------------
                                        (0307) ;  FUNCTION NAME: TX8_PutSHexByte
                                        (0308) ;
                                        (0309) ;  DESCRIPTION:
                                        (0310) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0311) ;
                                        (0312) ;  ARGUMENTS:
                                        (0313) ;     A  => (BYTE) Data/char to be printed
                                        (0314) ;
                                        (0315) ;  RETURNS:
                                        (0316) ;     none.
                                        (0317) ;
                                        (0318) ;  SIDE EFFECTS:
                                        (0319) ;    The A and X registers may be modified by this or future implementations
                                        (0320) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0321) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0322) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0323) ;    functions.
                                        (0324) ;
                                        (0325) .LITERAL
                                        (0326) TX8_HEX_STR:
                                        (0327)      DS    "0123456789ABCDEF"
                                        (0328) .ENDLITERAL
                                        (0329) 
                                        (0330) .SECTION
                                        (0331)  TX8_PutSHexByte:
                                        (0332) _TX8_PutSHexByte:
                                        (0333)     RAM_PROLOGUE RAM_USE_CLASS_1
0482: 30       HALT                     
0483: 31 32    XOR   A,0x32             
0485: 33 34    XOR   A,[X+52]           
0487: 35 36    XOR   [X+54],A           
0489: 37 38 39 XOR   [X+56],0x39        
048C: 41 42 43 AND   REG[0x42],0x43     
048F: 44 45 46 OR    REG[X+0x45],0x46   
0492: 08       PUSH  A                  (0334)     push  A                            ; Save lower nibble
0493: 67       ASR   A                  (0335)     asr   A                            ; Shift high nibble to right
0494: 67       ASR   A                  (0336)     asr   A
0495: 67       ASR   A                  (0337)     asr   A
0496: 67       ASR   A                  (0338)     asr   A
0497: 21 0F    AND   A,0xF              (0339)     and   A,0Fh                        ; Mask off nibble
0499: FF E7    INDEX 0x0482             (0340)     index TX8_HEX_STR                  ; Get Hex value
049B: 90 0F    CALL  0x04AC             (0341)     call  TX8_PutChar                  ; Write data to screen
049D: 18       POP   A                  (0342)     pop   A                            ; Restore value
049E: 21 0F    AND   A,0xF              (0343)     and   A,0Fh                        ; Mask off lower nibble
04A0: FF E0    INDEX 0x0482             (0344)     index TX8_HEX_STR                  ; Get Hex value
04A2: 90 08    CALL  0x04AC             (0345)     call  TX8_PutChar                  ; Write data to screen
                                        (0346)     RAM_EPILOGUE RAM_USE_CLASS_1
04A4: 7F       RET                      (0347)     ret
                                        (0348) .ENDSECTION
                                        (0349) 
                                        (0350) .SECTION
                                        (0351) ;-----------------------------------------------------------------------------
                                        (0352) ;  FUNCTION NAME: TX8_PutSHexInt
                                        (0353) ;
                                        (0354) ;  DESCRIPTION:
                                        (0355) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0356) ;
                                        (0357) ;  ARGUMENTS:
                                        (0358) ;     Pointer to string
                                        (0359) ;     A  => ASB of Int
                                        (0360) ;     X  => MSB of Int
                                        (0361) ;
                                        (0362) ;  RETURNS:
                                        (0363) ;     none.
                                        (0364) ;
                                        (0365) ;  SIDE EFFECTS:
                                        (0366) ;    The A and X registers may be modified by this or future implementations
                                        (0367) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0368) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0369) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0370) ;    functions.
                                        (0371) ;
                                        (0372)  TX8_PutSHexInt:
                                        (0373) _TX8_PutSHexInt:
                                        (0374)     RAM_PROLOGUE RAM_USE_CLASS_1
04A5: 4B       SWAP  A,X                (0375)     swap  A,X
04A6: 9F EA    CALL  0x0492             (0376)     call  TX8_PutSHexByte              ; Print MSB
04A8: 5B       MOV   A,X                (0377)     mov   A,X                          ; Move LSB into position
04A9: 9F E7    CALL  0x0492             (0378)     call  TX8_PutSHexByte              ; Print LSB
                                        (0379)     RAM_EPILOGUE RAM_USE_CLASS_1
04AB: 7F       RET                      (0380)     ret
                                        (0381) .ENDSECTION
                                        (0382) 
                                        (0383) .SECTION
                                        (0384) ;-----------------------------------------------------------------------------
                                        (0385) ;  FUNCTION NAME: TX8_PutChar
                                        (0386) ;
                                        (0387) ;  DESCRIPTION:
                                        (0388) ;     Send character out through UART TX port.
                                        (0389) ;
                                        (0390) ;
                                        (0391) ;  ARGUMENTS:
                                        (0392) ;     A has Character to send to UART Tx Port
                                        (0393) ;
                                        (0394) ;  RETURNS:
                                        (0395) ;     none
                                        (0396) ;
                                        (0397) ;  SIDE EFFECTS:
                                        (0398) ;    The A and X registers may be modified by this or future implementations
                                        (0399) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0400) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0401) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0402) ;    functions.
                                        (0403) ;
                                        (0404)    macro InLinePutChar( Source )
                                        (0405) .BufEmptyWaitLoop:
                                        (0406)    tst REG[TX8_CONTROL_REG], TX8_TX_BUFFER_EMPTY    ; Check Tx Status
                                        (0407)    jz  .BufEmptyWaitLoop
                                        (0408)    mov REG[TX8_TX_BUFFER_REG], @Source    ; Write data to Tx Port
                                        (0409)    endm
                                        (0410) 
                                        (0411) 
                                        (0412)  TX8_PutChar:
                                        (0413) _TX8_PutChar:
                                        (0414)    RAM_PROLOGUE RAM_USE_CLASS_1
04AC: 49 3F 10 TST   REG[0x3F],0x10     
04AF: AF FC    JZ    0x04AC             
04B1: 60 3D    MOV   REG[0x3D],A        (0415)    InLinePutChar A
                                        (0416)    RAM_EPILOGUE RAM_USE_CLASS_1
04B3: 7F       RET                      (0417)    ret
                                        (0418) 
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) 
                                        (0422) ;-----------------------------------------------
                                        (0423) ;  High Level TX functions
                                        (0424) ;-----------------------------------------------
                                        (0425) 
                                        (0426) 
                                        (0427) .SECTION
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;  FUNCTION NAME: TX8_PutString
                                        (0430) ;
                                        (0431) ;  DESCRIPTION:
                                        (0432) ;     Send String out through UART TX port.
                                        (0433) ;
                                        (0434) ;
                                        (0435) ;  ARGUMENTS:
                                        (0436) ;     Pointer to String
                                        (0437) ;     A has MSB of string address
                                        (0438) ;     X has LSB of string address
                                        (0439) ;
                                        (0440) ;  RETURNS:
                                        (0441) ;     none
                                        (0442) ;
                                        (0443) ;  SIDE EFFECTS:
                                        (0444) ;    The A and X registers may be modified by this or future implementations
                                        (0445) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0446) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0447) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0448) ;    functions.
                                        (0449) ;          
                                        (0450) ;    Currently only the page pointer registers listed below are modified: 
                                        (0451) ;          IDX_PP
                                        (0452) ;
                                        (0453)  TX8_PutString:
                                        (0454) _TX8_PutString:
04B4: 70 BF    AND   F,0xBF             (0455)    RAM_PROLOGUE RAM_USE_CLASS_3
04B6: 60 D3    MOV   REG[0xD3],A        (0456)    RAM_SETPAGE_IDX A
                                        (0457) .PutStringLoop:
04B8: 52 00    MOV   A,[X+0]            (0458)    mov   A,[X]                             ; Get value pointed to by X
04BA: A0 06    JZ    0x04C1             (0459)    jz    End_PutString                     ; Check for end of string
04BC: 9F EE    CALL  0x04AC             (0460)    call  TX8_PutChar                        ; Send character to Tx port
04BE: 75       INC   X                  (0461)    inc   X                                 ; Advance pointer to next character
04BF: 8F F8    JMP   0x04B8             (0462)    jmp   .PutStringLoop                     ; Get next character
                                        (0463) 
                                        (0464) End_PutString:
04C1: 70 3F    AND   F,0x3F             
04C3: 71 C0    OR    F,0xC0             (0465)    RAM_EPILOGUE RAM_USE_CLASS_3
04C5: 7F       RET                      (0466)    ret
                                        (0467) .ENDSECTION
                                        (0468) 
                                        (0469) .SECTION
                                        (0470) ;-----------------------------------------------------------------------------
                                        (0471) ;  FUNCTION NAME: TX8_Write
                                        (0472) ;
                                        (0473) ;  DESCRIPTION:
                                        (0474) ;     Send String of length X to serial port
                                        (0475) ;
                                        (0476) ;
                                        (0477) ;  ARGUMENTS:
                                        (0478) ;     Pointer to String
                                        (0479) ;     [SP-5] Count of characters to send
                                        (0480) ;     [SP-4] has MSB of string address
                                        (0481) ;     [SP-3] has LSB of string address
                                        (0482) ;
                                        (0483) ;  RETURNS:
                                        (0484) ;     none
                                        (0485) ;
                                        (0486) ;  SIDE EFFECTS:
                                        (0487) ;    The A and X registers may be modified by this or future implementations
                                        (0488) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0489) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0490) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0491) ;    functions.
                                        (0492) ;          
                                        (0493) ;    Currently only the page pointer registers listed below are modified: 
                                        (0494) ;          IDX_PP
                                        (0495) ;
                                        (0496) CNT_LEN:    equ -5           ; Length of data to send
                                        (0497) STR_MSB:    equ -4           ; MSB pointer of string
                                        (0498) STR_LSB:    equ -3           ; LSB pointer of string
                                        (0499) 
                                        (0500)  TX8_Write:
                                        (0501) _TX8_Write:
04C6: 70 BF    AND   F,0xBF             (0502)    RAM_PROLOGUE RAM_USE_CLASS_3
04C8: 62 D3 07 MOV   REG[0xD3],0x7      (0503)    RAM_SETPAGE_IDX2STK
04CB: 4F       MOV   X,SP               (0504)    mov   X, SP
                                        (0505) 
                                        (0506) .NextByteLoop:
04CC: 52 FB    MOV   A,[X-5]            (0507)    mov   A,[X+CNT_LEN]                     ; Get length of string to send
04CE: A0 1A    JZ    0x04E9             (0508)    jz    .End_Write
04D0: 7B FB    DEC   [X-5]              (0509)    dec   [X+CNT_LEN]                       ; Decrement counter
                                        (0510) 
                                        (0511)    IF SYSTEM_LARGE_MEMORY_MODEL
04D2: 52 FC    MOV   A,[X-4]            (0512)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0513)    ENDIF
                                        (0514) 
04D4: 59 FD    MOV   X,[X-3]            (0515)    mov   X,[X+STR_LSB]                     ; Get character to send
04D6: 60 D3    MOV   REG[0xD3],A        (0516)    RAM_SETPAGE_IDX A                        ; switch index pages
04D8: 52 00    MOV   A,[X+0]            (0517)    mov   A,[X]
04DA: 49 3F 10 TST   REG[0x3F],0x10     
04DD: AF FC    JZ    0x04DA             
04DF: 60 3D    MOV   REG[0x3D],A        (0518)    InLinePutChar A                          ; Send character to UART
04E1: 4F       MOV   X,SP               (0519)    mov   X, SP
04E2: 62 D3 07 MOV   REG[0xD3],0x7      (0520)    RAM_SETPAGE_IDX2STK
04E5: 77 FD    INC   [X-3]              (0521)    inc   [X+STR_LSB]
04E7: 8F E4    JMP   0x04CC             (0522)    jmp   .NextByteLoop
                                        (0523) 
                                        (0524) .End_Write:
04E9: 70 3F    AND   F,0x3F             
04EB: 71 C0    OR    F,0xC0             (0525)    RAM_EPILOGUE RAM_USE_CLASS_3
04ED: 7F       RET                      (0526)    ret
                                        (0527) .ENDSECTION
                                        (0528) 
                                        (0529) .SECTION
                                        (0530) ;-----------------------------------------------------------------------------
                                        (0531) ;  FUNCTION NAME: TX8_CWrite
                                        (0532) ;
                                        (0533) ;             WARNING WARNING NOT COMPLETE
                                        (0534) ;
                                        (0535) ;  DESCRIPTION:
                                        (0536) ;     Send String of length X to serial port
                                        (0537) ;
                                        (0538) ;  ARGUMENTS:
                                        (0539) ;     Pointer to String
                                        (0540) ;     [SP-6] MSB of Count of character to send
                                        (0541) ;     [SP-5] LSB of Count of character to send
                                        (0542) ;     [SP-4] has MSB of string address
                                        (0543) ;     [SP-3] has LSB of string address
                                        (0544) ;
                                        (0545) ;  RETURNS:
                                        (0546) ;     none
                                        (0547) ;
                                        (0548) ;  SIDE EFFECTS:
                                        (0549) ;    The A and X registers may be modified by this or future implementations
                                        (0550) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0551) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0552) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0553) ;    functions.
                                        (0554) ;
                                        (0555) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0556) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0557) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0558) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0559) 
                                        (0560)  TX8_CWrite:
                                        (0561) _TX8_CWrite:
                                        (0562)    RAM_PROLOGUE RAM_USE_CLASS_2
04EE: 4F       MOV   X,SP               (0563)    mov   X,SP
                                        (0564) 
                                        (0565) .CW_Loop:
                                        (0566)                                              ; Check for zero counter
04EF: 3D FA 00 CMP   [X-6],0x0          (0567)    cmp   [X+CLEN_MSB],0x00
04F2: B0 06    JNZ   0x04F9             (0568)    jnz   .CW_WRITEIT
04F4: 3D FB 00 CMP   [X-5],0x0          (0569)    cmp   [X+CLEN_LSB],0x00
04F7: A0 1D    JZ    0x0515             (0570)    jz    .End_CWrite                         ; Leave if done
                                        (0571) 
                                        (0572) .CW_WRITEIT:                                 ; Save pointers
04F9: 10       PUSH  X                  (0573)    push  X
04FA: 52 FC    MOV   A,[X-4]            (0574)    mov   A,[X+CSTR_MSB]
04FC: 59 FD    MOV   X,[X-3]            (0575)    mov   X,[X+CSTR_LSB]
04FE: 28       ROMX                     (0576)    romx                                     ; Get character from ROM
04FF: 49 3F 10 TST   REG[0x3F],0x10     
0502: AF FC    JZ    0x04FF             
0504: 60 3D    MOV   REG[0x3D],A        (0577)    InLinePutChar A
0506: 20       POP   X                  (0578)    pop   X
                                        (0579) 
0507: 07 FD 01 ADD   [X-3],0x1          (0580)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
050A: 0F FC 00 ADC   [X-4],0x0          (0581)    adc   [X+CSTR_MSB],0
                                        (0582) 
                                        (0583)                                             ; Dec the counter
050D: 17 FB 01 SUB   [X-5],0x1          (0584)    sub   [X+CLEN_LSB],0x01
0510: 1F FA 00 SBB   [X-6],0x0          (0585)    sbb   [X+CLEN_MSB],0x00
                                        (0586) 
0513: 8F DB    JMP   0x04EF             (0587)    jmp   .CW_Loop
                                        (0588) 
                                        (0589) .End_CWrite:
                                        (0590)    RAM_EPILOGUE RAM_USE_CLASS_1
0515: 7F       RET                      (0591)    ret
                                        (0592) .ENDSECTION
                                        (0593) 
                                        (0594) .SECTION
                                        (0595) ;-----------------------------------------------------------------------------
                                        (0596) ;  FUNCTION NAME: TX8_CPutString
                                        (0597) ;
                                        (0598) ;  DESCRIPTION:
                                        (0599) ;     Send String out through UART TX port.
                                        (0600) ;
                                        (0601) ;
                                        (0602) ;  ARGUMENTS:
                                        (0603) ;     Pointer to String
                                        (0604) ;     A has MSB of string address
                                        (0605) ;     X has LSB of string address
                                        (0606) ;
                                        (0607) ;  RETURNS:
                                        (0608) ;     none
                                        (0609) ;
                                        (0610) ;  SIDE EFFECTS:
                                        (0611) ;    The A and X registers may be modified by this or future implementations
                                        (0612) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0613) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0614) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0615) ;    functions.
                                        (0616) ;
                                        (0617)  TX8_CPutString:
                                        (0618) _TX8_CPutString:
                                        (0619)    RAM_PROLOGUE RAM_USE_CLASS_1   
0516: 08       PUSH  A                  (0620)    push  A                                       ; Store ROM pointer
0517: 10       PUSH  X                  (0621)    push  X
0518: 28       ROMX                     (0622)    romx                                          ; Get character from ROM
0519: A0 0B    JZ    0x0525             (0623)    jz    .End_CPutString
051B: 9F 8F    CALL  0x04AC             (0624)    call  TX8_PutChar                        ; Print character
051D: 20       POP   X                  (0625)    pop   X
051E: 18       POP   A                  (0626)    pop   A
051F: 75       INC   X                  (0627)    inc   X                                       ; Inc LSB of pointer
0520: DF F5    JNC   0x0516             (0628)    jnc   TX8_CPutString                          ; Check for carry
0522: 74       INC   A                  (0629)    inc   A                                       ; Inc MSB of pointer
0523: 8F F2    JMP   0x0516             (0630)    jmp   TX8_CPutString
                                        (0631) 
                                        (0632) 
                                        (0633) .End_CPutString:
0525: 38 FE    ADD   SP,0xFE            (0634)    add   SP, -2
                                        (0635)    RAM_EPILOGUE RAM_USE_CLASS_1
0527: 7F       RET                      (0636)    ret
                                        (0637) .ENDSECTION
                                        (0638) 
                                        (0639) .SECTION
                                        (0640) ;-----------------------------------------------------------------------------
                                        (0641) ;  FUNCTION NAME: TX8_PutCRLF
                                        (0642) ;
                                        (0643) ;  DESCRIPTION:
                                        (0644) ;     Send a CR and LF
                                        (0645) ;
                                        (0646) ;  ARGUMENTS:
                                        (0647) ;     none.
                                        (0648) ;
                                        (0649) ;  RETURNS:
                                        (0650) ;     none.
                                        (0651) ;
                                        (0652) ;  SIDE EFFECTS:
                                        (0653) ;    The A and X registers may be modified by this or future implementations
                                        (0654) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0655) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0656) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0657) ;    functions.
                                        (0658) ;
                                        (0659)  TX8_PutCRLF:
                                        (0660) _TX8_PutCRLF:
                                        (0661)    RAM_PROLOGUE RAM_USE_CLASS_1
0528: 50 0D    MOV   A,0xD              (0662)    mov  A,0x0D                        ; Send CR
052A: 9F 80    CALL  0x04AC             (0663)    call TX8_PutChar
052C: 50 0A    MOV   A,0xA              (0664)    mov  A,0x0A                        ; Send LF
052E: 9F 7C    CALL  0x04AC             (0665)    call TX8_PutChar
                                        (0666)    RAM_EPILOGUE RAM_USE_CLASS_1
0530: 7F       RET                      (0667)    ret
(0668) .ENDSECTION
(0669) 
(0670) ; End of File TX8.asm
FILE: lib\scblock_inbuff.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   SCBLOCK_inbuff.asm
                                        (0004) ;;  Version: 2.4, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: SCBLOCK User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) 
                                        (0015) ;; -----------------------------------------------------------------
                                        (0016) ;;                         Register Definitions
                                        (0017) ;; -----------------------------------------------------------------
                                        (0018) ;; BIT FIELD            Mask
                                        (0019) ;; -----------------    -----
                                        (0020) ;; CR0.FCap              80
                                        (0021) ;; CR0.ClockPhase        40
                                        (0022) ;; CR0.ASign             20
                                        (0023) ;; CR0.ACap              1F
                                        (0024) ;;
                                        (0025) ;; CR1.AMux              C0   SCB
                                        (0026) ;; CR1.ACMux             C0   SCA
                                        (0027) ;; CR1.BCap              1F
                                        (0028) ;;
                                        (0029) ;; CR2.AnalogBus         80
                                        (0030) ;; CR2.CmpBus            40
                                        (0031) ;; CR2.AutoZero          20
                                        (0032) ;; CR2.CCap              1F
                                        (0033) ;;
                                        (0034) ;; CR3.RefSelect         C0
                                        (0035) ;; CR3.FSW1              20
                                        (0036) ;; CR3.FSW0              10
                                        (0037) ;; CR3.BSW               08   SCB
                                        (0038) ;; CR3.BMux              04   SCB
                                        (0039) ;; CR3.BMux              0C   SCA
                                        (0040) ;; CR3.Power             03
                                        (0041) ;;
                                        (0042) 
                                        (0043) include "SCBLOCK_inbuff.inc"
                                        (0044) include "m8c.inc"
                                        (0045) include "memory.inc"
                                        (0046) 
                                        (0047) ;-----------------------------------------------
                                        (0048) ;  Global Symbols
                                        (0049) ;-----------------------------------------------
                                        (0050) export  SCBLOCK_inbuff_Start
                                        (0051) export _SCBLOCK_inbuff_Start
                                        (0052) export  SCBLOCK_inbuff_SetPower
                                        (0053) export _SCBLOCK_inbuff_SetPower
                                        (0054) export  SCBLOCK_inbuff_Stop
                                        (0055) export _SCBLOCK_inbuff_Stop
                                        (0056) 
                                        (0057) AREA UserModules (ROM, REL)
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: SCBLOCK_inbuff_Start
                                        (0062) ;  FUNCTION NAME: SCBLOCK_inbuff_SetPower
                                        (0063) ;
                                        (0064) ;  DESCRIPTION:
                                        (0065) ;    Applies power setting to the module's analog PSoc block.
                                        (0066) ;
                                        (0067) ;-----------------------------------------------------------------------------
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:
                                        (0070) ;    A  contains the power setting 0-3
                                        (0071) ;
                                        (0072) ;  RETURNS:  NA
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  SCBLOCK_inbuff_Start:
                                        (0082) _SCBLOCK_inbuff_Start:
                                        (0083)  SCBLOCK_inbuff_SetPower:
                                        (0084) _SCBLOCK_inbuff_SetPower:
                                        (0085)    RAM_PROLOGUE RAM_USE_CLASS_2
0531: 21 03    AND   A,0x3              (0086)    and  A,03h
0533: 10       PUSH  X                  (0087)    push X
0534: 4F       MOV   X,SP               (0088)    mov  X,SP
                                        (0089) 
0535: 08       PUSH  A                  (0090)    push A
0536: 5D 9F    MOV   A,REG[0x9F]        (0091)    mov  A,reg[SCBLOCK_inbuff_cr3]
0538: 21 FC    AND   A,0xFC             (0092)    and  A,~03h
053A: 2B 00    OR    A,[X+0]            (0093)    or   A,[X]
053C: 60 9F    MOV   REG[0x9F],A        (0094)    mov  reg[SCBLOCK_inbuff_cr3],A
053E: 18       POP   A                  (0095)    pop  A
053F: 20       POP   X                  (0096)    pop  X
0540: 70 3F    AND   F,0x3F             
0542: 71 C0    OR    F,0xC0             (0097)    RAM_EPILOGUE RAM_USE_CLASS_2
0544: 7F       RET                      (0098)    ret
                                        (0099) .ENDSECTION
                                        (0100) 
                                        (0101) .SECTION
                                        (0102) ;-----------------------------------------------------------------------------
                                        (0103) ;  FUNCTION NAME: SCBLOCK_inbuff_Stop
                                        (0104) ;
                                        (0105) ;  DESCRIPTION:
                                        (0106) ;    Removes power from the module's analog PSoC block
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS: None
                                        (0110) ;
                                        (0111) ;  RETURNS:  NA
                                        (0112) ;
                                        (0113) ;  SIDE EFFECTS:
                                        (0114) ;    The A and X registers may be modified by this or future implementations
                                        (0115) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0116) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0117) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0118) ;    functions.
                                        (0119) ;
                                        (0120)  SCBLOCK_inbuff_Stop:
                                        (0121) _SCBLOCK_inbuff_Stop:
                                        (0122)    RAM_PROLOGUE RAM_USE_CLASS_1
0545: 41 9F FC AND   REG[0x9F],0xFC     (0123)    and  reg[SCBLOCK_inbuff_cr3],~03h
                                        (0124)    RAM_EPILOGUE RAM_USE_CLASS_1
0548: 7F       RET                      (0125)    ret
(0126) .ENDSECTION
(0127) 
(0128) ; End of File SCBLOCK_inbuff.asm
FILE: lib\refmux_1.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   RefMux_1.asm
                                        (0004) ;;  Version: 1.3, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: RefMux User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "RefMux_1.inc"
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  RefMux_1_Start
                                        (0030) export _RefMux_1_Start
                                        (0031) 
                                        (0032) export  RefMux_1_SetPower
                                        (0033) export _RefMux_1_SetPower
                                        (0034) 
                                        (0035) export  RefMux_1_Stop
                                        (0036) export _RefMux_1_Stop
                                        (0037) 
                                        (0038) export  RefMux_1_RefSelect
                                        (0039) export _RefMux_1_RefSelect
                                        (0040) 
                                        (0041) ;-----------------------------------------------
                                        (0042) ;  EQUATES
                                        (0043) ;-----------------------------------------------
                                        (0044) TMUX_MASK:        equ 1Ch              ; Mask for Test Mux control
                                        (0045) POWERMASK:        equ 03h
                                        (0046) 
                                        (0047) AREA UserModules (ROM, REL)
                                        (0048) .SECTION
                                        (0049) ;-----------------------------------------------------------------------------
                                        (0050) ;  FUNCTION NAME: RefMux_1_Start
                                        (0051) ;  FUNCTION NAME: RefMux_1_SetPower
                                        (0052) ;
                                        (0053) ;  DESCRIPTION:
                                        (0054) ;   Applies power setting to the module's PSoC block
                                        (0055) ;
                                        (0056) ;-----------------------------------------------------------------------------
                                        (0057) ;
                                        (0058) ;  ARGUMENTS:
                                        (0059) ;  A  Contains the power setting; 0 = Off
                                        (0060) ;                                 1 = Low
                                        (0061) ;                                 2 = Med
                                        (0062) ;                                 3 = High
                                        (0063) ;
                                        (0064) ;  RETURNS:  NA
                                        (0065) ;
                                        (0066) ;  SIDE EFFECTS:
                                        (0067) ;    The A and X registers may be modified by this or future implementations
                                        (0068) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0069) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0070) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0071) ;    functions.
                                        (0072) ;
                                        (0073)  RefMux_1_Start:
                                        (0074) _RefMux_1_Start:
                                        (0075)  RefMux_1_SetPower:
                                        (0076) _RefMux_1_SetPower:
                                        (0077)     RAM_PROLOGUE RAM_USE_CLASS_2
0549: 21 03    AND   A,0x3              (0078)     and  A, POWERMASK                  ; mask A to protect unchanged bits
054B: 4F       MOV   X,SP               (0079)     mov  X, SP                         ; define temp store location
                                        (0080) 
054C: 08       PUSH  A                  (0081)     push A                             ; put power value in temp store
054D: 5D 7F    MOV   A,REG[0x7F]        (0082)     mov  A, reg[RefMux_1_REFMUX_CR2]   ; read power value
054F: 21 FC    AND   A,0xFC             (0083)     and  A, ~POWERMASK                 ; clear power bits in A
0551: 2B 00    OR    A,[X+0]            (0084)     or   A, [X]                        ; combine power value with balance of reg.
0553: 60 7F    MOV   REG[0x7F],A        (0085)     mov  reg[RefMux_1_REFMUX_CR2], A   ; move complete value back to register
0555: 18       POP   A                  (0086)     pop  A
0556: 70 3F    AND   F,0x3F             
0558: 71 C0    OR    F,0xC0             (0087)     RAM_EPILOGUE RAM_USE_CLASS_2
055A: 7F       RET                      (0088)     ret
                                        (0089) .ENDSECTION
                                        (0090) 
                                        (0091) .SECTION
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) ;  FUNCTION NAME: RefMux_1_Stop
                                        (0094) ;
                                        (0095) ;  DESCRIPTION:
                                        (0096) ;   Turn off power to user module
                                        (0097) ;
                                        (0098) ;-----------------------------------------------------------------------------
                                        (0099) ;
                                        (0100) ;  ARGUMENTS: None
                                        (0101) ;
                                        (0102) ;  RETURNS:  NA
                                        (0103) ;
                                        (0104) ;  SIDE EFFECTS:
                                        (0105) ;    The A and X registers may be modified by this or future implementations
                                        (0106) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0107) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0108) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0109) ;    functions.
                                        (0110) ;
                                        (0111)  RefMux_1_Stop:
                                        (0112) _RefMux_1_Stop:
                                        (0113)     RAM_PROLOGUE RAM_USE_CLASS_1
055B: 41 7F FC AND   REG[0x7F],0xFC     (0114)     and REG[RefMux_1_REFMUX_CR2], ~POWERMASK
                                        (0115)     RAM_EPILOGUE RAM_USE_CLASS_1
055E: 7F       RET                      (0116)     ret
                                        (0117) .ENDSECTION
                                        (0118) 
                                        (0119) .SECTION
                                        (0120) ;-----------------------------------------------------------------------------
                                        (0121) ;  FUNCTION NAME: RefMux_1_InputSelect
                                        (0122) ;
                                        (0123) ;  DESCRIPTION:
                                        (0124) ;   Select one of the input of the TestMux to be connected to the Analog
                                        (0125) ;   Column bus.
                                        (0126) ;
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;
                                        (0129) ;  ARGUMENTS:
                                        (0130) ;   A  contains value to select desired RefMux output.
                                        (0131) ;         Input              Code
                                        (0132) ;         Off                 00h
                                        (0133) ;         PMuxOut             10h
                                        (0134) ;         AGND                14h  (Power must be applied)
                                        (0135) ;         REFLO               18h
                                        (0136) ;         REFHI               1Ch
                                        (0137) ;
                                        (0138) ;  RETURNS:  NA
                                        (0139) ;
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  RefMux_1_RefSelect:
                                        (0148) _RefMux_1_RefSelect:
                                        (0149)     RAM_PROLOGUE RAM_USE_CLASS_2
055F: 21 1C    AND   A,0x1C             (0150)     and  A,TMUX_MASK                   ; Mask off test mux control
0561: 4F       MOV   X,SP               (0151)     mov  X,SP                          ; Get stack location
0562: 08       PUSH  A                  (0152)     push A
0563: 5D 7F    MOV   A,REG[0x7F]        (0153)     mov  A,reg[RefMux_1_REFMUX_CR2]    ; Write register Test Mux register to select reference
0565: 21 E3    AND   A,0xE3             (0154)     and  A, ~TMUX_MASK                 ; Clear Mux control bits
0567: 2B 00    OR    A,[X+0]            (0155)     or   A,[X]                         ; Or in the new setting
0569: 60 7F    MOV   REG[0x7F],A        (0156)     mov  reg[RefMux_1_REFMUX_CR2],A    ; Write register Test Mux register to select reference
056B: 18       POP   A                  (0157)     pop  A                             ; Restore the stack
056C: 70 3F    AND   F,0x3F             
056E: 71 C0    OR    F,0xC0             (0158)     RAM_EPILOGUE RAM_USE_CLASS_2
0570: 7F       RET                      (0159)     ret
(0160) .ENDSECTION
(0161) 
(0162) 
(0163) ; End of File RefMux_1.asm
FILE: lib\pga_pre.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_pre.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2009/10/13 at 23:59:44
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_pre.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_pre_Start
                                        (0060) export _PGA_pre_Start
                                        (0061) export  PGA_pre_SetPower
                                        (0062) export _PGA_pre_SetPower
                                        (0063) 
                                        (0064) export  PGA_pre_SetGain
                                        (0065) export _PGA_pre_SetGain
                                        (0066) 
                                        (0067) export  PGA_pre_Stop
                                        (0068) export _PGA_pre_Stop
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ;  EQUATES
                                        (0072) ;-----------------------------------------------
                                        (0073) POWERMASK:     equ 03h
                                        (0074) GAINREGMASK:   equ f8h
                                        (0075) GAINMASK:      equ fCh
                                        (0076) HIGHGAIN:      equ 04h
                                        (0077) HIGHGAINMASK:  equ 18h
                                        (0078) EXGAIN:        equ 01h
                                        (0079) 
                                        (0080) AREA UserModules (ROM, REL)
                                        (0081) .SECTION
                                        (0082) ;-----------------------------------------------------------------------------
                                        (0083) ;  FUNCTION NAME: PGA_pre_Start
                                        (0084) ;  FUNCTION NAME: PGA_pre_SetPower
                                        (0085) ;
                                        (0086) ;  DESCRIPTION:
                                        (0087) ;    Applies power setting to the module's PSoC block.
                                        (0088) ;-----------------------------------------------------------------------------
                                        (0089) ;
                                        (0090) ;  ARGUMENTS:
                                        (0091) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0092) ;
                                        (0093) ;  RETURNS:  NA
                                        (0094) ;
                                        (0095) ;  SIDE EFFECTS:
                                        (0096) ;    The A and X registers may be modified by this or future implementations
                                        (0097) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0098) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0099) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0100) ;    functions.
                                        (0101) ;
                                        (0102)  PGA_pre_Start:
                                        (0103) _PGA_pre_Start:
                                        (0104)  PGA_pre_SetPower:
                                        (0105) _PGA_pre_SetPower:
                                        (0106) 
                                        (0107)    RAM_PROLOGUE RAM_USE_CLASS_2
0571: 21 03    AND   A,0x3              (0108)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0573: 4F       MOV   X,SP               (0109)    mov  X, SP                                        ; define temp store location
                                        (0110) ;
0574: 08       PUSH  A                  (0111)    push A                                            ; put power value in temp store
0575: 5D 73    MOV   A,REG[0x73]        (0112)    mov  A, reg[PGA_pre_GAIN_CR2]                           ; read power value
0577: 21 FC    AND   A,0xFC             (0113)    and  A, ~POWERMASK                                ; clear power bits in A
0579: 2B 00    OR    A,[X+0]            (0114)    or   A, [X]                                       ; combine power value with balance of reg.
057B: 60 73    MOV   REG[0x73],A        (0115)    mov  reg[PGA_pre_GAIN_CR2], A                      ; move complete value back to register
057D: 18       POP   A                  (0116)    pop  A
057E: 70 3F    AND   F,0x3F             
0580: 71 C0    OR    F,0xC0             (0117)    RAM_EPILOGUE RAM_USE_CLASS_2
0582: 7F       RET                      (0118)    ret
                                        (0119) .ENDSECTION
                                        (0120) 
                                        (0121) .SECTION
                                        (0122) ;-----------------------------------------------------------------------------
                                        (0123) ;  FUNCTION NAME: PGA_pre_SetGain
                                        (0124) ;
                                        (0125) ;  DESCRIPTION:
                                        (0126) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0127) ;    are defined in the .inc file.
                                        (0128) ;
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;
                                        (0131) ;  ARGUMENTS:
                                        (0132) ;    A  Contains gain settings.
                                        (0133) ;
                                        (0134) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0135) ;
                                        (0136) ;  RETURNS:  NA
                                        (0137) ;
                                        (0138) ;  SIDE EFFECTS:
                                        (0139) ;    The A and X registers may be modified by this or future implementations
                                        (0140) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0141) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0142) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0143) ;    functions.
                                        (0144) ;
                                        (0145)  PGA_pre_SetGain:
                                        (0146) _PGA_pre_SetGain:
                                        (0147) 
                                        (0148)    RAM_PROLOGUE RAM_USE_CLASS_2
0583: 21 FC    AND   A,0xFC             (0149)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
0585: 4F       MOV   X,SP               (0150)    mov  X, SP                                             ; define temp store location
                                        (0151) ;
0586: 08       PUSH  A                  (0152)    push A                                                 ; put gain value in temp store
0587: 5D 71    MOV   A,REG[0x71]        (0153)    mov  A, reg[PGA_pre_GAIN_CR0]                           ; read mux settings
0589: 21 07    AND   A,0x7              (0154)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
058B: 48 00 04 TST   [X+0],0x4          (0155)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
058E: B0 0E    JNZ   0x059D             (0156)    jnz  .SETHIGHGAIN
0590: 41 70 FE AND   REG[0x70],0xFE     (0157)    and  reg[PGA_pre_GAIN_CR3],~EXGAIN                      ; Clear High Gain bit.
0593: 2B 00    OR    A,[X+0]            (0158)    or   A, [X]                                            ; combine gain value with balance of reg.
0595: 60 71    MOV   REG[0x71],A        (0159)    mov  reg[PGA_pre_GAIN_CR0], A                           ; move complete value back to register
0597: 18       POP   A                  (0160)    pop  A
0598: 70 3F    AND   F,0x3F             
059A: 71 C0    OR    F,0xC0             (0161)    RAM_EPILOGUE RAM_USE_CLASS_2
059C: 7F       RET                      (0162)    ret
                                        (0163) 
                                        (0164) .SETHIGHGAIN:
059D: 27 00 18 AND   [X+0],0x18         (0165)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
05A0: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
05A2: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[PGA_pre_GAIN_CR0], A                           ; move complete value back to register
05A4: 43 70 01 OR    REG[0x70],0x1      (0168)    or   reg[PGA_pre_GAIN_CR3], EXGAIN                      ; Set High Gain bit.
05A7: 18       POP   A                  (0169)    pop  A
05A8: 70 3F    AND   F,0x3F             
05AA: 71 C0    OR    F,0xC0             (0170)    RAM_EPILOGUE RAM_USE_CLASS_2
05AC: 7F       RET                      (0171)    ret
                                        (0172) .ENDSECTION
                                        (0173) 
                                        (0174) .SECTION
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) ;  FUNCTION NAME: PGA_pre_Stop
                                        (0177) ;
                                        (0178) ;  DESCRIPTION:
                                        (0179) ;    Turns off the power to the amplifier.
                                        (0180) ;
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: None
                                        (0184) ;
                                        (0185) ;  RETURNS:  NA
                                        (0186) ;
                                        (0187) ;  SIDE EFFECTS:
                                        (0188) ;    The A and X registers may be modified by this or future implementations
                                        (0189) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0190) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0191) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0192) ;    functions.
                                        (0193) ;
                                        (0194)  PGA_pre_Stop:
                                        (0195) _PGA_pre_Stop:
                                        (0196) 
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
05AD: 41 73 FC AND   REG[0x73],0xFC     (0198)    and REG[PGA_pre_GAIN_CR2], ~POWERMASK
                                        (0199)    RAM_EPILOGUE RAM_USE_CLASS_1
05B0: 7F       RET                      (0200)    ret
(0201) .ENDSECTION
(0202) ; End of File PGA_pre.asm
FILE: lib\pga_out.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_out.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2009/10/13 at 23:59:44
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_out.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_out_Start
                                        (0060) export _PGA_out_Start
                                        (0061) export  PGA_out_SetPower
                                        (0062) export _PGA_out_SetPower
                                        (0063) 
                                        (0064) export  PGA_out_SetGain
                                        (0065) export _PGA_out_SetGain
                                        (0066) 
                                        (0067) export  PGA_out_Stop
                                        (0068) export _PGA_out_Stop
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ;  EQUATES
                                        (0072) ;-----------------------------------------------
                                        (0073) POWERMASK:     equ 03h
                                        (0074) GAINREGMASK:   equ f8h
                                        (0075) GAINMASK:      equ fCh
                                        (0076) HIGHGAIN:      equ 04h
                                        (0077) HIGHGAINMASK:  equ 18h
                                        (0078) EXGAIN:        equ 01h
                                        (0079) 
                                        (0080) AREA UserModules (ROM, REL)
                                        (0081) .SECTION
                                        (0082) ;-----------------------------------------------------------------------------
                                        (0083) ;  FUNCTION NAME: PGA_out_Start
                                        (0084) ;  FUNCTION NAME: PGA_out_SetPower
                                        (0085) ;
                                        (0086) ;  DESCRIPTION:
                                        (0087) ;    Applies power setting to the module's PSoC block.
                                        (0088) ;-----------------------------------------------------------------------------
                                        (0089) ;
                                        (0090) ;  ARGUMENTS:
                                        (0091) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0092) ;
                                        (0093) ;  RETURNS:  NA
                                        (0094) ;
                                        (0095) ;  SIDE EFFECTS:
                                        (0096) ;    The A and X registers may be modified by this or future implementations
                                        (0097) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0098) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0099) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0100) ;    functions.
                                        (0101) ;
                                        (0102)  PGA_out_Start:
                                        (0103) _PGA_out_Start:
                                        (0104)  PGA_out_SetPower:
                                        (0105) _PGA_out_SetPower:
                                        (0106) 
                                        (0107)    RAM_PROLOGUE RAM_USE_CLASS_2
05B1: 21 03    AND   A,0x3              (0108)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
05B3: 4F       MOV   X,SP               (0109)    mov  X, SP                                        ; define temp store location
                                        (0110) ;
05B4: 08       PUSH  A                  (0111)    push A                                            ; put power value in temp store
05B5: 5D 7B    MOV   A,REG[0x7B]        (0112)    mov  A, reg[PGA_out_GAIN_CR2]                           ; read power value
05B7: 21 FC    AND   A,0xFC             (0113)    and  A, ~POWERMASK                                ; clear power bits in A
05B9: 2B 00    OR    A,[X+0]            (0114)    or   A, [X]                                       ; combine power value with balance of reg.
05BB: 60 7B    MOV   REG[0x7B],A        (0115)    mov  reg[PGA_out_GAIN_CR2], A                      ; move complete value back to register
05BD: 18       POP   A                  (0116)    pop  A
05BE: 70 3F    AND   F,0x3F             
05C0: 71 C0    OR    F,0xC0             (0117)    RAM_EPILOGUE RAM_USE_CLASS_2
05C2: 7F       RET                      (0118)    ret
                                        (0119) .ENDSECTION
                                        (0120) 
                                        (0121) .SECTION
                                        (0122) ;-----------------------------------------------------------------------------
                                        (0123) ;  FUNCTION NAME: PGA_out_SetGain
                                        (0124) ;
                                        (0125) ;  DESCRIPTION:
                                        (0126) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0127) ;    are defined in the .inc file.
                                        (0128) ;
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;
                                        (0131) ;  ARGUMENTS:
                                        (0132) ;    A  Contains gain settings.
                                        (0133) ;
                                        (0134) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0135) ;
                                        (0136) ;  RETURNS:  NA
                                        (0137) ;
                                        (0138) ;  SIDE EFFECTS:
                                        (0139) ;    The A and X registers may be modified by this or future implementations
                                        (0140) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0141) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0142) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0143) ;    functions.
                                        (0144) ;
                                        (0145)  PGA_out_SetGain:
                                        (0146) _PGA_out_SetGain:
                                        (0147) 
                                        (0148)    RAM_PROLOGUE RAM_USE_CLASS_2
05C3: 21 FC    AND   A,0xFC             (0149)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
05C5: 4F       MOV   X,SP               (0150)    mov  X, SP                                             ; define temp store location
                                        (0151) ;
05C6: 08       PUSH  A                  (0152)    push A                                                 ; put gain value in temp store
05C7: 5D 79    MOV   A,REG[0x79]        (0153)    mov  A, reg[PGA_out_GAIN_CR0]                           ; read mux settings
05C9: 21 07    AND   A,0x7              (0154)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
05CB: 48 00 04 TST   [X+0],0x4          (0155)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
05CE: B0 0E    JNZ   0x05DD             (0156)    jnz  .SETHIGHGAIN
05D0: 41 78 FE AND   REG[0x78],0xFE     (0157)    and  reg[PGA_out_GAIN_CR3],~EXGAIN                      ; Clear High Gain bit.
05D3: 2B 00    OR    A,[X+0]            (0158)    or   A, [X]                                            ; combine gain value with balance of reg.
05D5: 60 79    MOV   REG[0x79],A        (0159)    mov  reg[PGA_out_GAIN_CR0], A                           ; move complete value back to register
05D7: 18       POP   A                  (0160)    pop  A
05D8: 70 3F    AND   F,0x3F             
05DA: 71 C0    OR    F,0xC0             (0161)    RAM_EPILOGUE RAM_USE_CLASS_2
05DC: 7F       RET                      (0162)    ret
                                        (0163) 
                                        (0164) .SETHIGHGAIN:
05DD: 27 00 18 AND   [X+0],0x18         (0165)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
05E0: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
05E2: 60 79    MOV   REG[0x79],A        (0167)    mov  reg[PGA_out_GAIN_CR0], A                           ; move complete value back to register
05E4: 43 78 01 OR    REG[0x78],0x1      (0168)    or   reg[PGA_out_GAIN_CR3], EXGAIN                      ; Set High Gain bit.
05E7: 18       POP   A                  (0169)    pop  A
05E8: 70 3F    AND   F,0x3F             
05EA: 71 C0    OR    F,0xC0             (0170)    RAM_EPILOGUE RAM_USE_CLASS_2
05EC: 7F       RET                      (0171)    ret
                                        (0172) .ENDSECTION
                                        (0173) 
                                        (0174) .SECTION
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) ;  FUNCTION NAME: PGA_out_Stop
                                        (0177) ;
                                        (0178) ;  DESCRIPTION:
                                        (0179) ;    Turns off the power to the amplifier.
                                        (0180) ;
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: None
                                        (0184) ;
                                        (0185) ;  RETURNS:  NA
                                        (0186) ;
                                        (0187) ;  SIDE EFFECTS:
                                        (0188) ;    The A and X registers may be modified by this or future implementations
                                        (0189) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0190) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0191) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0192) ;    functions.
                                        (0193) ;
                                        (0194)  PGA_out_Stop:
                                        (0195) _PGA_out_Stop:
                                        (0196) 
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
05ED: 41 7B FC AND   REG[0x7B],0xFC     (0198)    and REG[PGA_out_GAIN_CR2], ~POWERMASK
                                        (0199)    RAM_EPILOGUE RAM_USE_CLASS_1
05F0: 7F       RET                      (0200)    ret
(0201) .ENDSECTION
(0202) ; End of File PGA_out.asm
FILE: lib\led_3.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_3.asm
                                        (0004) ;;  Version: 1.2, Updated on 2009/10/9 at 10:6:29
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_3.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_3_Start
                                        (0027) export  LED_3_Start
                                        (0028) 
                                        (0029) export _LED_3_Stop
                                        (0030) export  LED_3_Stop
                                        (0031) 
                                        (0032) export _LED_3_On
                                        (0033) export  LED_3_On
                                        (0034) 
                                        (0035) export _LED_3_Off
                                        (0036) export  LED_3_Off
                                        (0037) 
                                        (0038) export _LED_3_Switch
                                        (0039) export  LED_3_Switch
                                        (0040) 
                                        (0041) export _LED_3_Invert
                                        (0042) export  LED_3_Invert
                                        (0043) 
                                        (0044) export _LED_3_GetState
                                        (0045) export  LED_3_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_3_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_3_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_3_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_3_On:
                                        (0079)  LED_3_On:
05F1: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
05F3: 80 03    JMP   0x05F7             (0081)    jmp  LED_3_Switch 
                                        (0082) 
                                        (0083) _LED_3_Start:
                                        (0084)  LED_3_Start:
                                        (0085) _LED_3_Stop:
                                        (0086)  LED_3_Stop:
                                        (0087) _LED_3_Off:
                                        (0088)  LED_3_Off:
05F5: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _LED_3_Switch:
                                        (0092)  LED_3_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
05F7: 62 D0 00 MOV   REG[0xD0],0x0      (0095)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0096) 
05FA: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
05FC: A0 06    JZ    0x0603             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
05FE: 2E 00 20 OR    [0x0],0x20         (0102)    or   [Port_2_Data_SHADE],LED_3_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_2_Data_SHADE],~LED_3_PinMask
                                        (0105) ENDIF
0601: 80 04    JMP   0x0606             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
0603: 26 00 DF AND   [0x0],0xDF         (0110)    and  [Port_2_Data_SHADE],~LED_3_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_2_Data_SHADE],LED_3_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0606: 51 00    MOV   A,[0x0]            (0116)    mov  A,[Port_2_Data_SHADE]
0608: 60 08    MOV   REG[0x8],A         (0117)    mov  reg[LED_3_PortDR],A
                                        (0118) 
060A: 70 3F    AND   F,0x3F             
060C: 71 C0    OR    F,0xC0             (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
060E: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_3_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_3_Invert:
                                        (0144)  LED_3_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
060F: 62 D0 00 MOV   REG[0xD0],0x0      (0147)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0148) 
0612: 36 00 20 XOR   [0x0],0x20         (0149)    xor  [Port_2_Data_SHADE],LED_3_PinMask
0615: 51 00    MOV   A,[0x0]            (0150)    mov  A,[Port_2_Data_SHADE]
0617: 60 08    MOV   REG[0x8],A         (0151)    mov  reg[LED_3_PortDR],A
                                        (0152) 
0619: 70 3F    AND   F,0x3F             
061B: 71 C0    OR    F,0xC0             (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
061D: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_3_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_3_GetState:
                                        (0177)  LED_3_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
061E: 62 D0 00 MOV   REG[0xD0],0x0      (0180)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0181) 
0621: 51 00    MOV   A,[0x0]            (0182)    mov   A,[Port_2_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
0623: 21 20    AND   A,0x20             (0188)    and   A,LED_3_PinMask               ; Mask off the trash
0625: A0 03    JZ    0x0629             (0189)    jz    .End_LED_GS                   ; If zero, we're done
0627: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
0629: 70 3F    AND   F,0x3F             
062B: 71 C0    OR    F,0xC0             (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
062D: 7F       RET                      (0195)    ret
(0196) .ENDSECTION
FILE: lib\led_2.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_2.asm
                                        (0004) ;;  Version: 1.2, Updated on 2009/10/9 at 10:6:29
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_2.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_2_Start
                                        (0027) export  LED_2_Start
                                        (0028) 
                                        (0029) export _LED_2_Stop
                                        (0030) export  LED_2_Stop
                                        (0031) 
                                        (0032) export _LED_2_On
                                        (0033) export  LED_2_On
                                        (0034) 
                                        (0035) export _LED_2_Off
                                        (0036) export  LED_2_Off
                                        (0037) 
                                        (0038) export _LED_2_Switch
                                        (0039) export  LED_2_Switch
                                        (0040) 
                                        (0041) export _LED_2_Invert
                                        (0042) export  LED_2_Invert
                                        (0043) 
                                        (0044) export _LED_2_GetState
                                        (0045) export  LED_2_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_2_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_2_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_2_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_2_On:
                                        (0079)  LED_2_On:
062E: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
0630: 80 03    JMP   0x0634             (0081)    jmp  LED_2_Switch 
                                        (0082) 
                                        (0083) _LED_2_Start:
                                        (0084)  LED_2_Start:
                                        (0085) _LED_2_Stop:
                                        (0086)  LED_2_Stop:
                                        (0087) _LED_2_Off:
                                        (0088)  LED_2_Off:
0632: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _LED_2_Switch:
                                        (0092)  LED_2_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
0634: 62 D0 00 MOV   REG[0xD0],0x0      (0095)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0096) 
0637: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
0639: A0 06    JZ    0x0640             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
063B: 2E 00 40 OR    [0x0],0x40         (0102)    or   [Port_2_Data_SHADE],LED_2_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_2_Data_SHADE],~LED_2_PinMask
                                        (0105) ENDIF
063E: 80 04    JMP   0x0643             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
0640: 26 00 BF AND   [0x0],0xBF         (0110)    and  [Port_2_Data_SHADE],~LED_2_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_2_Data_SHADE],LED_2_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0643: 51 00    MOV   A,[0x0]            (0116)    mov  A,[Port_2_Data_SHADE]
0645: 60 08    MOV   REG[0x8],A         (0117)    mov  reg[LED_2_PortDR],A
                                        (0118) 
0647: 70 3F    AND   F,0x3F             
0649: 71 C0    OR    F,0xC0             (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
064B: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_2_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_2_Invert:
                                        (0144)  LED_2_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
064C: 62 D0 00 MOV   REG[0xD0],0x0      (0147)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0148) 
064F: 36 00 40 XOR   [0x0],0x40         (0149)    xor  [Port_2_Data_SHADE],LED_2_PinMask
0652: 51 00    MOV   A,[0x0]            (0150)    mov  A,[Port_2_Data_SHADE]
0654: 60 08    MOV   REG[0x8],A         (0151)    mov  reg[LED_2_PortDR],A
                                        (0152) 
0656: 70 3F    AND   F,0x3F             
0658: 71 C0    OR    F,0xC0             (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
065A: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_2_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_2_GetState:
                                        (0177)  LED_2_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
065B: 62 D0 00 MOV   REG[0xD0],0x0      (0180)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0181) 
065E: 51 00    MOV   A,[0x0]            (0182)    mov   A,[Port_2_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
0660: 21 40    AND   A,0x40             (0188)    and   A,LED_2_PinMask               ; Mask off the trash
0662: A0 03    JZ    0x0666             (0189)    jz    .End_LED_GS                   ; If zero, we're done
0664: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
0666: 70 3F    AND   F,0x3F             
0668: 71 C0    OR    F,0xC0             (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
066A: 7F       RET                      (0195)    ret
(0196) .ENDSECTION
FILE: lib\led_1.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_1.asm
                                        (0004) ;;  Version: 1.2, Updated on 2009/10/9 at 10:6:29
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_1_Start
                                        (0027) export  LED_1_Start
                                        (0028) 
                                        (0029) export _LED_1_Stop
                                        (0030) export  LED_1_Stop
                                        (0031) 
                                        (0032) export _LED_1_On
                                        (0033) export  LED_1_On
                                        (0034) 
                                        (0035) export _LED_1_Off
                                        (0036) export  LED_1_Off
                                        (0037) 
                                        (0038) export _LED_1_Switch
                                        (0039) export  LED_1_Switch
                                        (0040) 
                                        (0041) export _LED_1_Invert
                                        (0042) export  LED_1_Invert
                                        (0043) 
                                        (0044) export _LED_1_GetState
                                        (0045) export  LED_1_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_1_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_1_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_1_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_1_On:
                                        (0079)  LED_1_On:
066B: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
066D: 80 03    JMP   0x0671             (0081)    jmp  LED_1_Switch 
                                        (0082) 
                                        (0083) _LED_1_Start:
                                        (0084)  LED_1_Start:
                                        (0085) _LED_1_Stop:
                                        (0086)  LED_1_Stop:
                                        (0087) _LED_1_Off:
                                        (0088)  LED_1_Off:
066F: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _LED_1_Switch:
                                        (0092)  LED_1_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
0671: 62 D0 00 MOV   REG[0xD0],0x0      (0095)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0096) 
0674: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
0676: A0 06    JZ    0x067D             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
0678: 2E 00 80 OR    [0x0],0x80         (0102)    or   [Port_2_Data_SHADE],LED_1_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_2_Data_SHADE],~LED_1_PinMask
                                        (0105) ENDIF
067B: 80 04    JMP   0x0680             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
067D: 26 00 7F AND   [0x0],0x7F         (0110)    and  [Port_2_Data_SHADE],~LED_1_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_2_Data_SHADE],LED_1_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0680: 51 00    MOV   A,[0x0]            (0116)    mov  A,[Port_2_Data_SHADE]
0682: 60 08    MOV   REG[0x8],A         (0117)    mov  reg[LED_1_PortDR],A
                                        (0118) 
0684: 70 3F    AND   F,0x3F             
0686: 71 C0    OR    F,0xC0             (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
0688: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_1_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_1_Invert:
                                        (0144)  LED_1_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
0689: 62 D0 00 MOV   REG[0xD0],0x0      (0147)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0148) 
068C: 36 00 80 XOR   [0x0],0x80         (0149)    xor  [Port_2_Data_SHADE],LED_1_PinMask
068F: 51 00    MOV   A,[0x0]            (0150)    mov  A,[Port_2_Data_SHADE]
0691: 60 08    MOV   REG[0x8],A         (0151)    mov  reg[LED_1_PortDR],A
                                        (0152) 
0693: 70 3F    AND   F,0x3F             
0695: 71 C0    OR    F,0xC0             (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
0697: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_1_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_1_GetState:
                                        (0177)  LED_1_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
0698: 62 D0 00 MOV   REG[0xD0],0x0      (0180)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0181) 
069B: 51 00    MOV   A,[0x0]            (0182)    mov   A,[Port_2_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
069D: 21 80    AND   A,0x80             (0188)    and   A,LED_1_PinMask               ; Mask off the trash
069F: A0 03    JZ    0x06A3             (0189)    jz    .End_LED_GS                   ; If zero, we're done
06A1: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
06A3: 70 3F    AND   F,0x3F             
06A5: 71 C0    OR    F,0xC0             (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
06A7: 7F       RET                      (0195)    ret
(0196) .ENDSECTION
FILE: lib\i2chwrsrcinits.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHW.asm
                                        (0004) ;;   Version: 1.6, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHWCommon.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ; include instance specific register definitions
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) ;-----------------------------------------------
                                        (0031) ;  Global Symbols
                                        (0032) ;-----------------------------------------------
                                        (0033) ;-------------------------------------------------------------------
                                        (0034) ;  Declare the functions global for both assembler and C compiler.
                                        (0035) ;
                                        (0036) ;  Note that there are two names for each API. First name is
                                        (0037) ;  assembler reference. Name with underscore is name refence for
                                        (0038) ;  C compiler.  Calling function in C source code does not require
                                        (0039) ;  the underscore.
                                        (0040) ;-------------------------------------------------------------------
                                        (0041) 
                                        (0042) export    I2CHW_ResumeInt
                                        (0043) export   _I2CHW_ResumeInt
                                        (0044) export    I2CHW_EnableInt
                                        (0045) export   _I2CHW_EnableInt
                                        (0046) export    I2CHW_ClearInt
                                        (0047) export   _I2CHW_ClearInt
                                        (0048) export    I2CHW_EnableSlave
                                        (0049) export   _I2CHW_EnableSlave
                                        (0050) export    I2CHW_EnableMstr
                                        (0051) export   _I2CHW_EnableMstr
                                        (0052) export    I2CHW_Start
                                        (0053) export   _I2CHW_Start
                                        (0054) export    I2CHW_DisableInt
                                        (0055) export   _I2CHW_DisableInt
                                        (0056) export    I2CHW_DisableSlave
                                        (0057) export   _I2CHW_DisableSlave
                                        (0058) export    I2CHW_DisableMstr
                                        (0059) export   _I2CHW_DisableMstr
                                        (0060) export    I2CHW_Stop
                                        (0061) export   _I2CHW_Stop
                                        (0062) 
                                        (0063) 
                                        (0064) AREA UserModules (ROM, REL)
                                        (0065) 
                                        (0066) .SECTION
                                        (0067) 
                                        (0068) ;-----------------------------------------------------------------------------
                                        (0069) ;  FUNCTION NAME: I2CHW_Start
                                        (0070) ;
                                        (0071) ;  DESCRIPTION:
                                        (0072) ;   Initialize the I2CHW I2C bus interface.
                                        (0073) ;
                                        (0074) ;-----------------------------------------------------------------------------
                                        (0075) ;
                                        (0076) ;  ARGUMENTS:
                                        (0077) ;
                                        (0078) ;  RETURNS: none
                                        (0079) ;
                                        (0080) ;  SIDE EFFECTS:
                                        (0081) ;    The A and X registers may be modified by this or future implementations
                                        (0082) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0083) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0084) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0085) ;    functions.
                                        (0086) ;          
                                        (0087)  I2CHW_Start:
                                        (0088) _I2CHW_Start:
                                        (0089)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0090)     RAM_EPILOGUE RAM_USE_CLASS_1
06A8: 7F       RET                      (0091)     ret
                                        (0092) .ENDSECTION
                                        (0093) 
                                        (0094) .SECTION
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;  FUNCTION NAME: I2CHW_ResumeInt
                                        (0097) ;
                                        (0098) ;  DESCRIPTION:
                                        (0099) ;     reEnables SDA interrupt allowing start condition detection. 
                                        (0100) ;     Skips clearing INT_CLR3 by entering the EnableInt at ResumeIntEntry:.
                                        (0101) ;     Remember to call the global interrupt enable function by using
                                        (0102) ;     the macro: M8C_EnableGInt.
                                        (0103) ;-----------------------------------------------------------------------------
                                        (0104) ;  ARGUMENTS: none
                                        (0105) ;
                                        (0106) ;  RETURNS: none
                                        (0107) ;
                                        (0108) ;  SIDE EFFECTS:
                                        (0109) ;    The A and X registers may be modified by this or future implementations
                                        (0110) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0111) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0112) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0113) ;    functions.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115)  I2CHW_ResumeInt:
                                        (0116) _I2CHW_ResumeInt:
                                        (0117)     RAM_PROLOGUE RAM_USE_CLASS_1
06A9: 08       PUSH  A                  (0118)     push A
06AA: 80 08    JMP   0x06B3             (0119)     jmp ResumeIntEntry
                                        (0120)     
                                        (0121) ;-----------------------------------------------------------------------------
                                        (0122) ;  FUNCTION NAME: I2CHW_EnableInt
                                        (0123) ;
                                        (0124) ;  DESCRIPTION:
                                        (0125) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0126) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0127) ;
                                        (0128) ;-----------------------------------------------------------------------------
                                        (0129) ;
                                        (0130) ;  ARGUMENTS: none
                                        (0131) ;
                                        (0132) ;  RETURNS: none
                                        (0133) ;
                                        (0134) ;  SIDE EFFECTS:
                                        (0135) ;    The A and X registers may be modified by this or future implementations
                                        (0136) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0137) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0138) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0139) ;    functions.
                                        (0140) ;-----------------------------------------------------------------------------
                                        (0141)  I2CHW_EnableInt:
                                        (0142) _I2CHW_EnableInt:
                                        (0143)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0144)     ;first clear any pending interrupts
06AC: 08       PUSH  A                  (0145)     push A
06AD: 5D DD    MOV   A,REG[0xDD]        (0146)     mov A, reg[INT_CLR3]
06AF: 21 FE    AND   A,0xFE             (0147)     and A, ~I2CHW_INT_MASK
06B1: 60 DD    MOV   REG[0xDD],A        (0148)     mov reg[INT_CLR3], A
                                        (0149) ResumeIntEntry:
06B3: 43 DE 01 OR    REG[0xDE],0x1      (0150)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
06B6: 18       POP   A                  (0151)     pop A
                                        (0152)     RAM_EPILOGUE RAM_USE_CLASS_1
06B7: 7F       RET                      (0153)     ret
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: I2CHW_ClearInt
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Clears only the I2C interrupt in the INT_CLR3 register.
                                        (0163) ;
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS: none
                                        (0167) ;
                                        (0168) ;  RETURNS: none
                                        (0169) ;
                                        (0170) ;  SIDE EFFECTS:
                                        (0171) ;    The A and X registers may be modified by this or future implementations
                                        (0172) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0173) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0174) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0175) ;    functions.
                                        (0176) ;          
                                        (0177)  I2CHW_ClearInt:
                                        (0178) _I2CHW_ClearInt:
                                        (0179)     RAM_PROLOGUE RAM_USE_CLASS_1
06B8: 08       PUSH  A                  (0180)     push A
06B9: 5D DD    MOV   A,REG[0xDD]        (0181)     mov A, reg[INT_CLR3]
06BB: 21 FE    AND   A,0xFE             (0182)     and A, ~I2CHW_INT_MASK
06BD: 60 DD    MOV   REG[0xDD],A        (0183)     mov reg[INT_CLR3], A
06BF: 18       POP   A                  (0184)     pop A
                                        (0185)     RAM_EPILOGUE RAM_USE_CLASS_1
06C0: 7F       RET                      (0186)     ret
                                        (0187)     
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) .SECTION
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;  FUNCTION NAME: I2CHW_EnableMstr
                                        (0193) ;
                                        (0194) ;  DESCRIPTION:
                                        (0195) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0196) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0197) ;
                                        (0198) ;-----------------------------------------------------------------------------
                                        (0199) ;
                                        (0200) ;  ARGUMENTS: none
                                        (0201) ;
                                        (0202) ;  RETURNS: none
                                        (0203) ;
                                        (0204) ;  SIDE EFFECTS:
                                        (0205) ;    The A and X registers may be modified by this or future implementations
                                        (0206) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0207) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0208) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0209) ;    functions.
                                        (0210) ;          
                                        (0211)  I2CHW_EnableMstr:
                                        (0212) _I2CHW_EnableMstr:
                                        (0213)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0214) 	;;CDT 28399
06C1: 62 D0 00 MOV   REG[0xD0],0x0      (0215) 	RAM_SETPAGE_CUR >I2CHW_bStatus
06C4: 26 01 7F AND   [0x1],0x7F         (0216) 	and [I2CHW_bStatus], ~0x80 ;; ~I2CHW_ISR_ACTIVE
06C7: 62 D0 00 MOV   REG[0xD0],0x0      (0217) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
06CA: 26 02 7F AND   [0x2],0x7F         (0218)     and    [I2CHW_RsrcStatus], ~0x80;;~I2CHW_ISR_ACTIVE        ; Make sure internal control variables weren't corrupted previous to start.
06CD: 43 D6 02 OR    REG[0xD6],0x2      (0219)     BitSetI2CHW_CFG I2C_M_EN                                         ;Enable SDA interupt
                                        (0220)     RAM_EPILOGUE RAM_USE_CLASS_1
06D0: 7F       RET                      (0221)     ret
                                        (0222) 
                                        (0223) .ENDSECTION
                                        (0224) 
                                        (0225) .SECTION
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  FUNCTION NAME: I2CHW_EnableSlave
                                        (0228) ;
                                        (0229) ;  DESCRIPTION:
                                        (0230) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0231) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0232) ;
                                        (0233) ;-----------------------------------------------------------------------------
                                        (0234) ;
                                        (0235) ;  ARGUMENTS: none
                                        (0236) ;
                                        (0237) ;  RETURNS: none
                                        (0238) ;
                                        (0239) ;  SIDE EFFECTS:
                                        (0240) ;    The A and X registers may be modified by this or future implementations
                                        (0241) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0242) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0243) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0244) ;    functions.
                                        (0245) ;          
                                        (0246)  I2CHW_EnableSlave:
                                        (0247) _I2CHW_EnableSlave:
                                        (0248)     RAM_PROLOGUE RAM_USE_CLASS_1
06D1: 43 D6 01 OR    REG[0xD6],0x1      (0249)     BitSetI2CHW_CFG I2C_S_EN                                         ;Enable SDA interupt
                                        (0250)     RAM_EPILOGUE RAM_USE_CLASS_1
06D4: 7F       RET                      (0251)     ret
                                        (0252) 
                                        (0253) .ENDSECTION
                                        (0254) 
                                        (0255) .SECTION
                                        (0256) ;-----------------------------------------------------------------------------
                                        (0257) ;  FUNCTION NAME: I2CHW_DisableInt
                                        (0258) ;  FUNCTION NAME: I2CHW_Stop
                                        (0259) ;
                                        (0260) ;  DESCRIPTION:
                                        (0261) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0262) ;
                                        (0263) ;-----------------------------------------------------------------------------
                                        (0264) ;
                                        (0265) ;  ARGUMENTS: none
                                        (0266) ;
                                        (0267) ;  RETURNS: none
                                        (0268) ;
                                        (0269) ;  SIDE EFFECTS:
                                        (0270) ;    The A and X registers may be modified by this or future implementations
                                        (0271) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0272) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0273) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0274) ;    functions.
                                        (0275) ;          
                                        (0276)  I2CHW_DisableInt:
                                        (0277) _I2CHW_DisableInt:
                                        (0278)  I2CHW_Stop:
                                        (0279) _I2CHW_Stop:
                                        (0280)     RAM_PROLOGUE RAM_USE_CLASS_1
06D5: 41 DE FE AND   REG[0xDE],0xFE     (0281)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0282)     RAM_EPILOGUE RAM_USE_CLASS_1
06D8: 7F       RET                      (0283)     ret
                                        (0284) 
                                        (0285) .ENDSECTION
                                        (0286) 
                                        (0287) .SECTION
                                        (0288) ;-----------------------------------------------------------------------------
                                        (0289) ;  FUNCTION NAME: I2CHW_DisableSlave
                                        (0290) ;
                                        (0291) ;  DESCRIPTION:
                                        (0292) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0293) ;
                                        (0294) ;-----------------------------------------------------------------------------
                                        (0295) ;
                                        (0296) ;  ARGUMENTS: none
                                        (0297) ;
                                        (0298) ;  RETURNS: none
                                        (0299) ;
                                        (0300) ;  SIDE EFFECTS:
                                        (0301) ;    The A and X registers may be modified by this or future implementations
                                        (0302) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0303) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0304) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0305) ;    functions.
                                        (0306) ;          
                                        (0307)  I2CHW_DisableSlave:
                                        (0308) _I2CHW_DisableSlave:
                                        (0309)     RAM_PROLOGUE RAM_USE_CLASS_1
06D9: 41 D6 FE AND   REG[0xD6],0xFE     (0310)     BitClrI2CHW_CFG I2C_S_EN                                         ;Disable the Slave
                                        (0311)     RAM_EPILOGUE RAM_USE_CLASS_1
06DC: 7F       RET                      (0312)     ret
                                        (0313) 
                                        (0314) .ENDSECTION
                                        (0315) 
                                        (0316) .SECTION
                                        (0317) ;-----------------------------------------------------------------------------
                                        (0318) ;  FUNCTION NAME: I2CHW_DisableMstr
                                        (0319) ;
                                        (0320) ;  DESCRIPTION:
                                        (0321) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0322) ;
                                        (0323) ;-----------------------------------------------------------------------------
                                        (0324) ;
                                        (0325) ;  ARGUMENTS: none
                                        (0326) ;
                                        (0327) ;  RETURNS: none
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336)  I2CHW_DisableMstr:
                                        (0337) _I2CHW_DisableMstr:
                                        (0338)     RAM_PROLOGUE RAM_USE_CLASS_1
06DD: 41 D6 FD AND   REG[0xD6],0xFD     (0339)     BitClrI2CHW_CFG I2C_M_EN                                         ;Disable the Master
                                        (0340)     RAM_EPILOGUE RAM_USE_CLASS_1
06E0: 7F       RET                      (0341)    ret
(0342) 
(0343) .ENDSECTION
(0344) 
(0345) ; End of File I2CHW.asm
FILE: lib\i2chwint.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHWINT.asm
                                        (0004) ;;   Version: 1.6, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2CHW (Slave) Interrupt Service Routine.
                                        (0008) ;;  This is the interrupt seveice routine for the Slave I2C function.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "I2CHWSlave.inc"
                                        (0016) include "I2CHWCommon.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) export     I2CHW_RsrcStatus                                          ; upper (7x) bits write status, lower 3 bits read status
                                        (0023) export    _I2CHW_RsrcStatus                                          ; upper (7x) bits write status, lower 3 bits read status
                                        (0024) export     I2CHW_Read_Count
                                        (0025) export    _I2CHW_Read_Count
                                        (0026) export     I2CHW_Write_Count
                                        (0027) export    _I2CHW_Write_Count
                                        (0028) export    pI2CHW_Read_BufLO
                                        (0029) export   _pI2CHW_Read_BufLO
                                        (0030) export    pI2CHW_Write_BufLO
                                        (0031) export   _pI2CHW_Write_BufLO
                                        (0032) export   _I2CHW_bStatus
                                        (0033) export    I2CHW_bStatus
                                        (0034) 
                                        (0035) ;-----------------------------------------------
                                        (0036) ; WARNING: The variables below are deprecated
                                        (0037) ; and have been replaced with Read_BufLO
                                        (0038) ; and Write_BufLO
                                        (0039) ;-----------------------------------------------
                                        (0040) export    pI2CHW_Read_Buf
                                        (0041) export   _pI2CHW_Read_Buf
                                        (0042) export    pI2CHW_Write_Buf
                                        (0043) export   _pI2CHW_Write_Buf
                                        (0044) ;-----------------------------------------------
                                        (0045) ; END WARNING
                                        (0046) ;-----------------------------------------------
                                        (0047) 
                                        (0048) area InterruptRAM(RAM, REL, CON)	 
                                        (0049) 
                                        (0050) ;-----------------------------------------------
                                        (0051) ; Variable Allocation
                                        (0052) ;-----------------------------------------------
                                        (0053) 
                                        (0054)  _I2CHW_bStatus:
                                        (0055)   I2CHW_bStatus:                             blk 1
                                        (0056)   I2CHW_RsrcStatus:
                                        (0057)  _I2CHW_RsrcStatus:                          blk     1
                                        (0058)   I2CHW_Write_Count:
                                        (0059)  _I2CHW_Write_Count:                         blk    1
                                        (0060) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0061) export    pI2CHW_Write_BufHI
                                        (0062) export   _pI2CHW_Write_BufHI
                                        (0063) 
                                        (0064)  pI2CHW_Write_BufHI:
                                        (0065) _pI2CHW_Write_BufHI:                         blk     1
                                        (0066) ENDIF
                                        (0067) ;-----------------------------------------------
                                        (0068) ; WARNING: The variable below is deprecated
                                        (0069) ; and has been replaced Write_BufLO
                                        (0070) ;-----------------------------------------------
                                        (0071)  pI2CHW_Write_Buf:
                                        (0072) _pI2CHW_Write_Buf:
                                        (0073) ;-----------------------------------------------
                                        (0074) ; END WARNING
                                        (0075) ;-----------------------------------------------
                                        (0076)  pI2CHW_Write_BufLO:
                                        (0077) _pI2CHW_Write_BufLO:                         blk      1
                                        (0078) 
                                        (0079) IF I2CHW_READ_FLASH
                                        (0080) export    pI2CHW_Read_BufHI
                                        (0081) export   _pI2CHW_Read_BufHI
                                        (0082) 
                                        (0083)  pI2CHW_Read_BufHI:
                                        (0084) _pI2CHW_Read_BufHI:                          blk     1
                                        (0085) ELSE
                                        (0086) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0087) export    pI2CHW_Read_BufHI
                                        (0088) export   _pI2CHW_Read_BufHI
                                        (0089) 
                                        (0090)  pI2CHW_Read_BufHI:
                                        (0091) _pI2CHW_Read_BufHI:                          blk     1
                                        (0092) ENDIF
                                        (0093) ENDIF
                                        (0094) 
                                        (0095) ;-----------------------------------------------
                                        (0096) ; WARNING: The variable below is deprecated
                                        (0097) ; and has been replaced Read_BufLO
                                        (0098) ;-----------------------------------------------
                                        (0099)  pI2CHW_Read_Buf:
                                        (0100) _pI2CHW_Read_Buf:
                                        (0101) ;-----------------------------------------------
                                        (0102) ; END WARNING
                                        (0103) ;-----------------------------------------------
                                        (0104)  pI2CHW_Read_BufLO:
                                        (0105) _pI2CHW_Read_BufLO:                          blk       1
                                        (0106) 
                                        (0107) IF I2CHW_READ_FLASH
                                        (0108) export    I2CHW_Read_CountHI
                                        (0109) export   _I2CHW_Read_CountHI
                                        (0110) 
                                        (0111)  I2CHW_Read_CountHI:
                                        (0112) _I2CHW_Read_CountHI:                         blk    1
                                        (0113) ENDIF
                                        (0114) 
                                        (0115)  I2CHW_Read_Count:
                                        (0116) _I2CHW_Read_Count:                           blk      1
                                        (0117) 
                                        (0118) 
                                        (0119) IF I2CHW_POLLED_PROCESS
                                        (0120) 
                                        (0121) I2CHW_Poll_Status:                             blk      1  ;internal variable used for polled operation
                                        (0122) ;bit 0 - Write transaction started begin looking for the STOP state to terminate the transaction
                                        (0123) I2C_WRITE_STARTED:       equ     0x01
                                        (0124) ;bit 1 - Undefined
                                        (0125) ;bit 2 - Undefined
                                        (0126) ;bit 3 - Undefined
                                        (0127) ;bit 4 - Undefined
                                        (0128) ;bit 5 - Undefined
                                        (0129) ;bit 6 - Undefined
                                        (0130) ;bit 7 - Undefined
                                        (0131) 
                                        (0132) ENDIF
                                        (0133) 
                                        (0134) 
                                        (0135) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0136) ;---------------------------------------------------
                                        (0137) ; Insert your custom declarations below this banner
                                        (0138) ;---------------------------------------------------
                                        (0139) 
                                        (0140) ;------------------------
                                        (0141) ; Includes
                                        (0142) ;------------------------
                                        (0143) 
                                        (0144) 	
                                        (0145) ;------------------------
                                        (0146) ;  Constant Definitions
                                        (0147) ;------------------------
                                        (0148) 
                                        (0149) 
                                        (0150) ;------------------------
                                        (0151) ; Variable Allocation
                                        (0152) ;------------------------
                                        (0153) 
                                        (0154) 
                                        (0155) ;---------------------------------------------------
                                        (0156) ; Insert your custom declarations above this banner
                                        (0157) ;---------------------------------------------------
                                        (0158) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0159) 
                                        (0160) 
                                        (0161) 
                                        (0162) 
                                        (0163) AREA UserModules (ROM, REL)
                                        (0164) 
                                        (0165) export _I2CHW_ISR
                                        (0166) export _I2CHW_Poll
                                        (0167) export  I2CHW_Poll
                                        (0168) 
                                        (0169) ;;****************************************************
                                        (0170) ;; I2C_ISR  main entry point from vector 60h
                                        (0171) ;;
                                        (0172) ;;****************************************************
                                        (0173) 
                                        (0174) IF I2CHW_POLLED_PROCESS
                                        (0175) 
                                        (0176) _I2CHW_ISR:
                                        (0177)     reti ; stub out the ISR if this is going to be a polled function
                                        (0178) 
                                        (0179)  
                                        (0180)  
                                        (0181)  I2CHW_Poll:
                                        (0182) _I2CHW_Poll:
                                        (0183) ;    cases are:
                                        (0184) ;    1. Stop state after a Master write to this slave
                                        (0185) ;    2. possible Stop condition COMBINED with a new transaction is not a problem since the Stop will only flag that the 
                                        (0186) ;       previous write has been completed. (so just call the I2CA_Process routine for this case and let the process routine take
                                        (0187) ;       care of it.
                                        (0188)     ;case 1
                                        (0189)     RAM_SETPAGE_CUR	( >I2CHW_Poll_Status )
                                        (0190) 
                                        (0191)     tst [I2CHW_Poll_Status], I2C_WRITE_STARTED
                                        (0192)     jz  NOT_I2C_Write
                                        (0193)     tst reg[ I2CHW_SCR], I2C_STOP_ST
                                        (0194)     jz  NOT_I2C_Write
                                        (0195)     ;make sure the pushes and pops 'line up' or die horribly
                                        (0196)     push A
                                        (0197)     push X
                                        (0198) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0199)     REG_PRESERVE IDX_PP
                                        (0200) ENDIF
                                        (0201)     jmp STOPTRAP
                                        (0202)     
                                        (0203) NOT_I2C_Write:    
                                        (0204)     tst reg[ I2CHW_SCR], I2C_BYTE_COMPL
                                        (0205)     jnz  I2CHW_Process   ;if no other critical eventa are in evidence, process an I2C byte if it's done
                                        (0206)     ret
                                        (0207) 
                                        (0208)  I2CHW_Process:
                                        (0209) _I2CHW_Process:  ;don't need to export user will call I2CA_POLL which will call the I2CA_Process routine if necessary
                                        (0210) 
                                        (0211) 
                                        (0212) 
                                        (0213) ELSE
                                        (0214) ;; STUB for polling function when it's un-defined
                                        (0215)  I2CHW_Poll:
                                        (0216) _I2CHW_Poll:
06E1: 7F       RET                      (0217)     ret
                                        (0218) 
                                        (0219) 
                                        (0220) ;;*****************************************************************************************
                                        (0221) ;;                 I2C_MASTER  main entry point from vector 60h
                                        (0222) ;;*****************************************************************************************
                                        (0223) 
                                        (0224) _I2CHW_ISR:
                                        (0225) ENDIF
06E2: 08       PUSH  A                  (0226)     push A
06E3: 10       PUSH  X                  (0227)     push X
                                        (0228) 
                                        (0229) IF SYSTEM_LARGE_MEMORY_MODEL
06E4: 5D D3    MOV   A,REG[0xD3]        
06E6: 08       PUSH  A                  (0230)     REG_PRESERVE IDX_PP
                                        (0231) ENDIF
                                        (0232) 
                                        (0233) Process_REENTRY:
                                        (0234) 
                                        (0235) ;******************************************************************************************
                                        (0236) ;Before doing anything else check for the presence of a STOP_ST in combination with the
                                        (0237) ;STOP Interrupt Enable (STOPIE).  If this is what happened set appropriate bits, 
                                        (0238) ;clear and reset the main I2CHW interrupt to assure that we haven't missed a BYTE_COMPLETE
                                        (0239) ;interrupt and exit the interrupt.  If a BYTE_COMPLETE interrupt is concurrent with the STOP 
                                        (0240) ;interrupt the next entry to this interrupt will be immediate and the STOPIE bit will now be 
                                        (0241) ;cleared.  This removes the possibility of trying to process two different events within one 
                                        (0242) ;interrupt.
                                        (0243) ;          
                                        (0244) ;******************************************************************************************
                                        (0245) ; Check the Stop Bit in SCR only if the Stop Interrupt is enabled.    
                                        (0246)     IF(I2CHW_USED_I2C_BLOCK)
                                        (0247)     M8C_SetBank1
                                        (0248)     tst reg[I2CHW_CFG],I2C_STOPIE
                                        (0249)     M8C_SetBank0
                                        (0250)     ELSE
06E7: 49 D6 10 TST   REG[0xD6],0x10     (0251)     tst reg[I2CHW_CFG],I2C_STOPIE
                                        (0252)     ENDIF
06EA: A0 06    JZ    0x06F1             (0253)     jz  ByteComplProcess
06EC: 49 D7 20 TST   REG[0xD7],0x20     (0254)     tst reg[I2CHW_SCR],I2C_STOP_ST                         ; Test if the Interrupt is due to Stop Condition
                                        (0255) ;conditions that must be met here are Slave-enabled, STOP int enabled (STOPIE), and STOP_ST (status bit set)
06EF: B0 EB    JNZ   0x07DB             (0256)     jnz STOPTRAP                                       ; If yes process Stop Trap
                                        (0257) 
                                        (0258) ByteComplProcess:
                                        (0259) ;*********END TEST OF STOP STATUS**********************************************************       
                                        (0260) 
                                        (0261) ;       file stored in Slave directory of user module
                                        (0262) ;program flow would likely be to first determine what 'mode' the device is in.  I.e. is Master and Slave mode enabled?
                                        (0263) ; control of program flow must take more into account when all more modes are enabled.
                                        (0264) ;
                                        (0265) ;* Slave only
                                        (0266)     ;very first thing to test is the I2C_ADDRIN bit.  If set then we are getting an address after a START
06F1: 49 D7 08 TST   REG[0xD7],0x8      (0267)     tst reg[I2CHW_SCR], I2C_ADDRIN
06F4: B0 74    JNZ   0x0769             (0268)     jnz I2C_EvaluateADDRIN
                                        (0269) 
                                        (0270)     ; if slave didn't recieve an address, then this must be data for it to deal with
06F6: 49 D7 04 TST   REG[0xD7],0x4      (0271)     tst reg[I2CHW_SCR], I2C_TX  ;if set we are transmitting => this is at end of byte to eval the ACK
06F9: B0 BE    JNZ   0x07B8             (0272)     jnz I2C_EvaluateACKIN
                                        (0273)     ; if slave NOT transmitting and NOT an address then data is being recieved
                                        (0274)     ; ack it and process it.
                                        (0275) 
                                        (0276)     ;UNLESS the stop bit turns out to have been set...
06FB: 49 D7 20 TST   REG[0xD7],0x20     (0277)     tst reg[I2CHW_SCR], I2C_STOP_ST
06FE: B0 DC    JNZ   0x07DB             (0278)     jnz STOPTRAP
                                        (0279)     ; if slave NOT transmitting and NOT an address and Master is NOT terminating the then data is being recieved
                                        (0280)     ; ack it and process it.
                                        (0281) 
                                        (0282) ;;code snipped from old SW I2C below
                                        (0283) ;
                                        (0284) ; MASTER WRITE to SLAVE
                                        (0285) ;
                                        (0286) ;@PSoC_UserCode_BODY1@ (Do not change this line.)
                                        (0287) ;---------------------------------------------------
                                        (0288) ; Insert your custom code below this banner
                                        (0289) ;---------------------------------------------------
                                        (0290) ; By modifying the section from here down to the next comment block
                                        (0291) ; a user could process data for a custom I2C WRITE application
                                        (0292) ; NOTE: I2C handshakes (ACK/NAK may be effected by any introduced bugs)
                                        (0293) ;********************************************************
0700: 47 01 04 TST   [0x1],0x4          (0294)    tst   [I2CHW_bStatus], fI2C_NAKnextWr
0703: B0 14    JNZ   0x0718             (0295)    jnz   WrStoreData
                                        (0296)    ;
                                        (0297)    ;process write data here
                                        (0298)    ;
0705: 7A 03    DEC   [0x3]              (0299)    dec   [I2CHW_Write_Count]
0707: C0 39    JC    0x0741             (0300)    jc    I2CHW_WriteOverflow                                         ; carry set if value became -1
                                        (0301)    ;jz    WrStoreData
0709: 3C 03 00 CMP   [0x3],0x0          (0302)    cmp   [I2CHW_Write_Count], 00                                     ;set nak flag, dec count, and store data
070C: A0 03    JZ    0x0710             (0303)    jz    WrNakNextByte
070E: 80 06    JMP   0x0715             (0304)    jmp   WrNotBufEnd
                                        (0305) WrNakNextByte:                                                       ;set the nakflag in I2CHW_bStatus
0710: 2E 01 04 OR    [0x1],0x4          (0306)    or    [I2CHW_bStatus], fI2C_NAKnextWr
0713: 80 04    JMP   0x0718             (0307)    jmp   WrStoreData
                                        (0308) WrNotBufEnd:
0715: 26 01 FB AND   [0x1],0xFB         (0309)    and   [I2CHW_bStatus], ~fI2C_NAKnextWr                            ;clear the nak flag in case it was set from a previous operation
                                        (0310) WrStoreData:
                                        (0311)    ;This is the ONLY place this bit is set  This bit should never be cleared by the isr ONLY by the API ClrWrStatus()
0718: 2E 02 10 OR    [0x2],0x10         (0312)    or    [I2CHW_RsrcStatus], I2CHW_WR_NOERR                          ;set current status
                                        (0313) IF SYSTEM_LARGE_MEMORY_MODEL
071B: 51 04    MOV   A,[0x4]            (0314)    mov   A, [pI2CHW_Write_BufHI]
                                        (0315) ENDIF
071D: 60 D3    MOV   REG[0xD3],A        (0316)    RAM_SETPAGE_IDX A
071F: 58 05    MOV   X,[0x5]            (0317)    mov   X, [pI2CHW_Write_BufLO]
0721: 5D D8    MOV   A,REG[0xD8]        (0318)    mov   A, reg[I2CHW_DR]
0723: 70 3F    AND   F,0x3F             
0725: 71 80    OR    F,0x80             (0319)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0727: 54 00    MOV   [X+0],A            (0320)    mov   [X], A
0729: 70 3F    AND   F,0x3F             
072B: 71 00    OR    F,0x0              (0321)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
072D: 76 05    INC   [0x5]              (0322)    inc   [pI2CHW_Write_BufLO]
                                        (0323) 
072F: 47 01 04 TST   [0x1],0x4          (0324)    tst   [I2CHW_bStatus], fI2C_NAKnextWr
0732: B0 16    JNZ   0x0749             (0325)    jnz   NAK_this_one
                                        (0326) 
                                        (0327) 
                                        (0328) ;---------------------------------------------------
                                        (0329) ; End user I2C WRITE Customization
                                        (0330) ; Insert your custom code above this banner
                                        (0331) ;---------------------------------------------------
                                        (0332) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0333) ;;code snipped form SW I2C to maintain api compatibility above
                                        (0334) 
                                        (0335) ;
                                        (0336) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0337) ;
0734: 62 D7 10 MOV   REG[0xD7],0x10     (0338)     SetI2CHW_SCR  (I2C_ACKOUT )
                                        (0339) 
                                        (0340) 
                                        (0341) IF SYSTEM_LARGE_MEMORY_MODEL
0737: 18       POP   A                  
0738: 60 D3    MOV   REG[0xD3],A        (0342)     REG_RESTORE IDX_PP
                                        (0343) ENDIF
073A: 20       POP   X                  (0344)     pop X
073B: 18       POP   A                  (0345)     pop A
073C: 70 3F    AND   F,0x3F             
073E: 71 C0    OR    F,0xC0             (0346)     RAM_RESTORE_NATIVE_PAGING      		;has no effect if this is an ISR
0740: 7E       RETI                     (0347)     I2CHW_SERVICE_RETURN
                                        (0348) 
                                        (0349) 
                                        (0350) ;
                                        (0351) ;ram-write-overflow label here, just rewrite the last location in the buffer
                                        (0352) ;    and set the overflow flag
                                        (0353) ;
                                        (0354) I2CHW_WriteOverflow:
0741: 2E 02 20 OR    [0x2],0x20         (0355)    or    [I2CHW_RsrcStatus], I2CHW_WR_OVERFLOW                       ; flag the overflow
0744: 26 02 EF AND   [0x2],0xEF         (0356)    and   [I2CHW_RsrcStatus], ~I2CHW_WR_NOERR
0747: 76 03    INC   [0x3]              (0357)    inc   [I2CHW_Write_Count]                                         ; put it back to zero
                                        (0358)    ;If data is to be Nak'ed
                                        (0359) NAK_this_one:
0749: 26 01 FB AND   [0x1],0xFB         (0360)    and   [I2CHW_bStatus], ~fI2C_NAKnextWr                            ;clear the nak flag in case it was set from a previous operation
                                        (0361) 
                                        (0362) ;
                                        (0363) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0364) ;
074C: 62 D7 00 MOV   REG[0xD7],0x0      (0365)     SetI2CHW_SCR ( 0 )
                                        (0366) 
                                        (0367) 
                                        (0368) IF SYSTEM_LARGE_MEMORY_MODEL
074F: 18       POP   A                  
0750: 60 D3    MOV   REG[0xD3],A        (0369)     REG_RESTORE IDX_PP
                                        (0370) ENDIF
0752: 20       POP   X                  (0371)     pop X
0753: 18       POP   A                  (0372)     pop A
0754: 70 3F    AND   F,0x3F             
0756: 71 C0    OR    F,0xC0             (0373)     RAM_RESTORE_NATIVE_PAGING      		;has no effect if this is an ISR
0758: 7E       RETI                     (0374)     I2CHW_SERVICE_RETURN                                                              ;return and wait for the next interrupt (on data)
                                        (0375) 
                                        (0376) 
                                        (0377) ;********************************************************
                                        (0378) ; Treat the case where the Slave will be continuing to
                                        (0379) ; receive data after receiving the address
                                        (0380) ;********************************************************
                                        (0381) I2C_AckAddr_RXdata:
                                        (0382) IF I2CHW_POLLED_PROCESS
                                        (0383)     or [I2CHW_Poll_Status], I2C_WRITE_STARTED
                                        (0384) ELSE
0759: 43 D6 10 OR    REG[0xD6],0x10     (0385)     BitSetI2CHW_CFG ( I2C_STOPIE )
                                        (0386) ENDIF
                                        (0387) 
                                        (0388) ;
                                        (0389) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0390) ;
075C: 62 D7 10 MOV   REG[0xD7],0x10     (0391)     SetI2CHW_SCR ( I2C_ACKOUT )
                                        (0392) 
                                        (0393) 
                                        (0394) IF SYSTEM_LARGE_MEMORY_MODEL
075F: 18       POP   A                  
0760: 60 D3    MOV   REG[0xD3],A        (0395)     REG_RESTORE IDX_PP
                                        (0396) ENDIF
0762: 20       POP   X                  (0397)     pop X
0763: 18       POP   A                  (0398)     pop A
0764: 70 3F    AND   F,0x3F             
0766: 71 C0    OR    F,0xC0             (0399)     RAM_RESTORE_NATIVE_PAGING      		;has no effect if this is an ISR
0768: 7E       RETI                     (0400)     I2CHW_SERVICE_RETURN
                                        (0401) 
                                        (0402) ;********************************************************
                                        (0403) ; Look to see if the address is us or someone else
                                        (0404) ; use the carry flag to idendify a READ or WRITE address
                                        (0405) ;********************************************************
                                        (0406) I2C_EvaluateADDRIN:
0769: 51 02    MOV   A,[0x2]            (0407)     mov A, [I2CHW_RsrcStatus]
076B: 21 30    AND   A,0x30             (0408)     and A, (I2CHW_WR_NOERR | I2CHW_WR_OVERFLOW)
076D: A0 07    JZ    0x0775             (0409)     jz  NewADDRNotSet                                                                                             ;set new addr only if previous data appears to be in buffer
076F: 2E 02 40 OR    [0x2],0x40         (0410)     or  [I2CHW_RsrcStatus], I2CHW_WR_COMPLETE                        ;Same bit as I2CHW_ISR_NEW_ADDR
                                        (0411) 
                                        (0412) IF I2CHW_POLLED_PROCESS						                                ;if a new addr was received it's OK to terminate stop detection
                                        (0413)     and [I2CHW_Poll_Status], ~I2C_WRITE_STARTED              ;used to determine the end of a Master write to a slave.
                                        (0414) ELSE			
0772: 41 D6 EF AND   REG[0xD6],0xEF     (0415)     BitClrI2CHW_CFG I2C_STOPIE
                                        (0416) ENDIF
                                        (0417)                                                                                                                                           ;SET WR_COMPL bit if it appears there was write taking place just previous
                                        (0418) NewADDRNotSet:                                                       ;may use as a way to tag the end of a master write to slave
                                        (0419) ;@PSoC_UserCode_BODY4@ (Do not change this line.)
                                        (0420) ;---------------------------------------------------
                                        (0421) ; Insert your custom code below this banner
                                        (0422) ;---------------------------------------------------
                                        (0423) ; By replacing the section from here down to the next block
                                        (0424) ; a user could process I2C addresses differently
                                        (0425) ;********************************************************
                                        (0426)                                                                                                                                           ;to this new address by looking at the status bits
                                        (0427)     ;inc [rec_cnt]
0775: 5D D8    MOV   A,REG[0xD8]        (0428)     mov A, reg[I2CHW_DR]
0777: 70 F9    AND   F,0xF9             (0429)     and F, 0xF9                                                      ;clear Carry (C) AND Zero (Z) in Flag reg
0779: 6D       RRC   A                  (0430)     rrc A                                                            ;carry now holds bit 0 (r/~w) from addr byte
                                        (0431) IF (I2CHW_AUTO_ADDR_CHECK^1)   ;; for CY8C28X45 chip: skip address comparison and NACK sending stage-hardware will do this for us  if AutoAddressCompare feature is enabled.
                                        (0432)                                           ;; The code in this pre-compiler directive will be executed for all chips except CY8C28X45.
077A: 31 00    XOR   A,0x0              (0433)     xor A,  I2CHW_SLAVE_ADDR                                         ;for an equate
077C: B0 4E    JNZ   0x07CB             (0434)     jnz I2C_Terminate
                                        (0435) ENDIF
077E: 2E 02 80 OR    [0x2],0x80         (0436)     or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0437) 
                                        (0438) ;********************************************************
                                        (0439) ; User could modify this section to allow the I2C routine
                                        (0440) ; to respond to multiple addresses, ram addresses, i/o pin
                                        (0441) ; based addresses, etc.
                                        (0442) ;********************************************************
                                        (0443) ;---------------------------------------------------
                                        (0444) ; End user I2C ADDR Compare Customization
                                        (0445) ; Insert your custom code above this banner
                                        (0446) ;---------------------------------------------------
                                        (0447) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0448) 
                                        (0449) I2CHW_send_ack:                                                      ;slave send adress ack
                                        (0450) 
                                        (0451) 
                                        (0452)     ;OK so the addreses were the same was it a read (c=1) or a write (c=0)
0781: DF D7    JNC   0x0759             (0453)     jnc I2C_AckAddr_RXdata ;(Master Write/Slave Receive) for this case we receive data and ack it
                                        (0454) 
                                        (0455) ;********************************************************
                                        (0456) ;Master Read (Master Read/Slave Transmit) Ack the address too.
                                        (0457) ;for this case the master has just sent us OUR read address which must be Ack'ed and will
                                        (0458) ;subsequently be reading from us (which the master will Ack.  So for the first bit we must
                                        (0459) ; set the I2C_TX AND the ACK bits in the I2C_SCR (first byte only)
                                        (0460) ; THEN we'll just be reading the ACK from the master as it reads our data
                                        (0461) ;********************************************************
                                        (0462) 
0783: 26 02 FB AND   [0x2],0xFB         (0463)     and [I2CHW_RsrcStatus], ~I2CHW_RD_COMPLETE                       ;Master will NAK us at the end of transaction
                                        (0464) 
0786: 50 14    MOV   A,0x14             (0465)     mov A, (I2C_ACKOUT | I2C_TX)
0788: 08       PUSH  A                  (0466)     push A
                                        (0467) 
                                        (0468) 
                                        (0469) ;
                                        (0470) ;MASTER is READING FROM SLAVE (ram or flash buffer)
                                        (0471) ;
                                        (0472) ;;code snipped from old SW I2C below
                                        (0473) 
                                        (0474) I2C_ObtainReadData:
                                        (0475) 
                                        (0476) ;********************************************************
                                        (0477) ; here we need to get the next data to output (master-read)
                                        (0478) ; also set the status byte for use on exit
                                        (0479) ;********************************************************
                                        (0480) IF I2CHW_READ_FLASH
                                        (0481) ;@PSoC_UserCode_BODY2@ (Do not change this line.)
                                        (0482) ;---------------------------------------------------
                                        (0483) ; Insert your custom code below this banner
                                        (0484) ; User flash read customization could take place within
                                        (0485) ; this area
                                        (0486) ;---------------------------------------------------
                                        (0487)     tst  [I2CHW_RsrcStatus],I2CHW_READFLASH
                                        (0488)     jz   ReadRamData
                                        (0489) 
                                        (0490)     ;
                                        (0491)     ;get the data
                                        (0492)     ;
                                        (0493)     mov  X, [pI2CHW_Read_BufLO]
                                        (0494)     mov  A, [pI2CHW_Read_BufHI]
                                        (0495)     romx
                                        (0496)     mov  reg[I2CHW_DR],A
                                        (0497)     dec  [I2CHW_Read_Count]                                          ;calc addr lsb
                                        (0498)     jnc  NoDecHighCount
                                        (0499)     dec  [I2CHW_Read_CountHI]
                                        (0500)     jc   FlashRdOverflow
                                        (0501) 
                                        (0502) NoDecHighCount:
                                        (0503) 
                                        (0504)     inc  [pI2CHW_Read_BufLO]                                         ;set the next flash address to read
                                        (0505)     jnc  NoIncHiAddr
                                        (0506)     inc  [pI2CHW_Read_BufHI]
                                        (0507) NoIncHiAddr:
                                        (0508)    jmp   I2CNormalRead
                                        (0509) 
                                        (0510) FlashRdOverflow:
                                        (0511)     ;deal with the over flow cond by resending last data byte (dec the low order addr byte)
                                        (0512) 
                                        (0513)    or    [I2CHW_RsrcStatus], I2CHW_RD_OVERFLOW
                                        (0514)    and   [I2CHW_RsrcStatus], ~I2CHW_RD_NOERR
                                        (0515)    ;set count back to 0
                                        (0516)    mov   [I2CHW_Read_CountHI], 0                                     ;functionally the same as incrementing ffff and less instructions
                                        (0517)    mov   [I2CHW_Read_Count], 0
                                        (0518)    jmp   I2CNormalRead
                                        (0519) ;---------------------------------------------------
                                        (0520) ; Insert your custom code above this banner
                                        (0521) ; END User flash read customization
                                        (0522) ;---------------------------------------------------
                                        (0523) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0524) ENDIF
                                        (0525) ;@PSoC_UserCode_BODY3@ (Do not change this line.)
                                        (0526) ;---------------------------------------------------
                                        (0527) ; Insert your custom code below this banner
                                        (0528) ;---------------------------------------------------
                                        (0529) ; By replacing the section from here down to the next block
                                        (0530) ; a user could process data for a custom I2C READ application
                                        (0531) ;********************************************************
                                        (0532) ReadRamData:
                                        (0533)    ;read the current data byte
                                        (0534) IF SYSTEM_LARGE_MEMORY_MODEL
0789: 51 06    MOV   A,[0x6]            (0535)    mov   A, [pI2CHW_Read_BufHI]
                                        (0536) ENDIF
078B: 60 D3    MOV   REG[0xD3],A        (0537)    RAM_SETPAGE_IDX A
078D: 58 07    MOV   X,[0x7]            (0538)    mov   X, [pI2CHW_Read_BufLO]
078F: 70 3F    AND   F,0x3F             
0791: 71 80    OR    F,0x80             (0539)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0793: 52 00    MOV   A,[X+0]            (0540)    mov   A, [X]
0795: 70 3F    AND   F,0x3F             
0797: 71 00    OR    F,0x0              (0541)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0799: 60 D8    MOV   REG[0xD8],A        (0542)    mov   reg[I2CHW_DR], A
079B: 7A 08    DEC   [0x8]              (0543)    dec   [I2CHW_Read_Count]
079D: C0 05    JC    0x07A3             (0544)    jc    I2CHW_readOverflow
079F: 76 07    INC   [0x7]              (0545)    inc   [pI2CHW_Read_BufLO]
07A1: 80 09    JMP   0x07AB             (0546)    jmp   I2CNormalRead
                                        (0547) ;
                                        (0548) ;ram read overflow detected here, just resend the last location in the buffer
                                        (0549) ;
                                        (0550) I2CHW_readOverflow:
07A3: 2E 02 02 OR    [0x2],0x2          (0551)    or    [I2CHW_RsrcStatus], I2CHW_RD_OVERFLOW
07A6: 26 02 FE AND   [0x2],0xFE         (0552)    and   [I2CHW_RsrcStatus], ~I2CHW_RD_NOERR
07A9: 76 08    INC   [0x8]              (0553)    inc   [I2CHW_Read_Count]                                          ; set back to zero
                                        (0554) 
                                        (0555) ;********************************************************
                                        (0556) ; End user I2C READ customization section
                                        (0557) ;********************************************************
                                        (0558) ; Insert your custom code above this banner
                                        (0559) ;---------------------------------------------------
                                        (0560) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0561) 
                                        (0562) ;;code snipped form SW I2C to maintain api compatibility above
                                        (0563) I2CNormalRead:
                                        (0564) 
                                        (0565)         ;load the bits to set in the I2C_ISR from the stack, The proper bit pattern was previously determined
                                        (0566)         ;and place there based on whether or not the previous transmission was our I2C address.
07AB: 18       POP   A                  (0567)         pop A
                                        (0568) 
                                        (0569) ;
                                        (0570) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0571) ;
07AC: 60 D7    MOV   REG[0xD7],A        (0572)     SetI2CHW_SCR A     ;set read bit as (bit0) and Addr bit (bit7)in the I2C_SCR
                                        (0573) 
                                        (0574) 
                                        (0575) IF SYSTEM_LARGE_MEMORY_MODEL
07AE: 18       POP   A                  
07AF: 60 D3    MOV   REG[0xD3],A        (0576)     REG_RESTORE IDX_PP
                                        (0577) ENDIF
07B1: 20       POP   X                  (0578)     pop X
07B2: 18       POP   A                  (0579)     pop A
07B3: 70 3F    AND   F,0x3F             
07B5: 71 C0    OR    F,0xC0             (0580)     RAM_RESTORE_NATIVE_PAGING      		;has no effect if this is an ISR
07B7: 7E       RETI                     (0581)     I2CHW_SERVICE_RETURN ;return and wait for the next interrupt (on data)
                                        (0582) 
                                        (0583) 
                                        (0584) 
                                        (0585) I2C_EvaluateACKIN:
                                        (0586) 
07B8: 49 D7 02 TST   REG[0xD7],0x2      (0587)     tst reg[I2CHW_SCR], I2C_LST_BIT
07BB: B0 06    JNZ   0x07C2             (0588)     jnz I2C_LastByteToMstr  ;NAK recd on TX so this is the end set mode to interrup only on ADDR IN
                                        (0589)     ; got here we were ACK'ed so send another byte
07BD: 50 04    MOV   A,0x4              (0590)     mov A, ( I2C_TX )
                                        (0591)         ;load the bits to set in the I2C_ISR from the stack, The proper bit pattern was previously determined
                                        (0592)         ;and place there based on whether or not the previous transmission was our I2C address.
07BF: 08       PUSH  A                  (0593)         push A
07C0: 8F C8    JMP   0x0789             (0594)         jmp I2C_ObtainReadData
                                        (0595) 
                                        (0596) 
                                        (0597) I2C_LastByteToMstr:
07C2: 2E 02 01 OR    [0x2],0x1          (0598)     or  [I2CHW_RsrcStatus], I2CHW_RD_NOERR                           ;Master NAK'ed us at the end of transaction
07C5: 2E 02 04 OR    [0x2],0x4          (0599)     or  [I2CHW_RsrcStatus], I2CHW_RD_COMPLETE
07C8: 26 02 7F AND   [0x2],0x7F         (0600)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
                                        (0601) 
                                        (0602) I2C_Terminate:
07CB: 26 02 7F AND   [0x2],0x7F         (0603)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
                                        (0604) 
                                        (0605) ;
                                        (0606) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0607) ;
07CE: 62 D7 00 MOV   REG[0xD7],0x0      (0608)     SetI2CHW_SCR 0     ;the default mode to wait for an address
                                        (0609) 
                                        (0610) 
                                        (0611) IF SYSTEM_LARGE_MEMORY_MODEL
07D1: 18       POP   A                  
07D2: 60 D3    MOV   REG[0xD3],A        (0612)     REG_RESTORE IDX_PP
                                        (0613) ENDIF
07D4: 20       POP   X                  (0614)     pop X
07D5: 18       POP   A                  (0615)     pop A
07D6: 70 3F    AND   F,0x3F             
07D8: 71 C0    OR    F,0xC0             (0616)     RAM_RESTORE_NATIVE_PAGING      		;has no effect if this is an ISR
07DA: 7E       RETI                     (0617)     I2CHW_SERVICE_RETURN
                                        (0618) 
                                        (0619) STOPTRAP:
                                        (0620)     ;I2C stop detected
                                        (0621) ;@PSoC_UserCode_BODY6@ (Do not change this line.)
                                        (0622) ;---------------------------------------------------
                                        (0623) ; Insert your custom code below this banner
                                        (0624) ; by modifying the block of code here a user could address key operational considerations
                                        (0625) ; at the point that a termination of a write command is detected.
                                        (0626) ; stop interrupt is automatically enabled on write so that the end of the write can be determined.
                                        (0627) ; stop interrupt is not enabled when a read transaction occurs
                                        (0628) ;---------------------------------------------------
                                        (0629) ;
                                        (0630) ; set a flag to indicate END OF TRANSMISSION
                                        (0631) ;
07DB: 2E 02 40 OR    [0x2],0x40         (0632)     or  [I2CHW_RsrcStatus], I2CHW_WR_COMPLETE                        ;only SET by ISR USER must clear.
07DE: 26 02 7F AND   [0x2],0x7F         (0633)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
                                        (0634) 
                                        (0635) IF I2CHW_POLLED_PROCESS
                                        (0636)     and [I2CHW_Poll_Status], ~I2C_WRITE_STARTED
                                        (0637)     jmp ExitISR
                                        (0638) ELSE
07E1: 41 D6 EF AND   REG[0xD6],0xEF     (0639)     BitClrI2CHW_CFG I2C_STOPIE
07E4: 49 D7 01 TST   REG[0xD7],0x1      (0640)     tst reg[I2CHW_SCR], I2C_BYTE_COMPL
                                        (0641) ;;if BYTE_COMPL is set, there's an excellent chance to lose an ISR.  Because of the way they are
                                        (0642) ;; latched into the INT_MSK.  Therefore clear the applicable bit (STOPIE) and jump directly to the 
                                        (0643) ;; top of this routing since the bus is currently stalled.  Just in case the ISR is properly latched,
                                        (0644) ;; clear the mask bit since it's is serviced manually.
07E7: A0 06    JZ    0x07EE             (0645)     jz ExitISR
07E9: 41 DD FE AND   REG[0xDD],0xFE     (0646)     and  reg[INT_CLR3], ~0x01                                ;clear the I2C interrupt
                                        (0647) ENDIF
                                        (0648) 
07EC: 8E FA    JMP   0x06E7             (0649) 	jmp Process_REENTRY
                                        (0650) 
                                        (0651) ExitISR:
                                        (0652) 
                                        (0653) IF SYSTEM_LARGE_MEMORY_MODEL
07EE: 18       POP   A                  
07EF: 60 D3    MOV   REG[0xD3],A        (0654)     REG_RESTORE IDX_PP
                                        (0655) ENDIF
07F1: 20       POP   X                  (0656)     pop X
07F2: 18       POP   A                  (0657)     pop A
07F3: 70 3F    AND   F,0x3F             
07F5: 71 C0    OR    F,0xC0             (0658)     RAM_RESTORE_NATIVE_PAGING      		;has no effect if this is an ISR
07F7: 7E       RETI                     (0659)     I2CHW_SERVICE_RETURN
(0660) 
(0661) ;---------------------------------------------------
(0662) ; End user boot loader entry Customization
(0663) ; Insert your custom code above this banner
(0664) ;---------------------------------------------------
(0665) ;@PSoC_UserCode_END@ (Do not change this line.)
(0666) 
(0667) ; end of file I2CHWINT.asm
FILE: lib\hb_tmrint.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: HB_TmrINT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "HB_Tmr.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _HB_Tmr_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _HB_Tmr_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _HB_Tmr_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
07F8: 7D 0E A8 LJMP  _HB_Tmr_ISR_C      (0071) 	ljmp _HB_Tmr_ISR_C  ; jump to the ISR written in C in mainc.c
                                        (0072) 	
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ; Insert your custom code above this banner
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0077) 
07FB: 7E       RETI                     (0078)    reti
(0079) 
(0080) 
(0081) ; end of file HB_TmrINT.asm
FILE: lib\hb_tmr.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: HB_Tmr.asm
                                        (0004) ;;   Version: 2.6, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "HB_Tmr.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  HB_Tmr_EnableInt
                                        (0030) export _HB_Tmr_EnableInt
                                        (0031) export  HB_Tmr_DisableInt
                                        (0032) export _HB_Tmr_DisableInt
                                        (0033) export  HB_Tmr_Start
                                        (0034) export _HB_Tmr_Start
                                        (0035) export  HB_Tmr_Stop
                                        (0036) export _HB_Tmr_Stop
                                        (0037) export  HB_Tmr_WritePeriod
                                        (0038) export _HB_Tmr_WritePeriod
                                        (0039) export  HB_Tmr_WriteCompareValue
                                        (0040) export _HB_Tmr_WriteCompareValue
                                        (0041) export  HB_Tmr_wReadCompareValue
                                        (0042) export _HB_Tmr_wReadCompareValue
                                        (0043) export  HB_Tmr_wReadTimer
                                        (0044) export _HB_Tmr_wReadTimer
                                        (0045) export  HB_Tmr_wReadTimerSaveCV
                                        (0046) export _HB_Tmr_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wHB_Tmr_ReadCompareValue  ; deprecated
                                        (0051) export _wHB_Tmr_ReadCompareValue  ; deprecated
                                        (0052) export  wHB_Tmr_ReadTimer         ; deprecated
                                        (0053) export _wHB_Tmr_ReadTimer         ; deprecated
                                        (0054) export  wHB_Tmr_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wHB_Tmr_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wHB_Tmr_ReadCounter       ; obsolete
                                        (0058) export _wHB_Tmr_ReadCounter       ; obsolete
                                        (0059) export  wHB_Tmr_CaptureCounter    ; obsolete
                                        (0060) export _wHB_Tmr_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA explorersound_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: HB_Tmr_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  HB_Tmr_EnableInt:
                                        (0098) _HB_Tmr_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
07FC: 43 DF 02 OR    REG[0xDF],0x2      (0100)    HB_Tmr_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
07FF: 7F       RET                      (0102)    ret
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: HB_Tmr_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  HB_Tmr_DisableInt:
                                        (0126) _HB_Tmr_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
0800: 41 DF FD AND   REG[0xDF],0xFD     (0128)    HB_Tmr_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
0803: 7F       RET                      (0130)    ret
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: HB_Tmr_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  HB_Tmr_Start:
                                        (0154) _HB_Tmr_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
0804: 43 43 01 OR    REG[0x43],0x1      (0156)    HB_Tmr_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
0807: 7F       RET                      (0158)    ret
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: HB_Tmr_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  HB_Tmr_Stop:
                                        (0182) _HB_Tmr_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
0808: 41 43 FE AND   REG[0x43],0xFE     (0184)    HB_Tmr_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
080B: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: HB_Tmr_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  HB_Tmr_WritePeriod:
                                        (0211) _HB_Tmr_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
080C: 60 41    MOV   REG[0x41],A        (0213)    mov   reg[HB_Tmr_PERIOD_LSB_REG], A
080E: 5B       MOV   A,X                (0214)    mov   A, X
080F: 60 45    MOV   REG[0x45],A        (0215)    mov   reg[HB_Tmr_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
0811: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: HB_Tmr_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call HB_Tmr_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  HB_Tmr_WriteCompareValue:
                                        (0243) _HB_Tmr_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
0812: 60 42    MOV   REG[0x42],A        (0245)    mov   reg[HB_Tmr_COMPARE_LSB_REG], A
0814: 5B       MOV   A,X                (0246)    mov   A, X
0815: 60 46    MOV   REG[0x46],A        (0247)    mov   reg[HB_Tmr_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
0817: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: HB_Tmr_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  HB_Tmr_wReadCompareValue:
                                        (0272) _HB_Tmr_wReadCompareValue:
                                        (0273)  wHB_Tmr_ReadCompareValue:                       ; this name deprecated
                                        (0274) _wHB_Tmr_ReadCompareValue:                       ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
0818: 5D 46    MOV   A,REG[0x46]        (0276)    mov   A, reg[HB_Tmr_COMPARE_MSB_REG]
081A: 5C       MOV   X,A                (0277)    mov   X, A
081B: 5D 42    MOV   A,REG[0x42]        (0278)    mov   A, reg[HB_Tmr_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
081D: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: HB_Tmr_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  HB_Tmr_wReadTimerSaveCV:
                                        (0321) _HB_Tmr_wReadTimerSaveCV:
                                        (0322)  wHB_Tmr_ReadTimerSaveCV:                        ; this name deprecated
                                        (0323) _wHB_Tmr_ReadTimerSaveCV:                        ; this name deprecated
                                        (0324)  wHB_Tmr_ReadCounter:                            ; this name deprecated
                                        (0325) _wHB_Tmr_ReadCounter:                            ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
081E: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
081F: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
0821: 5D 43    MOV   A,REG[0x43]        (0334)    mov   A, reg[HB_Tmr_CONTROL_LSB_REG]          ; save the Control register
0823: 08       PUSH  A                  (0335)    push  A
0824: 5D 42    MOV   A,REG[0x42]        (0336)    mov   A, reg[HB_Tmr_COMPARE_LSB_REG]          ; save the Compare register
0826: 08       PUSH  A                  (0337)    push  A
0827: 5D 46    MOV   A,REG[0x46]        (0338)    mov   A, reg[HB_Tmr_COMPARE_MSB_REG]
0829: 08       PUSH  A                  (0339)    push  A
082A: 5D 40    MOV   A,REG[0x40]        (0340)    mov   A, reg[HB_Tmr_COUNTER_LSB_REG]          ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
082C: 5D 46    MOV   A,REG[0x46]        (0342)    mov   A, reg[HB_Tmr_COMPARE_MSB_REG]          ; Now grab DR2 (DR0) and save
082E: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
0830: 5D 42    MOV   A,REG[0x42]        (0344)    mov   A, reg[HB_Tmr_COMPARE_LSB_REG]
0832: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
0834: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
0836: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
0839: A0 03    JZ    0x083D             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
083B: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
083D: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
083F: 70 FE    AND   F,0xFE             (0352)    M8C_DisableGInt                               ; Disable interrupts globally
0841: 41 43 FE AND   REG[0x43],0xFE     (0353)    HB_Tmr_Stop_M                                 ; Disable (stop) the timer
0844: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
0845: 60 46    MOV   REG[0x46],A        (0355)    mov   reg[HB_Tmr_COMPARE_MSB_REG], A
0847: 18       POP   A                  (0356)    pop   A
0848: 60 42    MOV   REG[0x42],A        (0357)    mov   reg[HB_Tmr_COMPARE_LSB_REG], A
084A: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
084B: 60 43    MOV   REG[0x43],A        (0359)    mov   reg[HB_Tmr_CONTROL_LSB_REG], A
084D: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
084E: 20       POP   X                  (0361)    pop   X
084F: 70 3F    AND   F,0x3F             
0851: 71 C0    OR    F,0xC0             (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
0853: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: HB_Tmr_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  HB_Tmr_wReadTimer:
                                        (0397) _HB_Tmr_wReadTimer:
                                        (0398)  wHB_Tmr_ReadTimer:                              ; this name deprecated
                                        (0399) _wHB_Tmr_ReadTimer:                              ; this name deprecated
                                        (0400)  wHB_Tmr_CaptureCounter:                         ; this name deprecated
                                        (0401) _wHB_Tmr_CaptureCounter:                         ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
0854: 5D 40    MOV   A,REG[0x40]        (0404)    mov   A, reg[HB_Tmr_COUNTER_LSB_REG]          ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
0856: 5D 46    MOV   A,REG[0x46]        (0407)    mov   A, reg[HB_Tmr_COMPARE_MSB_REG]          ; Return DR2 (actually DR0)
0858: 5C       MOV   X,A                (0408)    mov   X, A
0859: 5D 42    MOV   A,REG[0x42]        (0409)    mov   A, reg[HB_Tmr_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
085B: 7F       RET                      (0411)    ret
(0412) 
(0413) .ENDSECTION
(0414) 
(0415) ; End of File HB_Tmr.asm
FILE: lib\digital_out.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   DIGITAL_OUT.asm
                                        (0004) ;;  Version: 1.2, Updated on 2009/10/9 at 10:6:29
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "DIGITAL_OUT.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _DIGITAL_OUT_Start
                                        (0027) export  DIGITAL_OUT_Start
                                        (0028) 
                                        (0029) export _DIGITAL_OUT_Stop
                                        (0030) export  DIGITAL_OUT_Stop
                                        (0031) 
                                        (0032) export _DIGITAL_OUT_On
                                        (0033) export  DIGITAL_OUT_On
                                        (0034) 
                                        (0035) export _DIGITAL_OUT_Off
                                        (0036) export  DIGITAL_OUT_Off
                                        (0037) 
                                        (0038) export _DIGITAL_OUT_Switch
                                        (0039) export  DIGITAL_OUT_Switch
                                        (0040) 
                                        (0041) export _DIGITAL_OUT_Invert
                                        (0042) export  DIGITAL_OUT_Invert
                                        (0043) 
                                        (0044) export _DIGITAL_OUT_GetState
                                        (0045) export  DIGITAL_OUT_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: DIGITAL_OUT_Start(void)
                                        (0054) ;  FUNCTION NAME: DIGITAL_OUT_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: DIGITAL_OUT_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _DIGITAL_OUT_On:
                                        (0079)  DIGITAL_OUT_On:
085C: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
085E: 80 03    JMP   0x0862             (0081)    jmp  DIGITAL_OUT_Switch 
                                        (0082) 
                                        (0083) _DIGITAL_OUT_Start:
                                        (0084)  DIGITAL_OUT_Start:
                                        (0085) _DIGITAL_OUT_Stop:
                                        (0086)  DIGITAL_OUT_Stop:
                                        (0087) _DIGITAL_OUT_Off:
                                        (0088)  DIGITAL_OUT_Off:
0860: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _DIGITAL_OUT_Switch:
                                        (0092)  DIGITAL_OUT_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
0862: 62 D0 00 MOV   REG[0xD0],0x0      (0095)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0096) 
0865: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
0867: A0 06    JZ    0x086E             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
0869: 2E 00 10 OR    [0x0],0x10         (0102)    or   [Port_2_Data_SHADE],DIGITAL_OUT_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_2_Data_SHADE],~DIGITAL_OUT_PinMask
                                        (0105) ENDIF
086C: 80 04    JMP   0x0871             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
086E: 26 00 EF AND   [0x0],0xEF         (0110)    and  [Port_2_Data_SHADE],~DIGITAL_OUT_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_2_Data_SHADE],DIGITAL_OUT_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0871: 51 00    MOV   A,[0x0]            (0116)    mov  A,[Port_2_Data_SHADE]
0873: 60 08    MOV   REG[0x8],A         (0117)    mov  reg[DIGITAL_OUT_PortDR],A
                                        (0118) 
0875: 70 3F    AND   F,0x3F             
0877: 71 C0    OR    F,0xC0             (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
0879: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: DIGITAL_OUT_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _DIGITAL_OUT_Invert:
                                        (0144)  DIGITAL_OUT_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
087A: 62 D0 00 MOV   REG[0xD0],0x0      (0147)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0148) 
087D: 36 00 10 XOR   [0x0],0x10         (0149)    xor  [Port_2_Data_SHADE],DIGITAL_OUT_PinMask
0880: 51 00    MOV   A,[0x0]            (0150)    mov  A,[Port_2_Data_SHADE]
0882: 60 08    MOV   REG[0x8],A         (0151)    mov  reg[DIGITAL_OUT_PortDR],A
                                        (0152) 
0884: 70 3F    AND   F,0x3F             
0886: 71 C0    OR    F,0xC0             (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
0888: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: DIGITAL_OUT_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _DIGITAL_OUT_GetState:
                                        (0177)  DIGITAL_OUT_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
0889: 62 D0 00 MOV   REG[0xD0],0x0      (0180)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0181) 
088C: 51 00    MOV   A,[0x0]            (0182)    mov   A,[Port_2_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
088E: 21 10    AND   A,0x10             (0188)    and   A,DIGITAL_OUT_PinMask         ; Mask off the trash
0890: A0 03    JZ    0x0894             (0189)    jz    .End_LED_GS                   ; If zero, we're done
0892: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
0894: 70 3F    AND   F,0x3F             
0896: 71 C0    OR    F,0xC0             (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
0898: 7F       RET                      (0195)    ret
(0196) .ENDSECTION
FILE: lib\bpf4_4khz.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: BPF4_4KHz.asm
                                        (0004) ;;  Version: 1.0, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Asm source for 4 Pole Band Pass Filter
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "BPF4_4KHz.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  BPF4_4KHz_Start
                                        (0030) export _BPF4_4KHz_Start
                                        (0031) export  BPF4_4KHz_SetPower
                                        (0032) export _BPF4_4KHz_SetPower
                                        (0033) export  BPF4_4KHz_Stop
                                        (0034) export _BPF4_4KHz_Stop
                                        (0035) 
                                        (0036) export  BPF4_4KHz_SetC1L
                                        (0037) export _BPF4_4KHz_SetC1L
                                        (0038) export  BPF4_4KHz_SetC2L
                                        (0039) export _BPF4_4KHz_SetC2L
                                        (0040) export  BPF4_4KHz_SetC3L
                                        (0041) export _BPF4_4KHz_SetC3L
                                        (0042) export  BPF4_4KHz_SetC4L
                                        (0043) export _BPF4_4KHz_SetC4L
                                        (0044) 
                                        (0045) export  BPF4_4KHz_SetC1H
                                        (0046) export _BPF4_4KHz_SetC1H
                                        (0047) export  BPF4_4KHz_SetC2H
                                        (0048) export _BPF4_4KHz_SetC2H
                                        (0049) export  BPF4_4KHz_SetC3H
                                        (0050) export _BPF4_4KHz_SetC3H
                                        (0051) export  BPF4_4KHz_SetC4H
                                        (0052) export _BPF4_4KHz_SetC4H
                                        (0053) 
                                        (0054) ;-----------------------------------------------
                                        (0055) ;  EQUATES
                                        (0056) ;-----------------------------------------------
                                        (0057) BPF4_4KHz_POWERMASK:    equ 03h                  ; Power field mask for CR3
                                        (0058) BPF4_4KHz_CNUMMASK:     equ 1fh                  ; Mask for A, B & C Caps
                                        (0059) 
                                        (0060) BPF4_4KHz_IfCond:       equ BPF4_4KHz_AMD_MSK & 0x01
                                        (0061) 
                                        (0062) IF (BPF4_4KHz_AMD_VAL)
                                        (0063)  IF (BPF4_4KHz_IfCond)
                                        (0064)   BPF4_4KHz_AMD:        equ BPF4_4KHz_AMD_VAL
                                        (0065)  ELSE
                                        (0066)   BPF4_4KHz_AMD:        equ BPF4_4KHz_AMD_VAL << 4
                                        (0067)  ENDIF
                                        (0068) ENDIF
                                        (0069) 
                                        (0070) AREA UserModules (ROM,REL)
                                        (0071) 
                                        (0072) .SECTION
                                        (0073) ;-----------------------------------------------------------------------------
                                        (0074) ;  FUNCTION NAME: BPF4_4KHz_Start
                                        (0075) ;
                                        (0076) ;  DESCRIPTION: Applies power setting to the module's PSoC blocks
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  ARGUMENTS:    A register contains the power setting (constant)
                                        (0079) ;  RETURNS:      Nothing
                                        (0080) ;  SIDE EFFECTS: 
                                        (0081) ;    The A and X registers may be modified by this or future implementations
                                        (0082) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0083) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0084) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0085) ;    functions.
                                        (0086) 
                                        (0087) 
                                        (0088)  BPF4_4KHz_Start:
                                        (0089) _BPF4_4KHz_Start:
                                        (0090)  BPF4_4KHz_SetPower:
                                        (0091) _BPF4_4KHz_SetPower:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_2
0899: 21 03    AND   A,0x3              (0093)    and   A, BPF4_4KHz_POWERMASK                  ; mask A to protect unchanged bits
089B: 4F       MOV   X,SP               (0094)    mov   X, SP                                   ; define temp store location
089C: 08       PUSH  A                  (0095)    push  A                                       ; put power value in temp store
                                        (0096) 
                                        (0097) IF (BPF4_4KHz_AMD_VAL)
                                        (0098)    M8C_SetBank1
                                        (0099)    mov   A, reg[BPF4_4KHz_AMD_REG]               ; read modulator register
                                        (0100)    and   A, ~BPF4_4KHz_AMD_MSK                   ; clear modulator bittfield in A
                                        (0101)    or    A, BPF4_4KHz_AMD                        ; combine modulator value with balance of register
                                        (0102)    mov   reg[BPF4_4KHz_AMD_REG], A               ; move complete value back to register
                                        (0103)    M8C_SetBank0
                                        (0104) ENDIF
                                        (0105)    
089D: 5D 83    MOV   A,REG[0x83]        (0106)    mov   A, reg[BPF4_4KHz_FLINL_CR3]             ; read power value
089F: 21 FC    AND   A,0xFC             (0107)    and   A, ~BPF4_4KHz_POWERMASK                 ; clear power bits in A
08A1: 2B 00    OR    A,[X+0]            (0108)    or    A, [X]                                  ; combine power value with balance of reg.
08A3: 60 83    MOV   REG[0x83],A        (0109)    mov   reg[BPF4_4KHz_FLINL_CR3], A             ; move complete value back to register
                                        (0110) 
08A5: 5D 93    MOV   A,REG[0x93]        (0111)    mov   A, reg[BPF4_4KHz_FLFBL_CR3]             ; read power value
08A7: 21 FC    AND   A,0xFC             (0112)    and   A, ~BPF4_4KHz_POWERMASK                 ; clear power bits in A
08A9: 2B 00    OR    A,[X+0]            (0113)    or    A, [X]                                  ; combine power value with balance of reg.
08AB: 60 93    MOV   REG[0x93],A        (0114)    mov   reg[BPF4_4KHz_FLFBL_CR3], A             ; move complete value back to register
                                        (0115) 
08AD: 5D 97    MOV   A,REG[0x97]        (0116)    mov   A, reg[BPF4_4KHz_FLINH_CR3]             ; read power value
08AF: 21 FC    AND   A,0xFC             (0117)    and   A, ~BPF4_4KHz_POWERMASK                 ; clear power bits in A
08B1: 2B 00    OR    A,[X+0]            (0118)    or    A, [X]                                  ; combine power value with balance of reg.
08B3: 60 97    MOV   REG[0x97],A        (0119)    mov   reg[BPF4_4KHz_FLINH_CR3], A             ; move complete value back to register
                                        (0120) 
08B5: 5D 87    MOV   A,REG[0x87]        (0121)    mov   A, reg[BPF4_4KHz_FLFBH_CR3]             ; read power value
08B7: 21 FC    AND   A,0xFC             (0122)    and   A, ~BPF4_4KHz_POWERMASK                 ; clear power bits in A
08B9: 2B 00    OR    A,[X+0]            (0123)    or    A, [X]                                  ; combine power value with balance of reg.
08BB: 60 87    MOV   REG[0x87],A        (0124)    mov   reg[BPF4_4KHz_FLFBH_CR3], A             ; move complete value back to register
                                        (0125) 
08BD: 18       POP   A                  (0126)    pop   A
08BE: 70 3F    AND   F,0x3F             
08C0: 71 C0    OR    F,0xC0             (0127)    RAM_EPILOGUE RAM_USE_CLASS_2
08C2: 7F       RET                      (0128)    ret
                                        (0129) .ENDSECTION
                                        (0130) 
                                        (0131) .SECTION
                                        (0132) ;-----------------------------------------------------------------------------
                                        (0133) ;  FUNCTION NAME: BPF4_4KHz_Stop
                                        (0134) ;
                                        (0135) ;  DESCRIPTION: Cuts power to the user module.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  ARGUMENTS:     None
                                        (0138) ;  RETURNS:       Nothing
                                        (0139) ;  SIDE EFFECTS: 
                                        (0140) ;    The A and X registers may be modified by this or future implementations
                                        (0141) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0142) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0143) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0144) ;    functions.
                                        (0145) 
                                        (0146)  BPF4_4KHz_Stop:
                                        (0147) _BPF4_4KHz_Stop:
                                        (0148)    RAM_PROLOGUE RAM_USE_CLASS_1
08C3: 41 83 FC AND   REG[0x83],0xFC     (0149)    and   reg[BPF4_4KHz_FLINL_CR3], ~BPF4_4KHz_POWERMASK
08C6: 41 93 FC AND   REG[0x93],0xFC     (0150)    and   reg[BPF4_4KHz_FLFBL_CR3], ~BPF4_4KHz_POWERMASK
08C9: 41 97 FC AND   REG[0x97],0xFC     (0151)    and   reg[BPF4_4KHz_FLINH_CR3], ~BPF4_4KHz_POWERMASK
08CC: 41 87 FC AND   REG[0x87],0xFC     (0152)    and   reg[BPF4_4KHz_FLFBH_CR3], ~BPF4_4KHz_POWERMASK
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_1
08CF: 7F       RET                      (0154)    ret
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: BPF4_4KHz_SetC1L
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0162) ;                 of the capacitor C1L
                                        (0163) ;-----------------------------------------------------------------------------
                                        (0164) ;  ARGUMENTS:    The A register contains a non-negative integer less than 32
                                        (0165) ;  RETURNS:
                                        (0166) ;  SIDE EFFECTS: 
                                        (0167) ;    The A and X registers may be modified by this or future implementations
                                        (0168) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0169) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0170) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0171) ;    functions.
                                        (0172) 
                                        (0173)  BPF4_4KHz_SetC1L:
                                        (0174) _BPF4_4KHz_SetC1L:
                                        (0175)    RAM_PROLOGUE RAM_USE_CLASS_2
08D0: 21 1F    AND   A,0x1F             (0176)    and   A, BPF4_4KHz_CNUMMASK                   ; mask A to protect unchanged bits
08D2: 4F       MOV   X,SP               (0177)    mov   X, SP                                   ; define temp store location
08D3: 08       PUSH  A                  (0178)    push  A                                       ; put C1L value in temp store
08D4: 5D 80    MOV   A,REG[0x80]        (0179)    mov   A, reg[BPF4_4KHz_FILT_C1L_REG]          ; read current C1L
08D6: 21 E0    AND   A,0xE0             (0180)    and   A, ~BPF4_4KHz_CNUMMASK                  ; clear C1L bits in A
08D8: 2B 00    OR    A,[X+0]            (0181)    or    A, [X]                                  ; combine C1L value with balance of reg.
08DA: 60 80    MOV   REG[0x80],A        (0182)    mov   reg[BPF4_4KHz_FILT_C1L_REG], A          ; move complete value back to register
08DC: 18       POP   A                  (0183)    pop   A
08DD: 70 3F    AND   F,0x3F             
08DF: 71 C0    OR    F,0xC0             (0184)    RAM_EPILOGUE RAM_USE_CLASS_2
08E1: 7F       RET                      (0185)    ret
                                        (0186) .ENDSECTION
                                        (0187)    
                                        (0188) .SECTION
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;  FUNCTION NAME: BPF4_4KHz_SetC2L
                                        (0191) ;
                                        (0192) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0193) ;                 of the capacitor C2L
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  ARGUMENTS:    The A register contains a non-negative integer less than 32
                                        (0196) ;  RETURNS:
                                        (0197) ;  SIDE EFFECTS: 
                                        (0198) ;    The A and X registers may be modified by this or future implementations
                                        (0199) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0200) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0201) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0202) ;    functions.
                                        (0203) 
                                        (0204)  BPF4_4KHz_SetC2L:
                                        (0205) _BPF4_4KHz_SetC2L:
                                        (0206)    RAM_PROLOGUE RAM_USE_CLASS_2
08E2: 21 1F    AND   A,0x1F             (0207)    and   A, BPF4_4KHz_CNUMMASK                   ; mask A to protect unchanged bits
08E4: 4F       MOV   X,SP               (0208)    mov   X, SP                                   ; define temp store location
08E5: 08       PUSH  A                  (0209)    push  A                                       ; put C2L value in temp store
08E6: 5D 81    MOV   A,REG[0x81]        (0210)    mov   A, reg[BPF4_4KHz_FILT_C2L_REG]          ; read current C2L
08E8: 21 E0    AND   A,0xE0             (0211)    and   A, ~BPF4_4KHz_CNUMMASK                  ; clear C2L bits in A
08EA: 2B 00    OR    A,[X+0]            (0212)    or    A, [X]                                  ; combine C2L value with balance of reg.
08EC: 60 81    MOV   REG[0x81],A        (0213)    mov   reg[BPF4_4KHz_FILT_C2L_REG], A          ; move complete value back to register
08EE: 18       POP   A                  (0214)    pop   A
08EF: 70 3F    AND   F,0x3F             
08F1: 71 C0    OR    F,0xC0             (0215)    RAM_EPILOGUE RAM_USE_CLASS_2
08F3: 7F       RET                      (0216)    ret
                                        (0217) .ENDSECTION
                                        (0218)    
                                        (0219) .SECTION
                                        (0220) ;-----------------------------------------------------------------------------
                                        (0221) ;  FUNCTION NAME: BPF4_4KHz_SetC3L
                                        (0222) ;
                                        (0223) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0224) ;                 of the capacitor C3L
                                        (0225) ;-----------------------------------------------------------------------------
                                        (0226) ;  ARGUMENTS:    The A register contains a non-negative integer less than 32
                                        (0227) ;  RETURNS:
                                        (0228) ;  SIDE EFFECTS: 
                                        (0229) ;    The A and X registers may be modified by this or future implementations
                                        (0230) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0231) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0232) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0233) ;    functions.
                                        (0234)    
                                        (0235)  BPF4_4KHz_SetC3L:
                                        (0236) _BPF4_4KHz_SetC3L:
                                        (0237)    RAM_PROLOGUE RAM_USE_CLASS_2
08F4: 21 1F    AND   A,0x1F             (0238)    and   A, BPF4_4KHz_CNUMMASK                   ; mask A to protect unchanged bits
08F6: 4F       MOV   X,SP               (0239)    mov   X, SP                                   ; define temp store location
08F7: 08       PUSH  A                  (0240)    push  A                                       ; put C3L value in temp store
08F8: 5D 90    MOV   A,REG[0x90]        (0241)    mov   A, reg[BPF4_4KHz_FILT_C3L_REG]          ; read current C3L
08FA: 21 E0    AND   A,0xE0             (0242)    and   A, ~BPF4_4KHz_CNUMMASK                  ; clear C3L bits in A
08FC: 2B 00    OR    A,[X+0]            (0243)    or    A, [X]                                  ; combine C3L value with balance of reg.
08FE: 60 90    MOV   REG[0x90],A        (0244)    mov   reg[BPF4_4KHz_FILT_C3L_REG], A          ; move complete value back to register
0900: 18       POP   A                  (0245)    pop   A
0901: 70 3F    AND   F,0x3F             
0903: 71 C0    OR    F,0xC0             (0246)    RAM_EPILOGUE RAM_USE_CLASS_2
0905: 7F       RET                      (0247)    ret
                                        (0248) .ENDSECTION
                                        (0249)    
                                        (0250) .SECTION
                                        (0251) ;-----------------------------------------------------------------------------
                                        (0252) ;  FUNCTION NAME: BPF4_4KHz_SetC4L
                                        (0253) ;
                                        (0254) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0255) ;                 of the capacitor C4L
                                        (0256) ;-----------------------------------------------------------------------------
                                        (0257) ;  ARGUMENTS:    The A register contains a non-negative integer less than 32
                                        (0258) ;  RETURNS:
                                        (0259) ;  SIDE EFFECTS: 
                                        (0260) ;    The A and X registers may be modified by this or future implementations
                                        (0261) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0262) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0263) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0264) ;    functions. 
                                        (0265) 
                                        (0266)  BPF4_4KHz_SetC4L:
                                        (0267) _BPF4_4KHz_SetC4L:
                                        (0268)    RAM_PROLOGUE RAM_USE_CLASS_2
0906: 21 1F    AND   A,0x1F             (0269)    and   A, BPF4_4KHz_CNUMMASK                   ; mask A to protect unchanged bits
0908: 4F       MOV   X,SP               (0270)    mov   X, SP                                   ; define temp store location
0909: 08       PUSH  A                  (0271)    push  A                                       ; put C4L value in temp store
090A: 5D 92    MOV   A,REG[0x92]        (0272)    mov   A, reg[BPF4_4KHz_FILT_C4L_REG]          ; read current C4L
090C: 21 E0    AND   A,0xE0             (0273)    and   A, ~BPF4_4KHz_CNUMMASK                  ; clear C4L bits in A
090E: 2B 00    OR    A,[X+0]            (0274)    or    A, [X]                                  ; combine C4L value with balance of reg.
0910: 60 92    MOV   REG[0x92],A        (0275)    mov   reg[BPF4_4KHz_FILT_C4L_REG], A          ; move complete value back to register
0912: 18       POP   A                  (0276)    pop   A
0913: 70 3F    AND   F,0x3F             
0915: 71 C0    OR    F,0xC0             (0277)    RAM_EPILOGUE RAM_USE_CLASS_2
0917: 7F       RET                      (0278)    ret
                                        (0279) .ENDSECTION 
                                        (0280)   
                                        (0281) .SECTION
                                        (0282) ;-----------------------------------------------------------------------------
                                        (0283) ;  FUNCTION NAME: BPF4_4KHz_SetC1H
                                        (0284) ;
                                        (0285) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0286) ;                 of the capacitor C1H
                                        (0287) ;-----------------------------------------------------------------------------
                                        (0288) ;  ARGUMENTS:    The A register contains a non-negative integer less than 32
                                        (0289) ;  RETURNS:
                                        (0290) ;  SIDE EFFECTS: 
                                        (0291) ;    The A and X registers may be modified by this or future implementations
                                        (0292) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0293) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0294) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0295) ;    functions.
                                        (0296) 
                                        (0297)  BPF4_4KHz_SetC1H:
                                        (0298) _BPF4_4KHz_SetC1H:
                                        (0299)    RAM_PROLOGUE RAM_USE_CLASS_2
0918: 21 1F    AND   A,0x1F             (0300)    and   A, BPF4_4KHz_CNUMMASK                   ; mask A to protect unchanged bits
091A: 4F       MOV   X,SP               (0301)    mov   X, SP                                   ; define temp store location
091B: 08       PUSH  A                  (0302)    push  A                                       ; put C1H value in temp store
091C: 5D 94    MOV   A,REG[0x94]        (0303)    mov   A, reg[BPF4_4KHz_FILT_C1H_REG]          ; read current C1H
091E: 21 E0    AND   A,0xE0             (0304)    and   A, ~BPF4_4KHz_CNUMMASK                  ; clear C1H bits in A
0920: 2B 00    OR    A,[X+0]            (0305)    or    A, [X]                                  ; combine C1H value with balance of reg.
0922: 60 94    MOV   REG[0x94],A        (0306)    mov   reg[BPF4_4KHz_FILT_C1H_REG], A          ; move complete value back to register
0924: 18       POP   A                  (0307)    pop   A
0925: 70 3F    AND   F,0x3F             
0927: 71 C0    OR    F,0xC0             (0308)    RAM_EPILOGUE RAM_USE_CLASS_2
0929: 7F       RET                      (0309)    ret
                                        (0310) .ENDSECTION
                                        (0311)    
                                        (0312) .SECTION
                                        (0313) ;-----------------------------------------------------------------------------
                                        (0314) ;  FUNCTION NAME: BPF4_4KHz_SetC2H
                                        (0315) ;
                                        (0316) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0317) ;                 of the capacitor C2H
                                        (0318) ;-----------------------------------------------------------------------------
                                        (0319) ;  ARGUMENTS:    The A register contains a non-negative integer less than 32
                                        (0320) ;  RETURNS:
                                        (0321) ;  SIDE EFFECTS: 
                                        (0322) ;    The A and X registers may be modified by this or future implementations
                                        (0323) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0324) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0325) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0326) ;    functions.
                                        (0327)    
                                        (0328)  BPF4_4KHz_SetC2H:
                                        (0329) _BPF4_4KHz_SetC2H:
                                        (0330)    RAM_PROLOGUE RAM_USE_CLASS_2
092A: 21 1F    AND   A,0x1F             (0331)    and   A, BPF4_4KHz_CNUMMASK                   ; mask A to protect unchanged bits
092C: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; define temp store location
092D: 08       PUSH  A                  (0333)    push  A                                       ; put C2H value in temp store
092E: 5D 95    MOV   A,REG[0x95]        (0334)    mov   A, reg[BPF4_4KHz_FILT_C2H_REG]          ; read current C2H
0930: 21 E0    AND   A,0xE0             (0335)    and   A, ~BPF4_4KHz_CNUMMASK                  ; clear C2H bits in A
0932: 2B 00    OR    A,[X+0]            (0336)    or    A, [X]                                  ; combine C2H value with balance of reg.
0934: 60 95    MOV   REG[0x95],A        (0337)    mov   reg[BPF4_4KHz_FILT_C2H_REG], A          ; move complete value back to register
0936: 18       POP   A                  (0338)    pop   A
0937: 70 3F    AND   F,0x3F             
0939: 71 C0    OR    F,0xC0             (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
093B: 7F       RET                      (0340)    ret
                                        (0341) .ENDSECTION
                                        (0342)    
                                        (0343) .SECTION
                                        (0344) ;-----------------------------------------------------------------------------
                                        (0345) ;  FUNCTION NAME: BPF4_4KHz_SetC3H
                                        (0346) ;
                                        (0347) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0348) ;                 of the capacitor C3H
                                        (0349) ;-----------------------------------------------------------------------------
                                        (0350) ;  ARGUMENTS:    The A register contains a non-negative integer less than 32
                                        (0351) ;  RETURNS:
                                        (0352) ;  SIDE EFFECTS: 
                                        (0353) ;    The A and X registers may be modified by this or future implementations
                                        (0354) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0355) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0356) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0357) ;    functions.
                                        (0358)    
                                        (0359)  BPF4_4KHz_SetC3H:
                                        (0360) _BPF4_4KHz_SetC3H:
                                        (0361)    RAM_PROLOGUE RAM_USE_CLASS_2
093C: 21 1F    AND   A,0x1F             (0362)    and   A, BPF4_4KHz_CNUMMASK                   ; mask A to protect unchanged bits
093E: 4F       MOV   X,SP               (0363)    mov   X, SP                                   ; define temp store location
093F: 08       PUSH  A                  (0364)    push  A                                       ; put C3H value in temp store
0940: 5D 84    MOV   A,REG[0x84]        (0365)    mov   A, reg[BPF4_4KHz_FILT_C3H_REG]          ; read current C3H
0942: 21 E0    AND   A,0xE0             (0366)    and   A, ~BPF4_4KHz_CNUMMASK                  ; clear C3H bits in A
0944: 2B 00    OR    A,[X+0]            (0367)    or    A, [X]                                  ; combine C3H value with balance of reg.
0946: 60 84    MOV   REG[0x84],A        (0368)    mov   reg[BPF4_4KHz_FILT_C3H_REG], A          ; move complete value back to register
0948: 18       POP   A                  (0369)    pop   A
0949: 70 3F    AND   F,0x3F             
094B: 71 C0    OR    F,0xC0             (0370)    RAM_EPILOGUE RAM_USE_CLASS_2
094D: 7F       RET                      (0371)    ret
                                        (0372) .ENDSECTION
                                        (0373)    
                                        (0374) .SECTION
                                        (0375) ;-----------------------------------------------------------------------------
                                        (0376) ;  FUNCTION NAME: BPF4_4KHz_SetC4H
                                        (0377) ;
                                        (0378) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0379) ;                 of the capacitor C4H
                                        (0380) ;-----------------------------------------------------------------------------
                                        (0381) ;  ARGUMENTS:    The A register contains a non-negative integer less than 32
                                        (0382) ;  RETURNS:
                                        (0383) ;  SIDE EFFECTS: 
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389)    
                                        (0390)  BPF4_4KHz_SetC4H:
                                        (0391) _BPF4_4KHz_SetC4H:
                                        (0392)    RAM_PROLOGUE RAM_USE_CLASS_2
094E: 21 1F    AND   A,0x1F             (0393)    and   A, BPF4_4KHz_CNUMMASK                   ; mask A to protect unchanged bits
0950: 4F       MOV   X,SP               (0394)    mov   X, SP                                   ; define temp store location
0951: 08       PUSH  A                  (0395)    push  A                                       ; put C4H value in temp store
0952: 5D 86    MOV   A,REG[0x86]        (0396)    mov   A, reg[BPF4_4KHz_FILT_C4H_REG]          ; read current C4H
0954: 21 E0    AND   A,0xE0             (0397)    and   A, ~BPF4_4KHz_CNUMMASK                  ; clear C4H bits in A
0956: 2B 00    OR    A,[X+0]            (0398)    or    A, [X]                                  ; combine C4H value with balance of reg.
0958: 60 86    MOV   REG[0x86],A        (0399)    mov   reg[BPF4_4KHz_FILT_C4H_REG], A          ; move complete value back to register
095A: 18       POP   A                  (0400)    pop   A
095B: 70 3F    AND   F,0x3F             
095D: 71 C0    OR    F,0xC0             (0401)    RAM_EPILOGUE RAM_USE_CLASS_2
095F: 7F       RET                      (0402)    ret
(0403) .ENDSECTION
(0404) 
(0405) ; End of File BPF4_4KHz.asm
FILE: lib\amux4_mic.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   AMUX4_mic.asm
                                        (0004) ;;  Version: 1.4, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: AMux4 User Module software implementation file devices.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) 
                                        (0023) include "AMUX4_mic.inc"
                                        (0024) include "m8c.inc"
                                        (0025) include "memory.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  AMUX4_mic_InputSelect
                                        (0031) export _AMUX4_mic_InputSelect
                                        (0032) 
                                        (0033) export  AMUX4_mic_Start
                                        (0034) export _AMUX4_mic_Start
                                        (0035) 
                                        (0036) export  AMUX4_mic_Stop
                                        (0037) export _AMUX4_mic_Stop
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  EQUATES
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) MUXMASK:                     equ 03h
                                        (0044) 
                                        (0045) AREA UserModules (ROM, REL)
                                        (0046) .SECTION
                                        (0047) ;-----------------------------------------------------------------------------
                                        (0048) ;  FUNCTION NAME: AMUX4_mic_InputSelect
                                        (0049) ;
                                        (0050) ;  DESCRIPTION:
                                        (0051) ;    Place the signal from one of four port0 pins on the Analog Column bus.
                                        (0052) ;
                                        (0053) ;-----------------------------------------------------------------------------
                                        (0054) ;
                                        (0055) ;  ARGUMENTS:
                                        (0056) ;    A contains the mux input control value
                                        (0057) ;
                                        (0058) ;      Input           Code
                                        (0059) ;   Mux input 0,1       00h
                                        (0060) ;   Mux input 2,3       01h
                                        (0061) ;   Mux input 4,5       02h
                                        (0062) ;   Mux input 6,7       03h
                                        (0063) ;
                                        (0064) ;  RETURNS: none
                                        (0065) ;
                                        (0066) ;  SIDE EFFECTS:
                                        (0067) ;    The A and X registers may be modified by this or future implementations
                                        (0068) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0069) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0070) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0071) ;    functions.
                                        (0072) ;
                                        (0073)  AMUX4_mic_InputSelect:
                                        (0074) _AMUX4_mic_InputSelect:
                                        (0075)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0076) 	
                                        (0077) IF (AMUX4_mic_COL_COUNT)
                                        (0078) 	M8C_SetBank1      ; ACE_AMX_IN is in Bank 1
                                        (0079) ENDIF
                                        (0080) 	
0960: 21 03    AND   A,0x3              (0081)     and  A, MUXMASK                    ; Mask off only valid port0 input bits
0962: 57 00    MOV   X,0x0              (0082)     mov  X,AMUX4_mic_MUX_COL
                                        (0083) .AMUX4_ShiftIt:                         ; Shift value to correct bit position for Mux
0964: 79       DEC   X                  (0084)     dec  X
0965: C0 05    JC    0x096B             (0085)     jc   .AMUX4_SetIt
0967: 64       ASL   A                  (0086)     asl  A
0968: 64       ASL   A                  (0087)     asl  A
0969: 8F FA    JMP   0x0964             (0088)     jmp  .AMUX4_ShiftIt                ; Loop until bits shifted to 2 LSBs
                                        (0089) 
                                        (0090) .AMUX4_SetIt:
096B: 4F       MOV   X,SP               (0091)     mov  X,SP                          ; Get current stack location
096C: 08       PUSH  A                  (0092)     push A                             ; Save a to OR it to AMX_IN later	
                                        (0093) IF (AMUX4_mic_COL_COUNT)
                                        (0094) 	mov  A, reg[ACE_AMX_IN]                 ; Get current value of mux control register    
                                        (0095) ELSE
096D: 5D 60    MOV   A,REG[0x60]        (0096) 	mov  A, reg[AMX_IN]                 ; Get current value of mux control register
                                        (0097) ENDIF
096F: 21 FC    AND   A,0xFC             (0098)     and  A,~AMUX4_mic_MUX_MASK         ; Mask off the bits for this Mux
0971: 2B 00    OR    A,[X+0]            (0099)     or   A,[X]                         ; OR in the mux control bits
                                        (0100) IF (AMUX4_mic_COL_COUNT)
                                        (0101) 	mov  reg[ACE_AMX_IN], A                 ; Get current value of mux control register    
                                        (0102) ELSE
0973: 60 60    MOV   REG[0x60],A        (0103) 	mov  reg[AMX_IN], A                 ; Write out mux value to mux control register
                                        (0104) ENDIF	
0975: 18       POP   A                  (0105)     pop  A                             ; Restore the stack
                                        (0106) 	
                                        (0107) IF (AMUX4_mic_COL_COUNT)
                                        (0108) 	M8C_SetBank0
                                        (0109) ENDIF
0976: 70 3F    AND   F,0x3F             
0978: 71 C0    OR    F,0xC0             (0110)     RAM_EPILOGUE RAM_USE_CLASS_2
097A: 7F       RET                      (0111)     ret
                                        (0112) .ENDSECTION
                                        (0113) 
                                        (0114) .SECTION
                                        (0115) ;-----------------------------------------------------------------------------
                                        (0116) ;  FUNCTION NAME: AMUX4_mic_Start
                                        (0117) ;
                                        (0118) ;  DESCRIPTION:
                                        (0119) ;   This function does nothing at this time.  It is only here for
                                        (0120) ;   future compatibility.
                                        (0121) ;
                                        (0122) ;-----------------------------------------------------------------------------
                                        (0123) ;
                                        (0124) ;  ARGUMENTS: none
                                        (0125) ;
                                        (0126) ;  RETURNS: none
                                        (0127) ;
                                        (0128) ;  SIDE EFFECTS:
                                        (0129) ;    The A and X registers may be modified by this or future implementations
                                        (0130) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0131) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0132) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0133) ;    functions.
                                        (0134) ;
                                        (0135)  AMUX4_mic_Start:
                                        (0136) _AMUX4_mic_Start:
                                        (0137)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0138)     RAM_EPILOGUE RAM_USE_CLASS_1
097B: 7F       RET                      (0139)     ret
                                        (0140) .ENDSECTION
                                        (0141) 
                                        (0142) .SECTION
                                        (0143) ;-----------------------------------------------------------------------------
                                        (0144) ;  FUNCTION NAME: AMUX4_mic_Stop
                                        (0145) ;
                                        (0146) ;  DESCRIPTION:
                                        (0147) ;   This function does nothing at this time.  It is only here for
                                        (0148) ;   future compatibility.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) ;
                                        (0152) ;  ARGUMENTS:  none
                                        (0153) ;
                                        (0154) ;  RETURNS: none
                                        (0155) ;
                                        (0156) ;  SIDE EFFECTS:
                                        (0157) ;    The A and X registers may be modified by this or future implementations
                                        (0158) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0159) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0160) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0161) ;    functions.
                                        (0162) ;
                                        (0163)  AMUX4_mic_Stop:
                                        (0164) _AMUX4_mic_Stop:
                                        (0165)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0166)     RAM_EPILOGUE RAM_USE_CLASS_1
097C: 7F       RET                      (0167)     ret
(0168) .ENDSECTION
(0169) ; End of File AMUX4_mic.asm
FILE: lib\adcincvr_potint.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   ADCINCVR_potINT.asm
                                        (0004) ;;  Version: 3.1, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: ADCINCVR Interrupt Service Routines
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "ADCINCVR_pot.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export _ADCINCVR_pot_CNT_ISR
                                        (0021) export _ADCINCVR_pot_PWM16_ISR
                                        (0022) export  ADCINCVR_pot_cCounterU
                                        (0023) export _ADCINCVR_pot_iResult
                                        (0024) export  ADCINCVR_pot_iResult
                                        (0025) export _ADCINCVR_pot_bfStatus
                                        (0026) export  ADCINCVR_pot_bfStatus
                                        (0027) export  ADCINCVR_pot_bSampC
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) AREA InterruptRAM(RAM, REL, CON)
                                        (0033) 
                                        (0034)  ADCINCVR_pot_cCounterU:     BLK   1  ;The Upper byte of the Counter
                                        (0035) _ADCINCVR_pot_iResult:
                                        (0036)  ADCINCVR_pot_iResult:       BLK   2  ;A/D value
                                        (0037) _ADCINCVR_pot_bfStatus:
                                        (0038)  ADCINCVR_pot_bfStatus:      BLK   1  ;Data Valid Flag
                                        (0039)  ADCINCVR_pot_bSampC:        BLK   1  ;# of times to run A/D
                                        (0040) 
                                        (0041) 
                                        (0042) ;-----------------------------------------------
                                        (0043) ;  EQUATES and TABLES
                                        (0044) ;-----------------------------------------------
                                        (0045) LowByte:   equ 1
                                        (0046) HighByte:  equ 0
                                        (0047) 
                                        (0048) 
                                        (0049) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0050) ;---------------------------------------------------
                                        (0051) ; Insert your custom declarations below this banner
                                        (0052) ;---------------------------------------------------
                                        (0053) 
                                        (0054) ;------------------------
                                        (0055) ; Includes
                                        (0056) ;------------------------
                                        (0057) 
                                        (0058) 	
                                        (0059) ;------------------------
                                        (0060) ;  Constant Definitions
                                        (0061) ;------------------------
                                        (0062) 
                                        (0063) 
                                        (0064) ;------------------------
                                        (0065) ; Variable Allocation
                                        (0066) ;------------------------
                                        (0067) 
                                        (0068) 
                                        (0069) ;---------------------------------------------------
                                        (0070) ; Insert your custom declarations above this banner
                                        (0071) ;---------------------------------------------------
                                        (0072) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0073) 
                                        (0074) AREA UserModules (ROM, REL)
                                        (0075) 
                                        (0076) .LITERAL
                                        (0077) ADCINCVR_potMaxNegX4Table:
                                        (0078) ; Bits  7    8    9   10   11   12   13
                                        (0079)    DB  FFh, FEh, FCh, F8h, F0h, E0h, C0h
                                        (0080) 
                                        (0081) ADCINCVR_potMaxPosX4Table:
                                        (0082) IF (ADCINCVR_pot_DATA_FORMAT)
                                        (0083) ; Bits (signed)    7    8    9   10   11   12   13
                                        (0084)               DB  01h, 02h, 04h, 08h, 10h, 20h, 40h
                                        (0085) ELSE
                                        (0086) ; Bits (unsigned)  7    8    9   10   11   12   13
                                        (0087)               DB  02h, 04h, 08h, 10h, 20h, 40h, 80h
                                        (0088) 
                                        (0089)  ENDIF
                                        (0090) .ENDLITERAL
                                        (0091) 
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) ;  FUNCTION NAME: _ADCINCVR_pot_CNT_ISR (Counter8 Interrupt)
                                        (0094) ;
                                        (0095) ;
                                        (0096) ;  DESCRIPTION:
                                        (0097) ;     Increment the upper (software) half on the counter whenever the
                                        (0098) ;     lower (hardware) half of the counter underflows.  This counter
                                        (0099) ;     should start out at the most negative value (0xFF).
                                        (0100) ;
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;
                                        (0103) _ADCINCVR_pot_CNT_ISR:

098B: 76 09    INC   [0x9]              (0104)    inc [ADCINCVR_pot_cCounterU]
                                        (0105)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0106)    ;---------------------------------------------------
                                        (0107)    ; Insert your custom code below this banner
                                        (0108)    ;---------------------------------------------------
                                        (0109)    ;   NOTE: interrupt service routines must preserve
                                        (0110)    ;   the values of the A and X CPU registers.
                                        (0111) 
                                        (0112)    ;---------------------------------------------------
                                        (0113)    ; Insert your custom code above this banner
                                        (0114)    ;---------------------------------------------------
                                        (0115)    ;@PSoC_UserCode_END@ (Do not change this line.)
098D: 7E       RETI                     (0116)    reti
                                        (0117) 
                                        (0118) 
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: _ADCINCVR_pot_PWM16_ISR  (PWM16 Interrupt)
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     This ISR is called when the ADC has completed and integrate cycle.
                                        (0124) ;     The ADC value is calculated and stored in a global location before
                                        (0125) ;     the end of the ISR.
                                        (0126) ;
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;
                                        (0129) _ADCINCVR_pot_PWM16_ISR:
098E: 41 2F FE AND   REG[0x2F],0xFE     (0130)    and   reg[ADCINCVR_pot_bCounter_CR0], ~ADCINCVR_pot_fDBLK_ENABLE  ; Disable Counter
                                        (0131) IF ADCINCVR_pot_NoAZ
0991: 43 9A 20 OR    REG[0x9A],0x20     (0132)    or    reg[ADCINCVR_pot_bfAtoDcr2], ADCINCVR_pot_fAutoZero      ; Put Integrator in AutoZero
                                        (0133) ENDIF
0994: 43 9B 10 OR    REG[0x9B],0x10     (0134)    or   reg[ADCINCVR_pot_bfAtoDcr3],ADCINCVR_pot_fFSW0        ; Put Integrator in reset
                                        (0135) 
                                        (0136)                                                            ; Enable interrupts for a short period of time just in case.
                                        (0137)                                                            ; Make sure we didn't have a counter interrupt ready to fire
0997: 71 01    OR    F,0x1              (0138)    M8C_EnableGInt
0999: 40       NOP                      (0139)    nop                                                     ; Wait a couple cycles
099A: 70 FE    AND   F,0xFE             (0140)    M8C_DisableGInt                                         ; Disable interrupt, read to complete processing
099C: 08       PUSH  A                  (0141)    push  A                                                 ; Save the Accumulator
099D: 5D 2C    MOV   A,REG[0x2C]        (0142)    mov   A,reg[ADCINCVR_pot_bCount]                        ; Read counter value  (Bogus read puts value in Period register)
099F: 5D 2E    MOV   A,REG[0x2E]        (0143)    mov   A,reg[ADCINCVR_pot_bCompare]                      ; Read counter value
09A1: 78       DEC   A                  (0144)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
09A2: 73       CPL   A                  (0145)    cpl   A                                                 ; Invert the value
09A3: D0 03    JNC   0x09A7             (0146)    jnc   ADCINCVR_pot_INT_CALCV                            ; if carry, then inc MSB as well
09A5: 76 09    INC   [0x9]              (0147)    inc   [ADCINCVR_pot_cCounterU]
                                        (0148) ADCINCVR_pot_INT_CALCV:
09A7: 53 0B    MOV   [0xB],A            (0149)    mov   [(ADCINCVR_pot_iResult + LowByte)], A             ; Store LSB value
09A9: 51 09    MOV   A,[0x9]            (0150)    mov   A, [ADCINCVR_pot_cCounterU]                       ; Store MSB from temp counter
09AB: 53 0A    MOV   [0xA],A            (0151)    mov   [(ADCINCVR_pot_iResult + HighByte)], A
                                        (0152)                                                            ; The new value has been stored,
                                        (0153)                                                            ; so get counters ready for next reading first.
09AD: 62 2D FF MOV   REG[0x2D],0xFF     (0154)    mov   reg[ADCINCVR_pot_bPeriod], ffh                    ; Initialize counter to FF - Set to overflow after 256 counts
09B0: 43 2F 01 OR    REG[0x2F],0x1      (0155)    or    reg[ADCINCVR_pot_bCounter_CR0],ADCINCVR_pot_fDBLK_ENABLE  ; Enable Counter
                                        (0156) 
                                        (0157) IF (ADCINCVR_pot_DATA_FORMAT)                              ; Only check for Negative numbers if SIGNED result
09B3: 51 0C    MOV   A,[0xC]            (0158)    mov   A, [ADCINCVR_pot_bfStatus]                        ; Get Status with Resolution
09B5: 21 0F    AND   A,0xF              (0159)    and   A, ADCINCVR_pot_bRES_MASK                         ; Mask of resolution
09B7: FF C4    INDEX 0x097D             (0160)    index ADCINCVR_potMaxNegX4Table                         ; Get Maximum negative value from table
09B9: 53 09    MOV   [0x9],A            (0161)    mov   [ADCINCVR_pot_cCounterU], A                       ; Place result back into MSB of counter
                                        (0162) ELSE
                                        (0163)    mov   [ADCINCVR_pot_cCounterU], 00h                     ; Place result back into MSB of counter
                                        (0164) ENDIF
                                        (0165) 
                                        (0166)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0167)    ;---------------------------------------------------
                                        (0168)    ; If the input is muxed with multiple inputs
                                        (0169)    ; this is a good place to change inputs.
                                        (0170)    ; Insert your custom code below this banner
                                        (0171)    ;---------------------------------------------------
                                        (0172)    ;   NOTE: interrupt service routines must preserve
                                        (0173)    ;   the values of the A and X CPU registers. At this
                                        (0174)    ;   point A is already preserved and will be restored;
                                        (0175)    ;   however, if you use X, you must take care of it
                                        (0176)    ;   here!
                                        (0177) 
                                        (0178)    ;---------------------------------------------------
                                        (0179)    ; Insert your custom code above this banner
                                        (0180)    ;---------------------------------------------------
                                        (0181)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0182) 
09BB: 41 9B EF AND   REG[0x9B],0xEF     (0183)    and   reg[ADCINCVR_pot_bfAtoDcr3],~ADCINCVR_pot_fFSW0   ; Take Integrator out of reset
                                        (0184) IF ADCINCVR_pot_NoAZ
09BE: 41 9A DF AND   REG[0x9A],0xDF     (0185)    and   reg[ADCINCVR_pot_bfAtoDcr2],~ADCINCVR_pot_fAutoZero  ; Take Integrator out of AutoZero
                                        (0186) ENDIF
                                        (0187) 
                                        (0188)    ;****************************************************************************
                                        (0189)    ;M8C_EnableGInt            ; May want to re-enable interrupts at this point,
                                        (0190)    ;                          ; if stack space isn't at a premium.
                                        (0191)    ; NOTE:  this will make system more responsive but, will increase the
                                        (0192)    ;        overall processing time of the A/D calctime.  If an interrupt is
                                        (0193)    ;        taken, it must return within the specified CalcTime to guarantee
                                        (0194)    ;        successful acquisition of the next byte.
                                        (0195)    ;****************************************************************************
                                        (0196) IF (ADCINCVR_pot_DATA_FORMAT)                    ; Only check for Negative numbers if SIGNED result
                                        (0197) 
                                        (0198)                                                  ; Negative Overflow Check
09C1: 47 0A 80 TST   [0xA],0x80         (0199)    tst   [(ADCINCVR_pot_iResult + HighByte)],80h
09C4: B0 17    JNZ   0x09DC             (0200)    jnz   ADCINCVR_pot_NOT_POVFL2
                                        (0201) 
                                        (0202) ENDIF
                                        (0203)                                                  ; Postive Overflow Check
                                        (0204)                                                  ; Get MSB of Max Positive value x4 + 1
09C6: 51 0C    MOV   A,[0xC]            (0205)    mov   A,[ADCINCVR_pot_bfStatus]               ; Get Status with Resolution
09C8: 21 0F    AND   A,0xF              (0206)    and   A,ADCINCVR_pot_bRES_MASK                ; Mask of resolution normalized to 0
09CA: FF B8    INDEX 0x0984             (0207)    index ADCINCVR_potMaxPosX4Table               ; Get Maximum positive value x4 + 1 from table
09CC: 08       PUSH  A                  (0208)    push  A
09CD: 22 0A    AND   A,[0xA]            (0209)    and   A, [(ADCINCVR_pot_iResult + HighByte)]
09CF: A0 0B    JZ    0x09DB             (0210)    jz    ADCINCVR_pot_NOT_POVFL
                                        (0211)                                                  ; Positive overflow, fix it - set to Max Positive + 1
09D1: 18       POP   A                  (0212)    pop   A
09D2: 11 01    SUB   A,0x1              (0213)    sub   A, 01h
                                        (0214) 
                                        (0215)                                                  ; Force most positive * 4 into result
09D4: 53 0A    MOV   [0xA],A            (0216)    mov   [(ADCINCVR_pot_iResult + HighByte)], A
09D6: 55 0B FF MOV   [0xB],0xFF         (0217)    mov   [(ADCINCVR_pot_iResult + LowByte)], ffh
09D9: 80 02    JMP   0x09DC             (0218)    jmp   ADCINCVR_pot_NOT_POVFL2
                                        (0219) ADCINCVR_pot_NOT_POVFL:
09DB: 18       POP   A                  (0220)    pop   A
                                        (0221) 
                                        (0222) ADCINCVR_pot_NOT_POVFL2:
09DC: 68 0A    ASR   [0xA]              (0223)    asr   [(ADCINCVR_pot_iResult + HighByte)]     ; Shift MSB and LSB right twice to divide by four
09DE: 6E 0B    RRC   [0xB]              (0224)    rrc   [(ADCINCVR_pot_iResult + LowByte)]      ; Remember digital clock 4 times analog clock
09E0: 68 0A    ASR   [0xA]              (0225)    asr   [(ADCINCVR_pot_iResult + HighByte)]
09E2: 6E 0B    RRC   [0xB]              (0226)    rrc   [(ADCINCVR_pot_iResult + LowByte)]
                                        (0227) 
                                        (0228)    ;@PSoC_UserCode_BODY_3@ (Do not change this line.)
                                        (0229)    ;---------------------------------------------------
                                        (0230)    ; Data is ready at this point.
                                        (0231)    ; If processing Data at Interrupt level - add
                                        (0232)    ; User Code to handle the data below this banner
                                        (0233)    ;---------------------------------------------------
                                        (0234)    ;   NOTE: interrupt service routines must preserve
                                        (0235)    ;   the values of the A and X CPU registers. At this
                                        (0236)    ;   point A is already preserved and will be restored;
                                        (0237)    ;   however, if you use X, you must take care of it
                                        (0238)    ;   here!
                                        (0239) 
                                        (0240)    ;---------------------------------------------------
                                        (0241)    ; Insert your custom code above this banner
                                        (0242)    ;---------------------------------------------------
                                        (0243)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0244) 
09E4: 18       POP   A                  (0245)    pop   A                                       ; Restore A, not used any more
                                        (0246) 
09E5: 2E 0C 10 OR    [0xC],0x10         (0247)    or    [ADCINCVR_pot_bfStatus],ADCINCVR_pot_fDATA_READY  ; Set Data ready bit
                                        (0248) 
09E8: 47 0D FF TST   [0xD],0xFF         (0249)    tst   [ADCINCVR_pot_bSampC], ffh              ; If sample_counter == 0 -->> continuous data collection
09EB: A0 17    JZ    0x0A03             (0250)    jz    ADCINCVR_pot_END_PWM16_ISR
                                        (0251) 
09ED: 7A 0D    DEC   [0xD]              (0252)    dec   [ADCINCVR_pot_bSampC]                   ; Dec sample counter and check for zero
09EF: B0 13    JNZ   0x0A03             (0253)    jnz   ADCINCVR_pot_END_PWM16_ISR
                                        (0254) 
                                        (0255)    ;**********************************************
                                        (0256)    ; Turn off ADC
                                        (0257)    ;**********************************************
09F1: 41 33 FE AND   REG[0x33],0xFE     (0258)    and   reg[ADCINCVR_pot_fPWM_LSB_CR0], ~ADCINCVR_pot_fDBLK_ENABLE     ; Disable the PWM
09F4: 41 2F FE AND   REG[0x2F],0xFE     (0259)    and   reg[ADCINCVR_pot_bCounter_CR0], ~ADCINCVR_pot_fDBLK_ENABLE           ; Disable the Counter
                                        (0260) IF ADCINCVR_pot_NoAZ
09F7: 43 9A 20 OR    REG[0x9A],0x20     (0261)    or    reg[ADCINCVR_pot_bfAtoDcr2], ADCINCVR_pot_fAutoZero   ; Put the Integrator into Autozero mode
                                        (0262) ENDIF
09FA: 43 9B 10 OR    REG[0x9B],0x10     (0263)    or    reg[ADCINCVR_pot_bfAtoDcr3], ADCINCVR_pot_fFSW0       ; Put Integrator into reset
09FD: 41 E1 DF AND   REG[0xE1],0xDF     (0264)    and   reg[ADCINCVR_pot_bfPWM16_INT_REG], ~ADCINCVR_pot_bfPWM16_Mask      ; Disable interrupts
0A00: 41 E1 F7 AND   REG[0xE1],0xF7     (0265)    and   reg[ADCINCVR_pot_bfCounter_INT_REG], ~ADCINCVR_pot_bfCounter_Mask
                                        (0266) 
                                        (0267) ADCINCVR_pot_END_PWM16_ISR:
0A03: 7E       RETI                     (0268)    reti
(0269) 
(0270) ; End of File ADCINCVR_potINT.asm
FILE: lib\adcincvr_pot.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  ADCINCVR_pot.asm
                                        (0004) ;;  Version: 3.1, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: ADCINCVR User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "ADCINCVR_pot.inc"
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  ADCINCVR_pot_Start
                                        (0030) export _ADCINCVR_pot_Start
                                        (0031) export  ADCINCVR_pot_SetPower
                                        (0032) export _ADCINCVR_pot_SetPower
                                        (0033) export  ADCINCVR_pot_Stop
                                        (0034) export _ADCINCVR_pot_Stop
                                        (0035) export  ADCINCVR_pot_GetSamples
                                        (0036) export _ADCINCVR_pot_GetSamples
                                        (0037) export  ADCINCVR_pot_StopAD
                                        (0038) export _ADCINCVR_pot_StopAD
                                        (0039) export  ADCINCVR_pot_fIsData
                                        (0040) export _ADCINCVR_pot_fIsData
                                        (0041) export  ADCINCVR_pot_fIsDataAvailable
                                        (0042) export _ADCINCVR_pot_fIsDataAvailable
                                        (0043) export  ADCINCVR_pot_iGetData
                                        (0044) export _ADCINCVR_pot_iGetData
                                        (0045) export  ADCINCVR_pot_ClearFlag
                                        (0046) export _ADCINCVR_pot_ClearFlag
                                        (0047) export  ADCINCVR_pot_iGetDataClearFlag
                                        (0048) export _ADCINCVR_pot_iGetDataClearFlag
                                        (0049) export  ADCINCVR_pot_SetResolution
                                        (0050) export _ADCINCVR_pot_SetResolution
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ;  EQUATES
                                        (0054) ;-----------------------------------------------
                                        (0055) LowByte:       equ 1
                                        (0056) HighByte:      equ 0
                                        (0057) 
                                        (0058) ; Calctime parameters
                                        (0059) wCalcTime:     equ   ADCINCVR_pot_bCALCTIME
                                        (0060) 
                                        (0061) AREA UserModules (ROM, REL)
                                        (0062) 
                                        (0063) .SECTION
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;  FUNCTION NAME: ADCINCVR_pot_Start
                                        (0066) ;  FUNCTION NAME: ADCINCVR_pot_SetPower
                                        (0067) ;
                                        (0068) ;  DESCRIPTION:
                                        (0069) ;  Applies power setting to the module's analog PSoc block.
                                        (0070) ;
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;
                                        (0073) ;  ARGUMENTS:
                                        (0074) ;   A  Contains power level setting 0 to 3
                                        (0075) ;
                                        (0076) ;  RETURNS:  NA
                                        (0077) ;
                                        (0078) ;  SIDE EFFECTS:
                                        (0079) ;    The A and X registers may be modified by this or future implementations
                                        (0080) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0081) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0082) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0083) ;    functions.
                                        (0084) ;          
                                        (0085) ;    Currently only the page pointer registers listed below are modified:
                                        (0086) ;          CUR_PP
                                        (0087) ;
                                        (0088)  ADCINCVR_pot_Start:
                                        (0089) _ADCINCVR_pot_Start:
                                        (0090)  ADCINCVR_pot_SetPower:
                                        (0091) _ADCINCVR_pot_SetPower:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_2
0A04: 62 D0 00 MOV   REG[0xD0],0x0      (0094)    RAM_SETPAGE_CUR >ADCINCVR_pot_bfStatus
                                        (0095)    
0A07: 4F       MOV   X,SP               (0096)    mov   X, SP                                       ; Get location of next location on stack
0A08: 21 03    AND   A,0x3              (0097)    and   A,ADCINCVR_pot_bfPOWERMASK                  ; Mask only the valid power setting bits
0A0A: 08       PUSH  A                  (0098)    push  A                                           ; Save power value on temp location
0A0B: 5D 9B    MOV   A,REG[0x9B]        (0099)    mov   A, reg[ADCINCVR_pot_bfAtoDcr3]              ; Get current value of AtoDcr3
0A0D: 21 FC    AND   A,0xFC             (0100)    and   A, ~ADCINCVR_pot_bfPOWERMASK                ; Mask off old power value
0A0F: 2B 00    OR    A,[X+0]            (0101)    or    A, [X]                                      ; OR in new power value
0A11: 29 F0    OR    A,0xF0             (0102)    or    A, f0h                                      ; Make sure other register is set correctly
0A13: 60 9B    MOV   REG[0x9B],A        (0103)    mov   reg[ADCINCVR_pot_bfAtoDcr3], A              ; Reload CR with new power value
                                        (0104) 
0A15: 49 9A 01 TST   REG[0x9A],0x1      (0105)    tst   reg[ADCINCVR_pot_bfAtoDcr2], ADCINCVR_pot_fRES_SET
0A18: A0 05    JZ    0x0A1E             (0106)    jz    .DoNotLoadRes
0A1A: 50 04    MOV   A,0x4              (0107)    mov   A,ADCINCVR_pot_bNUMBITS - ADCINCVR_pot_bMINRES         ; get and set the resolution
0A1C: 53 0C    MOV   [0xC],A            (0108)    mov   [ADCINCVR_pot_bfStatus], A              ; place it in the status variable
                                        (0109) .DoNotLoadRes:
0A1E: 18       POP   A                  (0110)    pop   A                                           ; Restore the stack and power value
0A1F: 70 3F    AND   F,0x3F             
0A21: 71 C0    OR    F,0xC0             (0111)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_4
0A23: 7F       RET                      (0113)    ret
                                        (0114) .ENDSECTION
                                        (0115) 
                                        (0116) .SECTION
                                        (0117) ;-----------------------------------------------------------------------------
                                        (0118) ;  FUNCTION NAME: ADCINCVR_pot_Stop
                                        (0119) ;
                                        (0120) ;  DESCRIPTION:
                                        (0121) ;  Removes power from the module's analog PSoc block, but the digital
                                        (0122) ;  blocks keep on running.
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) ;  ARGUMENTS: None
                                        (0127) ;
                                        (0128) ;  RETURNS:   NA
                                        (0129) ;
                                        (0130) ;  SIDE EFFECTS:
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  ADCINCVR_pot_Stop:
                                        (0138) _ADCINCVR_pot_Stop:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
0A24: 41 9B FC AND   REG[0x9B],0xFC     (0140)    and   reg[ADCINCVR_pot_bfAtoDcr3], ~ADCINCVR_pot_bfPOWERMASK
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
0A27: 7F       RET                      (0142)    ret
                                        (0143) .ENDSECTION
                                        (0144) 
                                        (0145) .SECTION
                                        (0146) ;-----------------------------------------------------------------------------
                                        (0147) ;  FUNCTION NAME: ADCINCVR_pot_Get_Samples
                                        (0148) ;
                                        (0149) ;  DESCRIPTION:
                                        (0150) ;  Starts the A/D convertor and will place data is memory.  A flag
                                        (0151) ;  is set whenever a new data value is available.
                                        (0152) ;
                                        (0153) ;-----------------------------------------------------------------------------
                                        (0154) ;
                                        (0155) ;  ARGUMENTS:
                                        (0156) ;  A  Number of samples to be taken.  A zero will cause the ADC to run
                                        (0157) ;     continuously.
                                        (0158) ;
                                        (0159) ;  RETURNS:  NA
                                        (0160) ;
                                        (0161) ;  SIDE EFFECTS:
                                        (0162) ;    The A and X registers may be modified by this or future implementations
                                        (0163) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0164) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0165) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0166) ;    functions.
                                        (0167) ;          
                                        (0168) ;    Currently only the page pointer registers listed below are modified:
                                        (0169) ;          CUR_PP
                                        (0170) ;
                                        (0171)  ADCINCVR_pot_GetSamples:
                                        (0172) _ADCINCVR_pot_GetSamples:
                                        (0173)    RAM_PROLOGUE RAM_USE_CLASS_4
0A28: 62 D0 00 MOV   REG[0xD0],0x0      (0174)    RAM_SETPAGE_CUR >ADCINCVR_pot_bfStatus
0A2B: 53 0D    MOV   [0xD],A            (0175)    mov   [ADCINCVR_pot_bSampC], A                          ; Store sample count
                                        (0176)                                                            ; Interrupts, Put A/D in reset
0A2D: 51 0C    MOV   A,[0xC]            (0177)    mov   A,[ADCINCVR_pot_bfStatus]                         ; get and set the resolution
0A2F: 21 0F    AND   A,0xF              (0178)    and   A,ADCINCVR_pot_bRES_MASK
0A31: 01 07    ADD   A,0x7              (0179)    add   A,ADCINCVR_pot_bMINRES
0A33: 90 5A    CALL  0x0A8F             (0180)    call  ADCINCVR_pot_SetResolution
                                        (0181) 
                                        (0182) ADCINCVR_pot_LoadMSBCounter:                               ; The PWM has been setup by SetResolution, now set the upper
                                        (0183)                                                            ; counter which will be the same as the period.
                                        (0184)                                                            ; Reset MSB of counter to most negative value
                                        (0185) 
0A35: 5D 36    MOV   A,REG[0x36]        (0186)    mov   A,reg[ADCINCVR_pot_bPWM_IntTime_MSB]              ; Get MSB of PWM and move it into RAM
0A37: 53 09    MOV   [0x9],A            (0187)    mov   [ADCINCVR_pot_cCounterU], A                       ; Use counter as temp location
0A39: 50 00    MOV   A,0x0              (0188)    mov   A, 00h                                            ; Load A with zero for the calculation
0A3B: 12 09    SUB   A,[0x9]            (0189)    sub   A, [ADCINCVR_pot_cCounterU]                       ; 0 - MSB_PWM = MSB_of_most_neg_value
0A3D: 67       ASR   A                  (0190)    asr   A                                                 ; Half the range (+ and -)
                                        (0191) IF (ADCINCVR_pot_DATA_FORMAT)
0A3E: 53 09    MOV   [0x9],A            (0192)    mov   [ADCINCVR_pot_cCounterU], A                       ; Place result back into MSB of counter
                                        (0193) ELSE
                                        (0194)    mov   [ADCINCVR_pot_cCounterU], 00h                     ; Always start at zero for unsigned values
                                        (0195) ENDIF
0A40: 5D 32    MOV   A,REG[0x32]        (0196)    mov   A, reg[ADCINCVR_pot_bPWM_IntTime_LSB]             ; Dummy Read  - required do not remove
0A42: 62 2D FF MOV   REG[0x2D],0xFF     (0197)    mov   reg[ADCINCVR_pot_bPeriod], FFh                    ; Make sure counter starts at FF
                                        (0198) 
0A45: 41 9B EF AND   REG[0x9B],0xEF     (0199)    and   reg[ADCINCVR_pot_bfAtoDcr3],~ADCINCVR_pot_fFSW0   ; Take Integrator out of reset
                                        (0200) IF ADCINCVR_pot_NoAZ
0A48: 41 9A DF AND   REG[0x9A],0xDF     (0201)     and  reg[ADCINCVR_pot_bfAtoDcr2],~ADCINCVR_pot_fAutoZero  ; Take Integrator out of AutoZero
                                        (0202) ENDIF
                                        (0203) 
                                        (0204)                                                                ; Enable the A/D and Start it!
0A4B: 43 2F 05 OR    REG[0x2F],0x5      (0205)    or    reg[ADCINCVR_pot_bCounter_CR0], (ADCINCVR_pot_fDBLK_ENABLE|ADCINCVR_pot_fPULSE_WIDE)   ; Enable the Counter
0A4E: 43 33 01 OR    REG[0x33],0x1      (0206)    or    reg[ADCINCVR_pot_fPWM_LSB_CR0], ADCINCVR_pot_fDBLK_ENABLE          ; Enable PWM
0A51: 43 E1 20 OR    REG[0xE1],0x20     (0207)    or    reg[ADCINCVR_pot_bfPWM16_INT_REG], ADCINCVR_pot_bfPWM16_Mask    ; Enable Counter interrupts
0A54: 43 E1 08 OR    REG[0xE1],0x8      (0208)    or    reg[ADCINCVR_pot_bfCounter_INT_REG], ADCINCVR_pot_bfCounter_Mask
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_4
0A57: 7F       RET                      (0210)    ret
                                        (0211) .ENDSECTION
                                        (0212) 
                                        (0213) .SECTION
                                        (0214) ;-----------------------------------------------------------------------------
                                        (0215) ;  FUNCTION NAME: ADCINCVR_pot_StopAD
                                        (0216) ;
                                        (0217) ;  DESCRIPTION:
                                        (0218) ;  Completely shuts down the A/D is an orderly manner.  Both the
                                        (0219) ;  Timer and Counter are disabled and their interrupts are deactivated.
                                        (0220) ;
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:  None
                                        (0224) ;
                                        (0225) ;  RETURNS: NA
                                        (0226) ;
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  ADCINCVR_pot_StopAD:
                                        (0235) _ADCINCVR_pot_StopAD:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
0A58: 41 33 FE AND   REG[0x33],0xFE     (0237)    and   reg[ADCINCVR_pot_fPWM_LSB_CR0], ~ADCINCVR_pot_fDBLK_ENABLE     ; Disable the PWM
                                        (0238) 
0A5B: 41 2F FE AND   REG[0x2F],0xFE     (0239)    and   reg[ADCINCVR_pot_bCounter_CR0], ~ADCINCVR_pot_fDBLK_ENABLE           ; Disable the Counter
                                        (0240) 
                                        (0241) IF ADCINCVR_pot_NoAZ
0A5E: 43 9A 20 OR    REG[0x9A],0x20     (0242)    or   reg[ADCINCVR_pot_bfAtoDcr2], ADCINCVR_pot_fAutoZero    ; Put the Integrator into Autozero mode
                                        (0243) ENDIF
                                        (0244) 
0A61: 43 9B 10 OR    REG[0x9B],0x10     (0245)    or   reg[ADCINCVR_pot_bfAtoDcr3], ADCINCVR_pot_fFSW0        ; Put Integrator into reset
0A64: 08       PUSH  A                  (0246)    push A
0A65: 41 E1 DF AND   REG[0xE1],0xDF     (0247)    M8C_DisableIntMask ADCINCVR_pot_bfPWM16_INT_REG, ADCINCVR_pot_bfPWM16_Mask      ; Disable interrupts
0A68: 41 E1 F7 AND   REG[0xE1],0xF7     (0248)    M8C_DisableIntMask ADCINCVR_pot_bfCounter_INT_REG, ADCINCVR_pot_bfCounter_Mask
0A6B: 18       POP   A                  (0249)    pop  A
                                        (0250)    RAM_EPILOGUE RAM_USE_CLASS_1
0A6C: 7F       RET                      (0251)    ret
                                        (0252) .ENDSECTION
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: ADCINCVR_pot_fIsData
                                        (0257) ;  FUNCTION NAME: ADCINCVR_pot_fIsDataAvailable
                                        (0258) ;
                                        (0259) ;  DESCRIPTION:
                                        (0260) ;  Returns the status of the A/D Data is set whenever a new data
                                        (0261) ;  value is available.
                                        (0262) ;
                                        (0263) ;-----------------------------------------------------------------------------
                                        (0264) ;
                                        (0265) ;  ARGUMENTS: None
                                        (0266) ;
                                        (0267) ;  RETURNS:
                                        (0268) ;  A  Returns data status  A == 0 no data available
                                        (0269) ;                          A != 0 data available
                                        (0270) ;
                                        (0271) ;  SIDE EFFECTS:
                                        (0272) ;    The A and X registers may be modified by this or future implementations
                                        (0273) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0274) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0275) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0276) ;    functions.
                                        (0277) ;          
                                        (0278) ;    Currently only the page pointer registers listed below are modified: 
                                        (0279) ;          CUR_PP
                                        (0280) ;
                                        (0281)  ADCINCVR_pot_fIsData:
                                        (0282) _ADCINCVR_pot_fIsData:
                                        (0283)  ADCINCVR_pot_fIsDataAvailable:
                                        (0284) _ADCINCVR_pot_fIsDataAvailable:
                                        (0285)    RAM_PROLOGUE RAM_USE_CLASS_4
0A6D: 62 D0 00 MOV   REG[0xD0],0x0      (0286)    RAM_SETPAGE_CUR >ADCINCVR_pot_bfStatus
0A70: 51 0C    MOV   A,[0xC]            (0287)    mov   A, [ADCINCVR_pot_bfStatus]                   ; Get status byte
0A72: 21 10    AND   A,0x10             (0288)    and   A, ADCINCVR_pot_fDATA_READY                  ; Mask off other bits
                                        (0289)    RAM_EPILOGUE RAM_USE_CLASS_4
0A74: 7F       RET                      (0290)    ret
                                        (0291) .ENDSECTION
                                        (0292) 
                                        (0293) .SECTION
                                        (0294) ;-----------------------------------------------------------------------------
                                        (0295) ;  FUNCTION NAME: ADCINCVR_pot_iGetDataClearFlag
                                        (0296) ;  FUNCTION NAME: ADCINCVR_pot_iGetData
                                        (0297) ;
                                        (0298) ;  DESCRIPTION:
                                        (0299) ;  Returns the data from the A/D.  Does not check if data is available.
                                        (0300) ;  iGetDataClearFlag clears the result ready flag as well.
                                        (0301) ;
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;
                                        (0304) ;  ARGUMENTS: None
                                        (0305) ;
                                        (0306) ;  RETURNS:
                                        (0307) ;  A:X  return the ADC result.
                                        (0308) ;
                                        (0309) ;  SIDE EFFECTS:
                                        (0310) ;    The A and X registers may be modified by this or future implementations
                                        (0311) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0313) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0314) ;    functions.
                                        (0315) ;          
                                        (0316) ;    Currently only the page pointer registers listed below are modified: 
                                        (0317) ;          CUR_PP
                                        (0318) ;
                                        (0319)  ADCINCVR_pot_iGetDataClearFlag:
                                        (0320) _ADCINCVR_pot_iGetDataClearFlag:   
                                        (0321)    RAM_PROLOGUE RAM_USE_CLASS_4
0A75: 62 D0 00 MOV   REG[0xD0],0x0      (0322)    RAM_SETPAGE_CUR >ADCINCVR_pot_bfStatus
0A78: 26 0C EF AND   [0xC],0xEF         (0323)    and   [ADCINCVR_pot_bfStatus], ~ADCINCVR_pot_fDATA_READY  ; Clear Data ready bit
0A7B: 58 0A    MOV   X,[0xA]            (0324)    mov   X, [(ADCINCVR_pot_iResult + HighByte)]
0A7D: 51 0B    MOV   A,[0xB]            (0325)    mov   A, [(ADCINCVR_pot_iResult + LowByte)]
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_4
0A7F: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) 
                                        (0330)  ADCINCVR_pot_iGetData:
                                        (0331) _ADCINCVR_pot_iGetData:
                                        (0332)    RAM_PROLOGUE RAM_USE_CLASS_4
0A80: 62 D0 00 MOV   REG[0xD0],0x0      (0333)    RAM_SETPAGE_CUR >ADCINCVR_pot_iResult
0A83: 58 0A    MOV   X,[0xA]            (0334)    mov   X, [(ADCINCVR_pot_iResult + HighByte)]
0A85: 51 0B    MOV   A,[0xB]            (0335)    mov   A, [(ADCINCVR_pot_iResult + LowByte)]
                                        (0336)    RAM_EPILOGUE RAM_USE_CLASS_4
0A87: 7F       RET                      (0337)    ret
                                        (0338) .ENDSECTION
                                        (0339) 
                                        (0340) .SECTION
                                        (0341) ;-----------------------------------------------------------------------------
                                        (0342) ;  FUNCTION NAME: ADCINCVR_pot_ClearFlag
                                        (0343) ;
                                        (0344) ;  DESCRIPTION:
                                        (0345) ;  Clears the data ready flag.
                                        (0346) ;
                                        (0347) ;-----------------------------------------------------------------------------
                                        (0348) ;
                                        (0349) ;  ARGUMENTS: None
                                        (0350) ;
                                        (0351) ;  RETURNS: NA
                                        (0352) ;
                                        (0353) ;  SIDE EFFECTS:
                                        (0354) ;    The A and X registers may be modified by this or future implementations
                                        (0355) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0356) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0357) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0358) ;    functions.
                                        (0359) ;          
                                        (0360) ;    Currently only the page pointer registers listed below are modified: 
                                        (0361) ;          CUR_PP
                                        (0362) ;
                                        (0363)  ADCINCVR_pot_ClearFlag:
                                        (0364) _ADCINCVR_pot_ClearFlag:
                                        (0365)    RAM_PROLOGUE RAM_USE_CLASS_4
0A88: 62 D0 00 MOV   REG[0xD0],0x0      (0366)    RAM_SETPAGE_CUR >ADCINCVR_pot_bfStatus
0A8B: 26 0C EF AND   [0xC],0xEF         (0367)    and   [ADCINCVR_pot_bfStatus], ~ADCINCVR_pot_fDATA_READY  ; Clear Data ready bit
                                        (0368)    RAM_EPILOGUE RAM_USE_CLASS_4
0A8E: 7F       RET                      (0369)    ret
                                        (0370) .ENDSECTION
                                        (0371) 
                                        (0372) .SECTION
                                        (0373) ;-----------------------------------------------------------------------------
                                        (0374) ;  FUNCTION NAME: ADCINCVR_pot_SetResolution
                                        (0375) ;
                                        (0376) ;  DESCRIPTION:
                                        (0377) ;  Sets A/D resolution between 7 and 13 bits.
                                        (0378) ;
                                        (0379) ;-----------------------------------------------------------------------------
                                        (0380) ;
                                        (0381) ;  ARGUMENTS:
                                        (0382) ;  A  Passes the number of bits of resolution, between 7 and 13.
                                        (0383) ;
                                        (0384) ;  RETURNS:  NA
                                        (0385) ;
                                        (0386) ;  SIDE EFFECTS:
                                        (0387) ;    The A and X registers may be modified by this or future implementations
                                        (0388) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0389) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0390) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0391) ;    functions.
                                        (0392) ;          
                                        (0393) ;    Currently only the page pointer registers listed below are modified: 
                                        (0394) ;          CUR_PP
                                        (0395) ;
                                        (0396) ;     This function halts the PWM and the counter to sync the A/D , but
                                        (0397) ;     does not re-enable the counter or PWM. To restart the A/D, "Get_Samples"
                                        (0398) ;     should be called.
                                        (0399) ;
                                        (0400)  ADCINCVR_pot_SetResolution:
                                        (0401) _ADCINCVR_pot_SetResolution:
                                        (0402)    RAM_PROLOGUE RAM_USE_CLASS_4
0A8F: 62 D0 00 MOV   REG[0xD0],0x0      (0403)    RAM_SETPAGE_CUR >ADCINCVR_pot_bfStatus
                                        (0404)    
0A92: 41 9A FE AND   REG[0x9A],0xFE     (0405)    and   reg[ADCINCVR_pot_bfAtoDcr2], ~ADCINCVR_pot_fRES_SET
                                        (0406) 
0A95: 9F C1    CALL  0x0A58             (0407)    call  ADCINCVR_pot_StopAD                       ; Stop the A/D if it is running
0A97: 55 0C 00 MOV   [0xC],0x0          (0408)    mov   [ADCINCVR_pot_bfStatus], 00h              ; and clear status and old resolution
                                        (0409) 
                                        (0410)                                                    ; Check for resolution to be within min and max values
0A9A: 39 07    CMP   A,0x7              (0411)    cmp   A,ADCINCVR_pot_bMINRES                    ; Check low end of resolution
0A9C: D0 05    JNC   0x0AA2             (0412)    jnc   ADCINCVR_pot_CHECKHI
0A9E: 50 07    MOV   A,0x7              (0413)    mov   A,ADCINCVR_pot_bMINRES                    ; Too low - load legal low value
0AA0: 80 07    JMP   0x0AA8             (0414)    jmp   ADCINCVR_pot_RES_OK
                                        (0415) 
                                        (0416) ADCINCVR_pot_CHECKHI:                              ; Check high end of resolution
0AA2: 39 0D    CMP   A,0xD              (0417)    cmp   A,ADCINCVR_pot_bMAXRES
0AA4: C0 03    JC    0x0AA8             (0418)    jc    ADCINCVR_pot_RES_OK
0AA6: 50 0D    MOV   A,0xD              (0419)    mov   A,ADCINCVR_pot_bMAXRES                    ; Too high - load legal Max value
                                        (0420) 
                                        (0421) ADCINCVR_pot_RES_OK:
                                        (0422)                                                    ; Calculate compare value for the PWM which
                                        (0423)                                                    ; computes the integrate time
0AA8: 11 07    SUB   A,0x7              (0424)    sub   A, ADCINCVR_pot_bMINRES                   ; Normalize with min resolution
0AAA: 2C 0C    OR    [0xC],A            (0425)    or    [ADCINCVR_pot_bfStatus], A
                                        (0426)                                                    ; Since min resolution is 7, 2^^7 = 128, the clock
                                        (0427)                                                    ; is running 4x so 128*4=512 or 0x0200
0AAC: 01 01    ADD   A,0x1              (0428)    add   A,01h                                     ; The MSB is 02h.
0AAE: 5C       MOV   X,A                (0429)    mov   X,A
0AAF: 50 01    MOV   A,0x1              (0430)    mov   A,01h
                                        (0431) 
                                        (0432) ADCINCVR_pot_CALC_INTTIME:                         ; Now shift the MSB left for every bit of resolution of min (7).
0AB1: 64       ASL   A                  (0433)    asl   A
0AB2: 79       DEC   X                  (0434)    dec   X
0AB3: BF FD    JNZ   0x0AB1             (0435)    jnz   ADCINCVR_pot_CALC_INTTIME
                                        (0436) 
                                        (0437) ADCINCVR_pot_LOAD_INTTIME:                         ; Load compare value and Calc time into registers
                                        (0438)                                                    ; Since minimum resolution is 7 bits, this value will always start at 0
0AB5: 62 32 00 MOV   REG[0x32],0x0      (0439)    mov   reg[ADCINCVR_pot_bPWM_IntTime_LSB], 00h
0AB8: 60 36    MOV   REG[0x36],A        (0440)    mov   reg[ADCINCVR_pot_bPWM_IntTime_MSB], A
                                        (0441) 
                                        (0442)                                                    ; Load the CalcTime into the PWM Period
0ABA: 62 31 24 MOV   REG[0x31],0x24     (0443)    mov   reg[ADCINCVR_pot_bPWM_Period_LSB], <wCalcTime
0ABD: 01 00    ADD   A,0x0              (0444)    add   A, >wCalcTime
0ABF: 60 35    MOV   REG[0x35],A        (0445)    mov   reg[ADCINCVR_pot_bPWM_Period_MSB],A
                                        (0446)    RAM_EPILOGUE RAM_USE_CLASS_4
0AC1: 7F       RET                      (0447)    ret
(0448) .ENDSECTION
(0449) ; End of File ADCINCVR_pot.asm
FILE: lib\adcincvr_mesint.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   ADCINCVR_mesINT.asm
                                        (0004) ;;  Version: 3.1, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: ADCINCVR Interrupt Service Routines
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "ADCINCVR_mes.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export _ADCINCVR_mes_CNT_ISR
                                        (0021) export _ADCINCVR_mes_PWM16_ISR
                                        (0022) export  ADCINCVR_mes_cCounterU
                                        (0023) export _ADCINCVR_mes_iResult
                                        (0024) export  ADCINCVR_mes_iResult
                                        (0025) export _ADCINCVR_mes_bfStatus
                                        (0026) export  ADCINCVR_mes_bfStatus
                                        (0027) export  ADCINCVR_mes_bSampC
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) AREA InterruptRAM(RAM, REL, CON)
                                        (0033) 
                                        (0034)  ADCINCVR_mes_cCounterU:     BLK   1  ;The Upper byte of the Counter
                                        (0035) _ADCINCVR_mes_iResult:
                                        (0036)  ADCINCVR_mes_iResult:       BLK   2  ;A/D value
                                        (0037) _ADCINCVR_mes_bfStatus:
                                        (0038)  ADCINCVR_mes_bfStatus:      BLK   1  ;Data Valid Flag
                                        (0039)  ADCINCVR_mes_bSampC:        BLK   1  ;# of times to run A/D
                                        (0040) 
                                        (0041) 
                                        (0042) ;-----------------------------------------------
                                        (0043) ;  EQUATES and TABLES
                                        (0044) ;-----------------------------------------------
                                        (0045) LowByte:   equ 1
                                        (0046) HighByte:  equ 0
                                        (0047) 
                                        (0048) 
                                        (0049) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0050) ;---------------------------------------------------
                                        (0051) ; Insert your custom declarations below this banner
                                        (0052) ;---------------------------------------------------
                                        (0053) 
                                        (0054) ;------------------------
                                        (0055) ; Includes
                                        (0056) ;------------------------
                                        (0057) 
                                        (0058) 	
                                        (0059) ;------------------------
                                        (0060) ;  Constant Definitions
                                        (0061) ;------------------------
                                        (0062) 
                                        (0063) 
                                        (0064) ;------------------------
                                        (0065) ; Variable Allocation
                                        (0066) ;------------------------
                                        (0067) 
                                        (0068) 
                                        (0069) ;---------------------------------------------------
                                        (0070) ; Insert your custom declarations above this banner
                                        (0071) ;---------------------------------------------------
                                        (0072) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0073) 
                                        (0074) AREA UserModules (ROM, REL)
                                        (0075) 
                                        (0076) .LITERAL
                                        (0077) ADCINCVR_mesMaxNegX4Table:
                                        (0078) ; Bits  7    8    9   10   11   12   13
                                        (0079)    DB  FFh, FEh, FCh, F8h, F0h, E0h, C0h
                                        (0080) 
                                        (0081) ADCINCVR_mesMaxPosX4Table:
                                        (0082) IF (ADCINCVR_mes_DATA_FORMAT)
                                        (0083) ; Bits (signed)    7    8    9   10   11   12   13
                                        (0084)               DB  01h, 02h, 04h, 08h, 10h, 20h, 40h
                                        (0085) ELSE
                                        (0086) ; Bits (unsigned)  7    8    9   10   11   12   13
                                        (0087)               DB  02h, 04h, 08h, 10h, 20h, 40h, 80h
                                        (0088) 
                                        (0089)  ENDIF
                                        (0090) .ENDLITERAL
                                        (0091) 
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) ;  FUNCTION NAME: _ADCINCVR_mes_CNT_ISR (Counter8 Interrupt)
                                        (0094) ;
                                        (0095) ;
                                        (0096) ;  DESCRIPTION:
                                        (0097) ;     Increment the upper (software) half on the counter whenever the
                                        (0098) ;     lower (hardware) half of the counter underflows.  This counter
                                        (0099) ;     should start out at the most negative value (0xFF).
                                        (0100) ;
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;
                                        (0103) _ADCINCVR_mes_CNT_ISR:

0AD0: 76 0E    INC   [0xE]              (0104)    inc [ADCINCVR_mes_cCounterU]
                                        (0105)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0106)    ;---------------------------------------------------
                                        (0107)    ; Insert your custom code below this banner
                                        (0108)    ;---------------------------------------------------
                                        (0109)    ;   NOTE: interrupt service routines must preserve
                                        (0110)    ;   the values of the A and X CPU registers.
                                        (0111) 
                                        (0112)    ;---------------------------------------------------
                                        (0113)    ; Insert your custom code above this banner
                                        (0114)    ;---------------------------------------------------
                                        (0115)    ;@PSoC_UserCode_END@ (Do not change this line.)
0AD2: 7E       RETI                     (0116)    reti
                                        (0117) 
                                        (0118) 
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: _ADCINCVR_mes_PWM16_ISR  (PWM16 Interrupt)
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     This ISR is called when the ADC has completed and integrate cycle.
                                        (0124) ;     The ADC value is calculated and stored in a global location before
                                        (0125) ;     the end of the ISR.
                                        (0126) ;
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;
                                        (0129) _ADCINCVR_mes_PWM16_ISR:
0AD3: 41 23 FE AND   REG[0x23],0xFE     (0130)    and   reg[ADCINCVR_mes_bCounter_CR0], ~ADCINCVR_mes_fDBLK_ENABLE  ; Disable Counter
                                        (0131) IF ADCINCVR_mes_NoAZ
0AD6: 43 8E 20 OR    REG[0x8E],0x20     (0132)    or    reg[ADCINCVR_mes_bfAtoDcr2], ADCINCVR_mes_fAutoZero      ; Put Integrator in AutoZero
                                        (0133) ENDIF
0AD9: 43 8F 10 OR    REG[0x8F],0x10     (0134)    or   reg[ADCINCVR_mes_bfAtoDcr3],ADCINCVR_mes_fFSW0        ; Put Integrator in reset
                                        (0135) 
                                        (0136)                                                            ; Enable interrupts for a short period of time just in case.
                                        (0137)                                                            ; Make sure we didn't have a counter interrupt ready to fire
0ADC: 71 01    OR    F,0x1              (0138)    M8C_EnableGInt
0ADE: 40       NOP                      (0139)    nop                                                     ; Wait a couple cycles
0ADF: 70 FE    AND   F,0xFE             (0140)    M8C_DisableGInt                                         ; Disable interrupt, read to complete processing
0AE1: 08       PUSH  A                  (0141)    push  A                                                 ; Save the Accumulator
0AE2: 5D 20    MOV   A,REG[0x20]        (0142)    mov   A,reg[ADCINCVR_mes_bCount]                        ; Read counter value  (Bogus read puts value in Period register)
0AE4: 5D 22    MOV   A,REG[0x22]        (0143)    mov   A,reg[ADCINCVR_mes_bCompare]                      ; Read counter value
0AE6: 78       DEC   A                  (0144)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
0AE7: 73       CPL   A                  (0145)    cpl   A                                                 ; Invert the value
0AE8: D0 03    JNC   0x0AEC             (0146)    jnc   ADCINCVR_mes_INT_CALCV                            ; if carry, then inc MSB as well
0AEA: 76 0E    INC   [0xE]              (0147)    inc   [ADCINCVR_mes_cCounterU]
                                        (0148) ADCINCVR_mes_INT_CALCV:
0AEC: 53 10    MOV   [iles+1],A         (0149)    mov   [(ADCINCVR_mes_iResult + LowByte)], A             ; Store LSB value
0AEE: 51 0E    MOV   A,[0xE]            (0150)    mov   A, [ADCINCVR_mes_cCounterU]                       ; Store MSB from temp counter
0AF0: 53 0F    MOV   [iles],A           (0151)    mov   [(ADCINCVR_mes_iResult + HighByte)], A
                                        (0152)                                                            ; The new value has been stored,
                                        (0153)                                                            ; so get counters ready for next reading first.
0AF2: 62 21 FF MOV   REG[0x21],0xFF     (0154)    mov   reg[ADCINCVR_mes_bPeriod], ffh                    ; Initialize counter to FF - Set to overflow after 256 counts
0AF5: 43 23 01 OR    REG[0x23],0x1      (0155)    or    reg[ADCINCVR_mes_bCounter_CR0],ADCINCVR_mes_fDBLK_ENABLE  ; Enable Counter
                                        (0156) 
                                        (0157) IF (ADCINCVR_mes_DATA_FORMAT)                              ; Only check for Negative numbers if SIGNED result
0AF8: 51 11    MOV   A,[iles+2]         (0158)    mov   A, [ADCINCVR_mes_bfStatus]                        ; Get Status with Resolution
0AFA: 21 0F    AND   A,0xF              (0159)    and   A, ADCINCVR_mes_bRES_MASK                         ; Mask of resolution
0AFC: FF C4    INDEX 0x0AC2             (0160)    index ADCINCVR_mesMaxNegX4Table                         ; Get Maximum negative value from table
0AFE: 53 0E    MOV   [0xE],A            (0161)    mov   [ADCINCVR_mes_cCounterU], A                       ; Place result back into MSB of counter
                                        (0162) ELSE
                                        (0163)    mov   [ADCINCVR_mes_cCounterU], 00h                     ; Place result back into MSB of counter
                                        (0164) ENDIF
                                        (0165) 
                                        (0166)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0167)    ;---------------------------------------------------
                                        (0168)    ; If the input is muxed with multiple inputs
                                        (0169)    ; this is a good place to change inputs.
                                        (0170)    ; Insert your custom code below this banner
                                        (0171)    ;---------------------------------------------------
                                        (0172)    ;   NOTE: interrupt service routines must preserve
                                        (0173)    ;   the values of the A and X CPU registers. At this
                                        (0174)    ;   point A is already preserved and will be restored;
                                        (0175)    ;   however, if you use X, you must take care of it
                                        (0176)    ;   here!
                                        (0177) 
                                        (0178)    ;---------------------------------------------------
                                        (0179)    ; Insert your custom code above this banner
                                        (0180)    ;---------------------------------------------------
                                        (0181)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0182) 
0B00: 41 8F EF AND   REG[0x8F],0xEF     (0183)    and   reg[ADCINCVR_mes_bfAtoDcr3],~ADCINCVR_mes_fFSW0   ; Take Integrator out of reset
                                        (0184) IF ADCINCVR_mes_NoAZ
0B03: 41 8E DF AND   REG[0x8E],0xDF     (0185)    and   reg[ADCINCVR_mes_bfAtoDcr2],~ADCINCVR_mes_fAutoZero  ; Take Integrator out of AutoZero
                                        (0186) ENDIF
                                        (0187) 
                                        (0188)    ;****************************************************************************
                                        (0189)    ;M8C_EnableGInt            ; May want to re-enable interrupts at this point,
                                        (0190)    ;                          ; if stack space isn't at a premium.
                                        (0191)    ; NOTE:  this will make system more responsive but, will increase the
                                        (0192)    ;        overall processing time of the A/D calctime.  If an interrupt is
                                        (0193)    ;        taken, it must return within the specified CalcTime to guarantee
                                        (0194)    ;        successful acquisition of the next byte.
                                        (0195)    ;****************************************************************************
                                        (0196) IF (ADCINCVR_mes_DATA_FORMAT)                    ; Only check for Negative numbers if SIGNED result
                                        (0197) 
                                        (0198)                                                  ; Negative Overflow Check
0B06: 47 0F 80 TST   [iles],0x80        (0199)    tst   [(ADCINCVR_mes_iResult + HighByte)],80h
0B09: B0 17    JNZ   0x0B21             (0200)    jnz   ADCINCVR_mes_NOT_POVFL2
                                        (0201) 
                                        (0202) ENDIF
                                        (0203)                                                  ; Postive Overflow Check
                                        (0204)                                                  ; Get MSB of Max Positive value x4 + 1
0B0B: 51 11    MOV   A,[iles+2]         (0205)    mov   A,[ADCINCVR_mes_bfStatus]               ; Get Status with Resolution
0B0D: 21 0F    AND   A,0xF              (0206)    and   A,ADCINCVR_mes_bRES_MASK                ; Mask of resolution normalized to 0
0B0F: FF B8    INDEX 0x0AC9             (0207)    index ADCINCVR_mesMaxPosX4Table               ; Get Maximum positive value x4 + 1 from table
0B11: 08       PUSH  A                  (0208)    push  A
0B12: 22 0F    AND   A,[iles]           (0209)    and   A, [(ADCINCVR_mes_iResult + HighByte)]
0B14: A0 0B    JZ    0x0B20             (0210)    jz    ADCINCVR_mes_NOT_POVFL
                                        (0211)                                                  ; Positive overflow, fix it - set to Max Positive + 1
0B16: 18       POP   A                  (0212)    pop   A
0B17: 11 01    SUB   A,0x1              (0213)    sub   A, 01h
                                        (0214) 
                                        (0215)                                                  ; Force most positive * 4 into result
0B19: 53 0F    MOV   [iles],A           (0216)    mov   [(ADCINCVR_mes_iResult + HighByte)], A
0B1B: 55 10 FF MOV   [iles+1],0xFF      (0217)    mov   [(ADCINCVR_mes_iResult + LowByte)], ffh
0B1E: 80 02    JMP   0x0B21             (0218)    jmp   ADCINCVR_mes_NOT_POVFL2
                                        (0219) ADCINCVR_mes_NOT_POVFL:
0B20: 18       POP   A                  (0220)    pop   A
                                        (0221) 
                                        (0222) ADCINCVR_mes_NOT_POVFL2:
0B21: 68 0F    ASR   [iles]             (0223)    asr   [(ADCINCVR_mes_iResult + HighByte)]     ; Shift MSB and LSB right twice to divide by four
0B23: 6E 10    RRC   [iles+1]           (0224)    rrc   [(ADCINCVR_mes_iResult + LowByte)]      ; Remember digital clock 4 times analog clock
0B25: 68 0F    ASR   [iles]             (0225)    asr   [(ADCINCVR_mes_iResult + HighByte)]
0B27: 6E 10    RRC   [iles+1]           (0226)    rrc   [(ADCINCVR_mes_iResult + LowByte)]
                                        (0227) 
                                        (0228)    ;@PSoC_UserCode_BODY_3@ (Do not change this line.)
                                        (0229)    ;---------------------------------------------------
                                        (0230)    ; Data is ready at this point.
                                        (0231)    ; If processing Data at Interrupt level - add
                                        (0232)    ; User Code to handle the data below this banner
                                        (0233)    ;---------------------------------------------------
                                        (0234)    ;   NOTE: interrupt service routines must preserve
                                        (0235)    ;   the values of the A and X CPU registers. At this
                                        (0236)    ;   point A is already preserved and will be restored;
                                        (0237)    ;   however, if you use X, you must take care of it
                                        (0238)    ;   here!
                                        (0239) 
                                        (0240)    ;---------------------------------------------------
                                        (0241)    ; Insert your custom code above this banner
                                        (0242)    ;---------------------------------------------------
                                        (0243)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0244) 
0B29: 18       POP   A                  (0245)    pop   A                                       ; Restore A, not used any more
                                        (0246) 
0B2A: 2E 11 10 OR    [iles+2],0x10      (0247)    or    [ADCINCVR_mes_bfStatus],ADCINCVR_mes_fDATA_READY  ; Set Data ready bit
                                        (0248) 
0B2D: 47 12 FF TST   [iles+3],0xFF      (0249)    tst   [ADCINCVR_mes_bSampC], ffh              ; If sample_counter == 0 -->> continuous data collection
0B30: A0 17    JZ    0x0B48             (0250)    jz    ADCINCVR_mes_END_PWM16_ISR
                                        (0251) 
0B32: 7A 12    DEC   [iles+3]           (0252)    dec   [ADCINCVR_mes_bSampC]                   ; Dec sample counter and check for zero
0B34: B0 13    JNZ   0x0B48             (0253)    jnz   ADCINCVR_mes_END_PWM16_ISR
                                        (0254) 
                                        (0255)    ;**********************************************
                                        (0256)    ; Turn off ADC
                                        (0257)    ;**********************************************
0B36: 41 27 FE AND   REG[0x27],0xFE     (0258)    and   reg[ADCINCVR_mes_fPWM_LSB_CR0], ~ADCINCVR_mes_fDBLK_ENABLE     ; Disable the PWM
0B39: 41 23 FE AND   REG[0x23],0xFE     (0259)    and   reg[ADCINCVR_mes_bCounter_CR0], ~ADCINCVR_mes_fDBLK_ENABLE           ; Disable the Counter
                                        (0260) IF ADCINCVR_mes_NoAZ
0B3C: 43 8E 20 OR    REG[0x8E],0x20     (0261)    or    reg[ADCINCVR_mes_bfAtoDcr2], ADCINCVR_mes_fAutoZero   ; Put the Integrator into Autozero mode
                                        (0262) ENDIF
0B3F: 43 8F 10 OR    REG[0x8F],0x10     (0263)    or    reg[ADCINCVR_mes_bfAtoDcr3], ADCINCVR_mes_fFSW0       ; Put Integrator into reset
0B42: 41 E1 FB AND   REG[0xE1],0xFB     (0264)    and   reg[ADCINCVR_mes_bfPWM16_INT_REG], ~ADCINCVR_mes_bfPWM16_Mask      ; Disable interrupts
0B45: 41 E1 FE AND   REG[0xE1],0xFE     (0265)    and   reg[ADCINCVR_mes_bfCounter_INT_REG], ~ADCINCVR_mes_bfCounter_Mask
                                        (0266) 
                                        (0267) ADCINCVR_mes_END_PWM16_ISR:
0B48: 7E       RETI                     (0268)    reti
(0269) 
(0270) ; End of File ADCINCVR_mesINT.asm
FILE: lib\adcincvr_mes.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  ADCINCVR_mes.asm
                                        (0004) ;;  Version: 3.1, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: ADCINCVR User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "ADCINCVR_mes.inc"
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  ADCINCVR_mes_Start
                                        (0030) export _ADCINCVR_mes_Start
                                        (0031) export  ADCINCVR_mes_SetPower
                                        (0032) export _ADCINCVR_mes_SetPower
                                        (0033) export  ADCINCVR_mes_Stop
                                        (0034) export _ADCINCVR_mes_Stop
                                        (0035) export  ADCINCVR_mes_GetSamples
                                        (0036) export _ADCINCVR_mes_GetSamples
                                        (0037) export  ADCINCVR_mes_StopAD
                                        (0038) export _ADCINCVR_mes_StopAD
                                        (0039) export  ADCINCVR_mes_fIsData
                                        (0040) export _ADCINCVR_mes_fIsData
                                        (0041) export  ADCINCVR_mes_fIsDataAvailable
                                        (0042) export _ADCINCVR_mes_fIsDataAvailable
                                        (0043) export  ADCINCVR_mes_iGetData
                                        (0044) export _ADCINCVR_mes_iGetData
                                        (0045) export  ADCINCVR_mes_ClearFlag
                                        (0046) export _ADCINCVR_mes_ClearFlag
                                        (0047) export  ADCINCVR_mes_iGetDataClearFlag
                                        (0048) export _ADCINCVR_mes_iGetDataClearFlag
                                        (0049) export  ADCINCVR_mes_SetResolution
                                        (0050) export _ADCINCVR_mes_SetResolution
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ;  EQUATES
                                        (0054) ;-----------------------------------------------
                                        (0055) LowByte:       equ 1
                                        (0056) HighByte:      equ 0
                                        (0057) 
                                        (0058) ; Calctime parameters
                                        (0059) wCalcTime:     equ   ADCINCVR_mes_bCALCTIME
                                        (0060) 
                                        (0061) AREA UserModules (ROM, REL)
                                        (0062) 
                                        (0063) .SECTION
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;  FUNCTION NAME: ADCINCVR_mes_Start
                                        (0066) ;  FUNCTION NAME: ADCINCVR_mes_SetPower
                                        (0067) ;
                                        (0068) ;  DESCRIPTION:
                                        (0069) ;  Applies power setting to the module's analog PSoc block.
                                        (0070) ;
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;
                                        (0073) ;  ARGUMENTS:
                                        (0074) ;   A  Contains power level setting 0 to 3
                                        (0075) ;
                                        (0076) ;  RETURNS:  NA
                                        (0077) ;
                                        (0078) ;  SIDE EFFECTS:
                                        (0079) ;    The A and X registers may be modified by this or future implementations
                                        (0080) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0081) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0082) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0083) ;    functions.
                                        (0084) ;          
                                        (0085) ;    Currently only the page pointer registers listed below are modified:
                                        (0086) ;          CUR_PP
                                        (0087) ;
                                        (0088)  ADCINCVR_mes_Start:
                                        (0089) _ADCINCVR_mes_Start:
                                        (0090)  ADCINCVR_mes_SetPower:
                                        (0091) _ADCINCVR_mes_SetPower:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_2
0B49: 62 D0 00 MOV   REG[0xD0],0x0      (0094)    RAM_SETPAGE_CUR >ADCINCVR_mes_bfStatus
                                        (0095)    
0B4C: 4F       MOV   X,SP               (0096)    mov   X, SP                                       ; Get location of next location on stack
0B4D: 21 03    AND   A,0x3              (0097)    and   A,ADCINCVR_mes_bfPOWERMASK                  ; Mask only the valid power setting bits
0B4F: 08       PUSH  A                  (0098)    push  A                                           ; Save power value on temp location
0B50: 5D 8F    MOV   A,REG[0x8F]        (0099)    mov   A, reg[ADCINCVR_mes_bfAtoDcr3]              ; Get current value of AtoDcr3
0B52: 21 FC    AND   A,0xFC             (0100)    and   A, ~ADCINCVR_mes_bfPOWERMASK                ; Mask off old power value
0B54: 2B 00    OR    A,[X+0]            (0101)    or    A, [X]                                      ; OR in new power value
0B56: 29 F0    OR    A,0xF0             (0102)    or    A, f0h                                      ; Make sure other register is set correctly
0B58: 60 8F    MOV   REG[0x8F],A        (0103)    mov   reg[ADCINCVR_mes_bfAtoDcr3], A              ; Reload CR with new power value
                                        (0104) 
0B5A: 49 8E 01 TST   REG[0x8E],0x1      (0105)    tst   reg[ADCINCVR_mes_bfAtoDcr2], ADCINCVR_mes_fRES_SET
0B5D: A0 05    JZ    0x0B63             (0106)    jz    .DoNotLoadRes
0B5F: 50 04    MOV   A,0x4              (0107)    mov   A,ADCINCVR_mes_bNUMBITS - ADCINCVR_mes_bMINRES         ; get and set the resolution
0B61: 53 11    MOV   [iles+2],A         (0108)    mov   [ADCINCVR_mes_bfStatus], A              ; place it in the status variable
                                        (0109) .DoNotLoadRes:
0B63: 18       POP   A                  (0110)    pop   A                                           ; Restore the stack and power value
0B64: 70 3F    AND   F,0x3F             
0B66: 71 C0    OR    F,0xC0             (0111)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_4
0B68: 7F       RET                      (0113)    ret
                                        (0114) .ENDSECTION
                                        (0115) 
                                        (0116) .SECTION
                                        (0117) ;-----------------------------------------------------------------------------
                                        (0118) ;  FUNCTION NAME: ADCINCVR_mes_Stop
                                        (0119) ;
                                        (0120) ;  DESCRIPTION:
                                        (0121) ;  Removes power from the module's analog PSoc block, but the digital
                                        (0122) ;  blocks keep on running.
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) ;  ARGUMENTS: None
                                        (0127) ;
                                        (0128) ;  RETURNS:   NA
                                        (0129) ;
                                        (0130) ;  SIDE EFFECTS:
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  ADCINCVR_mes_Stop:
                                        (0138) _ADCINCVR_mes_Stop:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
0B69: 41 8F FC AND   REG[0x8F],0xFC     (0140)    and   reg[ADCINCVR_mes_bfAtoDcr3], ~ADCINCVR_mes_bfPOWERMASK
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
0B6C: 7F       RET                      (0142)    ret
                                        (0143) .ENDSECTION
                                        (0144) 
                                        (0145) .SECTION
                                        (0146) ;-----------------------------------------------------------------------------
                                        (0147) ;  FUNCTION NAME: ADCINCVR_mes_Get_Samples
                                        (0148) ;
                                        (0149) ;  DESCRIPTION:
                                        (0150) ;  Starts the A/D convertor and will place data is memory.  A flag
                                        (0151) ;  is set whenever a new data value is available.
                                        (0152) ;
                                        (0153) ;-----------------------------------------------------------------------------
                                        (0154) ;
                                        (0155) ;  ARGUMENTS:
                                        (0156) ;  A  Number of samples to be taken.  A zero will cause the ADC to run
                                        (0157) ;     continuously.
                                        (0158) ;
                                        (0159) ;  RETURNS:  NA
                                        (0160) ;
                                        (0161) ;  SIDE EFFECTS:
                                        (0162) ;    The A and X registers may be modified by this or future implementations
                                        (0163) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0164) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0165) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0166) ;    functions.
                                        (0167) ;          
                                        (0168) ;    Currently only the page pointer registers listed below are modified:
                                        (0169) ;          CUR_PP
                                        (0170) ;
                                        (0171)  ADCINCVR_mes_GetSamples:
                                        (0172) _ADCINCVR_mes_GetSamples:
                                        (0173)    RAM_PROLOGUE RAM_USE_CLASS_4
0B6D: 62 D0 00 MOV   REG[0xD0],0x0      (0174)    RAM_SETPAGE_CUR >ADCINCVR_mes_bfStatus
0B70: 53 12    MOV   [iles+3],A         (0175)    mov   [ADCINCVR_mes_bSampC], A                          ; Store sample count
                                        (0176)                                                            ; Interrupts, Put A/D in reset
0B72: 51 11    MOV   A,[iles+2]         (0177)    mov   A,[ADCINCVR_mes_bfStatus]                         ; get and set the resolution
0B74: 21 0F    AND   A,0xF              (0178)    and   A,ADCINCVR_mes_bRES_MASK
0B76: 01 07    ADD   A,0x7              (0179)    add   A,ADCINCVR_mes_bMINRES
0B78: 90 5A    CALL  0x0BD4             (0180)    call  ADCINCVR_mes_SetResolution
                                        (0181) 
                                        (0182) ADCINCVR_mes_LoadMSBCounter:                               ; The PWM has been setup by SetResolution, now set the upper
                                        (0183)                                                            ; counter which will be the same as the period.
                                        (0184)                                                            ; Reset MSB of counter to most negative value
                                        (0185) 
0B7A: 5D 2A    MOV   A,REG[0x2A]        (0186)    mov   A,reg[ADCINCVR_mes_bPWM_IntTime_MSB]              ; Get MSB of PWM and move it into RAM
0B7C: 53 0E    MOV   [0xE],A            (0187)    mov   [ADCINCVR_mes_cCounterU], A                       ; Use counter as temp location
0B7E: 50 00    MOV   A,0x0              (0188)    mov   A, 00h                                            ; Load A with zero for the calculation
0B80: 12 0E    SUB   A,[0xE]            (0189)    sub   A, [ADCINCVR_mes_cCounterU]                       ; 0 - MSB_PWM = MSB_of_most_neg_value
0B82: 67       ASR   A                  (0190)    asr   A                                                 ; Half the range (+ and -)
                                        (0191) IF (ADCINCVR_mes_DATA_FORMAT)
0B83: 53 0E    MOV   [0xE],A            (0192)    mov   [ADCINCVR_mes_cCounterU], A                       ; Place result back into MSB of counter
                                        (0193) ELSE
                                        (0194)    mov   [ADCINCVR_mes_cCounterU], 00h                     ; Always start at zero for unsigned values
                                        (0195) ENDIF
0B85: 5D 26    MOV   A,REG[0x26]        (0196)    mov   A, reg[ADCINCVR_mes_bPWM_IntTime_LSB]             ; Dummy Read  - required do not remove
0B87: 62 21 FF MOV   REG[0x21],0xFF     (0197)    mov   reg[ADCINCVR_mes_bPeriod], FFh                    ; Make sure counter starts at FF
                                        (0198) 
0B8A: 41 8F EF AND   REG[0x8F],0xEF     (0199)    and   reg[ADCINCVR_mes_bfAtoDcr3],~ADCINCVR_mes_fFSW0   ; Take Integrator out of reset
                                        (0200) IF ADCINCVR_mes_NoAZ
0B8D: 41 8E DF AND   REG[0x8E],0xDF     (0201)     and  reg[ADCINCVR_mes_bfAtoDcr2],~ADCINCVR_mes_fAutoZero  ; Take Integrator out of AutoZero
                                        (0202) ENDIF
                                        (0203) 
                                        (0204)                                                                ; Enable the A/D and Start it!
0B90: 43 23 05 OR    REG[0x23],0x5      (0205)    or    reg[ADCINCVR_mes_bCounter_CR0], (ADCINCVR_mes_fDBLK_ENABLE|ADCINCVR_mes_fPULSE_WIDE)   ; Enable the Counter
0B93: 43 27 01 OR    REG[0x27],0x1      (0206)    or    reg[ADCINCVR_mes_fPWM_LSB_CR0], ADCINCVR_mes_fDBLK_ENABLE          ; Enable PWM
0B96: 43 E1 04 OR    REG[0xE1],0x4      (0207)    or    reg[ADCINCVR_mes_bfPWM16_INT_REG], ADCINCVR_mes_bfPWM16_Mask    ; Enable Counter interrupts
0B99: 43 E1 01 OR    REG[0xE1],0x1      (0208)    or    reg[ADCINCVR_mes_bfCounter_INT_REG], ADCINCVR_mes_bfCounter_Mask
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_4
0B9C: 7F       RET                      (0210)    ret
                                        (0211) .ENDSECTION
                                        (0212) 
                                        (0213) .SECTION
                                        (0214) ;-----------------------------------------------------------------------------
                                        (0215) ;  FUNCTION NAME: ADCINCVR_mes_StopAD
                                        (0216) ;
                                        (0217) ;  DESCRIPTION:
                                        (0218) ;  Completely shuts down the A/D is an orderly manner.  Both the
                                        (0219) ;  Timer and Counter are disabled and their interrupts are deactivated.
                                        (0220) ;
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:  None
                                        (0224) ;
                                        (0225) ;  RETURNS: NA
                                        (0226) ;
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  ADCINCVR_mes_StopAD:
                                        (0235) _ADCINCVR_mes_StopAD:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
0B9D: 41 27 FE AND   REG[0x27],0xFE     (0237)    and   reg[ADCINCVR_mes_fPWM_LSB_CR0], ~ADCINCVR_mes_fDBLK_ENABLE     ; Disable the PWM
                                        (0238) 
0BA0: 41 23 FE AND   REG[0x23],0xFE     (0239)    and   reg[ADCINCVR_mes_bCounter_CR0], ~ADCINCVR_mes_fDBLK_ENABLE           ; Disable the Counter
                                        (0240) 
                                        (0241) IF ADCINCVR_mes_NoAZ
0BA3: 43 8E 20 OR    REG[0x8E],0x20     (0242)    or   reg[ADCINCVR_mes_bfAtoDcr2], ADCINCVR_mes_fAutoZero    ; Put the Integrator into Autozero mode
                                        (0243) ENDIF
                                        (0244) 
0BA6: 43 8F 10 OR    REG[0x8F],0x10     (0245)    or   reg[ADCINCVR_mes_bfAtoDcr3], ADCINCVR_mes_fFSW0        ; Put Integrator into reset
0BA9: 08       PUSH  A                  (0246)    push A
0BAA: 41 E1 FB AND   REG[0xE1],0xFB     (0247)    M8C_DisableIntMask ADCINCVR_mes_bfPWM16_INT_REG, ADCINCVR_mes_bfPWM16_Mask      ; Disable interrupts
0BAD: 41 E1 FE AND   REG[0xE1],0xFE     (0248)    M8C_DisableIntMask ADCINCVR_mes_bfCounter_INT_REG, ADCINCVR_mes_bfCounter_Mask
0BB0: 18       POP   A                  (0249)    pop  A
                                        (0250)    RAM_EPILOGUE RAM_USE_CLASS_1
0BB1: 7F       RET                      (0251)    ret
                                        (0252) .ENDSECTION
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: ADCINCVR_mes_fIsData
                                        (0257) ;  FUNCTION NAME: ADCINCVR_mes_fIsDataAvailable
                                        (0258) ;
                                        (0259) ;  DESCRIPTION:
                                        (0260) ;  Returns the status of the A/D Data is set whenever a new data
                                        (0261) ;  value is available.
                                        (0262) ;
                                        (0263) ;-----------------------------------------------------------------------------
                                        (0264) ;
                                        (0265) ;  ARGUMENTS: None
                                        (0266) ;
                                        (0267) ;  RETURNS:
                                        (0268) ;  A  Returns data status  A == 0 no data available
                                        (0269) ;                          A != 0 data available
                                        (0270) ;
                                        (0271) ;  SIDE EFFECTS:
                                        (0272) ;    The A and X registers may be modified by this or future implementations
                                        (0273) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0274) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0275) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0276) ;    functions.
                                        (0277) ;          
                                        (0278) ;    Currently only the page pointer registers listed below are modified: 
                                        (0279) ;          CUR_PP
                                        (0280) ;
                                        (0281)  ADCINCVR_mes_fIsData:
                                        (0282) _ADCINCVR_mes_fIsData:
                                        (0283)  ADCINCVR_mes_fIsDataAvailable:
                                        (0284) _ADCINCVR_mes_fIsDataAvailable:
                                        (0285)    RAM_PROLOGUE RAM_USE_CLASS_4
0BB2: 62 D0 00 MOV   REG[0xD0],0x0      (0286)    RAM_SETPAGE_CUR >ADCINCVR_mes_bfStatus
0BB5: 51 11    MOV   A,[iles+2]         (0287)    mov   A, [ADCINCVR_mes_bfStatus]                   ; Get status byte
0BB7: 21 10    AND   A,0x10             (0288)    and   A, ADCINCVR_mes_fDATA_READY                  ; Mask off other bits
                                        (0289)    RAM_EPILOGUE RAM_USE_CLASS_4
0BB9: 7F       RET                      (0290)    ret
                                        (0291) .ENDSECTION
                                        (0292) 
                                        (0293) .SECTION
                                        (0294) ;-----------------------------------------------------------------------------
                                        (0295) ;  FUNCTION NAME: ADCINCVR_mes_iGetDataClearFlag
                                        (0296) ;  FUNCTION NAME: ADCINCVR_mes_iGetData
                                        (0297) ;
                                        (0298) ;  DESCRIPTION:
                                        (0299) ;  Returns the data from the A/D.  Does not check if data is available.
                                        (0300) ;  iGetDataClearFlag clears the result ready flag as well.
                                        (0301) ;
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;
                                        (0304) ;  ARGUMENTS: None
                                        (0305) ;
                                        (0306) ;  RETURNS:
                                        (0307) ;  A:X  return the ADC result.
                                        (0308) ;
                                        (0309) ;  SIDE EFFECTS:
                                        (0310) ;    The A and X registers may be modified by this or future implementations
                                        (0311) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0313) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0314) ;    functions.
                                        (0315) ;          
                                        (0316) ;    Currently only the page pointer registers listed below are modified: 
                                        (0317) ;          CUR_PP
                                        (0318) ;
                                        (0319)  ADCINCVR_mes_iGetDataClearFlag:
                                        (0320) _ADCINCVR_mes_iGetDataClearFlag:   
                                        (0321)    RAM_PROLOGUE RAM_USE_CLASS_4
0BBA: 62 D0 00 MOV   REG[0xD0],0x0      (0322)    RAM_SETPAGE_CUR >ADCINCVR_mes_bfStatus
0BBD: 26 11 EF AND   [iles+2],0xEF      (0323)    and   [ADCINCVR_mes_bfStatus], ~ADCINCVR_mes_fDATA_READY  ; Clear Data ready bit
0BC0: 58 0F    MOV   X,[iles]           (0324)    mov   X, [(ADCINCVR_mes_iResult + HighByte)]
0BC2: 51 10    MOV   A,[iles+1]         (0325)    mov   A, [(ADCINCVR_mes_iResult + LowByte)]
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_4
0BC4: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) 
                                        (0330)  ADCINCVR_mes_iGetData:
                                        (0331) _ADCINCVR_mes_iGetData:
                                        (0332)    RAM_PROLOGUE RAM_USE_CLASS_4
0BC5: 62 D0 00 MOV   REG[0xD0],0x0      (0333)    RAM_SETPAGE_CUR >ADCINCVR_mes_iResult
0BC8: 58 0F    MOV   X,[iles]           (0334)    mov   X, [(ADCINCVR_mes_iResult + HighByte)]
0BCA: 51 10    MOV   A,[iles+1]         (0335)    mov   A, [(ADCINCVR_mes_iResult + LowByte)]
                                        (0336)    RAM_EPILOGUE RAM_USE_CLASS_4
0BCC: 7F       RET                      (0337)    ret
                                        (0338) .ENDSECTION
                                        (0339) 
                                        (0340) .SECTION
                                        (0341) ;-----------------------------------------------------------------------------
                                        (0342) ;  FUNCTION NAME: ADCINCVR_mes_ClearFlag
                                        (0343) ;
                                        (0344) ;  DESCRIPTION:
                                        (0345) ;  Clears the data ready flag.
                                        (0346) ;
                                        (0347) ;-----------------------------------------------------------------------------
                                        (0348) ;
                                        (0349) ;  ARGUMENTS: None
                                        (0350) ;
                                        (0351) ;  RETURNS: NA
                                        (0352) ;
                                        (0353) ;  SIDE EFFECTS:
                                        (0354) ;    The A and X registers may be modified by this or future implementations
                                        (0355) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0356) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0357) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0358) ;    functions.
                                        (0359) ;          
                                        (0360) ;    Currently only the page pointer registers listed below are modified: 
                                        (0361) ;          CUR_PP
                                        (0362) ;
                                        (0363)  ADCINCVR_mes_ClearFlag:
                                        (0364) _ADCINCVR_mes_ClearFlag:
                                        (0365)    RAM_PROLOGUE RAM_USE_CLASS_4
0BCD: 62 D0 00 MOV   REG[0xD0],0x0      (0366)    RAM_SETPAGE_CUR >ADCINCVR_mes_bfStatus
0BD0: 26 11 EF AND   [iles+2],0xEF      (0367)    and   [ADCINCVR_mes_bfStatus], ~ADCINCVR_mes_fDATA_READY  ; Clear Data ready bit
                                        (0368)    RAM_EPILOGUE RAM_USE_CLASS_4
0BD3: 7F       RET                      (0369)    ret
                                        (0370) .ENDSECTION
                                        (0371) 
                                        (0372) .SECTION
                                        (0373) ;-----------------------------------------------------------------------------
                                        (0374) ;  FUNCTION NAME: ADCINCVR_mes_SetResolution
                                        (0375) ;
                                        (0376) ;  DESCRIPTION:
                                        (0377) ;  Sets A/D resolution between 7 and 13 bits.
                                        (0378) ;
                                        (0379) ;-----------------------------------------------------------------------------
                                        (0380) ;
                                        (0381) ;  ARGUMENTS:
                                        (0382) ;  A  Passes the number of bits of resolution, between 7 and 13.
                                        (0383) ;
                                        (0384) ;  RETURNS:  NA
                                        (0385) ;
                                        (0386) ;  SIDE EFFECTS:
                                        (0387) ;    The A and X registers may be modified by this or future implementations
                                        (0388) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0389) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0390) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0391) ;    functions.
                                        (0392) ;          
                                        (0393) ;    Currently only the page pointer registers listed below are modified: 
                                        (0394) ;          CUR_PP
                                        (0395) ;
                                        (0396) ;     This function halts the PWM and the counter to sync the A/D , but
                                        (0397) ;     does not re-enable the counter or PWM. To restart the A/D, "Get_Samples"
                                        (0398) ;     should be called.
                                        (0399) ;
                                        (0400)  ADCINCVR_mes_SetResolution:
                                        (0401) _ADCINCVR_mes_SetResolution:
                                        (0402)    RAM_PROLOGUE RAM_USE_CLASS_4
0BD4: 62 D0 00 MOV   REG[0xD0],0x0      (0403)    RAM_SETPAGE_CUR >ADCINCVR_mes_bfStatus
                                        (0404)    
0BD7: 41 8E FE AND   REG[0x8E],0xFE     (0405)    and   reg[ADCINCVR_mes_bfAtoDcr2], ~ADCINCVR_mes_fRES_SET
                                        (0406) 
0BDA: 9F C1    CALL  0x0B9D             (0407)    call  ADCINCVR_mes_StopAD                       ; Stop the A/D if it is running
0BDC: 55 11 00 MOV   [iles+2],0x0       (0408)    mov   [ADCINCVR_mes_bfStatus], 00h              ; and clear status and old resolution
                                        (0409) 
                                        (0410)                                                    ; Check for resolution to be within min and max values
0BDF: 39 07    CMP   A,0x7              (0411)    cmp   A,ADCINCVR_mes_bMINRES                    ; Check low end of resolution
0BE1: D0 05    JNC   0x0BE7             (0412)    jnc   ADCINCVR_mes_CHECKHI
0BE3: 50 07    MOV   A,0x7              (0413)    mov   A,ADCINCVR_mes_bMINRES                    ; Too low - load legal low value
0BE5: 80 07    JMP   0x0BED             (0414)    jmp   ADCINCVR_mes_RES_OK
                                        (0415) 
                                        (0416) ADCINCVR_mes_CHECKHI:                              ; Check high end of resolution
0BE7: 39 0D    CMP   A,0xD              (0417)    cmp   A,ADCINCVR_mes_bMAXRES
0BE9: C0 03    JC    0x0BED             (0418)    jc    ADCINCVR_mes_RES_OK
0BEB: 50 0D    MOV   A,0xD              (0419)    mov   A,ADCINCVR_mes_bMAXRES                    ; Too high - load legal Max value
                                        (0420) 
                                        (0421) ADCINCVR_mes_RES_OK:
                                        (0422)                                                    ; Calculate compare value for the PWM which
                                        (0423)                                                    ; computes the integrate time
0BED: 11 07    SUB   A,0x7              (0424)    sub   A, ADCINCVR_mes_bMINRES                   ; Normalize with min resolution
0BEF: 2C 11    OR    [iles+2],A         (0425)    or    [ADCINCVR_mes_bfStatus], A
                                        (0426)                                                    ; Since min resolution is 7, 2^^7 = 128, the clock
                                        (0427)                                                    ; is running 4x so 128*4=512 or 0x0200
0BF1: 01 01    ADD   A,0x1              (0428)    add   A,01h                                     ; The MSB is 02h.
0BF3: 5C       MOV   X,A                (0429)    mov   X,A
0BF4: 50 01    MOV   A,0x1              (0430)    mov   A,01h
                                        (0431) 
                                        (0432) ADCINCVR_mes_CALC_INTTIME:                         ; Now shift the MSB left for every bit of resolution of min (7).
0BF6: 64       ASL   A                  (0433)    asl   A
0BF7: 79       DEC   X                  (0434)    dec   X
0BF8: BF FD    JNZ   0x0BF6             (0435)    jnz   ADCINCVR_mes_CALC_INTTIME
                                        (0436) 
                                        (0437) ADCINCVR_mes_LOAD_INTTIME:                         ; Load compare value and Calc time into registers
                                        (0438)                                                    ; Since minimum resolution is 7 bits, this value will always start at 0
0BFA: 62 26 00 MOV   REG[0x26],0x0      (0439)    mov   reg[ADCINCVR_mes_bPWM_IntTime_LSB], 00h
0BFD: 60 2A    MOV   REG[0x2A],A        (0440)    mov   reg[ADCINCVR_mes_bPWM_IntTime_MSB], A
                                        (0441) 
                                        (0442)                                                    ; Load the CalcTime into the PWM Period
0BFF: 62 25 24 MOV   REG[0x25],0x24     (0443)    mov   reg[ADCINCVR_mes_bPWM_Period_LSB], <wCalcTime
0C02: 01 00    ADD   A,0x0              (0444)    add   A, >wCalcTime
0C04: 60 29    MOV   REG[0x29],A        (0445)    mov   reg[ADCINCVR_mes_bPWM_Period_MSB],A
                                        (0446)    RAM_EPILOGUE RAM_USE_CLASS_4
0C06: 7F       RET                      (0447)    ret
(0448) .ENDSECTION
(0449) ; End of File ADCINCVR_mes.asm
FILE: .\delay.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: delay.asm
                                        (0004) ;;
                                        (0005) ;;  DESCRIPTION: Delay functions implementation file
                                        (0006) ;;
                                        (0007) ;;-----------------------------------------------------------------------------
                                        (0008) ;;  Copyright (c) Cypress MicroSystems 2002-2006. All Rights Reserved.
                                        (0009) ;;*****************************************************************************
                                        (0010) ;;*****************************************************************************
                                        (0011) 
                                        (0012) ;-----------------------------------------------------------------------------
                                        (0013) ;  Include Files
                                        (0014) ;-----------------------------------------------------------------------------
                                        (0015) include "m8c.inc"
                                        (0016) include "memory.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------------------------------------
                                        (0021) export  Delay50uTimes
                                        (0022) export _Delay50uTimes
                                        (0023) 
                                        (0024) export  Delay50u
                                        (0025) export _Delay50u
                                        (0026) 
                                        (0027) area text(rom)
                                        (0028) .SECTION
                                        (0029) ;-----------------------------------------------------------------------------
                                        (0030) ;  FUNCTION NAME: Delay50uTimes
                                        (0031) ;
                                        (0032) ;  DESCRIPTION:
                                        (0033) ;     Delay increments of 50uSeconds
                                        (0034) ;
                                        (0035) ;-----------------------------------------------------------------------------
                                        (0036) ;
                                        (0037) ;  ARGUMENTS:
                                        (0038) ;     A contains the delay multiplier
                                        (0039) ;
                                        (0040) ;  RETURNS:
                                        (0041) ;
                                        (0042) ;  SIDE EFFECTS:
                                        (0043) ;    The A and X registers may be modified by this or future implementations
                                        (0044) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0045) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0046) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0047) ;    functions.
                                        (0048) ;
                                        (0049) ;
                                        (0050)  Delay50uTimes:
                                        (0051) _Delay50uTimes:
                                        (0052)     RAM_PROLOGUE RAM_USE_CLASS_1
0C07: 90 0C    CALL  _Delay50u|Delay50u (0053)     call  Delay50u
0C09: 78       DEC   A                  (0054)     dec   A
0C0A: BF FC    JNZ   Delay50uTimes|__text_start|_Delay50uTimes(0055)     jnz   Delay50uTimes
                                        (0056)     RAM_EPILOGUE RAM_USE_CLASS_1
0C0C: 7F       RET                      (0057)     ret
                                        (0058) 
                                        (0059) .ENDSECTION
                                        (0060) 
                                        (0061) ;-----------------------------------------------------------------------------
                                        (0062) ;  FUNCTION NAME: Delay50u
                                        (0063) ;
                                        (0064) ;  DESCRIPTION:
                                        (0065) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0066) ;     Slower clock frequencies the delay will be;
                                        (0067) ;           1.5
                                        (0068) ;        -------------- * 50uSec
                                        (0069) ;        clock_freq(MHz)
                                        (0070) ;
                                        (0071) ;
                                        (0072) ;-----------------------------------------------------------------------------
                                        (0073) ;
                                        (0074) ;  ARGUMENTS: none
                                        (0075) ;
                                        (0076) ;  RETURNS: none
                                        (0077) ;
                                        (0078) ;  SIDE EFFECTS:
                                        (0079) ;    The A and X registers may be modified by this or future implementations
                                        (0080) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0081) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0082) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0083) ;    functions.
                                        (0084) ;
                                        (0085) ;  THEORY of OPERATION or PROCEDURE:
                                        (0086) ;
                                        (0087) .LITERAL
                                        (0088)  Delay50u_Table::
                                        (0089)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0090) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0091) .ENDLITERAL
                                        (0092) .SECTION
                                        (0093) 
                                        (0094)   Delay50u:
                                        (0095)  _Delay50u:                      ; [11]  Call
                                        (0096)     RAM_PROLOGUE RAM_USE_CLASS_1
0C0D: 08       PUSH  A                  
0C0E: 19 3A    SBB   A,0x3A             
0C10: 7C 01 01 LCALL 0x0101             
0C13: 01 01    ADD   A,0x1              
0C15: 08       PUSH  A                  (0097)     push  A
0C16: 71 10    OR    F,0x10             (0098)     M8C_SetBank1                       ; [4]
0C18: 5D E0    MOV   A,REG[0xE0]        (0099)     mov   A, reg[OSC_CR0]              ; [6] Get delay value
0C1A: 70 EF    AND   F,0xEF             (0100)     M8C_SetBank0                       ; [4]
0C1C: 21 07    AND   A,0x7              (0101)     and   A,07h                        ; [4] Mask off only the clock bits
0C1E: 39 05    CMP   A,0x5              (0102)     cmp   A,05h
0C20: D0 06    JNC   0x0C27             (0103)     jnc   Delay50u_End
0C22: FF E9    INDEX Delay50u_Table     (0104)     index Delay50u_Table               ; [13] Get delay value
                                        (0105) Delay50u_Loop:                         ;
0C24: 78       DEC   A                  (0106)     dec   A                            ; [4]
0C25: BF FE    JNZ   0x0C24             (0107)     jnz   Delay50u_Loop                ; [5]
                                        (0108) Delay50u_End:
0C27: 18       POP   A                  (0109)     pop   A
                                        (0110)     RAM_EPILOGUE RAM_USE_CLASS_1
0C28: 7F       RET                      (0111)     ret
(0112) .ENDSECTION
FILE: D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\main.c
(0001) /* ////////////////////////////////////////////////////////////////////////////
(0002) ** Project:      ExplorerSound
(0003) ** Author:    Guido Ottaviani-->guido@guiott.com<--
(0004) ** Description: 
(0005) ** version 0.2
(0006) **
(0007) ** Detailed descriptions are on file "Notes.txt" 
(0008) **
(0009) -------------------------------------------------------------------------------
(0010) Copyright 2010 Guido Ottaviani
(0011) guido@guiott.com
(0012) 
(0013) 	ExplorerSound is free software: you can redistribute it and/or modify
(0014)     it under the terms of the GNU General Public License as published by
(0015)     the Free Software Foundation, either version 3 of the License, or
(0016)     (at your option) any later version.
(0017) 
(0018)     ExplorerSound is distributed in the hope that it will be useful,
(0019)     but WITHOUT ANY WARRANTY; without even the implied warranty of
(0020)     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
(0021)     GNU General Public License for more details.
(0022) 
(0023)     You should have received a copy of the GNU General Public License
(0024)     along with ExplorerSound.  If not, see <http://www.gnu.org/licenses/>.
(0025) -------------------------------------------------------------------------------      
(0026) /////////////////////////////////////////////////////////////////////////////*/
(0027) 
(0028) #include <m8c.h>        // part specific constants and macros
(0029) #include <stdlib.h>
(0030) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0031) #include "prototypes.h"
(0032) 
(0033) #include "delay.h"
(0034) 
(0035) #pragma interrupt_handler HB_Tmr_ISR_C // int handler for program clock
(0036) 
(0037) int PotValue;
(0038) int MesValue[3];
(0039) unsigned int i;
(0040) char str[7];
(0041) BOOL TmrFlag = 0;
(0042) 
(0043) void main(void)
_main:
  PortNum              --> X+1
  PortIndx             --> X+0
    0C29: 10       PUSH  X
    0C2A: 4F       MOV   X,SP
    0C2B: 38 04    ADD   SP,0x4
(0044) {
(0045) 	BYTE PortNum[3];
(0046) 	BYTE PortIndx = 0;
    0C2D: 56 00 00 MOV   [X+0],0x0
(0047) 	
(0048) 	BlocksInit();
    0C30: 92 14    CALL  _BlocksInit
(0049) 	
(0050) 	M8C_EnableGInt ;               // Turn on interrupts 
    0C32: 71 01    OR    F,0x1
(0051) 	
(0052)  	LED_2_On();
    0C34: 10       PUSH  X
    0C35: 7C 06 2E LCALL 0x062E
    0C38: 20       POP   X
(0053) 	PortNum[0] = AMUX4_mic_PORT0_1;
    0C39: 56 01 00 MOV   [X+1],0x0
(0054) 	PortNum[1] = AMUX4_mic_PORT0_3;
    0C3C: 56 02 01 MOV   [X+2],0x1
(0055) 	PortNum[2] = AMUX4_mic_PORT0_7;
    0C3F: 56 03 03 MOV   [X+3],0x3
(0056) 	
(0057) 	LedTest();
    0C42: 92 A6    CALL  _LedTest
    0C44: 80 9B    JMP   0x0CE0
(0058) 	
(0059) 	// Main loop=============================================================
(0060) 	while (1)
(0061) 	{
(0062) 		if(ADCINCVR_pot_fIsDataAvailable() != 0)// Wait for data to be ready
    0C46: 10       PUSH  X
    0C47: 7C 0A 6D LCALL 0x0A6D
    0C4A: 62 D0 00 MOV   REG[0xD0],0x0
    0C4D: 20       POP   X
    0C4E: 39 00    CMP   A,0x0
    0C50: A0 1E    JZ    0x0C6F
(0063)         {   
(0064) 			// Get Data, Clear data ready flag, in the range 0-1800
(0065) 			PotValue = ADCINCVR_pot_iGetDataClearFlag()+900;
    0C52: 10       PUSH  X
    0C53: 7C 0A 75 LCALL 0x0A75
    0C56: 62 D0 00 MOV   REG[0xD0],0x0
    0C59: 5A 20    MOV   [__r0],X
    0C5B: 20       POP   X
    0C5C: 01 84    ADD   A,0x84
    0C5E: 62 D0 00 MOV   REG[0xD0],0x0
    0C61: 53 28    MOV   [PotValue+1],A
    0C63: 62 D0 00 MOV   REG[0xD0],0x0
    0C66: 51 20    MOV   A,[__r0]
    0C68: 09 03    ADC   A,0x3
    0C6A: 62 D0 00 MOV   REG[0xD0],0x0
    0C6D: 53 27    MOV   [PotValue],A
(0066) 		}
(0067)         
(0068) 		if(ADCINCVR_mes_fIsDataAvailable() != 0)// Wait for data to be ready
    0C6F: 10       PUSH  X
    0C70: 7C 0B B2 LCALL 0x0BB2
    0C73: 62 D0 00 MOV   REG[0xD0],0x0
    0C76: 20       POP   X
    0C77: 39 00    CMP   A,0x0
    0C79: A0 3F    JZ    0x0CB9
(0069)         {   
(0070) 			// Get Data, Clear data ready flag
(0071) 			MesValue[PortIndx] = ADCINCVR_mes_iGetDataClearFlag(); 
    0C7B: 10       PUSH  X
    0C7C: 7C 0B BA LCALL 0x0BBA
    0C7F: 62 D0 00 MOV   REG[0xD0],0x0
    0C82: 53 1F    MOV   [__r1],A
    0C84: 5A 20    MOV   [__r0],X
    0C86: 20       POP   X
    0C87: 52 00    MOV   A,[X+0]
    0C89: 53 1D    MOV   [__r3],A
    0C8B: 55 1E 00 MOV   [__r2],0x0
    0C8E: 65 1D    ASL   [__r3]
    0C90: 6B 1E    RLC   [__r2]
    0C92: 06 1D 21 ADD   [__r3],0x21
    0C95: 0E 1E 00 ADC   [__r2],0x0
    0C98: 51 1E    MOV   A,[__r2]
    0C9A: 60 D5    MOV   REG[0xD5],A
    0C9C: 51 20    MOV   A,[__r0]
    0C9E: 3F 1D    MVI   [__r3],A
    0CA0: 51 1F    MOV   A,[__r1]
    0CA2: 3F 1D    MVI   [__r3],A
(0072) 														  
(0073) 			PortIndx++; // next mux port
    0CA4: 77 00    INC   [X+0]
(0074) 			if (PortIndx <3)
    0CA6: 3D 00 03 CMP   [X+0],0x3
    0CA9: D0 0F    JNC   0x0CB9
(0075) 			{
(0076) 				AMUX4_mic_InputSelect(PortIndx);
    0CAB: 10       PUSH  X
    0CAC: 52 00    MOV   A,[X+0]
    0CAE: 7C 09 60 LCALL 0x0960
    0CB1: 20       POP   X
(0077) 				ADCINCVR_mes_GetSamples(1); // Start ADC to read once more
    0CB2: 10       PUSH  X
    0CB3: 50 01    MOV   A,0x1
    0CB5: 7C 0B 6D LCALL 0x0B6D
    0CB8: 20       POP   X
(0078) 			}
(0079) 		}
(0080) 		
(0081) 		if (TmrFlag) // every 10ms
    0CB9: 62 D0 00 MOV   REG[0xD0],0x0
    0CBC: 3C 2B 00 CMP   [TmrFlag],0x0
    0CBF: A0 20    JZ    0x0CE0
(0082) 		{
(0083) 			TmrFlag = 0;
    0CC1: 55 2B 00 MOV   [TmrFlag],0x0
(0084) 			PortIndx= 0;
    0CC4: 56 00 00 MOV   [X+0],0x0
(0085) 			UartTxValues();
    0CC7: 90 B4    CALL  _UartTxValues
(0086) 				
(0087) 			AMUX4_mic_InputSelect(PortIndx); 
    0CC9: 10       PUSH  X
    0CCA: 52 00    MOV   A,[X+0]
    0CCC: 7C 09 60 LCALL 0x0960
    0CCF: 20       POP   X
(0088) 			ADCINCVR_mes_GetSamples(1);    // Start ADC to read 1 sample
    0CD0: 10       PUSH  X
    0CD1: 50 01    MOV   A,0x1
    0CD3: 7C 0B 6D LCALL 0x0B6D
    0CD6: 20       POP   X
(0089) 			ADCINCVR_pot_GetSamples(1);    // Start ADC to read 1 sample 
    0CD7: 10       PUSH  X
    0CD8: 50 01    MOV   A,0x1
    0CDA: 7C 0A 28 LCALL 0x0A28
    0CDD: 20       POP   X
(0090) 			
(0091) 			DigitalOut();
    0CDE: 90 07    CALL  _DigitalOut
(0092) 		}
(0093) 	}// ========================================================== Main loop 
    0CE0: 8F 65    JMP   0x0C46
    0CE2: 38 FC    ADD   SP,0xFC
    0CE4: 20       POP   X
    0CE5: 8F FF    JMP   0x0CE5
(0094) }
(0095) 
(0096) // Functions ***************************************************************
(0097) void DigitalOut(void)
(0098) {// Controls the outputs according to pot setting point
(0099) 	DIGITAL_OUT_Off();
_DigitalOut:
    0CE7: 10       PUSH  X
    0CE8: 7C 08 60 LCALL 0x0860
    0CEB: 20       POP   X
(0100) 	if (MesValue[0]>PotValue)
    0CEC: 62 D0 00 MOV   REG[0xD0],0x0
    0CEF: 51 28    MOV   A,[PotValue+1]
    0CF1: 62 D0 00 MOV   REG[0xD0],0x0
    0CF4: 12 22    SUB   A,[MesValue+1]
    0CF6: 51 21    MOV   A,[MesValue]
    0CF8: 31 80    XOR   A,0x80
    0CFA: 62 D0 00 MOV   REG[0xD0],0x0
    0CFD: 53 1C    MOV   [__rX],A
    0CFF: 62 D0 00 MOV   REG[0xD0],0x0
    0D02: 51 27    MOV   A,[PotValue]
    0D04: 31 80    XOR   A,0x80
    0D06: 62 D0 00 MOV   REG[0xD0],0x0
    0D09: 1A 1C    SBB   A,[__rX]
    0D0B: D0 0B    JNC   0x0D17
(0101) 	{
(0102) 		DIGITAL_OUT_On();
    0D0D: 10       PUSH  X
    0D0E: 7C 08 5C LCALL 0x085C
(0103) 		LED_1_On();
    0D11: 7C 06 6B LCALL 0x066B
    0D14: 20       POP   X
(0104) 	}
    0D15: 80 06    JMP   0x0D1C
(0105) 	else
(0106) 	{
(0107) 		LED_1_Off();
    0D17: 10       PUSH  X
    0D18: 7C 06 6F LCALL 0x066F
    0D1B: 20       POP   X
(0108) 	}
(0109) 		
(0110) 	if (MesValue[1]>PotValue)
    0D1C: 62 D0 00 MOV   REG[0xD0],0x0
    0D1F: 51 28    MOV   A,[PotValue+1]
    0D21: 62 D0 00 MOV   REG[0xD0],0x0
    0D24: 12 24    SUB   A,[MesValue+3]
    0D26: 51 23    MOV   A,[MesValue+2]
    0D28: 31 80    XOR   A,0x80
    0D2A: 62 D0 00 MOV   REG[0xD0],0x0
    0D2D: 53 1C    MOV   [__rX],A
    0D2F: 62 D0 00 MOV   REG[0xD0],0x0
    0D32: 51 27    MOV   A,[PotValue]
    0D34: 31 80    XOR   A,0x80
    0D36: 62 D0 00 MOV   REG[0xD0],0x0
    0D39: 1A 1C    SBB   A,[__rX]
    0D3B: D0 0B    JNC   0x0D47
(0111) 	{
(0112) 		DIGITAL_OUT_On();
    0D3D: 10       PUSH  X
    0D3E: 7C 08 5C LCALL 0x085C
(0113) 		LED_2_On();
    0D41: 7C 06 2E LCALL 0x062E
    0D44: 20       POP   X
(0114) 	}
    0D45: 80 06    JMP   0x0D4C
(0115) 	else
(0116) 	{
(0117) 		LED_2_Off();
    0D47: 10       PUSH  X
    0D48: 7C 06 32 LCALL 0x0632
    0D4B: 20       POP   X
(0118) 	}
(0119) 	
(0120) 	if (MesValue[2]>PotValue)
    0D4C: 62 D0 00 MOV   REG[0xD0],0x0
    0D4F: 51 28    MOV   A,[PotValue+1]
    0D51: 62 D0 00 MOV   REG[0xD0],0x0
    0D54: 12 26    SUB   A,[MesValue+5]
    0D56: 51 25    MOV   A,[MesValue+4]
    0D58: 31 80    XOR   A,0x80
    0D5A: 62 D0 00 MOV   REG[0xD0],0x0
    0D5D: 53 1C    MOV   [__rX],A
    0D5F: 62 D0 00 MOV   REG[0xD0],0x0
    0D62: 51 27    MOV   A,[PotValue]
    0D64: 31 80    XOR   A,0x80
    0D66: 62 D0 00 MOV   REG[0xD0],0x0
    0D69: 1A 1C    SBB   A,[__rX]
    0D6B: D0 0B    JNC   0x0D77
(0121) 	{
(0122) 		DIGITAL_OUT_On();
    0D6D: 10       PUSH  X
    0D6E: 7C 08 5C LCALL 0x085C
(0123) 		LED_3_On();
    0D71: 7C 05 F1 LCALL 0x05F1
    0D74: 20       POP   X
(0124) 	}
    0D75: 80 06    JMP   0x0D7C
(0125) 	else
(0126) 	{
(0127) 		LED_3_Off();
    0D77: 10       PUSH  X
    0D78: 7C 05 F5 LCALL 0x05F5
    0D7B: 20       POP   X
(0128) 	}
    0D7C: 7F       RET   
(0129) }
(0130) 
(0131) void UartTxValues(void)
(0132) {// Transmit via UART the analog values read from various inputs
(0133) 	TX8_CPutString("\n\rPot Value = ");
_UartTxValues:
    0D7D: 10       PUSH  X
    0D7E: 50 01    MOV   A,0x1
    0D80: 08       PUSH  A
    0D81: 50 C8    MOV   A,0xC8
    0D83: 5C       MOV   X,A
    0D84: 18       POP   A
    0D85: 7C 05 16 LCALL 0x0516
    0D88: 20       POP   X
(0134) 	itoa(str, PotValue,10);
    0D89: 50 00    MOV   A,0x0
    0D8B: 08       PUSH  A
    0D8C: 50 0A    MOV   A,0xA
    0D8E: 08       PUSH  A
    0D8F: 62 D0 00 MOV   REG[0xD0],0x0
    0D92: 51 27    MOV   A,[PotValue]
    0D94: 08       PUSH  A
    0D95: 51 28    MOV   A,[PotValue+1]
    0D97: 08       PUSH  A
    0D98: 50 00    MOV   A,0x0
    0D9A: 08       PUSH  A
    0D9B: 50 13    MOV   A,0x13
    0D9D: 08       PUSH  A
    0D9E: 7C 0F 90 LCALL _itoa
    0DA1: 38 FA    ADD   SP,0xFA
(0135) 	TX8_PutString(str);
    0DA3: 10       PUSH  X
    0DA4: 50 00    MOV   A,0x0
    0DA6: 08       PUSH  A
    0DA7: 50 13    MOV   A,0x13
    0DA9: 5C       MOV   X,A
    0DAA: 18       POP   A
    0DAB: 7C 04 B4 LCALL 0x04B4
    0DAE: 20       POP   X
(0136) 	TX8_CPutString("    Mes Value: 1 = ");
    0DAF: 10       PUSH  X
    0DB0: 50 01    MOV   A,0x1
    0DB2: 08       PUSH  A
    0DB3: 50 B4    MOV   A,0xB4
    0DB5: 5C       MOV   X,A
    0DB6: 18       POP   A
    0DB7: 7C 05 16 LCALL 0x0516
    0DBA: 20       POP   X
(0137) 	itoa(str, MesValue[0],10);
    0DBB: 50 00    MOV   A,0x0
    0DBD: 08       PUSH  A
    0DBE: 50 0A    MOV   A,0xA
    0DC0: 08       PUSH  A
    0DC1: 62 D0 00 MOV   REG[0xD0],0x0
    0DC4: 51 21    MOV   A,[MesValue]
    0DC6: 08       PUSH  A
    0DC7: 51 22    MOV   A,[MesValue+1]
    0DC9: 08       PUSH  A
    0DCA: 50 00    MOV   A,0x0
    0DCC: 08       PUSH  A
    0DCD: 50 13    MOV   A,0x13
    0DCF: 08       PUSH  A
    0DD0: 7C 0F 90 LCALL _itoa
    0DD3: 38 FA    ADD   SP,0xFA
(0138) 	TX8_PutString(str);
    0DD5: 10       PUSH  X
    0DD6: 50 00    MOV   A,0x0
    0DD8: 08       PUSH  A
    0DD9: 50 13    MOV   A,0x13
    0DDB: 5C       MOV   X,A
    0DDC: 18       POP   A
    0DDD: 7C 04 B4 LCALL 0x04B4
    0DE0: 20       POP   X
(0139) 	TX8_CPutString("  -  2 = ");
    0DE1: 10       PUSH  X
    0DE2: 50 01    MOV   A,0x1
    0DE4: 08       PUSH  A
    0DE5: 50 AA    MOV   A,0xAA
    0DE7: 5C       MOV   X,A
    0DE8: 18       POP   A
    0DE9: 7C 05 16 LCALL 0x0516
    0DEC: 20       POP   X
(0140) 	itoa(str, MesValue[1],10);
    0DED: 50 00    MOV   A,0x0
    0DEF: 08       PUSH  A
    0DF0: 50 0A    MOV   A,0xA
    0DF2: 08       PUSH  A
    0DF3: 62 D0 00 MOV   REG[0xD0],0x0
    0DF6: 51 23    MOV   A,[MesValue+2]
    0DF8: 08       PUSH  A
    0DF9: 51 24    MOV   A,[MesValue+3]
    0DFB: 08       PUSH  A
    0DFC: 50 00    MOV   A,0x0
    0DFE: 08       PUSH  A
    0DFF: 50 13    MOV   A,0x13
    0E01: 08       PUSH  A
    0E02: 7C 0F 90 LCALL _itoa
    0E05: 38 FA    ADD   SP,0xFA
(0141) 	TX8_PutString(str);
    0E07: 10       PUSH  X
    0E08: 50 00    MOV   A,0x0
    0E0A: 08       PUSH  A
    0E0B: 50 13    MOV   A,0x13
    0E0D: 5C       MOV   X,A
    0E0E: 18       POP   A
    0E0F: 7C 04 B4 LCALL 0x04B4
    0E12: 20       POP   X
(0142) 	TX8_CPutString("  -  3 = ");
    0E13: 10       PUSH  X
    0E14: 50 01    MOV   A,0x1
    0E16: 08       PUSH  A
    0E17: 50 A0    MOV   A,0xA0
    0E19: 5C       MOV   X,A
    0E1A: 18       POP   A
    0E1B: 7C 05 16 LCALL 0x0516
    0E1E: 20       POP   X
(0143) 	itoa(str, MesValue[2],10);
    0E1F: 50 00    MOV   A,0x0
    0E21: 08       PUSH  A
    0E22: 50 0A    MOV   A,0xA
    0E24: 08       PUSH  A
    0E25: 62 D0 00 MOV   REG[0xD0],0x0
    0E28: 51 25    MOV   A,[MesValue+4]
    0E2A: 08       PUSH  A
    0E2B: 51 26    MOV   A,[MesValue+5]
    0E2D: 08       PUSH  A
    0E2E: 50 00    MOV   A,0x0
    0E30: 08       PUSH  A
    0E31: 50 13    MOV   A,0x13
    0E33: 08       PUSH  A
    0E34: 7C 0F 90 LCALL _itoa
    0E37: 38 FA    ADD   SP,0xFA
(0144) 	TX8_PutString(str);
    0E39: 10       PUSH  X
    0E3A: 50 00    MOV   A,0x0
    0E3C: 08       PUSH  A
    0E3D: 50 13    MOV   A,0x13
    0E3F: 5C       MOV   X,A
    0E40: 18       POP   A
    0E41: 7C 04 B4 LCALL 0x04B4
    0E44: 20       POP   X
    0E45: 7F       RET   
(0145) }
(0146) 	
(0147) void BlocksInit(void)
(0148) {// Analog and digital blocks inizialization
(0149) 	ADCINCVR_pot_Start(ADCINCVR_pot_HIGHPOWER);	
_BlocksInit:
    0E46: 10       PUSH  X
    0E47: 50 03    MOV   A,0x3
    0E49: 7C 0A 04 LCALL 0x0A04
    0E4C: 20       POP   X
(0150) 	ADCINCVR_mes_Start(ADCINCVR_mes_HIGHPOWER);
    0E4D: 10       PUSH  X
    0E4E: 50 03    MOV   A,0x3
    0E50: 7C 0B 49 LCALL 0x0B49
(0151) 	AMUX4_mic_Start();
    0E53: 7C 09 7B LCALL 0x097B
    0E56: 20       POP   X
(0152) 	BPF4_4KHz_Start(BPF4_4KHz_HIGHPOWER);
    0E57: 10       PUSH  X
    0E58: 50 03    MOV   A,0x3
    0E5A: 7C 08 99 LCALL 0x0899
(0153) 	I2CHW_Start();
    0E5D: 7C 06 A8 LCALL 0x06A8
    0E60: 20       POP   X
(0154) 	PGA_out_Start(PGA_out_HIGHPOWER);
    0E61: 10       PUSH  X
    0E62: 50 03    MOV   A,0x3
    0E64: 7C 05 B1 LCALL 0x05B1
    0E67: 20       POP   X
(0155) 	PGA_pre_Start(PGA_pre_HIGHPOWER); 
    0E68: 10       PUSH  X
    0E69: 50 03    MOV   A,0x3
    0E6B: 7C 05 71 LCALL 0x0571
    0E6E: 20       POP   X
(0156) 	RefMux_1_Start(RefMux_1_HIGHPOWER);
    0E6F: 10       PUSH  X
    0E70: 50 03    MOV   A,0x3
    0E72: 7C 05 49 LCALL 0x0549
    0E75: 20       POP   X
(0157)     SCBLOCK_inbuff_Start(SCBLOCK_inbuff_HIGHPOWER);
    0E76: 10       PUSH  X
    0E77: 50 03    MOV   A,0x3
    0E79: 7C 05 31 LCALL 0x0531
(0158) 	LED_1_Start();
    0E7C: 7C 06 6F LCALL 0x066F
(0159) 	LED_2_Start();
    0E7F: 7C 06 32 LCALL 0x0632
(0160) 	LED_3_Start();
    0E82: 7C 05 F5 LCALL 0x05F5
(0161) 	DIGITAL_OUT_Start();  
    0E85: 7C 08 60 LCALL 0x0860
(0162) 	
(0163) 	TX8_EnableInt();
    0E88: 7C 04 59 LCALL 0x0459
    0E8B: 20       POP   X
(0164) 	TX8_Start(TX8_PARITY_NONE);
    0E8C: 10       PUSH  X
    0E8D: 50 00    MOV   A,0x0
    0E8F: 7C 04 73 LCALL 0x0473
    0E92: 20       POP   X
(0165) 	
(0166) 	AMUX4_mic_InputSelect(AMUX4_mic_PORT0_1);
    0E93: 10       PUSH  X
    0E94: 50 00    MOV   A,0x0
    0E96: 7C 09 60 LCALL 0x0960
    0E99: 20       POP   X
(0167) 	PGA_pre_SetGain(PGA_pre_G1_00);
    0E9A: 10       PUSH  X
    0E9B: 50 F8    MOV   A,0xF8
    0E9D: 7C 05 83 LCALL 0x0583
(0168) 	
(0169)     HB_Tmr_EnableInt();  
    0EA0: 7C 07 FC LCALL 0x07FC
(0170) 	HB_Tmr_Start();  	
    0EA3: 7C 08 04 LCALL 0x0804
    0EA6: 20       POP   X
    0EA7: 7F       RET   
(0171) }
(0172) 	
(0173) void HB_Tmr_ISR_C(void)
(0174) {// Base clock for all of the timings in the program
_HB_Tmr_ISR_C:
    0EA8: 71 C0    OR    F,0xC0
    0EAA: 08       PUSH  A
    0EAB: 5D D0    MOV   A,REG[0xD0]
    0EAD: 08       PUSH  A
(0175) 	TmrFlag = 1;
    0EAE: 62 D0 00 MOV   REG[0xD0],0x0
    0EB1: 55 2B 01 MOV   [TmrFlag],0x1
    0EB4: 18       POP   A
    0EB5: 60 D0    MOV   REG[0xD0],A
    0EB7: 18       POP   A
    0EB8: 7E       RETI  
(0176) }
(0177) 
(0178) void DelayMs(int Ms)
(0179) {
_DelayMs:
  i                    --> X+0
  Ms                   --> X-5
    0EB9: 10       PUSH  X
    0EBA: 4F       MOV   X,SP
    0EBB: 38 02    ADD   SP,0x2
(0180) 	int i;
(0181) 	for (i=0; i<Ms; i++)
    0EBD: 56 01 00 MOV   [X+1],0x0
    0EC0: 56 00 00 MOV   [X+0],0x0
    0EC3: 80 0D    JMP   0x0ED1
(0182) 	{
(0183) 		Delay50uTimes(20);
    0EC5: 10       PUSH  X
    0EC6: 50 14    MOV   A,0x14
    0EC8: 7C 0C 07 LCALL Delay50uTimes|__text_start|_Delay50uTimes
    0ECB: 20       POP   X
(0184) 	}
    0ECC: 77 01    INC   [X+1]
    0ECE: 0F 00 00 ADC   [X+0],0x0
    0ED1: 52 01    MOV   A,[X+1]
    0ED3: 13 FC    SUB   A,[X-4]
    0ED5: 52 FB    MOV   A,[X-5]
    0ED7: 31 80    XOR   A,0x80
    0ED9: 62 D0 00 MOV   REG[0xD0],0x0
    0EDC: 53 1C    MOV   [__rX],A
    0EDE: 52 00    MOV   A,[X+0]
    0EE0: 31 80    XOR   A,0x80
    0EE2: 1A 1C    SBB   A,[__rX]
    0EE4: CF E0    JC    0x0EC5
    0EE6: 38 FE    ADD   SP,0xFE
    0EE8: 20       POP   X
    0EE9: 7F       RET   
(0185) }
(0186) 
(0187) void LedTest(void)
(0188) {
_LedTest:
  i                    --> X+0
    0EEA: 10       PUSH  X
    0EEB: 4F       MOV   X,SP
    0EEC: 38 02    ADD   SP,0x2
(0189) 	int i;
(0190) 	LED_1_Off();
    0EEE: 10       PUSH  X
    0EEF: 7C 06 6F LCALL 0x066F
(0191) 	LED_2_Off();
    0EF2: 7C 06 32 LCALL 0x0632
(0192) 	LED_3_Off();
    0EF5: 7C 05 F5 LCALL 0x05F5
    0EF8: 20       POP   X
(0193) 	
(0194) 	for (i=0; i<3; i++)
    0EF9: 56 01 00 MOV   [X+1],0x0
    0EFC: 56 00 00 MOV   [X+0],0x0
(0195) 	{
(0196) 		LED_1_On();
    0EFF: 10       PUSH  X
    0F00: 7C 06 6B LCALL 0x066B
    0F03: 20       POP   X
(0197) 		DelayMs(500);
    0F04: 50 01    MOV   A,0x1
    0F06: 08       PUSH  A
    0F07: 50 F4    MOV   A,0xF4
    0F09: 08       PUSH  A
    0F0A: 9F AD    CALL  _DelayMs
    0F0C: 38 FE    ADD   SP,0xFE
(0198) 		LED_1_Off();
    0F0E: 10       PUSH  X
    0F0F: 7C 06 6F LCALL 0x066F
(0199) 		LED_2_On();
    0F12: 7C 06 2E LCALL 0x062E
    0F15: 20       POP   X
(0200) 		DelayMs(500);
    0F16: 50 01    MOV   A,0x1
    0F18: 08       PUSH  A
    0F19: 50 F4    MOV   A,0xF4
    0F1B: 08       PUSH  A
    0F1C: 9F 9B    CALL  _DelayMs
    0F1E: 38 FE    ADD   SP,0xFE
(0201) 		LED_2_Off();
    0F20: 10       PUSH  X
    0F21: 7C 06 32 LCALL 0x0632
(0202) 		LED_3_On();
    0F24: 7C 05 F1 LCALL 0x05F1
    0F27: 20       POP   X
(0203) 		DelayMs(500);
    0F28: 50 01    MOV   A,0x1
    0F2A: 08       PUSH  A
    0F2B: 50 F4    MOV   A,0xF4
    0F2D: 08       PUSH  A
    0F2E: 9F 89    CALL  _DelayMs
    0F30: 38 FE    ADD   SP,0xFE
(0204) 		LED_3_Off();
    0F32: 10       PUSH  X
    0F33: 7C 05 F5 LCALL 0x05F5
    0F36: 20       POP   X
(0205) 	}
    0F37: 77 01    INC   [X+1]
    0F39: 0F 00 00 ADC   [X+0],0x0
    0F3C: 52 01    MOV   A,[X+1]
    0F3E: 11 03    SUB   A,0x3
    0F40: 52 00    MOV   A,[X+0]
    0F42: 31 80    XOR   A,0x80
    0F44: 19 80    SBB   A,0x80
    0F46: CF B8    JC    0x0EFF
    0F48: 38 FE    ADD   SP,0xFE
    0F4A: 20       POP   X
(0206) }
FILE: <library>
--------------------------------------------------------------------------------


PSoC Designer Version: 5.0.1127.0

Copyright (C) 1994 - 2009 ImageCraft Creations Inc.
ImageCraft, 706 Colorado Ave., Suite 10-88, Palo Alto, CA 94303
info@imagecraft.com, phone (650) 493-9326 FAX (650) 493-9329
http://www.imagecraft.com
lcc source code (C) 1995, by David R. Hanson and AT&T. Reproduced by permission.
Release version 7.02.004
