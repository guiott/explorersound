FILE: .\boot.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#895 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.18
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0002: 30       HALT                     
0003: 30       HALT                     
0004: 30       HALT                     (0118)     halt                           ;Stop execution if power falls too low
                                        (0119) 
                                        (0120)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0121)     // call	void_handler
0005: 30       HALT                     
0006: 30       HALT                     
0007: 30       HALT                     
0008: 7E       RETI                     (0122)     reti
                                        (0123) 
                                        (0124)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0125)     // call	void_handler
0009: 30       HALT                     
000A: 30       HALT                     
000B: 30       HALT                     
000C: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0129)     // call	void_handler
000D: 30       HALT                     
000E: 30       HALT                     
000F: 30       HALT                     
0010: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0133)     // call	void_handler
0011: 30       HALT                     
0012: 30       HALT                     
0013: 30       HALT                     
0014: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   18h                      ;VC3 Interrupt Vector
                                        (0137)     // call	void_handler
0015: 30       HALT                     
0016: 30       HALT                     
0017: 30       HALT                     
0018: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0141)     // call	void_handler
0019: 30       HALT                     
001A: 30       HALT                     
001B: 30       HALT                     
001C: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
001D: 30       HALT                     
001E: 30       HALT                     
001F: 30       HALT                     
0020: 7D 0A BD LJMP  0x0ABD             (0145)     ljmp	_ADCINCVR_mes_CNT_ISR
0023: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0149)     // call	void_handler
0024: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0025: 30       HALT                     
0026: 30       HALT                     
0027: 30       HALT                     
0028: 7D 0A C0 LJMP  0x0AC0             (0153)     ljmp	_ADCINCVR_mes_PWM16_ISR
002B: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 09 78 LJMP  0x0978             (0157)     ljmp	_ADCINCVR_pot_CNT_ISR
002F: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0161)     // call	void_handler
0030: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
0031: 30       HALT                     
0032: 30       HALT                     
0033: 30       HALT                     
0034: 7D 09 7B LJMP  0x097B             (0165)     ljmp	_ADCINCVR_pot_PWM16_ISR
0037: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0169)     // call	void_handler
0038: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0173)     // call	void_handler
0039: 30       HALT                     
003A: 30       HALT                     
003B: 30       HALT                     
003C: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0177)     // call	void_handler
003D: 30       HALT                     
003E: 30       HALT                     
003F: 30       HALT                     
0040: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
0041: 30       HALT                     
0042: 30       HALT                     
0043: 30       HALT                     
0044: 7D 06 A8 LJMP  0x06A8             (0181)     ljmp	_HB_Tmr_ISR
0047: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0185)     // call	void_handler
0048: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0189)     // call	void_handler
0049: 30       HALT                     
004A: 30       HALT                     
004B: 30       HALT                     
004C: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0193)     // call	void_handler
004D: 30       HALT                     
004E: 30       HALT                     
004F: 30       HALT                     
0050: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0197)     // call	void_handler
0051: 30       HALT                     
0052: 30       HALT                     
0053: 30       HALT                     
0054: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0201)     // call	void_handler
0055: 30       HALT                     
0056: 30       HALT                     
0057: 30       HALT                     
0058: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0205)     // call	void_handler
0059: 30       HALT                     
005A: 30       HALT                     
005B: 30       HALT                     
005C: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   60h                      ;PSoC I2C Interrupt Vector
005D: 30       HALT                     
005E: 30       HALT                     
005F: 30       HALT                     
0060: 7D 07 0C LJMP  0x070C             (0209)     ljmp	_EzI2Cs_1_ISR
0063: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0213)     // call	void_handler
0064: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  Start of Execution.
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0220) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0221) ;
                                        (0222) 
                                        (0223) IF	(TOOLCHAIN & HITECH)
                                        (0224)  	AREA PD_startup(CODE, REL, CON)
                                        (0225) ELSE
                                        (0226)     org 68h
                                        (0227) ENDIF
                                        (0228) __Start:
                                        (0229) 
                                        (0230)     ; initialize SMP values for voltage stabilization, if required,
                                        (0231)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0232)     ; least for now. 
                                        (0233)     ;
0065: 30       HALT                     
0066: 30       HALT                     
0067: 30       HALT                     
0068: 71 10    OR    F,0x10             (0234)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0235)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 86 MOV   REG[0xE3],0x86     (0236)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             (0237)     M8C_SetBank0
                                        (0238) 
                                        (0239)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0240)     mov   A, 20h
0074: 28       ROMX                     (0241)     romx
0075: 50 40    MOV   A,0x40             (0242)     mov   A, 40h
0077: 28       ROMX                     (0243)     romx
0078: 50 60    MOV   A,0x60             (0244)     mov   A, 60h
007A: 28       ROMX                     (0245)     romx
                                        (0246)     ; %45%20%46%46% End workaround
                                        (0247) 
                                        (0248) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
007B: 41 FF EF AND   REG[0xFF],0xEF     (0249)     M8C_EnableWatchDog
                                        (0250) ENDIF
                                        (0251) 
                                        (0252) IF ( SELECT_32K )
                                        (0253)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0254) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0255)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0256) ENDIF
                                        (0257) 
                                        (0258)     ;---------------------------
                                        (0259)     ; Set up the Temporary stack
                                        (0260)     ;---------------------------
                                        (0261)     ; A temporary stack is set up for the SSC instructions.
                                        (0262)     ; The real stack start will be assigned later.
                                        (0263)     ;
                                        (0264) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0265)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0266)     swap  SP, A                    ; This is only temporary if going to LMM
                                        (0267) 
                                        (0268)     ;-----------------------------------------------
                                        (0269)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0270)     ;-----------------------------------------------
                                        (0271) 
                                        (0272) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0273)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0274)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0275)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0276)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0277)   IF ( AGND_BYPASS )
                                        (0278)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0279)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0280)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0281)     ; value using the proper trim values.
                                        (0282)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0283)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0284)   ENDIF
                                        (0285)  ENDIF
                                        (0286) ENDIF ; 5.0 V Operation
                                        (0287) 
                                        (0288) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0289)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0290)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0291)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0292)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0293)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0294)  ENDIF
                                        (0295) ENDIF ; 3.3 Volt Operation
                                        (0296) 
0084: 55 F8 00 MOV   [TmrFlag+118],0x0  (0297)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
0087: 55 F9 00 MOV   [TmrFlag+119],0x0  (0298)     mov  [bSSC_KEYSP], 0
                                        (0299) 
                                        (0300)     ;---------------------------------------
                                        (0301)     ; Initialize Crystal Oscillator and PLL
                                        (0302)     ;---------------------------------------
                                        (0303) 
                                        (0304) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0305)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0306)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0307)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0308)     ; the ECO to stabilize.
                                        (0309)     ;
                                        (0310)     M8C_SetBank1
                                        (0311)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0312)     M8C_SetBank0
                                        (0313)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0314)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0315)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0316) .WaitFor1s:
                                        (0317)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0318)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0319)                                           ;   since interrupts are not globally enabled
                                        (0320) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0321)     ; Either no ECO, or waiting for stable clock is to be done in main
008A: 71 10    OR    F,0x10             (0322)     M8C_SetBank1
008C: 62 E0 12 MOV   REG[0xE0],0x12     (0323)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
008F: 70 EF    AND   F,0xEF             (0324)     M8C_SetBank0
0091: 62 E3 38 MOV   REG[0xE3],0x38     (0325)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0326) 
                                        (0327) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0328) 
                                        (0329) IF ( PLL_MODE )
                                        (0330)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0331)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0332)     ;
                                        (0333)     M8C_SetBank1
                                        (0334)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0335)     M8C_SetBank0
                                        (0336)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0337)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0338) 
                                        (0339) .WaitFor16ms:
                                        (0340)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0341)     jz   .WaitFor16ms
                                        (0342)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0343)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0344)     M8C_SetBank0
                                        (0345) 
                                        (0346) IF      ( WAIT_FOR_32K )
                                        (0347) ELSE ; !( WAIT_FOR_32K )
                                        (0348)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0349)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0350) ENDIF ;(WAIT_FOR_32K)
                                        (0351) ENDIF ;(PLL_MODE)
                                        (0352) 
                                        (0353)     ;------------------------
                                        (0354)     ; Close CT leakage path.
                                        (0355)     ;------------------------
0094: 62 71 05 MOV   REG[0x71],0x5      (0356)     mov   reg[ACB00CR0], 05h
0097: 62 75 05 MOV   REG[0x75],0x5      (0357)     mov   reg[ACB01CR0], 05h
009A: 62 79 05 MOV   REG[0x79],0x5      (0358)     mov   reg[ACB02CR0], 05h
009D: 62 7D 05 MOV   REG[0x7D],0x5      (0359)     mov   reg[ACB03CR0], 05h
                                        (0360) 
                                        (0361) 
                                        (0362) IF	(TOOLCHAIN & HITECH)
                                        (0363)     ;---------------------------------------------
                                        (0364)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0365)     ;---------------------------------------------
                                        (0366) 	global		__Lstackps
                                        (0367) 	mov     a,low __Lstackps
                                        (0368) 	swap    a,sp
                                        (0369) 
                                        (0370) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0371)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0372)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0373)     RAM_SETPAGE_CUR 0
                                        (0374)     RAM_SETPAGE_MVW 0
                                        (0375)     RAM_SETPAGE_MVR 0
                                        (0376)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0377)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0378)     ELSE
                                        (0379)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0380)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0381) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0382) ELSE
                                        (0383)     ;---------------------------------------------
                                        (0384)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0385)     ;---------------------------------------------
                                        (0386) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00A0: 62 D1 07 MOV   REG[0xD1],0x7      (0387)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A3: 50 00    MOV   A,0x0              (0388)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A5: 4E       SWAP  SP,A               (0389)     swap  A, SP
00A6: 62 D3 07 MOV   REG[0xD3],0x7      (0390)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
00A9: 62 D0 00 MOV   REG[0xD0],0x0      (0391)     RAM_SETPAGE_CUR 0
00AC: 62 D5 00 MOV   REG[0xD5],0x0      (0392)     RAM_SETPAGE_MVW 0
00AF: 62 D4 00 MOV   REG[0xD4],0x0      (0393)     RAM_SETPAGE_MVR 0
                                        (0394) 
                                        (0395)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B2: 71 C0    OR    F,0xC0             (0396)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0397)   ELSE
                                        (0398)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0399)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0400) ELSE
                                        (0401)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0402)     swap  SP, A
                                        (0403) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0404) ENDIF ;	TOOLCHAIN
                                        (0405) 
                                        (0406)     ;-------------------------
                                        (0407)     ; Load Base Configuration
                                        (0408)     ;-------------------------
                                        (0409)     ; Load global parameter settings and load the user modules in the
                                        (0410)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0411)     ; to minimize start up time; (2) We may still need to play with the
                                        (0412)     ; Sleep Timer.
                                        (0413)     ;
00B4: 7C 03 F4 LCALL 0x03F4             (0414)     lcall LoadConfigInit
                                        (0415) 
                                        (0416)     ;-----------------------------------
                                        (0417)     ; Initialize C Run-Time Environment
                                        (0418)     ;-----------------------------------
                                        (0419) IF ( C_LANGUAGE_SUPPORT )
                                        (0420) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0421)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0422)     mov  [__r0],<__bss_start
                                        (0423) BssLoop:
                                        (0424)     cmp  [__r0],<__bss_end
                                        (0425)     jz   BssDone
                                        (0426)     mvi  [__r0],A
                                        (0427)     jmp  BssLoop
                                        (0428) BssDone:
                                        (0429)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0430)     mov  X,<__idata_start
                                        (0431)     mov  [__r0],<__data_start
                                        (0432) IDataLoop:
                                        (0433)     cmp  [__r0],<__data_end
                                        (0434)     jz   C_RTE_Done
                                        (0435)     push A
                                        (0436)     romx
                                        (0437)     mvi  [__r0],A
                                        (0438)     pop  A
                                        (0439)     inc  X
                                        (0440)     adc  A,0
                                        (0441)     jmp  IDataLoop
                                        (0442) 
                                        (0443) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0444) 
                                        (0445) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00B7: 62 D0 00 MOV   REG[0xD0],0x0      (0446)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0447)                                        ; to use the Virtual Register page.
                                        (0448) 
                                        (0449)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0450)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0451)     ; text segment and may have been relocated by the Code Compressor.
                                        (0452)     ;
00BA: 50 03    MOV   A,0x3              (0453)     mov   A, >__pXIData                ; Get the address of the flash
00BC: 57 F2    MOV   X,0xF2             (0454)     mov   X, <__pXIData                ;   pointer to the xidata area.
00BE: 08       PUSH  A                  (0455)     push  A
00BF: 28       ROMX                     (0456)     romx                               ; get the MSB of xidata's address
00C0: 53 55    MOV   [__r0],A           (0457)     mov   [__r0], A
00C2: 18       POP   A                  (0458)     pop   A
00C3: 75       INC   X                  (0459)     inc   X
00C4: 09 00    ADC   A,0x0              (0460)     adc   A, 0
00C6: 28       ROMX                     (0461)     romx                               ; get the LSB of xidata's address
00C7: 4B       SWAP  A,X                (0462)     swap  A, X
00C8: 51 55    MOV   A,[__r0]           (0463)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0464)                                        ;   XIData structure list in flash
00CA: 80 04    JMP   0x00CF             (0465)     jmp   .AccessStruct
                                        (0466) 
                                        (0467)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0468)     ; values of C variables. Each structure contains 3 member elements.
                                        (0469)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0470)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0471)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0472)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0473)     ; value in the second member element, an unsigned byte:
                                        (0474)     ; (1) If the value of the second element is non-zero, it represents
                                        (0475)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0476)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0477)     ; the bytes are copied to the block of RAM.
                                        (0478)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0479)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0480)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0481) 
                                        (0482) .AccessNextStructLoop:
00CC: 75       INC   X                  (0483)     inc   X                            ; pXIData++
00CD: 09 00    ADC   A,0x0              (0484)     adc   A, 0
                                        (0485) .AccessStruct:                         ; Entry point for first block
                                        (0486)     ;
                                        (0487)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0488)     ;
00CF: 62 E3 00 MOV   REG[0xE3],0x0      (0489)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D2: 08       PUSH  A                  (0490)     push  A
00D3: 28       ROMX                     (0491)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D4: 60 D5    MOV   REG[0xD5],A        (0492)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D6: 74       INC   A                  (0493)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00D7: A0 4B    JZ    0x0123             (0494)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00D9: 18       POP   A                  (0495)     pop   A                            ; restore pXIData to [A,X]
00DA: 75       INC   X                  (0496)     inc   X                            ; pXIData++
00DB: 09 00    ADC   A,0x0              (0497)     adc   A, 0
00DD: 08       PUSH  A                  (0498)     push  A
00DE: 28       ROMX                     (0499)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00DF: 53 55    MOV   [__r0],A           (0500)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E1: 18       POP   A                  (0501)     pop   A                            ; restore pXIData to [A,X]
00E2: 75       INC   X                  (0502)     inc   X                            ; pXIData++ (point to size)
00E3: 09 00    ADC   A,0x0              (0503)     adc   A, 0
00E5: 08       PUSH  A                  (0504)     push  A
00E6: 28       ROMX                     (0505)     romx                               ; Get the size (CPU.A <- *pXIData)
00E7: A0 1C    JZ    0x0104             (0506)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00E9: 53 54    MOV   [__r1],A           (0507)     mov   [__r1], A                    ;             else downcount in __r1
00EB: 18       POP   A                  (0508)     pop   A                            ; restore pXIData to [A,X]
                                        (0509) 
                                        (0510) .CopyNextByteLoop:
                                        (0511)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0512)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0513)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0514)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0515)     ;
00EC: 75       INC   X                  (0516)     inc   X                            ; pXIData++ (point to next data byte)
00ED: 09 00    ADC   A,0x0              (0517)     adc   A, 0
00EF: 08       PUSH  A                  (0518)     push  A
00F0: 28       ROMX                     (0519)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F1: 3F 55    MVI   [__r0],A           (0520)     mvi   [__r0], A                    ; Transfer the data to RAM
00F3: 47 55 FF TST   [__r0],0xFF        (0521)     tst   [__r0], 0xff                 ; Check for page crossing
00F6: B0 06    JNZ   0x00FD             (0522)     jnz   .CopyLoopTail                ;   No crossing, keep going
00F8: 5D D5    MOV   A,REG[0xD5]        (0523)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FA: 74       INC   A                  (0524)     inc   A
00FB: 60 D5    MOV   REG[0xD5],A        (0525)     mov   reg[ MVW_PP], A
                                        (0526) .CopyLoopTail:
00FD: 18       POP   A                  (0527)     pop   A                            ; restore pXIData to [A,X]
00FE: 7A 54    DEC   [__r1]             (0528)     dec   [__r1]                       ; End of this array in flash?
0100: BF EB    JNZ   0x00EC             (0529)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0102: 8F C9    JMP   0x00CC             (0530)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0531) 
                                        (0532) .ClearRAMBlockToZero:
0104: 18       POP   A                  (0533)     pop   A                            ; restore pXIData to [A,X]
0105: 75       INC   X                  (0534)     inc   X                            ; pXIData++ (point to next data byte)
0106: 09 00    ADC   A,0x0              (0535)     adc   A, 0
0108: 08       PUSH  A                  (0536)     push  A
0109: 28       ROMX                     (0537)     romx                               ; Get the run length (CPU.A <- *pXIData)
010A: 53 54    MOV   [__r1],A           (0538)     mov   [__r1], A                    ; Initialize downcounter
010C: 50 00    MOV   A,0x0              (0539)     mov   A, 0                         ; Initialize source data
                                        (0540) 
                                        (0541) .ClearRAMBlockLoop:
                                        (0542)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0543)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0544)     ;
010E: 3F 55    MVI   [__r0],A           (0545)     mvi   [__r0], A                    ; Clear a byte
0110: 47 55 FF TST   [__r0],0xFF        (0546)     tst   [__r0], 0xff                 ; Check for page crossing
0113: B0 08    JNZ   0x011C             (0547)     jnz   .ClearLoopTail               ;   No crossing, keep going
0115: 5D D5    MOV   A,REG[0xD5]        (0548)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0117: 74       INC   A                  (0549)     inc   A
0118: 60 D5    MOV   REG[0xD5],A        (0550)     mov   reg[ MVW_PP], A
011A: 50 00    MOV   A,0x0              (0551)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0552) .ClearLoopTail:
011C: 7A 54    DEC   [__r1]             (0553)     dec   [__r1]                       ; Was this the last byte?
011E: BF EF    JNZ   0x010E             (0554)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0120: 18       POP   A                  (0555)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0121: 8F AA    JMP   0x00CC             (0556)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0557) 
                                        (0558) .C_RTE_WrapUp:
0123: 18       POP   A                  (0559)     pop   A                            ; balance stack
                                        (0560) 
                                        (0561) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0562) 
                                        (0563) C_RTE_Done:
                                        (0564) 
                                        (0565) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0566) 
                                        (0567)     ;-------------------------------
                                        (0568)     ; Voltage Stabilization for SMP
                                        (0569)     ;-------------------------------
                                        (0570) 
                                        (0571) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0572) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0573)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0574)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0575)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0576)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0577)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0578)     M8C_SetBank1
                                        (0579)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0580)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0581)     M8C_SetBank0
                                        (0582)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0583)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0584) .WaitFor2ms:
                                        (0585)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0586)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0587) ENDIF ; SMP is operational
                                        (0588) ENDIF ; 5.0V Operation
                                        (0589) 
                                        (0590)     ;-------------------------------
                                        (0591)     ; Set Power-On Reset (POR) Level
                                        (0592)     ;-------------------------------
                                        (0593) 
                                        (0594)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0595)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0596)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. These
                                        (0597)     ;  values should not be changed from the settings here. Failure to follow this instruction could 
                                        (0598)     ;  lead to corruption of PSoC flash.
                                        (0599) 
0124: 71 10    OR    F,0x10             (0600)     M8C_SetBank1
                                        (0601) 
                                        (0602) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0603)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0604)  ELSE                                       ;    No, fast mode
                                        (0605)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0606)                                             ;       no, set midpoint POR in user code, if desired
                                        (0607)   ELSE ; 24HMz                              ;
0126: 43 E3 20 OR    REG[0xE3],0x20     (0608)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0609)   ENDIF ; 24MHz
                                        (0610)  ENDIF ; Slow Mode
                                        (0611) ENDIF ; 5.0V Operation
                                        (0612) 
0129: 70 EF    AND   F,0xEF             (0613)     M8C_SetBank0
                                        (0614) 
                                        (0615)     ;----------------------------
                                        (0616)     ; Wrap up and invoke "main"
                                        (0617)     ;----------------------------
                                        (0618) 
                                        (0619)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0620)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0621)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0622)     mov  reg[INT_MSK0],0
                                        (0623) 
                                        (0624)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0625)     ; And put decimator in full mode so it does not consume too much current.
                                        (0626)     ;
012E: 71 10    OR    F,0x10             (0627)     M8C_SetBank1
0130: 62 E0 13 MOV   REG[0xE0],0x13     (0628)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0629)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             (0630)     M8C_SetBank0
                                        (0631) 
                                        (0632)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0633)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0634)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0635)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0636)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0637)                                    ; have been set during the boot process.
                                        (0638) IF	(TOOLCHAIN & HITECH)
                                        (0639) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0640) ELSE
                                        (0641) IF ENABLE_LJMP_TO_MAIN
                                        (0642)     ljmp  _main                    ; goto main (no return)
                                        (0643) ELSE
013B: 7C 0C 16 LCALL _main              (0644)     lcall _main                    ; call main
                                        (0645) .Exit:
013E: 8F FF    JMP   0x013E             (0646)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0647) ENDIF
                                        (0648) ENDIF ; TOOLCHAIN
                                        (0649) 
                                        (0650)     ;---------------------------------
                                        (0651)     ; Library Access to Global Parms
                                        (0652)     ;---------------------------------
                                        (0653)     ;
                                        (0654)  bGetPowerSetting:
                                        (0655) _bGetPowerSetting:
                                        (0656)     ; Returns value of POWER_SETTING in the A register.
                                        (0657)     ; No inputs. No Side Effects.
                                        (0658)     ;
0140: 50 10    MOV   A,0x10             (0659)     mov   A, POWER_SETTING
0142: 7F       RET                      (0660)     ret
(0661) 
(0662) IF	(TOOLCHAIN & HITECH)
(0663) ELSE
(0664)     ;---------------------------------
(0665)     ; Order Critical RAM & ROM AREAs
(0666)     ;---------------------------------
(0667)     ;  'TOP' is all that has been defined so far...
(0668) 
(0669)     ;  ROM AREAs for C CONST, static & global items
(0670)     ;
(0671)     AREA lit               (ROM, REL, CON)   ; 'const' definitions
(0672)     AREA idata             (ROM, REL, CON)   ; Constants for initializing RAM
(0673) __idata_start:
(0674) 
(0675)     AREA func_lit          (ROM, REL, CON)   ; Function Pointers
(0676) __func_lit_start:
(0677) 
(0678) IF ( SYSTEM_LARGE_MEMORY_MODEL )
(0679)     ; We use the func_lit area to store a pointer to extended initialized
(0680)     ; data (xidata) area that follows the text area. Func_lit isn't
(0681)     ; relocated by the code compressor, but the text area may shrink and
(0682)     ; that moves xidata around.
(0683)     ;
(0684) __pXIData:         word __text_end           ; ptr to extended idata
(0685) ENDIF
(0686) 
(0687)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
(0688)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
(0689) 
(0690)     ; CODE segment for general use
(0691)     ;
(0692)     AREA text (ROM, REL, CON)
(0693) __text_start:
(0694) 
(0695)     ; RAM area usage
(0696)     ;
(0697)     AREA data              (RAM, REL, CON)   ; initialized RAM
(0698) __data_start:
(0699) 
(0700)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
(0701)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
(0702)     AREA bss               (RAM, REL, CON)   ; general use
(0703) __bss_start:
(0704) 
(0705) ENDIF ; TOOLCHAIN
(0706) 
(0707) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_explorersound_Bank1
                                        (0006) export LoadConfigTBL_explorersound_Bank0
                                        (0007) export LoadConfigTBL_explorersound_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_explorersound_Bank0:
                                        (0010) ;  Instance name ADCINCVR_mes, User Module ADCINCVR
                                        (0011) ;       Instance name ADCINCVR_mes, Block Name ADC(ASD13)
                                        (0012) 	db		8ch, 90h		;ADCINCVR_mes_bfAtoDcr0       (ASD13CR0)
                                        (0013) 	db		8dh, 20h		;ADCINCVR_mes_bfAtoDcr1       (ASD13CR1)
                                        (0014) 	db		8eh, 61h		;ADCINCVR_mes_bfAtoDcr2       (ASD13CR2)
                                        (0015) 	db		8fh, f0h		;ADCINCVR_mes_bfAtoDcr3       (ASD13CR3)
                                        (0016) ;       Instance name ADCINCVR_mes, Block Name CNT(DBB00)
                                        (0017) 	db		23h, 00h		;ADCINCVR_mes_bCounter_CR0    (DBB00CR0)
                                        (0018) 	db		21h, 00h		;ADCINCVR_mes_bPeriod         (DBB00DR1)
                                        (0019) 	db		22h, 00h		;ADCINCVR_mes_bCompare        (DBB00DR2)
                                        (0020) ;       Instance name ADCINCVR_mes, Block Name PWM16_LSB(DBB01)
                                        (0021) 	db		27h, 00h		;ADCINCVR_mes_fPWM_LSB_CR0    (DBB01CR0)
                                        (0022) 	db		25h, 00h		;ADCINCVR_mes_bPWM_Period_LSB (DBB01DR1)
                                        (0023) 	db		26h, 00h		;ADCINCVR_mes_bPWM_IntTime_LSB(DBB01DR2)
                                        (0024) ;       Instance name ADCINCVR_mes, Block Name PWM16_MSB(DCB02)
                                        (0025) 	db		2bh, 00h		;ADCINCVR_mes_fPWM_MSB_CR0    (DCB02CR0)
                                        (0026) 	db		29h, 00h		;ADCINCVR_mes_bPWM_Period_MSB (DCB02DR1)
                                        (0027) 	db		2ah, 00h		;ADCINCVR_mes_bPWM_IntTime_MSB(DCB02DR2)
                                        (0028) ;  Instance name ADCINCVR_pot, User Module ADCINCVR
                                        (0029) ;       Instance name ADCINCVR_pot, Block Name ADC(ASD22)
                                        (0030) 	db		98h, d0h		;ADCINCVR_pot_bfAtoDcr0       (ASD22CR0)
                                        (0031) 	db		99h, 40h		;ADCINCVR_pot_bfAtoDcr1       (ASD22CR1)
                                        (0032) 	db		9ah, 61h		;ADCINCVR_pot_bfAtoDcr2       (ASD22CR2)
                                        (0033) 	db		9bh, f0h		;ADCINCVR_pot_bfAtoDcr3       (ASD22CR3)
                                        (0034) ;       Instance name ADCINCVR_pot, Block Name CNT(DCB03)
                                        (0035) 	db		2fh, 00h		;ADCINCVR_pot_bCounter_CR0    (DCB03CR0)
                                        (0036) 	db		2dh, 00h		;ADCINCVR_pot_bPeriod         (DCB03DR1)
                                        (0037) 	db		2eh, 00h		;ADCINCVR_pot_bCompare        (DCB03DR2)
                                        (0038) ;       Instance name ADCINCVR_pot, Block Name PWM16_LSB(DBB10)
                                        (0039) 	db		33h, 00h		;ADCINCVR_pot_fPWM_LSB_CR0    (DBB10CR0)
                                        (0040) 	db		31h, 00h		;ADCINCVR_pot_bPWM_Period_LSB (DBB10DR1)
                                        (0041) 	db		32h, 00h		;ADCINCVR_pot_bPWM_IntTime_LSB(DBB10DR2)
                                        (0042) ;       Instance name ADCINCVR_pot, Block Name PWM16_MSB(DBB11)
                                        (0043) 	db		37h, 00h		;ADCINCVR_pot_fPWM_MSB_CR0    (DBB11CR0)
                                        (0044) 	db		35h, 00h		;ADCINCVR_pot_bPWM_Period_MSB (DBB11DR1)
                                        (0045) 	db		36h, 00h		;ADCINCVR_pot_bPWM_IntTime_MSB(DBB11DR2)
                                        (0046) ;  Instance name AMUX4_mic, User Module AMUX4
                                        (0047) ;  Instance name BPF4_4KHz, User Module BPF4
                                        (0048) ;       Instance name BPF4_4KHz, Block Name FLFBH(ASD11)
                                        (0049) 	db		84h, 85h		;BPF4_4KHz_FLFBH_CR0(ASD11CR0)
                                        (0050) 	db		85h, 60h		;BPF4_4KHz_FLFBH_CR1(ASD11CR1)
                                        (0051) 	db		86h, 00h		;BPF4_4KHz_FLFBH_CR2(ASD11CR2)
                                        (0052) 	db		87h, 20h		;BPF4_4KHz_FLFBH_CR3(ASD11CR3)
                                        (0053) ;       Instance name BPF4_4KHz, Block Name FLFBL(ASD20)
                                        (0054) 	db		90h, 85h		;BPF4_4KHz_FLFBL_CR0(ASD20CR0)
                                        (0055) 	db		91h, 00h		;BPF4_4KHz_FLFBL_CR1(ASD20CR1)
                                        (0056) 	db		92h, 00h		;BPF4_4KHz_FLFBL_CR2(ASD20CR2)
                                        (0057) 	db		93h, 20h		;BPF4_4KHz_FLFBL_CR3(ASD20CR3)
                                        (0058) ;       Instance name BPF4_4KHz, Block Name FLINH(ASC21)
                                        (0059) 	db		94h, a1h		;BPF4_4KHz_FLINH_CR0(ASC21CR0)
                                        (0060) 	db		95h, 94h		;BPF4_4KHz_FLINH_CR1(ASC21CR1)
                                        (0061) 	db		96h, 85h		;BPF4_4KHz_FLINH_CR2(ASC21CR2)
                                        (0062) 	db		97h, 20h		;BPF4_4KHz_FLINH_CR3(ASC21CR3)
                                        (0063) ;       Instance name BPF4_4KHz, Block Name FLINL(ASC10)
                                        (0064) 	db		80h, a1h		;BPF4_4KHz_FLINL_CR0(ASC10CR0)
                                        (0065) 	db		81h, b3h		;BPF4_4KHz_FLINL_CR1(ASC10CR1)
                                        (0066) 	db		82h, 05h		;BPF4_4KHz_FLINL_CR2(ASC10CR2)
                                        (0067) 	db		83h, 2ch		;BPF4_4KHz_FLINL_CR3(ASC10CR3)
                                        (0068) ;  Instance name DIGITAL_OUT, User Module LED
                                        (0069) ;  Instance name EzI2Cs_1, User Module EzI2Cs
                                        (0070) ;  Instance name HB_Tmr, User Module Timer16
                                        (0071) ;       Instance name HB_Tmr, Block Name TIMER16_LSB(DBB20)
                                        (0072) 	db		43h, 00h		;HB_Tmr_CONTROL_LSB_REG(DBB20CR0)
                                        (0073) 	db		41h, 7fh		;HB_Tmr_PERIOD_LSB_REG(DBB20DR1)
                                        (0074) 	db		42h, 00h		;HB_Tmr_COMPARE_LSB_REG(DBB20DR2)
                                        (0075) ;       Instance name HB_Tmr, Block Name TIMER16_MSB(DBB21)
                                        (0076) 	db		47h, 04h		;HB_Tmr_CONTROL_MSB_REG(DBB21CR0)
                                        (0077) 	db		45h, 0ch		;HB_Tmr_PERIOD_MSB_REG(DBB21DR1)
                                        (0078) 	db		46h, 00h		;HB_Tmr_COMPARE_MSB_REG(DBB21DR2)
                                        (0079) ;  Instance name LED_1, User Module LED
                                        (0080) ;  Instance name LED_2, User Module LED
                                        (0081) ;  Instance name LED_3, User Module LED
                                        (0082) ;  Instance name PGA_out, User Module PGA
                                        (0083) ;       Instance name PGA_out, Block Name GAIN(ACB02)
                                        (0084) 	db		79h, 1dh		;PGA_out_GAIN_CR0(ACB02CR0)
                                        (0085) 	db		7ah, a1h		;PGA_out_GAIN_CR1(ACB02CR1)
                                        (0086) 	db		7bh, 20h		;PGA_out_GAIN_CR2(ACB02CR2)
                                        (0087) 	db		78h, 00h		;PGA_out_GAIN_CR3(ACB02CR3)
                                        (0088) ;  Instance name PGA_pre, User Module PGA
                                        (0089) ;       Instance name PGA_pre, Block Name GAIN(ACB00)
                                        (0090) 	db		71h, 4dh		;PGA_pre_GAIN_CR0(ACB00CR0)
                                        (0091) 	db		72h, a1h		;PGA_pre_GAIN_CR1(ACB00CR1)
                                        (0092) 	db		73h, 20h		;PGA_pre_GAIN_CR2(ACB00CR2)
                                        (0093) 	db		70h, 00h		;PGA_pre_GAIN_CR3(ACB00CR3)
                                        (0094) ;  Instance name RefMux_1, User Module RefMux
                                        (0095) ;       Instance name RefMux_1, Block Name REFMUX(ACB03)
                                        (0096) 	db		7dh, 01h		;RefMux_1_REFMUX_CR0(ACB03CR0)
                                        (0097) 	db		7eh, 09h		;RefMux_1_REFMUX_CR1(ACB03CR1)
                                        (0098) 	db		7fh, 14h		;RefMux_1_REFMUX_CR2(ACB03CR2)
                                        (0099) 	db		7ch, 00h		;RefMux_1_REFMUX_CR3(ACB03CR3)
                                        (0100) ;  Instance name SCBLOCK_inbuff, User Module SCBLOCK
                                        (0101) ;       Instance name SCBLOCK_inbuff, Block Name SCBLK(ASC23)
                                        (0102) 	db		9ch, 00h		;SCBLOCK_inbuff_cr0(ASC23CR0)
                                        (0103) 	db		9dh, 51h		;SCBLOCK_inbuff_cr1(ASC23CR1)
                                        (0104) 	db		9eh, 20h		;SCBLOCK_inbuff_cr2(ASC23CR2)
                                        (0105) 	db		9fh, 3bh		;SCBLOCK_inbuff_cr3(ASC23CR3)
                                        (0106) ;  Instance name TX8, User Module TX8
                                        (0107) ;       Instance name TX8, Block Name TX8(DCB13)
                                        (0108) 	db		3fh, 00h		;TX8_CONTROL_REG  (DCB13CR0)
                                        (0109) 	db		3dh, 00h		;TX8_TX_BUFFER_REG(DCB13DR1)
                                        (0110) 	db		3eh, 00h		;TX8_(DCB13DR2)
                                        (0111) ;  Global Register values Bank 0
                                        (0112) 	db		60h, e4h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0113) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0114) 	db		63h, 57h		; AnalogReferenceControl register (ARF_CR)
                                        (0115) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0116) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0117) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0118) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0119) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0120) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0121) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0122) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0123) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0124) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0125) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0126) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0127) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0128) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0129) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0130) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0131) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0132) 	db		beh, 04h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0133) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0134) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0135) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0136) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0137) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0138) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0139) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0140) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0141) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0142) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0143) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0144) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0145) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0146) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0147) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0148) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0149) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0150) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0151) 	db		ffh
                                        (0152) LoadConfigTBL_explorersound_Bank1:
                                        (0153) ;  Instance name ADCINCVR_mes, User Module ADCINCVR
                                        (0154) ;       Instance name ADCINCVR_mes, Block Name ADC(ASD13)
                                        (0155) ;       Instance name ADCINCVR_mes, Block Name CNT(DBB00)
                                        (0156) 	db		20h, 21h		;ADCINCVR_mes_fCounterFN      (DBB00FN)
                                        (0157) 	db		21h, 75h		;ADCINCVR_mes_fCounterSL      (DBB00IN)
                                        (0158) 	db		22h, 40h		;ADCINCVR_mes_fCounterOS      (DBB00OU)
                                        (0159) ;       Instance name ADCINCVR_mes, Block Name PWM16_LSB(DBB01)
                                        (0160) 	db		24h, 01h		;ADCINCVR_mes_bfPWM_LSB_FN    (DBB01FN)
                                        (0161) 	db		25h, 15h		;ADCINCVR_mes_(DBB01IN)
                                        (0162) 	db		26h, 40h		;ADCINCVR_mes_(DBB01OU)
                                        (0163) ;       Instance name ADCINCVR_mes, Block Name PWM16_MSB(DCB02)
                                        (0164) 	db		28h, 21h		;ADCINCVR_mes_bfPWM_MSB_FN    (DCB02FN)
                                        (0165) 	db		29h, 35h		;ADCINCVR_mes_(DCB02IN)
                                        (0166) 	db		2ah, 40h		;ADCINCVR_mes_(DCB02OU)
                                        (0167) ;  Instance name ADCINCVR_pot, User Module ADCINCVR
                                        (0168) ;       Instance name ADCINCVR_pot, Block Name ADC(ASD22)
                                        (0169) ;       Instance name ADCINCVR_pot, Block Name CNT(DCB03)
                                        (0170) 	db		2ch, 21h		;ADCINCVR_pot_fCounterFN      (DCB03FN)
                                        (0171) 	db		2dh, 65h		;ADCINCVR_pot_fCounterSL      (DCB03IN)
                                        (0172) 	db		2eh, 40h		;ADCINCVR_pot_fCounterOS      (DCB03OU)
                                        (0173) ;       Instance name ADCINCVR_pot, Block Name PWM16_LSB(DBB10)
                                        (0174) 	db		30h, 01h		;ADCINCVR_pot_bfPWM_LSB_FN    (DBB10FN)
                                        (0175) 	db		31h, 15h		;ADCINCVR_pot_(DBB10IN)
                                        (0176) 	db		32h, 40h		;ADCINCVR_pot_(DBB10OU)
                                        (0177) ;       Instance name ADCINCVR_pot, Block Name PWM16_MSB(DBB11)
                                        (0178) 	db		34h, 21h		;ADCINCVR_pot_bfPWM_MSB_FN    (DBB11FN)
                                        (0179) 	db		35h, 35h		;ADCINCVR_pot_(DBB11IN)
                                        (0180) 	db		36h, 40h		;ADCINCVR_pot_(DBB11OU)
                                        (0181) ;  Instance name AMUX4_mic, User Module AMUX4
                                        (0182) ;  Instance name BPF4_4KHz, User Module BPF4
                                        (0183) ;       Instance name BPF4_4KHz, Block Name FLFBH(ASD11)
                                        (0184) ;       Instance name BPF4_4KHz, Block Name FLFBL(ASD20)
                                        (0185) ;       Instance name BPF4_4KHz, Block Name FLINH(ASC21)
                                        (0186) ;       Instance name BPF4_4KHz, Block Name FLINL(ASC10)
                                        (0187) ;  Instance name DIGITAL_OUT, User Module LED
                                        (0188) ;  Instance name EzI2Cs_1, User Module EzI2Cs
                                        (0189) ;  Instance name HB_Tmr, User Module Timer16
                                        (0190) ;       Instance name HB_Tmr, Block Name TIMER16_LSB(DBB20)
                                        (0191) 	db		40h, 10h		;HB_Tmr_FUNC_LSB_REG(DBB20FN)
                                        (0192) 	db		41h, 06h		;HB_Tmr_INPUT_LSB_REG(DBA20IN)
                                        (0193) 	db		42h, 40h		;HB_Tmr_OUTPUT_LSB_REG(DBA20OU)
                                        (0194) ;       Instance name HB_Tmr, Block Name TIMER16_MSB(DBB21)
                                        (0195) 	db		44h, 30h		;HB_Tmr_FUNC_MSB_REG(DBB21FN)
                                        (0196) 	db		45h, 36h		;HB_Tmr_INPUT_MSB_REG(DBB21IN)
                                        (0197) 	db		46h, 40h		;HB_Tmr_OUTPUT_MSB_REG(DBB21OU)
                                        (0198) ;  Instance name LED_1, User Module LED
                                        (0199) ;  Instance name LED_2, User Module LED
                                        (0200) ;  Instance name LED_3, User Module LED
                                        (0201) ;  Instance name PGA_out, User Module PGA
                                        (0202) ;       Instance name PGA_out, Block Name GAIN(ACB02)
                                        (0203) ;  Instance name PGA_pre, User Module PGA
                                        (0204) ;       Instance name PGA_pre, Block Name GAIN(ACB00)
                                        (0205) ;  Instance name RefMux_1, User Module RefMux
                                        (0206) ;       Instance name RefMux_1, Block Name REFMUX(ACB03)
                                        (0207) ;  Instance name SCBLOCK_inbuff, User Module SCBLOCK
                                        (0208) ;       Instance name SCBLOCK_inbuff, Block Name SCBLK(ASC23)
                                        (0209) ;  Instance name TX8, User Module TX8
                                        (0210) ;       Instance name TX8, Block Name TX8(DCB13)
                                        (0211) 	db		3ch, 0dh		;TX8_FUNC_REG     (DCB13FN)
                                        (0212) 	db		3dh, 01h		;TX8_INPUT_REG    (DCB13IN)
                                        (0213) 	db		3eh, 46h		;TX8_OUTPUT_REG   (DCB13OU)
                                        (0214) ;  Global Register values Bank 1
                                        (0215) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0216) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0217) 	db		60h, 05h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0218) 	db		62h, 35h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0219) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0220) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0221) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0222) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0223) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0224) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0225) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0226) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0227) 	db		e1h, 4eh		; OscillatorControl_1 register (OSC_CR1)
                                        (0228) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0229) 	db		dfh, 19h		; OscillatorControl_3 register (OSC_CR3)
                                        (0230) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0231) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0232) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0233) 	db		ffh
                                        (0234) LoadConfigTBL_explorersound_Ordered:
                                        (0235) ;  Ordered Global Register values

(0236) 	M8C_SetBank1
0308: 10       PUSH  X                  
0309: 62 00 00 MOV   REG[0x0],0x0       (0237) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
030C: 62 01 FF MOV   REG[0x1],0xFF      (0238) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
030F: 70 EF    AND   F,0xEF             (0239) 	M8C_SetBank0
0311: 62 03 FF MOV   REG[0x3],0xFF      (0240) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
0314: 62 02 00 MOV   REG[0x2],0x0       (0241) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0317: 71 10    OR    F,0x10             (0242) 	M8C_SetBank1
0319: 62 02 00 MOV   REG[0x2],0x0       (0243) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
031C: 62 03 00 MOV   REG[0x3],0x0       (0244) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
031F: 70 EF    AND   F,0xEF             (0245) 	M8C_SetBank0
0321: 62 01 00 MOV   REG[0x1],0x0       (0246) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0324: 71 10    OR    F,0x10             (0247) 	M8C_SetBank1
0326: 62 04 A4 MOV   REG[0x4],0xA4      (0248) 	mov	reg[04h], a4h		; Port_1_DriveMode_0 register (PRT1DM0)
0329: 62 05 FB MOV   REG[0x5],0xFB      (0249) 	mov	reg[05h], fbh		; Port_1_DriveMode_1 register (PRT1DM1)
032C: 70 EF    AND   F,0xEF             (0250) 	M8C_SetBank0
032E: 62 07 FB MOV   REG[0x7],0xFB      (0251) 	mov	reg[07h], fbh		; Port_1_DriveMode_2 register (PRT1DM2)
0331: 62 06 04 MOV   REG[0x6],0x4       (0252) 	mov	reg[06h], 04h		; Port_1_GlobalSelect register (PRT1GS)
0334: 71 10    OR    F,0x10             (0253) 	M8C_SetBank1
0336: 62 06 00 MOV   REG[0x6],0x0       (0254) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0339: 62 07 00 MOV   REG[0x7],0x0       (0255) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
033C: 70 EF    AND   F,0xEF             (0256) 	M8C_SetBank0
033E: 62 05 00 MOV   REG[0x5],0x0       (0257) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0341: 71 10    OR    F,0x10             (0258) 	M8C_SetBank1
0343: 62 08 F0 MOV   REG[0x8],0xF0      (0259) 	mov	reg[08h], f0h		; Port_2_DriveMode_0 register (PRT2DM0)
0346: 62 09 0F MOV   REG[0x9],0xF       (0260) 	mov	reg[09h], 0fh		; Port_2_DriveMode_1 register (PRT2DM1)
0349: 70 EF    AND   F,0xEF             (0261) 	M8C_SetBank0
034B: 62 0B 0F MOV   REG[0xB],0xF       (0262) 	mov	reg[0bh], 0fh		; Port_2_DriveMode_2 register (PRT2DM2)
034E: 62 0A 00 MOV   REG[0xA],0x0       (0263) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0351: 71 10    OR    F,0x10             (0264) 	M8C_SetBank1
0353: 62 0A 00 MOV   REG[0xA],0x0       (0265) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0356: 62 0B 00 MOV   REG[0xB],0x0       (0266) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0359: 70 EF    AND   F,0xEF             (0267) 	M8C_SetBank0
035B: 62 09 00 MOV   REG[0x9],0x0       (0268) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
035E: 71 10    OR    F,0x10             (0269) 	M8C_SetBank1
0360: 62 0C 00 MOV   REG[0xC],0x0       (0270) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0363: 62 0D 00 MOV   REG[0xD],0x0       (0271) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0366: 70 EF    AND   F,0xEF             (0272) 	M8C_SetBank0
0368: 62 0F 00 MOV   REG[0xF],0x0       (0273) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
036B: 62 0E 00 MOV   REG[0xE],0x0       (0274) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
036E: 71 10    OR    F,0x10             (0275) 	M8C_SetBank1
0370: 62 0E 00 MOV   REG[0xE],0x0       (0276) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0373: 62 0F 00 MOV   REG[0xF],0x0       (0277) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0376: 70 EF    AND   F,0xEF             (0278) 	M8C_SetBank0
0378: 62 0D 00 MOV   REG[0xD],0x0       (0279) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
037B: 71 10    OR    F,0x10             (0280) 	M8C_SetBank1
037D: 62 10 00 MOV   REG[0x10],0x0      (0281) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0380: 62 11 00 MOV   REG[0x11],0x0      (0282) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0383: 70 EF    AND   F,0xEF             (0283) 	M8C_SetBank0
0385: 62 13 00 MOV   REG[0x13],0x0      (0284) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0388: 62 12 00 MOV   REG[0x12],0x0      (0285) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
038B: 71 10    OR    F,0x10             (0286) 	M8C_SetBank1
038D: 62 12 00 MOV   REG[0x12],0x0      (0287) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0390: 62 13 00 MOV   REG[0x13],0x0      (0288) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0393: 70 EF    AND   F,0xEF             (0289) 	M8C_SetBank0
0395: 62 11 00 MOV   REG[0x11],0x0      (0290) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0398: 71 10    OR    F,0x10             (0291) 	M8C_SetBank1
039A: 62 14 00 MOV   REG[0x14],0x0      (0292) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
039D: 62 15 00 MOV   REG[0x15],0x0      (0293) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
03A0: 70 EF    AND   F,0xEF             (0294) 	M8C_SetBank0
03A2: 62 17 00 MOV   REG[0x17],0x0      (0295) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
03A5: 62 16 00 MOV   REG[0x16],0x0      (0296) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
03A8: 71 10    OR    F,0x10             (0297) 	M8C_SetBank1
03AA: 62 16 00 MOV   REG[0x16],0x0      (0298) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
03AD: 62 17 00 MOV   REG[0x17],0x0      (0299) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
03B0: 70 EF    AND   F,0xEF             (0300) 	M8C_SetBank0
03B2: 62 15 00 MOV   REG[0x15],0x0      (0301) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
03B5: 71 10    OR    F,0x10             (0302) 	M8C_SetBank1
03B7: 62 18 00 MOV   REG[0x18],0x0      (0303) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
03BA: 62 19 00 MOV   REG[0x19],0x0      (0304) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
03BD: 70 EF    AND   F,0xEF             (0305) 	M8C_SetBank0
03BF: 62 1B 00 MOV   REG[0x1B],0x0      (0306) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
03C2: 62 1A 00 MOV   REG[0x1A],0x0      (0307) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
03C5: 71 10    OR    F,0x10             (0308) 	M8C_SetBank1
03C7: 62 1A 00 MOV   REG[0x1A],0x0      (0309) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
03CA: 62 1B 00 MOV   REG[0x1B],0x0      (0310) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
03CD: 70 EF    AND   F,0xEF             (0311) 	M8C_SetBank0
03CF: 62 19 00 MOV   REG[0x19],0x0      (0312) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
03D2: 71 10    OR    F,0x10             (0313) 	M8C_SetBank1
03D4: 62 1C 00 MOV   REG[0x1C],0x0      (0314) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
03D7: 62 1D 00 MOV   REG[0x1D],0x0      (0315) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
03DA: 70 EF    AND   F,0xEF             (0316) 	M8C_SetBank0
03DC: 62 1F 00 MOV   REG[0x1F],0x0      (0317) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
03DF: 62 1E 00 MOV   REG[0x1E],0x0      (0318) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
03E2: 71 10    OR    F,0x10             (0319) 	M8C_SetBank1
03E4: 62 1E 00 MOV   REG[0x1E],0x0      (0320) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
03E7: 62 1F 00 MOV   REG[0x1F],0x0      (0321) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
03EA: 70 EF    AND   F,0xEF             (0322) 	M8C_SetBank0
03EC: 62 1D 00 MOV   REG[0x1D],0x0      (0323) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
03EF: 70 EF    AND   F,0xEF             (0324) 	M8C_SetBank0
03F1: 7F       RET                      (0325) 	ret
(0326) 
(0327) 
(0328) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_explorersound
                                        (0026) export _LoadConfig_explorersound
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) 
                                        (0030) 
                                        (0031) export NO_SHADOW
                                        (0032) export _NO_SHADOW
                                        (0033) 
                                        (0034) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0035) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0036) 
                                        (0037) AREA psoc_config(rom, rel)
                                        (0038) 
                                        (0039) ;---------------------------------------------------------------------------
                                        (0040) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0041) ;                  parameters handled by boot code, like CPU speed). This
                                        (0042) ;                  function can be called from user code, but typically it
                                        (0043) ;                  is only called from boot.
                                        (0044) ;
                                        (0045) ;       INPUTS: None.
                                        (0046) ;      RETURNS: Nothing.
                                        (0047) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0048) ;               In the large memory model currently only the page
                                        (0049) ;               pointer registers listed below are modified.  This does
                                        (0050) ;               not guarantee that in future implementations of this
                                        (0051) ;               function other page pointer registers will not be
                                        (0052) ;               modified.
                                        (0053) ;          
                                        (0054) ;               Page Pointer Registers Modified: 
                                        (0055) ;               CUR_PP
                                        (0056) ;
                                        (0057) _LoadConfigInit:
                                        (0058)  LoadConfigInit:
                                        (0059)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0060)     

(0061) 	mov		[Port_2_Data_SHADE], 0h
                                        (0062) 
03F5: 00       SWI                      
03F6: 00       SWI                      
03F7: 7C 03 FE LCALL 0x03FE             (0063) 	lcall	LoadConfig_explorersound
03FA: 7C 03 07 LCALL 0x0307             (0064) 	lcall	LoadConfigTBL_explorersound_Ordered
                                        (0065) 
                                        (0066) 
                                        (0067)     RAM_EPILOGUE RAM_USE_CLASS_4
03FD: 7F       RET                      (0068)     ret
                                        (0069) 
                                        (0070) ;---------------------------------------------------------------------------
                                        (0071) ; Load Configuration explorersound
                                        (0072) ;
                                        (0073) ;    Load configuration registers for explorersound.
                                        (0074) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0075) ;
                                        (0076) ;       INPUTS: None.
                                        (0077) ;      RETURNS: Nothing.
                                        (0078) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0079) ;               modified as may the Page Pointer registers!
                                        (0080) ;               In the large memory model currently only the page
                                        (0081) ;               pointer registers listed below are modified.  This does
                                        (0082) ;               not guarantee that in future implementations of this
                                        (0083) ;               function other page pointer registers will not be
                                        (0084) ;               modified.
                                        (0085) ;          
                                        (0086) ;               Page Pointer Registers Modified: 
                                        (0087) ;               CUR_PP
                                        (0088) ;
                                        (0089) _LoadConfig_explorersound:
                                        (0090)  LoadConfig_explorersound:
                                        (0091)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0092) 
03FE: 10       PUSH  X                  (0093) 	push	x
03FF: 70 EF    AND   F,0xEF             (0094)     M8C_SetBank0                    ; Force bank 0
0401: 50 00    MOV   A,0x0              (0095)     mov     a, 0                    ; Specify bank 0
0403: 67       ASR   A                  (0096)     asr     a                       ; Store in carry flag
                                        (0097)                                     ; Load bank 0 table:
0404: 50 01    MOV   A,0x1              (0098)     mov     A, >LoadConfigTBL_explorersound_Bank0
0406: 57 D7    MOV   X,0xD7             (0099)     mov     X, <LoadConfigTBL_explorersound_Bank0
0408: 7C 04 19 LCALL 0x0419             (0100)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0101) 
040B: 50 01    MOV   A,0x1              (0102)     mov     a, 1                    ; Specify bank 1
040D: 67       ASR   A                  (0103)     asr     a                       ; Store in carry flag
                                        (0104)                                     ; Load bank 1 table:
040E: 50 02    MOV   A,0x2              (0105)     mov     A, >LoadConfigTBL_explorersound_Bank1
0410: 57 AC    MOV   X,0xAC             (0106)     mov     X, <LoadConfigTBL_explorersound_Bank1
0412: 7C 04 19 LCALL 0x0419             (0107)     lcall   LoadConfig              ; Load the bank 1 values
                                        (0108) 
0415: 70 EF    AND   F,0xEF             (0109)     M8C_SetBank0                    ; Force return to bank 0
0417: 20       POP   X                  (0110) 	pop		x
                                        (0111) 
                                        (0112)     RAM_EPILOGUE RAM_USE_CLASS_4
0418: 7F       RET                      (0113)     ret
                                        (0114) 
                                        (0115) 
                                        (0116) 
                                        (0117) 
                                        (0118) ;---------------------------------------------------------------------------
                                        (0119) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0120) ;              pairs. Terminate on address=0xFF.
                                        (0121) ;
                                        (0122) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0123) ;           Flag Register Carry bit encodes the Register Bank
                                        (0124) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0125) ;
                                        (0126) ;  RETURNS: nothing.
                                        (0127) ;
                                        (0128) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0129) ;                X-3 Temporary store for register address
                                        (0130) ;                X-2 LSB of config table address
                                        (0131) ;                X-1 MSB of config table address
                                        (0132) ;
                                        (0133) LoadConfig:
                                        (0134)     RAM_PROLOGUE RAM_USE_CLASS_2
0419: 38 02    ADD   SP,0x2             (0135)     add     SP, 2                   ; Set up local vars
041B: 10       PUSH  X                  (0136)     push    X                       ; Save config table address on stack
041C: 08       PUSH  A                  (0137)     push    A
041D: 4F       MOV   X,SP               (0138)     mov     X, SP
041E: 56 FC 00 MOV   [X-4],0x0          (0139)     mov     [X-4], 0                ; Set default Destination to Bank 0
0421: D0 04    JNC   0x0426             (0140)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0423: 56 FC 01 MOV   [X-4],0x1          (0141)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0142) .BankSelectSaved:
0426: 18       POP   A                  (0143)     pop     A
0427: 20       POP   X                  (0144)     pop     X
                                        (0145) 
                                        (0146) LoadConfigLp:
0428: 70 EF    AND   F,0xEF             (0147)     M8C_SetBank0                    ; Switch to bank 0
042A: 62 E3 00 MOV   REG[0xE3],0x0      (0148)     M8C_ClearWDT                    ; Clear the watchdog for long inits
042D: 10       PUSH  X                  (0149)     push    X                       ; Preserve the config table address
042E: 08       PUSH  A                  (0150)     push    A
042F: 28       ROMX                     (0151)     romx                            ; Load register address from table
0430: 39 FF    CMP   A,0xFF             (0152)     cmp     A, END_CONFIG_TABLE     ; End of table?
0432: A0 1F    JZ    0x0452             (0153)     jz      EndLoadConfig           ;   Yes, go wrap it up
0434: 4F       MOV   X,SP               (0154)     mov     X, SP                   ;
0435: 48 FC 01 TST   [X-4],0x1          (0155)     tst     [X-4], 1                ; Loading IO Bank 1?
0438: A0 03    JZ    0x043C             (0156)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
043A: 71 10    OR    F,0x10             (0157)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0158) .IOBankNowSet:
043C: 54 FD    MOV   [X-3],A            (0159)     mov     [X-3], A                ; Stash the register address
043E: 18       POP   A                  (0160)     pop     A                       ; Retrieve the table address
043F: 20       POP   X                  (0161)     pop     X
0440: 75       INC   X                  (0162)     inc     X                       ; Advance to the data byte
0441: 09 00    ADC   A,0x0              (0163)     adc     A, 0
0443: 10       PUSH  X                  (0164)     push    X                       ; Save the config table address again
0444: 08       PUSH  A                  (0165)     push    A
0445: 28       ROMX                     (0166)     romx                            ; load config data from the table
0446: 4F       MOV   X,SP               (0167)     mov     X, SP                   ; retrieve the register address
0447: 59 FD    MOV   X,[X-3]            (0168)     mov     X, [X-3]
0449: 61 00    MOV   REG[X+0x0],A       (0169)     mov     reg[X], A               ; Configure the register
044B: 18       POP   A                  (0170)     pop     A                       ; retrieve the table address
044C: 20       POP   X                  (0171)     pop     X
044D: 75       INC   X                  (0172)     inc     X                       ; advance to next table entry
044E: 09 00    ADC   A,0x0              (0173)     adc     A, 0
0450: 8F D7    JMP   0x0428             (0174)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0175) EndLoadConfig:
0452: 38 FC    ADD   SP,0xFC            (0176)     add     SP, -4
0454: 70 3F    AND   F,0x3F             
0456: 71 C0    OR    F,0xC0             (0177)     RAM_EPILOGUE RAM_USE_CLASS_2
0458: 7F       RET                      (0178)     ret
(0179) 
(0180) AREA InterruptRAM(ram, rel)
(0181) 
(0182) NO_SHADOW:
(0183) _NO_SHADOW:
(0184) ; write only register shadows
(0185) _Port_2_Data_SHADE:
(0186) Port_2_Data_SHADE:	BLK	1
(0187) 
FILE: lib\tx8.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: TX8.asm
                                        (0004) ;;   Version: 3.3, Updated on 2009/10/23 at 10:13:12
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: TX8 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;-----------------------------------------------
                                        (0023) ; include instance specific register definitions
                                        (0024) ;-----------------------------------------------
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "TX8.inc"
                                        (0028) 
                                        (0029) area UserModules (ROM, REL)
                                        (0030) ;-----------------------------------------------
                                        (0031) ;  Global Symbols
                                        (0032) ;-----------------------------------------------
                                        (0033) export   TX8_SetTxIntMode
                                        (0034) export  _TX8_SetTxIntMode
                                        (0035) export   TX8_EnableInt
                                        (0036) export  _TX8_EnableInt
                                        (0037) export   TX8_DisableInt
                                        (0038) export  _TX8_DisableInt
                                        (0039) export   TX8_Start
                                        (0040) export  _TX8_Start
                                        (0041) export   TX8_Stop
                                        (0042) export  _TX8_Stop
                                        (0043) export   TX8_SendData
                                        (0044) export  _TX8_SendData
                                        (0045) export   TX8_bReadTxStatus
                                        (0046) export  _TX8_bReadTxStatus
                                        (0047) 
                                        (0048) // Old labels, will be removed in future release
                                        (0049) // Do Not Use.
                                        (0050) export   bTX8_ReadTxStatus
                                        (0051) export  _bTX8_ReadTxStatus
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  High Level TX functions
                                        (0055) ;-----------------------------------------------
                                        (0056) export  TX8_PutSHexByte
                                        (0057) export _TX8_PutSHexByte
                                        (0058) export  TX8_PutSHexInt
                                        (0059) export _TX8_PutSHexInt
                                        (0060) 
                                        (0061) export  TX8_CPutString
                                        (0062) export _TX8_CPutString
                                        (0063) export  TX8_PutString
                                        (0064) export _TX8_PutString
                                        (0065) export  TX8_PutChar
                                        (0066) export _TX8_PutChar
                                        (0067) export  TX8_Write
                                        (0068) export _TX8_Write
                                        (0069) export  TX8_CWrite
                                        (0070) export _TX8_CWrite
                                        (0071) export  TX8_PutCRLF
                                        (0072) export _TX8_PutCRLF 
                                        (0073) 
                                        (0074) ;-----------------------------------------------
                                        (0075) ;  EQUATES
                                        (0076) ;-----------------------------------------------
                                        (0077) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                        (0078) bfFUNCTION_REG_TX_INT_MODE_BIT:	equ 0x10	; the TX Int Mode bit
                                        (0079) 
                                        (0080) AREA UserModules (ROM, REL)
                                        (0081) 
                                        (0082) .SECTION
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;  FUNCTION NAME: TX8_EnableInt
                                        (0085) ;
                                        (0086) ;  DESCRIPTION:
                                        (0087) ;     Enables this Transmitter's interrupt by setting the interrupt enable mask
                                        (0088) ;     bit associated with this User Module. Remember to call the global interrupt
                                        (0089) ;     enable function by using the macro: M8C_EnableGInt.
                                        (0090) ;
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;
                                        (0093) ;  ARGUMENTS: none
                                        (0094) ;
                                        (0095) ;  RETURNS: none
                                        (0096) ;
                                        (0097) ;  SIDE EFFECTS:
                                        (0098) ;    The A and X registers may be modified by this or future implementations
                                        (0099) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0100) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0101) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0102) ;    functions.
                                        (0103) ;
                                        (0104)  TX8_EnableInt:
                                        (0105) _TX8_EnableInt:
                                        (0106)    RAM_PROLOGUE RAM_USE_CLASS_1
0459: 43 E1 80 OR    REG[0xE1],0x80     (0107)    M8C_EnableIntMask  TX8_INT_REG, TX8_bINT_MASK
                                        (0108)    RAM_EPILOGUE RAM_USE_CLASS_1
045C: 7F       RET                      (0109)    ret
                                        (0110) .ENDSECTION
                                        (0111) 
                                        (0112) .SECTION
                                        (0113) ;-----------------------------------------------------------------------------
                                        (0114) ;  FUNCTION NAME: TX8_DisableInt
                                        (0115) ;
                                        (0116) ;  DESCRIPTION:
                                        (0117) ;     Disables this TX8's interrupt by clearing the interrupt enable mask bit
                                        (0118) ;     associated with this User Module.
                                        (0119) ;
                                        (0120) ;-----------------------------------------------------------------------------
                                        (0121) ;
                                        (0122) ;  ARGUMENTS:  none
                                        (0123) ;
                                        (0124) ;  RETURNS:  none
                                        (0125) ;
                                        (0126) ;  SIDE EFFECTS:
                                        (0127) ;    The A and X registers may be modified by this or future implementations
                                        (0128) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0129) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0130) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0131) ;    functions.
                                        (0132) ;
                                        (0133)  TX8_DisableInt:
                                        (0134) _TX8_DisableInt:
                                        (0135)    RAM_PROLOGUE RAM_USE_CLASS_1
045D: 41 E1 7F AND   REG[0xE1],0x7F     (0136)    M8C_DisableIntMask TX8_INT_REG, TX8_bINT_MASK
                                        (0137)    RAM_EPILOGUE RAM_USE_CLASS_1
0460: 7F       RET                      (0138)    ret
                                        (0139) .ENDSECTION
                                        (0140) 
                                        (0141) .SECTION
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;  FUNCTION NAME: TX8_SetTxIntMode(BYTE bTxIntMode)
                                        (0144) ;
                                        (0145) ;  DESCRIPTION:
                                        (0146) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0147) ;
                                        (0148) ;  ARGUMENTS:
                                        (0149) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0150) ;        Passed in the A register
                                        (0151) ;
                                        (0152) ;  RETURNS:
                                        (0153) ;     none.
                                        (0154) ;
                                        (0155) ;  SIDE EFFECTS:
                                        (0156) ;    The A and X registers may be modified by this or future implementations
                                        (0157) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0158) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0159) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0160) ;    functions.
                                        (0161) ;
                                        (0162) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0163) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0164) ;     on TX register empty or TX transmit complete
                                        (0165) ;
                                        (0166)  TX8_SetTxIntMode:
                                        (0167) _TX8_SetTxIntMode:
                                        (0168)    RAM_PROLOGUE RAM_USE_CLASS_1
0461: 71 10    OR    F,0x10             (0169)    M8C_SetBank1
0463: 21 01    AND   A,0x1              (0170)    and   A, TX8_INT_MODE_TX_COMPLETE
0465: A0 07    JZ    0x046D             (0171)    jz    .SetModeRegEmpty
0467: 43 3C 10 OR    REG[0x3C],0x10     (0172)    or    REG[TX8_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
046A: 70 EF    AND   F,0xEF             (0173)    M8C_SetBank0
                                        (0174)    RAM_EPILOGUE RAM_USE_CLASS_1
046C: 7F       RET                      (0175)    ret
                                        (0176) 
                                        (0177) .SetModeRegEmpty:
046D: 41 3C EF AND   REG[0x3C],0xEF     (0178)    and   REG[TX8_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
0470: 70 EF    AND   F,0xEF             (0179)    M8C_SetBank0
                                        (0180)    RAM_EPILOGUE RAM_USE_CLASS_1
0472: 7F       RET                      (0181)    ret
                                        (0182) .ENDSECTION
                                        (0183) 
                                        (0184) .SECTION
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;  FUNCTION NAME: TX8_Start(BYTE bParity)
                                        (0187) ;
                                        (0188) ;  DESCRIPTION:
                                        (0189) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0190) ;     The transmitter will begin transmitting if a byte has been written into the
                                        (0191) ;     transmit buffer.
                                        (0192) ;
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;    BYTE bParity - parity of transmitted data.  Use defined masks.
                                        (0197) ;
                                        (0198) ;  RETURNS:  none
                                        (0199) ;
                                        (0200) ;  SIDE EFFECTS:
                                        (0201) ;    The A and X registers may be modified by this or future implementations
                                        (0202) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0203) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0204) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0205) ;    functions.
                                        (0206) ;
                                        (0207)  TX8_Start:
                                        (0208) _TX8_Start:
                                        (0209)    RAM_PROLOGUE RAM_USE_CLASS_1
0473: 29 01    OR    A,0x1              (0210)    or    A, bfCONTROL_REG_START_BIT
0475: 60 3F    MOV   REG[0x3F],A        (0211)    mov   REG[TX8_CONTROL_REG], A
                                        (0212)    RAM_EPILOGUE RAM_USE_CLASS_1
0477: 7F       RET                      (0213)    ret
                                        (0214) .ENDSECTION
                                        (0215) 
                                        (0216) .SECTION
                                        (0217) ;-----------------------------------------------------------------------------
                                        (0218) ;  FUNCTION NAME: TX8_Stop
                                        (0219) ;
                                        (0220) ;  DESCRIPTION:
                                        (0221) ;     Disables TX8 operation.
                                        (0222) ;
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:  none
                                        (0226) ;
                                        (0227) ;  RETURNS:  none
                                        (0228) ;
                                        (0229) ;  SIDE EFFECTS:
                                        (0230) ;    The A and X registers may be modified by this or future implementations
                                        (0231) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0232) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0233) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0234) ;    functions.
                                        (0235) ;
                                        (0236)  TX8_Stop:
                                        (0237) _TX8_Stop:
                                        (0238)    RAM_PROLOGUE RAM_USE_CLASS_1
0478: 41 3F FE AND   REG[0x3F],0xFE     (0239)    and   REG[TX8_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
047B: 7F       RET                      (0241)    ret
                                        (0242) .ENDSECTION
                                        (0243) 
                                        (0244) .SECTION
                                        (0245) ;-----------------------------------------------------------------------------
                                        (0246) ;  FUNCTION NAME: TX8_SendData
                                        (0247) ;
                                        (0248) ;  DESCRIPTION:
                                        (0249) ;     Sends one byte through serial port.
                                        (0250) ;
                                        (0251) ;-----------------------------------------------------------------------------
                                        (0252) ;
                                        (0253) ;  ARGUMENTS:
                                        (0254) ;     BYTE  TxData - data to transmit.
                                        (0255) ;
                                        (0256) ;  RETURNS:
                                        (0257) ;
                                        (0258) ;  SIDE EFFECTS:
                                        (0259) ;    The A and X registers may be modified by this or future implementations
                                        (0260) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0261) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0262) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0263) ;    functions.
                                        (0264) ;
                                        (0265)  TX8_SendData:
                                        (0266) _TX8_SendData:
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
047C: 60 3D    MOV   REG[0x3D],A        (0268)    mov REG[TX8_TX_BUFFER_REG], A
                                        (0269)    RAM_EPILOGUE RAM_USE_CLASS_1
047E: 7F       RET                      (0270)    ret
                                        (0271) .ENDSECTION
                                        (0272) 
                                        (0273) .SECTION
                                        (0274) ;-----------------------------------------------------------------------------
                                        (0275) ;  FUNCTION NAME: TX8_bReadTxStatus
                                        (0276) ;
                                        (0277) ;  DESCRIPTION:
                                        (0278) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0279) ;
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS:
                                        (0283) ;
                                        (0284) ;  RETURNS:
                                        (0285) ;     BYTE  bTxStatus - transmit status data.  Use the following defined bits
                                        (0286) ;                       masks: TX_COMPLETE and TX_BUFFER_EMPTY
                                        (0287) ;
                                        (0288) ;  SIDE EFFECTS:
                                        (0289) ;    The A and X registers may be modified by this or future implementations
                                        (0290) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0291) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0292) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0293) ;    functions.
                                        (0294) ;
                                        (0295)  TX8_bReadTxStatus:
                                        (0296) _TX8_bReadTxStatus:
                                        (0297)  bTX8_ReadTxStatus:
                                        (0298) _bTX8_ReadTxStatus:
                                        (0299)    RAM_PROLOGUE RAM_USE_CLASS_1
047F: 5D 3F    MOV   A,REG[0x3F]        (0300)    mov A,  REG[TX8_CONTROL_REG]
                                        (0301)    RAM_EPILOGUE RAM_USE_CLASS_1
0481: 7F       RET                      (0302)    ret
                                        (0303) 
                                        (0304) .ENDSECTION
                                        (0305) 
                                        (0306) ;-----------------------------------------------------------------------------
                                        (0307) ;  FUNCTION NAME: TX8_PutSHexByte
                                        (0308) ;
                                        (0309) ;  DESCRIPTION:
                                        (0310) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0311) ;
                                        (0312) ;  ARGUMENTS:
                                        (0313) ;     A  => (BYTE) Data/char to be printed
                                        (0314) ;
                                        (0315) ;  RETURNS:
                                        (0316) ;     none.
                                        (0317) ;
                                        (0318) ;  SIDE EFFECTS:
                                        (0319) ;    The A and X registers may be modified by this or future implementations
                                        (0320) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0321) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0322) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0323) ;    functions.
                                        (0324) ;
                                        (0325) .LITERAL
                                        (0326) TX8_HEX_STR:
                                        (0327)      DS    "0123456789ABCDEF"
                                        (0328) .ENDLITERAL
                                        (0329) 
                                        (0330) .SECTION
                                        (0331)  TX8_PutSHexByte:
                                        (0332) _TX8_PutSHexByte:
                                        (0333)     RAM_PROLOGUE RAM_USE_CLASS_1
0482: 30       HALT                     
0483: 31 32    XOR   A,0x32             
0485: 33 34    XOR   A,[X+52]           
0487: 35 36    XOR   [X+54],A           
0489: 37 38 39 XOR   [X+56],0x39        
048C: 41 42 43 AND   REG[0x42],0x43     
048F: 44 45 46 OR    REG[X+0x45],0x46   
0492: 08       PUSH  A                  (0334)     push  A                            ; Save lower nibble
0493: 67       ASR   A                  (0335)     asr   A                            ; Shift high nibble to right
0494: 67       ASR   A                  (0336)     asr   A
0495: 67       ASR   A                  (0337)     asr   A
0496: 67       ASR   A                  (0338)     asr   A
0497: 21 0F    AND   A,0xF              (0339)     and   A,0Fh                        ; Mask off nibble
0499: FF E7    INDEX 0x0482             (0340)     index TX8_HEX_STR                  ; Get Hex value
049B: 90 0F    CALL  0x04AC             (0341)     call  TX8_PutChar                  ; Write data to screen
049D: 18       POP   A                  (0342)     pop   A                            ; Restore value
049E: 21 0F    AND   A,0xF              (0343)     and   A,0Fh                        ; Mask off lower nibble
04A0: FF E0    INDEX 0x0482             (0344)     index TX8_HEX_STR                  ; Get Hex value
04A2: 90 08    CALL  0x04AC             (0345)     call  TX8_PutChar                  ; Write data to screen
                                        (0346)     RAM_EPILOGUE RAM_USE_CLASS_1
04A4: 7F       RET                      (0347)     ret
                                        (0348) .ENDSECTION
                                        (0349) 
                                        (0350) .SECTION
                                        (0351) ;-----------------------------------------------------------------------------
                                        (0352) ;  FUNCTION NAME: TX8_PutSHexInt
                                        (0353) ;
                                        (0354) ;  DESCRIPTION:
                                        (0355) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0356) ;
                                        (0357) ;  ARGUMENTS:
                                        (0358) ;     Pointer to string
                                        (0359) ;     A  => ASB of Int
                                        (0360) ;     X  => MSB of Int
                                        (0361) ;
                                        (0362) ;  RETURNS:
                                        (0363) ;     none.
                                        (0364) ;
                                        (0365) ;  SIDE EFFECTS:
                                        (0366) ;    The A and X registers may be modified by this or future implementations
                                        (0367) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0368) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0369) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0370) ;    functions.
                                        (0371) ;
                                        (0372)  TX8_PutSHexInt:
                                        (0373) _TX8_PutSHexInt:
                                        (0374)     RAM_PROLOGUE RAM_USE_CLASS_1
04A5: 4B       SWAP  A,X                (0375)     swap  A,X
04A6: 9F EA    CALL  0x0492             (0376)     call  TX8_PutSHexByte              ; Print MSB
04A8: 5B       MOV   A,X                (0377)     mov   A,X                          ; Move LSB into position
04A9: 9F E7    CALL  0x0492             (0378)     call  TX8_PutSHexByte              ; Print LSB
                                        (0379)     RAM_EPILOGUE RAM_USE_CLASS_1
04AB: 7F       RET                      (0380)     ret
                                        (0381) .ENDSECTION
                                        (0382) 
                                        (0383) .SECTION
                                        (0384) ;-----------------------------------------------------------------------------
                                        (0385) ;  FUNCTION NAME: TX8_PutChar
                                        (0386) ;
                                        (0387) ;  DESCRIPTION:
                                        (0388) ;     Send character out through UART TX port.
                                        (0389) ;
                                        (0390) ;
                                        (0391) ;  ARGUMENTS:
                                        (0392) ;     A has Character to send to UART Tx Port
                                        (0393) ;
                                        (0394) ;  RETURNS:
                                        (0395) ;     none
                                        (0396) ;
                                        (0397) ;  SIDE EFFECTS:
                                        (0398) ;    The A and X registers may be modified by this or future implementations
                                        (0399) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0400) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0401) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0402) ;    functions.
                                        (0403) ;
                                        (0404)    macro InLinePutChar( Source )
                                        (0405) .BufEmptyWaitLoop:
                                        (0406)    tst REG[TX8_CONTROL_REG], TX8_TX_BUFFER_EMPTY    ; Check Tx Status
                                        (0407)    jz  .BufEmptyWaitLoop
                                        (0408)    mov REG[TX8_TX_BUFFER_REG], @Source    ; Write data to Tx Port
                                        (0409)    endm
                                        (0410) 
                                        (0411) 
                                        (0412)  TX8_PutChar:
                                        (0413) _TX8_PutChar:
                                        (0414)    RAM_PROLOGUE RAM_USE_CLASS_1
04AC: 49 3F 10 TST   REG[0x3F],0x10     
04AF: AF FC    JZ    0x04AC             
04B1: 60 3D    MOV   REG[0x3D],A        (0415)    InLinePutChar A
                                        (0416)    RAM_EPILOGUE RAM_USE_CLASS_1
04B3: 7F       RET                      (0417)    ret
                                        (0418) 
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) 
                                        (0422) ;-----------------------------------------------
                                        (0423) ;  High Level TX functions
                                        (0424) ;-----------------------------------------------
                                        (0425) 
                                        (0426) 
                                        (0427) .SECTION
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;  FUNCTION NAME: TX8_PutString
                                        (0430) ;
                                        (0431) ;  DESCRIPTION:
                                        (0432) ;     Send String out through UART TX port.
                                        (0433) ;
                                        (0434) ;
                                        (0435) ;  ARGUMENTS:
                                        (0436) ;     Pointer to String
                                        (0437) ;     A has MSB of string address
                                        (0438) ;     X has LSB of string address
                                        (0439) ;
                                        (0440) ;  RETURNS:
                                        (0441) ;     none
                                        (0442) ;
                                        (0443) ;  SIDE EFFECTS:
                                        (0444) ;    The A and X registers may be modified by this or future implementations
                                        (0445) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0446) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0447) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0448) ;    functions.
                                        (0449) ;          
                                        (0450) ;    Currently only the page pointer registers listed below are modified: 
                                        (0451) ;          IDX_PP
                                        (0452) ;
                                        (0453)  TX8_PutString:
                                        (0454) _TX8_PutString:
04B4: 70 BF    AND   F,0xBF             (0455)    RAM_PROLOGUE RAM_USE_CLASS_3
04B6: 60 D3    MOV   REG[0xD3],A        (0456)    RAM_SETPAGE_IDX A
                                        (0457) .PutStringLoop:
04B8: 52 00    MOV   A,[X+0]            (0458)    mov   A,[X]                             ; Get value pointed to by X
04BA: A0 06    JZ    0x04C1             (0459)    jz    End_PutString                     ; Check for end of string
04BC: 9F EE    CALL  0x04AC             (0460)    call  TX8_PutChar                        ; Send character to Tx port
04BE: 75       INC   X                  (0461)    inc   X                                 ; Advance pointer to next character
04BF: 8F F8    JMP   0x04B8             (0462)    jmp   .PutStringLoop                     ; Get next character
                                        (0463) 
                                        (0464) End_PutString:
04C1: 70 3F    AND   F,0x3F             
04C3: 71 C0    OR    F,0xC0             (0465)    RAM_EPILOGUE RAM_USE_CLASS_3
04C5: 7F       RET                      (0466)    ret
                                        (0467) .ENDSECTION
                                        (0468) 
                                        (0469) .SECTION
                                        (0470) ;-----------------------------------------------------------------------------
                                        (0471) ;  FUNCTION NAME: TX8_Write
                                        (0472) ;
                                        (0473) ;  DESCRIPTION:
                                        (0474) ;     Send String of length X to serial port
                                        (0475) ;
                                        (0476) ;
                                        (0477) ;  ARGUMENTS:
                                        (0478) ;     Pointer to String
                                        (0479) ;     [SP-5] Count of characters to send
                                        (0480) ;     [SP-4] has MSB of string address
                                        (0481) ;     [SP-3] has LSB of string address
                                        (0482) ;
                                        (0483) ;  RETURNS:
                                        (0484) ;     none
                                        (0485) ;
                                        (0486) ;  SIDE EFFECTS:
                                        (0487) ;    The A and X registers may be modified by this or future implementations
                                        (0488) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0489) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0490) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0491) ;    functions.
                                        (0492) ;          
                                        (0493) ;    Currently only the page pointer registers listed below are modified: 
                                        (0494) ;          IDX_PP
                                        (0495) ;
                                        (0496) CNT_LEN:    equ -5           ; Length of data to send
                                        (0497) STR_MSB:    equ -4           ; MSB pointer of string
                                        (0498) STR_LSB:    equ -3           ; LSB pointer of string
                                        (0499) 
                                        (0500)  TX8_Write:
                                        (0501) _TX8_Write:
04C6: 70 BF    AND   F,0xBF             (0502)    RAM_PROLOGUE RAM_USE_CLASS_3
04C8: 62 D3 07 MOV   REG[0xD3],0x7      (0503)    RAM_SETPAGE_IDX2STK
04CB: 4F       MOV   X,SP               (0504)    mov   X, SP
                                        (0505) 
                                        (0506) .NextByteLoop:
04CC: 52 FB    MOV   A,[X-5]            (0507)    mov   A,[X+CNT_LEN]                     ; Get length of string to send
04CE: A0 1A    JZ    0x04E9             (0508)    jz    .End_Write
04D0: 7B FB    DEC   [X-5]              (0509)    dec   [X+CNT_LEN]                       ; Decrement counter
                                        (0510) 
                                        (0511)    IF SYSTEM_LARGE_MEMORY_MODEL
04D2: 52 FC    MOV   A,[X-4]            (0512)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0513)    ENDIF
                                        (0514) 
04D4: 59 FD    MOV   X,[X-3]            (0515)    mov   X,[X+STR_LSB]                     ; Get character to send
04D6: 60 D3    MOV   REG[0xD3],A        (0516)    RAM_SETPAGE_IDX A                        ; switch index pages
04D8: 52 00    MOV   A,[X+0]            (0517)    mov   A,[X]
04DA: 49 3F 10 TST   REG[0x3F],0x10     
04DD: AF FC    JZ    0x04DA             
04DF: 60 3D    MOV   REG[0x3D],A        (0518)    InLinePutChar A                          ; Send character to UART
04E1: 4F       MOV   X,SP               (0519)    mov   X, SP
04E2: 62 D3 07 MOV   REG[0xD3],0x7      (0520)    RAM_SETPAGE_IDX2STK
04E5: 77 FD    INC   [X-3]              (0521)    inc   [X+STR_LSB]
04E7: 8F E4    JMP   0x04CC             (0522)    jmp   .NextByteLoop
                                        (0523) 
                                        (0524) .End_Write:
04E9: 70 3F    AND   F,0x3F             
04EB: 71 C0    OR    F,0xC0             (0525)    RAM_EPILOGUE RAM_USE_CLASS_3
04ED: 7F       RET                      (0526)    ret
                                        (0527) .ENDSECTION
                                        (0528) 
                                        (0529) .SECTION
                                        (0530) ;-----------------------------------------------------------------------------
                                        (0531) ;  FUNCTION NAME: TX8_CWrite
                                        (0532) ;
                                        (0533) ;             WARNING WARNING NOT COMPLETE
                                        (0534) ;
                                        (0535) ;  DESCRIPTION:
                                        (0536) ;     Send String of length X to serial port
                                        (0537) ;
                                        (0538) ;  ARGUMENTS:
                                        (0539) ;     Pointer to String
                                        (0540) ;     [SP-6] MSB of Count of character to send
                                        (0541) ;     [SP-5] LSB of Count of character to send
                                        (0542) ;     [SP-4] has MSB of string address
                                        (0543) ;     [SP-3] has LSB of string address
                                        (0544) ;
                                        (0545) ;  RETURNS:
                                        (0546) ;     none
                                        (0547) ;
                                        (0548) ;  SIDE EFFECTS:
                                        (0549) ;    The A and X registers may be modified by this or future implementations
                                        (0550) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0551) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0552) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0553) ;    functions.
                                        (0554) ;
                                        (0555) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0556) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0557) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0558) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0559) 
                                        (0560)  TX8_CWrite:
                                        (0561) _TX8_CWrite:
                                        (0562)    RAM_PROLOGUE RAM_USE_CLASS_2
04EE: 4F       MOV   X,SP               (0563)    mov   X,SP
                                        (0564) 
                                        (0565) .CW_Loop:
                                        (0566)                                              ; Check for zero counter
04EF: 3D FA 00 CMP   [X-6],0x0          (0567)    cmp   [X+CLEN_MSB],0x00
04F2: B0 06    JNZ   0x04F9             (0568)    jnz   .CW_WRITEIT
04F4: 3D FB 00 CMP   [X-5],0x0          (0569)    cmp   [X+CLEN_LSB],0x00
04F7: A0 1D    JZ    0x0515             (0570)    jz    .End_CWrite                         ; Leave if done
                                        (0571) 
                                        (0572) .CW_WRITEIT:                                 ; Save pointers
04F9: 10       PUSH  X                  (0573)    push  X
04FA: 52 FC    MOV   A,[X-4]            (0574)    mov   A,[X+CSTR_MSB]
04FC: 59 FD    MOV   X,[X-3]            (0575)    mov   X,[X+CSTR_LSB]
04FE: 28       ROMX                     (0576)    romx                                     ; Get character from ROM
04FF: 49 3F 10 TST   REG[0x3F],0x10     
0502: AF FC    JZ    0x04FF             
0504: 60 3D    MOV   REG[0x3D],A        (0577)    InLinePutChar A
0506: 20       POP   X                  (0578)    pop   X
                                        (0579) 
0507: 07 FD 01 ADD   [X-3],0x1          (0580)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
050A: 0F FC 00 ADC   [X-4],0x0          (0581)    adc   [X+CSTR_MSB],0
                                        (0582) 
                                        (0583)                                             ; Dec the counter
050D: 17 FB 01 SUB   [X-5],0x1          (0584)    sub   [X+CLEN_LSB],0x01
0510: 1F FA 00 SBB   [X-6],0x0          (0585)    sbb   [X+CLEN_MSB],0x00
                                        (0586) 
0513: 8F DB    JMP   0x04EF             (0587)    jmp   .CW_Loop
                                        (0588) 
                                        (0589) .End_CWrite:
                                        (0590)    RAM_EPILOGUE RAM_USE_CLASS_1
0515: 7F       RET                      (0591)    ret
                                        (0592) .ENDSECTION
                                        (0593) 
                                        (0594) .SECTION
                                        (0595) ;-----------------------------------------------------------------------------
                                        (0596) ;  FUNCTION NAME: TX8_CPutString
                                        (0597) ;
                                        (0598) ;  DESCRIPTION:
                                        (0599) ;     Send String out through UART TX port.
                                        (0600) ;
                                        (0601) ;
                                        (0602) ;  ARGUMENTS:
                                        (0603) ;     Pointer to String
                                        (0604) ;     A has MSB of string address
                                        (0605) ;     X has LSB of string address
                                        (0606) ;
                                        (0607) ;  RETURNS:
                                        (0608) ;     none
                                        (0609) ;
                                        (0610) ;  SIDE EFFECTS:
                                        (0611) ;    The A and X registers may be modified by this or future implementations
                                        (0612) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0613) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0614) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0615) ;    functions.
                                        (0616) ;
                                        (0617)  TX8_CPutString:
                                        (0618) _TX8_CPutString:
                                        (0619)    RAM_PROLOGUE RAM_USE_CLASS_1   
0516: 08       PUSH  A                  (0620)    push  A                                       ; Store ROM pointer
0517: 10       PUSH  X                  (0621)    push  X
0518: 28       ROMX                     (0622)    romx                                          ; Get character from ROM
0519: A0 0B    JZ    0x0525             (0623)    jz    .End_CPutString
051B: 9F 8F    CALL  0x04AC             (0624)    call  TX8_PutChar                        ; Print character
051D: 20       POP   X                  (0625)    pop   X
051E: 18       POP   A                  (0626)    pop   A
051F: 75       INC   X                  (0627)    inc   X                                       ; Inc LSB of pointer
0520: DF F5    JNC   0x0516             (0628)    jnc   TX8_CPutString                          ; Check for carry
0522: 74       INC   A                  (0629)    inc   A                                       ; Inc MSB of pointer
0523: 8F F2    JMP   0x0516             (0630)    jmp   TX8_CPutString
                                        (0631) 
                                        (0632) 
                                        (0633) .End_CPutString:
0525: 38 FE    ADD   SP,0xFE            (0634)    add   SP, -2
                                        (0635)    RAM_EPILOGUE RAM_USE_CLASS_1
0527: 7F       RET                      (0636)    ret
                                        (0637) .ENDSECTION
                                        (0638) 
                                        (0639) .SECTION
                                        (0640) ;-----------------------------------------------------------------------------
                                        (0641) ;  FUNCTION NAME: TX8_PutCRLF
                                        (0642) ;
                                        (0643) ;  DESCRIPTION:
                                        (0644) ;     Send a CR and LF
                                        (0645) ;
                                        (0646) ;  ARGUMENTS:
                                        (0647) ;     none.
                                        (0648) ;
                                        (0649) ;  RETURNS:
                                        (0650) ;     none.
                                        (0651) ;
                                        (0652) ;  SIDE EFFECTS:
                                        (0653) ;    The A and X registers may be modified by this or future implementations
                                        (0654) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0655) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0656) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0657) ;    functions.
                                        (0658) ;
                                        (0659)  TX8_PutCRLF:
                                        (0660) _TX8_PutCRLF:
                                        (0661)    RAM_PROLOGUE RAM_USE_CLASS_1
0528: 50 0D    MOV   A,0xD              (0662)    mov  A,0x0D                        ; Send CR
052A: 9F 80    CALL  0x04AC             (0663)    call TX8_PutChar
052C: 50 0A    MOV   A,0xA              (0664)    mov  A,0x0A                        ; Send LF
052E: 9F 7C    CALL  0x04AC             (0665)    call TX8_PutChar
                                        (0666)    RAM_EPILOGUE RAM_USE_CLASS_1
0530: 7F       RET                      (0667)    ret
(0668) .ENDSECTION
(0669) 
(0670) ; End of File TX8.asm
FILE: lib\scblock_inbuff.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   SCBLOCK_inbuff.asm
                                        (0004) ;;  Version: 2.4, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: SCBLOCK User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) 
                                        (0015) ;; -----------------------------------------------------------------
                                        (0016) ;;                         Register Definitions
                                        (0017) ;; -----------------------------------------------------------------
                                        (0018) ;; BIT FIELD            Mask
                                        (0019) ;; -----------------    -----
                                        (0020) ;; CR0.FCap              80
                                        (0021) ;; CR0.ClockPhase        40
                                        (0022) ;; CR0.ASign             20
                                        (0023) ;; CR0.ACap              1F
                                        (0024) ;;
                                        (0025) ;; CR1.AMux              C0   SCB
                                        (0026) ;; CR1.ACMux             C0   SCA
                                        (0027) ;; CR1.BCap              1F
                                        (0028) ;;
                                        (0029) ;; CR2.AnalogBus         80
                                        (0030) ;; CR2.CmpBus            40
                                        (0031) ;; CR2.AutoZero          20
                                        (0032) ;; CR2.CCap              1F
                                        (0033) ;;
                                        (0034) ;; CR3.RefSelect         C0
                                        (0035) ;; CR3.FSW1              20
                                        (0036) ;; CR3.FSW0              10
                                        (0037) ;; CR3.BSW               08   SCB
                                        (0038) ;; CR3.BMux              04   SCB
                                        (0039) ;; CR3.BMux              0C   SCA
                                        (0040) ;; CR3.Power             03
                                        (0041) ;;
                                        (0042) 
                                        (0043) include "SCBLOCK_inbuff.inc"
                                        (0044) include "m8c.inc"
                                        (0045) include "memory.inc"
                                        (0046) 
                                        (0047) ;-----------------------------------------------
                                        (0048) ;  Global Symbols
                                        (0049) ;-----------------------------------------------
                                        (0050) export  SCBLOCK_inbuff_Start
                                        (0051) export _SCBLOCK_inbuff_Start
                                        (0052) export  SCBLOCK_inbuff_SetPower
                                        (0053) export _SCBLOCK_inbuff_SetPower
                                        (0054) export  SCBLOCK_inbuff_Stop
                                        (0055) export _SCBLOCK_inbuff_Stop
                                        (0056) 
                                        (0057) AREA UserModules (ROM, REL)
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: SCBLOCK_inbuff_Start
                                        (0062) ;  FUNCTION NAME: SCBLOCK_inbuff_SetPower
                                        (0063) ;
                                        (0064) ;  DESCRIPTION:
                                        (0065) ;    Applies power setting to the module's analog PSoc block.
                                        (0066) ;
                                        (0067) ;-----------------------------------------------------------------------------
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:
                                        (0070) ;    A  contains the power setting 0-3
                                        (0071) ;
                                        (0072) ;  RETURNS:  NA
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  SCBLOCK_inbuff_Start:
                                        (0082) _SCBLOCK_inbuff_Start:
                                        (0083)  SCBLOCK_inbuff_SetPower:
                                        (0084) _SCBLOCK_inbuff_SetPower:
                                        (0085)    RAM_PROLOGUE RAM_USE_CLASS_2
0531: 21 03    AND   A,0x3              (0086)    and  A,03h
0533: 10       PUSH  X                  (0087)    push X
0534: 4F       MOV   X,SP               (0088)    mov  X,SP
                                        (0089) 
0535: 08       PUSH  A                  (0090)    push A
0536: 5D 9F    MOV   A,REG[0x9F]        (0091)    mov  A,reg[SCBLOCK_inbuff_cr3]
0538: 21 FC    AND   A,0xFC             (0092)    and  A,~03h
053A: 2B 00    OR    A,[X+0]            (0093)    or   A,[X]
053C: 60 9F    MOV   REG[0x9F],A        (0094)    mov  reg[SCBLOCK_inbuff_cr3],A
053E: 18       POP   A                  (0095)    pop  A
053F: 20       POP   X                  (0096)    pop  X
0540: 70 3F    AND   F,0x3F             
0542: 71 C0    OR    F,0xC0             (0097)    RAM_EPILOGUE RAM_USE_CLASS_2
0544: 7F       RET                      (0098)    ret
                                        (0099) .ENDSECTION
                                        (0100) 
                                        (0101) .SECTION
                                        (0102) ;-----------------------------------------------------------------------------
                                        (0103) ;  FUNCTION NAME: SCBLOCK_inbuff_Stop
                                        (0104) ;
                                        (0105) ;  DESCRIPTION:
                                        (0106) ;    Removes power from the module's analog PSoC block
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS: None
                                        (0110) ;
                                        (0111) ;  RETURNS:  NA
                                        (0112) ;
                                        (0113) ;  SIDE EFFECTS:
                                        (0114) ;    The A and X registers may be modified by this or future implementations
                                        (0115) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0116) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0117) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0118) ;    functions.
                                        (0119) ;
                                        (0120)  SCBLOCK_inbuff_Stop:
                                        (0121) _SCBLOCK_inbuff_Stop:
                                        (0122)    RAM_PROLOGUE RAM_USE_CLASS_1
0545: 41 9F FC AND   REG[0x9F],0xFC     (0123)    and  reg[SCBLOCK_inbuff_cr3],~03h
                                        (0124)    RAM_EPILOGUE RAM_USE_CLASS_1
0548: 7F       RET                      (0125)    ret
(0126) .ENDSECTION
(0127) 
(0128) ; End of File SCBLOCK_inbuff.asm
FILE: lib\refmux_1.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   RefMux_1.asm
                                        (0004) ;;  Version: 1.3, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: RefMux User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "RefMux_1.inc"
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  RefMux_1_Start
                                        (0030) export _RefMux_1_Start
                                        (0031) 
                                        (0032) export  RefMux_1_SetPower
                                        (0033) export _RefMux_1_SetPower
                                        (0034) 
                                        (0035) export  RefMux_1_Stop
                                        (0036) export _RefMux_1_Stop
                                        (0037) 
                                        (0038) export  RefMux_1_RefSelect
                                        (0039) export _RefMux_1_RefSelect
                                        (0040) 
                                        (0041) ;-----------------------------------------------
                                        (0042) ;  EQUATES
                                        (0043) ;-----------------------------------------------
                                        (0044) TMUX_MASK:        equ 1Ch              ; Mask for Test Mux control
                                        (0045) POWERMASK:        equ 03h
                                        (0046) 
                                        (0047) AREA UserModules (ROM, REL)
                                        (0048) .SECTION
                                        (0049) ;-----------------------------------------------------------------------------
                                        (0050) ;  FUNCTION NAME: RefMux_1_Start
                                        (0051) ;  FUNCTION NAME: RefMux_1_SetPower
                                        (0052) ;
                                        (0053) ;  DESCRIPTION:
                                        (0054) ;   Applies power setting to the module's PSoC block
                                        (0055) ;
                                        (0056) ;-----------------------------------------------------------------------------
                                        (0057) ;
                                        (0058) ;  ARGUMENTS:
                                        (0059) ;  A  Contains the power setting; 0 = Off
                                        (0060) ;                                 1 = Low
                                        (0061) ;                                 2 = Med
                                        (0062) ;                                 3 = High
                                        (0063) ;
                                        (0064) ;  RETURNS:  NA
                                        (0065) ;
                                        (0066) ;  SIDE EFFECTS:
                                        (0067) ;    The A and X registers may be modified by this or future implementations
                                        (0068) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0069) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0070) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0071) ;    functions.
                                        (0072) ;
                                        (0073)  RefMux_1_Start:
                                        (0074) _RefMux_1_Start:
                                        (0075)  RefMux_1_SetPower:
                                        (0076) _RefMux_1_SetPower:
                                        (0077)     RAM_PROLOGUE RAM_USE_CLASS_2
0549: 21 03    AND   A,0x3              (0078)     and  A, POWERMASK                  ; mask A to protect unchanged bits
054B: 4F       MOV   X,SP               (0079)     mov  X, SP                         ; define temp store location
                                        (0080) 
054C: 08       PUSH  A                  (0081)     push A                             ; put power value in temp store
054D: 5D 7F    MOV   A,REG[0x7F]        (0082)     mov  A, reg[RefMux_1_REFMUX_CR2]   ; read power value
054F: 21 FC    AND   A,0xFC             (0083)     and  A, ~POWERMASK                 ; clear power bits in A
0551: 2B 00    OR    A,[X+0]            (0084)     or   A, [X]                        ; combine power value with balance of reg.
0553: 60 7F    MOV   REG[0x7F],A        (0085)     mov  reg[RefMux_1_REFMUX_CR2], A   ; move complete value back to register
0555: 18       POP   A                  (0086)     pop  A
0556: 70 3F    AND   F,0x3F             
0558: 71 C0    OR    F,0xC0             (0087)     RAM_EPILOGUE RAM_USE_CLASS_2
055A: 7F       RET                      (0088)     ret
                                        (0089) .ENDSECTION
                                        (0090) 
                                        (0091) .SECTION
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) ;  FUNCTION NAME: RefMux_1_Stop
                                        (0094) ;
                                        (0095) ;  DESCRIPTION:
                                        (0096) ;   Turn off power to user module
                                        (0097) ;
                                        (0098) ;-----------------------------------------------------------------------------
                                        (0099) ;
                                        (0100) ;  ARGUMENTS: None
                                        (0101) ;
                                        (0102) ;  RETURNS:  NA
                                        (0103) ;
                                        (0104) ;  SIDE EFFECTS:
                                        (0105) ;    The A and X registers may be modified by this or future implementations
                                        (0106) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0107) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0108) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0109) ;    functions.
                                        (0110) ;
                                        (0111)  RefMux_1_Stop:
                                        (0112) _RefMux_1_Stop:
                                        (0113)     RAM_PROLOGUE RAM_USE_CLASS_1
055B: 41 7F FC AND   REG[0x7F],0xFC     (0114)     and REG[RefMux_1_REFMUX_CR2], ~POWERMASK
                                        (0115)     RAM_EPILOGUE RAM_USE_CLASS_1
055E: 7F       RET                      (0116)     ret
                                        (0117) .ENDSECTION
                                        (0118) 
                                        (0119) .SECTION
                                        (0120) ;-----------------------------------------------------------------------------
                                        (0121) ;  FUNCTION NAME: RefMux_1_InputSelect
                                        (0122) ;
                                        (0123) ;  DESCRIPTION:
                                        (0124) ;   Select one of the input of the TestMux to be connected to the Analog
                                        (0125) ;   Column bus.
                                        (0126) ;
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;
                                        (0129) ;  ARGUMENTS:
                                        (0130) ;   A  contains value to select desired RefMux output.
                                        (0131) ;         Input              Code
                                        (0132) ;         Off                 00h
                                        (0133) ;         PMuxOut             10h
                                        (0134) ;         AGND                14h  (Power must be applied)
                                        (0135) ;         REFLO               18h
                                        (0136) ;         REFHI               1Ch
                                        (0137) ;
                                        (0138) ;  RETURNS:  NA
                                        (0139) ;
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  RefMux_1_RefSelect:
                                        (0148) _RefMux_1_RefSelect:
                                        (0149)     RAM_PROLOGUE RAM_USE_CLASS_2
055F: 21 1C    AND   A,0x1C             (0150)     and  A,TMUX_MASK                   ; Mask off test mux control
0561: 4F       MOV   X,SP               (0151)     mov  X,SP                          ; Get stack location
0562: 08       PUSH  A                  (0152)     push A
0563: 5D 7F    MOV   A,REG[0x7F]        (0153)     mov  A,reg[RefMux_1_REFMUX_CR2]    ; Write register Test Mux register to select reference
0565: 21 E3    AND   A,0xE3             (0154)     and  A, ~TMUX_MASK                 ; Clear Mux control bits
0567: 2B 00    OR    A,[X+0]            (0155)     or   A,[X]                         ; Or in the new setting
0569: 60 7F    MOV   REG[0x7F],A        (0156)     mov  reg[RefMux_1_REFMUX_CR2],A    ; Write register Test Mux register to select reference
056B: 18       POP   A                  (0157)     pop  A                             ; Restore the stack
056C: 70 3F    AND   F,0x3F             
056E: 71 C0    OR    F,0xC0             (0158)     RAM_EPILOGUE RAM_USE_CLASS_2
0570: 7F       RET                      (0159)     ret
(0160) .ENDSECTION
(0161) 
(0162) 
(0163) ; End of File RefMux_1.asm
FILE: lib\pga_pre.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_pre.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2009/10/13 at 23:59:44
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_pre.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_pre_Start
                                        (0060) export _PGA_pre_Start
                                        (0061) export  PGA_pre_SetPower
                                        (0062) export _PGA_pre_SetPower
                                        (0063) 
                                        (0064) export  PGA_pre_SetGain
                                        (0065) export _PGA_pre_SetGain
                                        (0066) 
                                        (0067) export  PGA_pre_Stop
                                        (0068) export _PGA_pre_Stop
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ;  EQUATES
                                        (0072) ;-----------------------------------------------
                                        (0073) POWERMASK:     equ 03h
                                        (0074) GAINREGMASK:   equ f8h
                                        (0075) GAINMASK:      equ fCh
                                        (0076) HIGHGAIN:      equ 04h
                                        (0077) HIGHGAINMASK:  equ 18h
                                        (0078) EXGAIN:        equ 01h
                                        (0079) 
                                        (0080) AREA UserModules (ROM, REL)
                                        (0081) .SECTION
                                        (0082) ;-----------------------------------------------------------------------------
                                        (0083) ;  FUNCTION NAME: PGA_pre_Start
                                        (0084) ;  FUNCTION NAME: PGA_pre_SetPower
                                        (0085) ;
                                        (0086) ;  DESCRIPTION:
                                        (0087) ;    Applies power setting to the module's PSoC block.
                                        (0088) ;-----------------------------------------------------------------------------
                                        (0089) ;
                                        (0090) ;  ARGUMENTS:
                                        (0091) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0092) ;
                                        (0093) ;  RETURNS:  NA
                                        (0094) ;
                                        (0095) ;  SIDE EFFECTS:
                                        (0096) ;    The A and X registers may be modified by this or future implementations
                                        (0097) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0098) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0099) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0100) ;    functions.
                                        (0101) ;
                                        (0102)  PGA_pre_Start:
                                        (0103) _PGA_pre_Start:
                                        (0104)  PGA_pre_SetPower:
                                        (0105) _PGA_pre_SetPower:
                                        (0106) 
                                        (0107)    RAM_PROLOGUE RAM_USE_CLASS_2
0571: 21 03    AND   A,0x3              (0108)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0573: 4F       MOV   X,SP               (0109)    mov  X, SP                                        ; define temp store location
                                        (0110) ;
0574: 08       PUSH  A                  (0111)    push A                                            ; put power value in temp store
0575: 5D 73    MOV   A,REG[0x73]        (0112)    mov  A, reg[PGA_pre_GAIN_CR2]                           ; read power value
0577: 21 FC    AND   A,0xFC             (0113)    and  A, ~POWERMASK                                ; clear power bits in A
0579: 2B 00    OR    A,[X+0]            (0114)    or   A, [X]                                       ; combine power value with balance of reg.
057B: 60 73    MOV   REG[0x73],A        (0115)    mov  reg[PGA_pre_GAIN_CR2], A                      ; move complete value back to register
057D: 18       POP   A                  (0116)    pop  A
057E: 70 3F    AND   F,0x3F             
0580: 71 C0    OR    F,0xC0             (0117)    RAM_EPILOGUE RAM_USE_CLASS_2
0582: 7F       RET                      (0118)    ret
                                        (0119) .ENDSECTION
                                        (0120) 
                                        (0121) .SECTION
                                        (0122) ;-----------------------------------------------------------------------------
                                        (0123) ;  FUNCTION NAME: PGA_pre_SetGain
                                        (0124) ;
                                        (0125) ;  DESCRIPTION:
                                        (0126) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0127) ;    are defined in the .inc file.
                                        (0128) ;
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;
                                        (0131) ;  ARGUMENTS:
                                        (0132) ;    A  Contains gain settings.
                                        (0133) ;
                                        (0134) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0135) ;
                                        (0136) ;  RETURNS:  NA
                                        (0137) ;
                                        (0138) ;  SIDE EFFECTS:
                                        (0139) ;    The A and X registers may be modified by this or future implementations
                                        (0140) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0141) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0142) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0143) ;    functions.
                                        (0144) ;
                                        (0145)  PGA_pre_SetGain:
                                        (0146) _PGA_pre_SetGain:
                                        (0147) 
                                        (0148)    RAM_PROLOGUE RAM_USE_CLASS_2
0583: 21 FC    AND   A,0xFC             (0149)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
0585: 4F       MOV   X,SP               (0150)    mov  X, SP                                             ; define temp store location
                                        (0151) ;
0586: 08       PUSH  A                  (0152)    push A                                                 ; put gain value in temp store
0587: 5D 71    MOV   A,REG[0x71]        (0153)    mov  A, reg[PGA_pre_GAIN_CR0]                           ; read mux settings
0589: 21 07    AND   A,0x7              (0154)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
058B: 48 00 04 TST   [X+0],0x4          (0155)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
058E: B0 0E    JNZ   0x059D             (0156)    jnz  .SETHIGHGAIN
0590: 41 70 FE AND   REG[0x70],0xFE     (0157)    and  reg[PGA_pre_GAIN_CR3],~EXGAIN                      ; Clear High Gain bit.
0593: 2B 00    OR    A,[X+0]            (0158)    or   A, [X]                                            ; combine gain value with balance of reg.
0595: 60 71    MOV   REG[0x71],A        (0159)    mov  reg[PGA_pre_GAIN_CR0], A                           ; move complete value back to register
0597: 18       POP   A                  (0160)    pop  A
0598: 70 3F    AND   F,0x3F             
059A: 71 C0    OR    F,0xC0             (0161)    RAM_EPILOGUE RAM_USE_CLASS_2
059C: 7F       RET                      (0162)    ret
                                        (0163) 
                                        (0164) .SETHIGHGAIN:
059D: 27 00 18 AND   [X+0],0x18         (0165)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
05A0: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
05A2: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[PGA_pre_GAIN_CR0], A                           ; move complete value back to register
05A4: 43 70 01 OR    REG[0x70],0x1      (0168)    or   reg[PGA_pre_GAIN_CR3], EXGAIN                      ; Set High Gain bit.
05A7: 18       POP   A                  (0169)    pop  A
05A8: 70 3F    AND   F,0x3F             
05AA: 71 C0    OR    F,0xC0             (0170)    RAM_EPILOGUE RAM_USE_CLASS_2
05AC: 7F       RET                      (0171)    ret
                                        (0172) .ENDSECTION
                                        (0173) 
                                        (0174) .SECTION
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) ;  FUNCTION NAME: PGA_pre_Stop
                                        (0177) ;
                                        (0178) ;  DESCRIPTION:
                                        (0179) ;    Turns off the power to the amplifier.
                                        (0180) ;
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: None
                                        (0184) ;
                                        (0185) ;  RETURNS:  NA
                                        (0186) ;
                                        (0187) ;  SIDE EFFECTS:
                                        (0188) ;    The A and X registers may be modified by this or future implementations
                                        (0189) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0190) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0191) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0192) ;    functions.
                                        (0193) ;
                                        (0194)  PGA_pre_Stop:
                                        (0195) _PGA_pre_Stop:
                                        (0196) 
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
05AD: 41 73 FC AND   REG[0x73],0xFC     (0198)    and REG[PGA_pre_GAIN_CR2], ~POWERMASK
                                        (0199)    RAM_EPILOGUE RAM_USE_CLASS_1
05B0: 7F       RET                      (0200)    ret
(0201) .ENDSECTION
(0202) ; End of File PGA_pre.asm
FILE: lib\pga_out.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_out.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2009/10/13 at 23:59:44
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_out.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_out_Start
                                        (0060) export _PGA_out_Start
                                        (0061) export  PGA_out_SetPower
                                        (0062) export _PGA_out_SetPower
                                        (0063) 
                                        (0064) export  PGA_out_SetGain
                                        (0065) export _PGA_out_SetGain
                                        (0066) 
                                        (0067) export  PGA_out_Stop
                                        (0068) export _PGA_out_Stop
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ;  EQUATES
                                        (0072) ;-----------------------------------------------
                                        (0073) POWERMASK:     equ 03h
                                        (0074) GAINREGMASK:   equ f8h
                                        (0075) GAINMASK:      equ fCh
                                        (0076) HIGHGAIN:      equ 04h
                                        (0077) HIGHGAINMASK:  equ 18h
                                        (0078) EXGAIN:        equ 01h
                                        (0079) 
                                        (0080) AREA UserModules (ROM, REL)
                                        (0081) .SECTION
                                        (0082) ;-----------------------------------------------------------------------------
                                        (0083) ;  FUNCTION NAME: PGA_out_Start
                                        (0084) ;  FUNCTION NAME: PGA_out_SetPower
                                        (0085) ;
                                        (0086) ;  DESCRIPTION:
                                        (0087) ;    Applies power setting to the module's PSoC block.
                                        (0088) ;-----------------------------------------------------------------------------
                                        (0089) ;
                                        (0090) ;  ARGUMENTS:
                                        (0091) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0092) ;
                                        (0093) ;  RETURNS:  NA
                                        (0094) ;
                                        (0095) ;  SIDE EFFECTS:
                                        (0096) ;    The A and X registers may be modified by this or future implementations
                                        (0097) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0098) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0099) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0100) ;    functions.
                                        (0101) ;
                                        (0102)  PGA_out_Start:
                                        (0103) _PGA_out_Start:
                                        (0104)  PGA_out_SetPower:
                                        (0105) _PGA_out_SetPower:
                                        (0106) 
                                        (0107)    RAM_PROLOGUE RAM_USE_CLASS_2
05B1: 21 03    AND   A,0x3              (0108)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
05B3: 4F       MOV   X,SP               (0109)    mov  X, SP                                        ; define temp store location
                                        (0110) ;
05B4: 08       PUSH  A                  (0111)    push A                                            ; put power value in temp store
05B5: 5D 7B    MOV   A,REG[0x7B]        (0112)    mov  A, reg[PGA_out_GAIN_CR2]                           ; read power value
05B7: 21 FC    AND   A,0xFC             (0113)    and  A, ~POWERMASK                                ; clear power bits in A
05B9: 2B 00    OR    A,[X+0]            (0114)    or   A, [X]                                       ; combine power value with balance of reg.
05BB: 60 7B    MOV   REG[0x7B],A        (0115)    mov  reg[PGA_out_GAIN_CR2], A                      ; move complete value back to register
05BD: 18       POP   A                  (0116)    pop  A
05BE: 70 3F    AND   F,0x3F             
05C0: 71 C0    OR    F,0xC0             (0117)    RAM_EPILOGUE RAM_USE_CLASS_2
05C2: 7F       RET                      (0118)    ret
                                        (0119) .ENDSECTION
                                        (0120) 
                                        (0121) .SECTION
                                        (0122) ;-----------------------------------------------------------------------------
                                        (0123) ;  FUNCTION NAME: PGA_out_SetGain
                                        (0124) ;
                                        (0125) ;  DESCRIPTION:
                                        (0126) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0127) ;    are defined in the .inc file.
                                        (0128) ;
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;
                                        (0131) ;  ARGUMENTS:
                                        (0132) ;    A  Contains gain settings.
                                        (0133) ;
                                        (0134) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0135) ;
                                        (0136) ;  RETURNS:  NA
                                        (0137) ;
                                        (0138) ;  SIDE EFFECTS:
                                        (0139) ;    The A and X registers may be modified by this or future implementations
                                        (0140) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0141) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0142) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0143) ;    functions.
                                        (0144) ;
                                        (0145)  PGA_out_SetGain:
                                        (0146) _PGA_out_SetGain:
                                        (0147) 
                                        (0148)    RAM_PROLOGUE RAM_USE_CLASS_2
05C3: 21 FC    AND   A,0xFC             (0149)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
05C5: 4F       MOV   X,SP               (0150)    mov  X, SP                                             ; define temp store location
                                        (0151) ;
05C6: 08       PUSH  A                  (0152)    push A                                                 ; put gain value in temp store
05C7: 5D 79    MOV   A,REG[0x79]        (0153)    mov  A, reg[PGA_out_GAIN_CR0]                           ; read mux settings
05C9: 21 07    AND   A,0x7              (0154)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
05CB: 48 00 04 TST   [X+0],0x4          (0155)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
05CE: B0 0E    JNZ   0x05DD             (0156)    jnz  .SETHIGHGAIN
05D0: 41 78 FE AND   REG[0x78],0xFE     (0157)    and  reg[PGA_out_GAIN_CR3],~EXGAIN                      ; Clear High Gain bit.
05D3: 2B 00    OR    A,[X+0]            (0158)    or   A, [X]                                            ; combine gain value with balance of reg.
05D5: 60 79    MOV   REG[0x79],A        (0159)    mov  reg[PGA_out_GAIN_CR0], A                           ; move complete value back to register
05D7: 18       POP   A                  (0160)    pop  A
05D8: 70 3F    AND   F,0x3F             
05DA: 71 C0    OR    F,0xC0             (0161)    RAM_EPILOGUE RAM_USE_CLASS_2
05DC: 7F       RET                      (0162)    ret
                                        (0163) 
                                        (0164) .SETHIGHGAIN:
05DD: 27 00 18 AND   [X+0],0x18         (0165)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
05E0: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
05E2: 60 79    MOV   REG[0x79],A        (0167)    mov  reg[PGA_out_GAIN_CR0], A                           ; move complete value back to register
05E4: 43 78 01 OR    REG[0x78],0x1      (0168)    or   reg[PGA_out_GAIN_CR3], EXGAIN                      ; Set High Gain bit.
05E7: 18       POP   A                  (0169)    pop  A
05E8: 70 3F    AND   F,0x3F             
05EA: 71 C0    OR    F,0xC0             (0170)    RAM_EPILOGUE RAM_USE_CLASS_2
05EC: 7F       RET                      (0171)    ret
                                        (0172) .ENDSECTION
                                        (0173) 
                                        (0174) .SECTION
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) ;  FUNCTION NAME: PGA_out_Stop
                                        (0177) ;
                                        (0178) ;  DESCRIPTION:
                                        (0179) ;    Turns off the power to the amplifier.
                                        (0180) ;
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: None
                                        (0184) ;
                                        (0185) ;  RETURNS:  NA
                                        (0186) ;
                                        (0187) ;  SIDE EFFECTS:
                                        (0188) ;    The A and X registers may be modified by this or future implementations
                                        (0189) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0190) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0191) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0192) ;    functions.
                                        (0193) ;
                                        (0194)  PGA_out_Stop:
                                        (0195) _PGA_out_Stop:
                                        (0196) 
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
05ED: 41 7B FC AND   REG[0x7B],0xFC     (0198)    and REG[PGA_out_GAIN_CR2], ~POWERMASK
                                        (0199)    RAM_EPILOGUE RAM_USE_CLASS_1
05F0: 7F       RET                      (0200)    ret
(0201) .ENDSECTION
(0202) ; End of File PGA_out.asm
FILE: lib\led_3.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_3.asm
                                        (0004) ;;  Version: 1.2, Updated on 2009/10/9 at 10:6:29
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_3.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_3_Start
                                        (0027) export  LED_3_Start
                                        (0028) 
                                        (0029) export _LED_3_Stop
                                        (0030) export  LED_3_Stop
                                        (0031) 
                                        (0032) export _LED_3_On
                                        (0033) export  LED_3_On
                                        (0034) 
                                        (0035) export _LED_3_Off
                                        (0036) export  LED_3_Off
                                        (0037) 
                                        (0038) export _LED_3_Switch
                                        (0039) export  LED_3_Switch
                                        (0040) 
                                        (0041) export _LED_3_Invert
                                        (0042) export  LED_3_Invert
                                        (0043) 
                                        (0044) export _LED_3_GetState
                                        (0045) export  LED_3_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_3_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_3_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_3_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_3_On:
                                        (0079)  LED_3_On:
05F1: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
05F3: 80 03    JMP   0x05F7             (0081)    jmp  LED_3_Switch 
                                        (0082) 
                                        (0083) _LED_3_Start:
                                        (0084)  LED_3_Start:
                                        (0085) _LED_3_Stop:
                                        (0086)  LED_3_Stop:
                                        (0087) _LED_3_Off:
                                        (0088)  LED_3_Off:
05F5: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _LED_3_Switch:
                                        (0092)  LED_3_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
05F7: 62 D0 00 MOV   REG[0xD0],0x0      (0095)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0096) 
05FA: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
05FC: A0 06    JZ    0x0603             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
05FE: 2E 00 20 OR    [0x0],0x20         (0102)    or   [Port_2_Data_SHADE],LED_3_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_2_Data_SHADE],~LED_3_PinMask
                                        (0105) ENDIF
0601: 80 04    JMP   0x0606             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
0603: 26 00 DF AND   [0x0],0xDF         (0110)    and  [Port_2_Data_SHADE],~LED_3_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_2_Data_SHADE],LED_3_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0606: 51 00    MOV   A,[0x0]            (0116)    mov  A,[Port_2_Data_SHADE]
0608: 60 08    MOV   REG[0x8],A         (0117)    mov  reg[LED_3_PortDR],A
                                        (0118) 
060A: 70 3F    AND   F,0x3F             
060C: 71 C0    OR    F,0xC0             (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
060E: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_3_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_3_Invert:
                                        (0144)  LED_3_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
060F: 62 D0 00 MOV   REG[0xD0],0x0      (0147)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0148) 
0612: 36 00 20 XOR   [0x0],0x20         (0149)    xor  [Port_2_Data_SHADE],LED_3_PinMask
0615: 51 00    MOV   A,[0x0]            (0150)    mov  A,[Port_2_Data_SHADE]
0617: 60 08    MOV   REG[0x8],A         (0151)    mov  reg[LED_3_PortDR],A
                                        (0152) 
0619: 70 3F    AND   F,0x3F             
061B: 71 C0    OR    F,0xC0             (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
061D: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_3_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_3_GetState:
                                        (0177)  LED_3_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
061E: 62 D0 00 MOV   REG[0xD0],0x0      (0180)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0181) 
0621: 51 00    MOV   A,[0x0]            (0182)    mov   A,[Port_2_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
0623: 21 20    AND   A,0x20             (0188)    and   A,LED_3_PinMask               ; Mask off the trash
0625: A0 03    JZ    0x0629             (0189)    jz    .End_LED_GS                   ; If zero, we're done
0627: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
0629: 70 3F    AND   F,0x3F             
062B: 71 C0    OR    F,0xC0             (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
062D: 7F       RET                      (0195)    ret
(0196) .ENDSECTION
FILE: lib\led_2.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_2.asm
                                        (0004) ;;  Version: 1.2, Updated on 2009/10/9 at 10:6:29
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_2.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_2_Start
                                        (0027) export  LED_2_Start
                                        (0028) 
                                        (0029) export _LED_2_Stop
                                        (0030) export  LED_2_Stop
                                        (0031) 
                                        (0032) export _LED_2_On
                                        (0033) export  LED_2_On
                                        (0034) 
                                        (0035) export _LED_2_Off
                                        (0036) export  LED_2_Off
                                        (0037) 
                                        (0038) export _LED_2_Switch
                                        (0039) export  LED_2_Switch
                                        (0040) 
                                        (0041) export _LED_2_Invert
                                        (0042) export  LED_2_Invert
                                        (0043) 
                                        (0044) export _LED_2_GetState
                                        (0045) export  LED_2_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_2_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_2_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_2_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_2_On:
                                        (0079)  LED_2_On:
062E: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
0630: 80 03    JMP   0x0634             (0081)    jmp  LED_2_Switch 
                                        (0082) 
                                        (0083) _LED_2_Start:
                                        (0084)  LED_2_Start:
                                        (0085) _LED_2_Stop:
                                        (0086)  LED_2_Stop:
                                        (0087) _LED_2_Off:
                                        (0088)  LED_2_Off:
0632: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _LED_2_Switch:
                                        (0092)  LED_2_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
0634: 62 D0 00 MOV   REG[0xD0],0x0      (0095)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0096) 
0637: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
0639: A0 06    JZ    0x0640             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
063B: 2E 00 40 OR    [0x0],0x40         (0102)    or   [Port_2_Data_SHADE],LED_2_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_2_Data_SHADE],~LED_2_PinMask
                                        (0105) ENDIF
063E: 80 04    JMP   0x0643             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
0640: 26 00 BF AND   [0x0],0xBF         (0110)    and  [Port_2_Data_SHADE],~LED_2_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_2_Data_SHADE],LED_2_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0643: 51 00    MOV   A,[0x0]            (0116)    mov  A,[Port_2_Data_SHADE]
0645: 60 08    MOV   REG[0x8],A         (0117)    mov  reg[LED_2_PortDR],A
                                        (0118) 
0647: 70 3F    AND   F,0x3F             
0649: 71 C0    OR    F,0xC0             (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
064B: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_2_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_2_Invert:
                                        (0144)  LED_2_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
064C: 62 D0 00 MOV   REG[0xD0],0x0      (0147)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0148) 
064F: 36 00 40 XOR   [0x0],0x40         (0149)    xor  [Port_2_Data_SHADE],LED_2_PinMask
0652: 51 00    MOV   A,[0x0]            (0150)    mov  A,[Port_2_Data_SHADE]
0654: 60 08    MOV   REG[0x8],A         (0151)    mov  reg[LED_2_PortDR],A
                                        (0152) 
0656: 70 3F    AND   F,0x3F             
0658: 71 C0    OR    F,0xC0             (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
065A: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_2_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_2_GetState:
                                        (0177)  LED_2_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
065B: 62 D0 00 MOV   REG[0xD0],0x0      (0180)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0181) 
065E: 51 00    MOV   A,[0x0]            (0182)    mov   A,[Port_2_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
0660: 21 40    AND   A,0x40             (0188)    and   A,LED_2_PinMask               ; Mask off the trash
0662: A0 03    JZ    0x0666             (0189)    jz    .End_LED_GS                   ; If zero, we're done
0664: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
0666: 70 3F    AND   F,0x3F             
0668: 71 C0    OR    F,0xC0             (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
066A: 7F       RET                      (0195)    ret
(0196) .ENDSECTION
FILE: lib\led_1.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_1.asm
                                        (0004) ;;  Version: 1.2, Updated on 2009/10/9 at 10:6:29
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_1_Start
                                        (0027) export  LED_1_Start
                                        (0028) 
                                        (0029) export _LED_1_Stop
                                        (0030) export  LED_1_Stop
                                        (0031) 
                                        (0032) export _LED_1_On
                                        (0033) export  LED_1_On
                                        (0034) 
                                        (0035) export _LED_1_Off
                                        (0036) export  LED_1_Off
                                        (0037) 
                                        (0038) export _LED_1_Switch
                                        (0039) export  LED_1_Switch
                                        (0040) 
                                        (0041) export _LED_1_Invert
                                        (0042) export  LED_1_Invert
                                        (0043) 
                                        (0044) export _LED_1_GetState
                                        (0045) export  LED_1_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_1_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_1_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_1_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_1_On:
                                        (0079)  LED_1_On:
066B: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
066D: 80 03    JMP   0x0671             (0081)    jmp  LED_1_Switch 
                                        (0082) 
                                        (0083) _LED_1_Start:
                                        (0084)  LED_1_Start:
                                        (0085) _LED_1_Stop:
                                        (0086)  LED_1_Stop:
                                        (0087) _LED_1_Off:
                                        (0088)  LED_1_Off:
066F: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _LED_1_Switch:
                                        (0092)  LED_1_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
0671: 62 D0 00 MOV   REG[0xD0],0x0      (0095)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0096) 
0674: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
0676: A0 06    JZ    0x067D             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
0678: 2E 00 80 OR    [0x0],0x80         (0102)    or   [Port_2_Data_SHADE],LED_1_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_2_Data_SHADE],~LED_1_PinMask
                                        (0105) ENDIF
067B: 80 04    JMP   0x0680             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
067D: 26 00 7F AND   [0x0],0x7F         (0110)    and  [Port_2_Data_SHADE],~LED_1_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_2_Data_SHADE],LED_1_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0680: 51 00    MOV   A,[0x0]            (0116)    mov  A,[Port_2_Data_SHADE]
0682: 60 08    MOV   REG[0x8],A         (0117)    mov  reg[LED_1_PortDR],A
                                        (0118) 
0684: 70 3F    AND   F,0x3F             
0686: 71 C0    OR    F,0xC0             (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
0688: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_1_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_1_Invert:
                                        (0144)  LED_1_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
0689: 62 D0 00 MOV   REG[0xD0],0x0      (0147)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0148) 
068C: 36 00 80 XOR   [0x0],0x80         (0149)    xor  [Port_2_Data_SHADE],LED_1_PinMask
068F: 51 00    MOV   A,[0x0]            (0150)    mov  A,[Port_2_Data_SHADE]
0691: 60 08    MOV   REG[0x8],A         (0151)    mov  reg[LED_1_PortDR],A
                                        (0152) 
0693: 70 3F    AND   F,0x3F             
0695: 71 C0    OR    F,0xC0             (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
0697: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_1_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_1_GetState:
                                        (0177)  LED_1_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
0698: 62 D0 00 MOV   REG[0xD0],0x0      (0180)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0181) 
069B: 51 00    MOV   A,[0x0]            (0182)    mov   A,[Port_2_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
069D: 21 80    AND   A,0x80             (0188)    and   A,LED_1_PinMask               ; Mask off the trash
069F: A0 03    JZ    0x06A3             (0189)    jz    .End_LED_GS                   ; If zero, we're done
06A1: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
06A3: 70 3F    AND   F,0x3F             
06A5: 71 C0    OR    F,0xC0             (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
06A7: 7F       RET                      (0195)    ret
(0196) .ENDSECTION
FILE: lib\hb_tmrint.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: HB_TmrINT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "HB_Tmr.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _HB_Tmr_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _HB_Tmr_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _HB_Tmr_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
06A8: 7D 18 61 LJMP  _HB_Tmr_ISR_C      (0071) 	ljmp _HB_Tmr_ISR_C  ; jump to the ISR written in C in mainc.c
                                        (0072) 	
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ; Insert your custom code above this banner
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0077) 
06AB: 7E       RETI                     (0078)    reti
(0079) 
(0080) 
(0081) ; end of file HB_TmrINT.asm
FILE: lib\hb_tmr.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: HB_Tmr.asm
                                        (0004) ;;   Version: 2.6, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "HB_Tmr.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  HB_Tmr_EnableInt
                                        (0030) export _HB_Tmr_EnableInt
                                        (0031) export  HB_Tmr_DisableInt
                                        (0032) export _HB_Tmr_DisableInt
                                        (0033) export  HB_Tmr_Start
                                        (0034) export _HB_Tmr_Start
                                        (0035) export  HB_Tmr_Stop
                                        (0036) export _HB_Tmr_Stop
                                        (0037) export  HB_Tmr_WritePeriod
                                        (0038) export _HB_Tmr_WritePeriod
                                        (0039) export  HB_Tmr_WriteCompareValue
                                        (0040) export _HB_Tmr_WriteCompareValue
                                        (0041) export  HB_Tmr_wReadCompareValue
                                        (0042) export _HB_Tmr_wReadCompareValue
                                        (0043) export  HB_Tmr_wReadTimer
                                        (0044) export _HB_Tmr_wReadTimer
                                        (0045) export  HB_Tmr_wReadTimerSaveCV
                                        (0046) export _HB_Tmr_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wHB_Tmr_ReadCompareValue  ; deprecated
                                        (0051) export _wHB_Tmr_ReadCompareValue  ; deprecated
                                        (0052) export  wHB_Tmr_ReadTimer         ; deprecated
                                        (0053) export _wHB_Tmr_ReadTimer         ; deprecated
                                        (0054) export  wHB_Tmr_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wHB_Tmr_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wHB_Tmr_ReadCounter       ; obsolete
                                        (0058) export _wHB_Tmr_ReadCounter       ; obsolete
                                        (0059) export  wHB_Tmr_CaptureCounter    ; obsolete
                                        (0060) export _wHB_Tmr_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA explorersound_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: HB_Tmr_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  HB_Tmr_EnableInt:
                                        (0098) _HB_Tmr_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
06AC: 43 DF 02 OR    REG[0xDF],0x2      (0100)    HB_Tmr_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
06AF: 7F       RET                      (0102)    ret
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: HB_Tmr_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  HB_Tmr_DisableInt:
                                        (0126) _HB_Tmr_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
06B0: 41 DF FD AND   REG[0xDF],0xFD     (0128)    HB_Tmr_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
06B3: 7F       RET                      (0130)    ret
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: HB_Tmr_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  HB_Tmr_Start:
                                        (0154) _HB_Tmr_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
06B4: 43 43 01 OR    REG[0x43],0x1      (0156)    HB_Tmr_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
06B7: 7F       RET                      (0158)    ret
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: HB_Tmr_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  HB_Tmr_Stop:
                                        (0182) _HB_Tmr_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
06B8: 41 43 FE AND   REG[0x43],0xFE     (0184)    HB_Tmr_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
06BB: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: HB_Tmr_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  HB_Tmr_WritePeriod:
                                        (0211) _HB_Tmr_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
06BC: 60 41    MOV   REG[0x41],A        (0213)    mov   reg[HB_Tmr_PERIOD_LSB_REG], A
06BE: 5B       MOV   A,X                (0214)    mov   A, X
06BF: 60 45    MOV   REG[0x45],A        (0215)    mov   reg[HB_Tmr_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
06C1: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: HB_Tmr_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call HB_Tmr_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  HB_Tmr_WriteCompareValue:
                                        (0243) _HB_Tmr_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
06C2: 60 42    MOV   REG[0x42],A        (0245)    mov   reg[HB_Tmr_COMPARE_LSB_REG], A
06C4: 5B       MOV   A,X                (0246)    mov   A, X
06C5: 60 46    MOV   REG[0x46],A        (0247)    mov   reg[HB_Tmr_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
06C7: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: HB_Tmr_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  HB_Tmr_wReadCompareValue:
                                        (0272) _HB_Tmr_wReadCompareValue:
                                        (0273)  wHB_Tmr_ReadCompareValue:                       ; this name deprecated
                                        (0274) _wHB_Tmr_ReadCompareValue:                       ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
06C8: 5D 46    MOV   A,REG[0x46]        (0276)    mov   A, reg[HB_Tmr_COMPARE_MSB_REG]
06CA: 5C       MOV   X,A                (0277)    mov   X, A
06CB: 5D 42    MOV   A,REG[0x42]        (0278)    mov   A, reg[HB_Tmr_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
06CD: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: HB_Tmr_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  HB_Tmr_wReadTimerSaveCV:
                                        (0321) _HB_Tmr_wReadTimerSaveCV:
                                        (0322)  wHB_Tmr_ReadTimerSaveCV:                        ; this name deprecated
                                        (0323) _wHB_Tmr_ReadTimerSaveCV:                        ; this name deprecated
                                        (0324)  wHB_Tmr_ReadCounter:                            ; this name deprecated
                                        (0325) _wHB_Tmr_ReadCounter:                            ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
06CE: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
06CF: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
06D1: 5D 43    MOV   A,REG[0x43]        (0334)    mov   A, reg[HB_Tmr_CONTROL_LSB_REG]          ; save the Control register
06D3: 08       PUSH  A                  (0335)    push  A
06D4: 5D 42    MOV   A,REG[0x42]        (0336)    mov   A, reg[HB_Tmr_COMPARE_LSB_REG]          ; save the Compare register
06D6: 08       PUSH  A                  (0337)    push  A
06D7: 5D 46    MOV   A,REG[0x46]        (0338)    mov   A, reg[HB_Tmr_COMPARE_MSB_REG]
06D9: 08       PUSH  A                  (0339)    push  A
06DA: 5D 40    MOV   A,REG[0x40]        (0340)    mov   A, reg[HB_Tmr_COUNTER_LSB_REG]          ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
06DC: 5D 46    MOV   A,REG[0x46]        (0342)    mov   A, reg[HB_Tmr_COMPARE_MSB_REG]          ; Now grab DR2 (DR0) and save
06DE: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
06E0: 5D 42    MOV   A,REG[0x42]        (0344)    mov   A, reg[HB_Tmr_COMPARE_LSB_REG]
06E2: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
06E4: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
06E6: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
06E9: A0 03    JZ    0x06ED             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
06EB: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
06ED: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
06EF: 70 FE    AND   F,0xFE             (0352)    M8C_DisableGInt                               ; Disable interrupts globally
06F1: 41 43 FE AND   REG[0x43],0xFE     (0353)    HB_Tmr_Stop_M                                 ; Disable (stop) the timer
06F4: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
06F5: 60 46    MOV   REG[0x46],A        (0355)    mov   reg[HB_Tmr_COMPARE_MSB_REG], A
06F7: 18       POP   A                  (0356)    pop   A
06F8: 60 42    MOV   REG[0x42],A        (0357)    mov   reg[HB_Tmr_COMPARE_LSB_REG], A
06FA: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
06FB: 60 43    MOV   REG[0x43],A        (0359)    mov   reg[HB_Tmr_CONTROL_LSB_REG], A
06FD: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
06FE: 20       POP   X                  (0361)    pop   X
06FF: 70 3F    AND   F,0x3F             
0701: 71 C0    OR    F,0xC0             (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
0703: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: HB_Tmr_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  HB_Tmr_wReadTimer:
                                        (0397) _HB_Tmr_wReadTimer:
                                        (0398)  wHB_Tmr_ReadTimer:                              ; this name deprecated
                                        (0399) _wHB_Tmr_ReadTimer:                              ; this name deprecated
                                        (0400)  wHB_Tmr_CaptureCounter:                         ; this name deprecated
                                        (0401) _wHB_Tmr_CaptureCounter:                         ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
0704: 5D 40    MOV   A,REG[0x40]        (0404)    mov   A, reg[HB_Tmr_COUNTER_LSB_REG]          ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
0706: 5D 46    MOV   A,REG[0x46]        (0407)    mov   A, reg[HB_Tmr_COMPARE_MSB_REG]          ; Return DR2 (actually DR0)
0708: 5C       MOV   X,A                (0408)    mov   X, A
0709: 5D 42    MOV   A,REG[0x42]        (0409)    mov   A, reg[HB_Tmr_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
070B: 7F       RET                      (0411)    ret
(0412) 
(0413) .ENDSECTION
(0414) 
(0415) ; End of File HB_Tmr.asm
FILE: lib\ezi2cs_1int.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: EzI2Cs_1INT.asm
                                        (0004) ;;  Version: 1.2, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2CFXM (Slave) Interrupt Service Routine
                                        (0008) ;;  
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) include "EzI2Cs_1.inc"
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) 
                                        (0019) 
                                        (0020) ;-----------------------------------------------
                                        (0021) ;  Global Symbols
                                        (0022) ;-----------------------------------------------
                                        (0023) 
                                        (0024) export    EzI2Cs_1_varPage      
                                        (0025) export   _EzI2Cs_1_varPage      
                                        (0026) 
                                        (0027) export    EzI2Cs_1_bState  
                                        (0028) export   _EzI2Cs_1_bState
                                        (0029) 
                                        (0030) export    EzI2Cs_1_bRAM_RWoffset
                                        (0031) export   _EzI2Cs_1_bRAM_RWoffset
                                        (0032) 
                                        (0033) export    EzI2Cs_1_bRAM_RWcntr
                                        (0034) export   _EzI2Cs_1_bRAM_RWcntr
                                        (0035) 
                                        (0036) export   _EzI2Cs_1_pRAM_Buf_Addr_LSB
                                        (0037) export    EzI2Cs_1_pRAM_Buf_Addr_LSB
                                        (0038) 
                                        (0039) IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0040) export   _EzI2Cs_1_pRAM_Buf_Addr_MSB
                                        (0041) export    EzI2Cs_1_pRAM_Buf_Addr_MSB
                                        (0042) ENDIF
                                        (0043) 
                                        (0044) export   _EzI2Cs_1_bRAM_Buf_Size                                
                                        (0045) export    EzI2Cs_1_bRAM_Buf_Size    
                                        (0046) 
                                        (0047) export   _EzI2Cs_1_bRAM_Buf_WSize               
                                        (0048) export    EzI2Cs_1_bRAM_Buf_WSize  
                                        (0049) 
                                        (0050) IF (EzI2Cs_1_ROM_ENABLE)
                                        (0051) export    EzI2Cs_1_bROM_RWoffset
                                        (0052) export   _EzI2Cs_1_bROM_RWoffset
                                        (0053) 
                                        (0054) export    EzI2Cs_1_bROM_RWcntr   
                                        (0055) export   _EzI2Cs_1_bROM_RWcntr   
                                        (0056) 
                                        (0057) export   _EzI2Cs_1_pROM_Buf_Addr_LSB
                                        (0058) export    EzI2Cs_1_pROM_Buf_Addr_LSB
                                        (0059) export   _EzI2Cs_1_pROM_Buf_Addr_MSB
                                        (0060) export    EzI2Cs_1_pROM_Buf_Addr_MSB
                                        (0061) 
                                        (0062) export   _EzI2Cs_1_bROM_Buf_Size                           
                                        (0063) export    EzI2Cs_1_bROM_Buf_Size
                                        (0064) 
                                        (0065) ENDIF
                                        (0066) 
                                        (0067) export    EzI2Cs_1_bBusy_Flag  
                                        (0068) export   _EzI2Cs_1_bBusy_Flag
                                        (0069) 
                                        (0070) AREA InterruptRAM (RAM, REL, CON)
                                        (0071) 
                                        (0072) ;-----------------------------------------------
                                        (0073) ; Variable Allocation
                                        (0074) ;-----------------------------------------------
                                        (0075) 
                                        (0076) 
                                        (0077) ;; Exported variables
                                        (0078)  _EzI2Cs_1_varPage:                                ; This points to the variable page
                                        (0079)   EzI2Cs_1_varPage:          
                                        (0080) 
                                        (0081)  _EzI2Cs_1_bState:
                                        (0082)   EzI2Cs_1_bState:                           blk 1
                                        (0083) 
                                        (0084) ;; RAM space variables
                                        (0085)  _EzI2Cs_1_bRAM_RWoffset:                          ; RAM address counter.  This is reset each time
                                        (0086)   EzI2Cs_1_bRAM_RWoffset:                    blk 1 ; a read or write is initiated.
                                        (0087) 
                                        (0088)  _EzI2Cs_1_bRAM_RWcntr:                            ; RAM Read/Write counter.  Keeps track of offset 
                                        (0089)   EzI2Cs_1_bRAM_RWcntr:                      blk 1 ; during a read or write operation.  Reset to
                                        (0090)                                                       ; _bRAM_RWoffset at start of R/W command.
                                        (0091) 
                                        (0092) IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0093)  _EzI2Cs_1_pRAM_Buf_Addr_MSB:                      ; Base address (MSB) to RAM buffer.  
                                        (0094)   EzI2Cs_1_pRAM_Buf_Addr_MSB:                blk 1 ; 
                                        (0095) ENDIF
                                        (0096) 
                                        (0097)  _EzI2Cs_1_pRAM_Buf_Addr_LSB:                      ; Base address (LSB) to RAM buffer.  
                                        (0098)   EzI2Cs_1_pRAM_Buf_Addr_LSB:                blk 1 ; 
                                        (0099) 
                                        (0100)  _EzI2Cs_1_bRAM_Buf_Size:                          ; Size of RAM buffer.   
                                        (0101)   EzI2Cs_1_bRAM_Buf_Size:                    blk 1 ; 
                                        (0102) 
                                        (0103)  _EzI2Cs_1_bRAM_Buf_WSize:                         ; Portion of the RAM buffer size that is writable.
                                        (0104)   EzI2Cs_1_bRAM_Buf_WSize:                   blk 1 ; 
                                        (0105) 
                                        (0106) ;; ROM space variables
                                        (0107) IF (EzI2Cs_1_ROM_ENABLE)
                                        (0108)  _EzI2Cs_1_bROM_RWoffset:                          ; ROM address counter.  This is reset each time
                                        (0109)   EzI2Cs_1_bROM_RWoffset:                    blk 1 ; a read is initiated
                                        (0110) 
                                        (0111)  _EzI2Cs_1_bROM_RWcntr:                            ; ROM read counter. Keeps track of offset 
                                        (0112)   EzI2Cs_1_bROM_RWcntr:                      blk 1 ; during a read operation.  Reset to
                                        (0113)                                                       ; _bRAM_RWoffset at start of command.
                                        (0114) 
                                        (0115)  _EzI2Cs_1_pROM_Buf_Addr_MSB:                      ; ROM address (MSB) counter. (Relative to buffer)  This
                                        (0116)   EzI2Cs_1_pROM_Buf_Addr_MSB:                blk 1 ; counter is reset each time a read is initiated.
                                        (0117) 
                                        (0118)  _EzI2Cs_1_pROM_Buf_Addr_LSB:                      ; ROM address (MSB) counter. (Relative to buffer)  This
                                        (0119)   EzI2Cs_1_pROM_Buf_Addr_LSB:                blk 1 ; counter is reset each time a read is initiated.
                                        (0120) 
                                        (0121)  _EzI2Cs_1_bROM_Buf_Size:                          ; Size of RAM buffer.                            
                                        (0122)   EzI2Cs_1_bROM_Buf_Size:                    blk 1 ; 
                                        (0123) 
                                        (0124) ENDIF
                                        (0125) 
                                        (0126) IF (EzI2Cs_1_AUTO_ADDR_CHECK^1)
                                        (0127) IF (EzI2Cs_1_DYNAMIC_ADDR) 
                                        (0128) 
                                        (0129) export    EzI2Cs_1_bAddr
                                        (0130) export   _EzI2Cs_1_bAddr 
                                        (0131) 
                                        (0132)  _EzI2Cs_1_bAddr:
                                        (0133)   EzI2Cs_1_bAddr:                            blk 1
                                        (0134) ENDIF
                                        (0135) ENDIF
                                        (0136) 
                                        (0137)  _EzI2Cs_1_bBusy_Flag:
                                        (0138)   EzI2Cs_1_bBusy_Flag:                       blk 1
                                        (0139) 
                                        (0140) ;-----------------------------------------------
                                        (0141) ;  EQUATES and TABLES
                                        (0142) ;-----------------------------------------------
                                        (0143) 
                                        (0144) ;; Bit definitions for EzI2Cs_1_bState
                                        (0145) STATE_IDLE:         equ  0x00      ; Wait for Correct Address
                                        (0146) STATE_WR_RAM_ADDR:  equ  0x02      ; Wait for Secondary address on write
                                        (0147) STATE_WR_RAM:       equ  0x04      ; Write RAM Data
                                        (0148) STATE_RD_RAM:       equ  0x06      ; Read RAM Data
                                        (0149) 
                                        (0150) STATE_WR_ROM_ADDR:  equ  0x08      ; Wait for Secondary address on write
                                        (0151) STATE_RD_ROM:       equ  0x0A      ; Read ROM Data
                                        (0152) 
                                        (0153) STATE_WR_ROM:       equ  0x0C      ; Write ROM (Not supported at this time)
                                        (0154) STATE_RESET:        equ  0x0E      ; Reset state machine
                                        (0155) 
                                        (0156) STATE_MASK:         equ  0x0E
                                        (0157) STATE_MASK2:        equ  0x0F      ; State Mask
                                        (0158) 
                                        (0159) ALT_MODE_FLAG:      equ  0x40      ; Reserved
                                        (0160) 
                                        (0161) 
                                        (0162) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0163) ;---------------------------------------------------
                                        (0164) ; Insert your custom declarations below this banner
                                        (0165) ;---------------------------------------------------
                                        (0166) 
                                        (0167) ;------------------------
                                        (0168) ;  Constant Definitions
                                        (0169) ;------------------------
                                        (0170) 
                                        (0171) 
                                        (0172) ;------------------------
                                        (0173) ; Variable Allocation
                                        (0174) ;------------------------
                                        (0175) 
                                        (0176) 
                                        (0177) ;---------------------------------------------------
                                        (0178) ; Insert your custom declarations above this banner
                                        (0179) ;---------------------------------------------------
                                        (0180) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0181) 
                                        (0182) 
                                        (0183) 
                                        (0184) 
                                        (0185) AREA UserModules (ROM, REL, CON)
                                        (0186) 
                                        (0187) export _EzI2Cs_1_ISR
                                        (0188) ;;****************************************************
                                        (0189) ;; I2C_ISR  main entry point from vector 60h
                                        (0190) ;;
                                        (0191) ;;****************************************************
                                        (0192) 
                                        (0193)  EzI2Cs_1_ISR:
                                        (0194) _EzI2Cs_1_ISR:
                                        (0195) 
070C: 08       PUSH  A                  (0196)     push A
070D: 10       PUSH  X                  (0197)     push X
                                        (0198)     
                                        (0199)     ;@PSoC_UserCode_ISR_START@ (Do not change this line.)
                                        (0200)     ;---------------------------------------------------
                                        (0201)     ; Insert your custom code below this banner
                                        (0202)     ;---------------------------------------------------
                                        (0203) 
                                        (0204)     ;---------------------------------------------------
                                        (0205)     ; Insert your custom code above this banner
                                        (0206)     ;---------------------------------------------------
                                        (0207)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0208) 
                                        (0209) ;; The folling conditional code is only valid when using the
                                        (0210) ;; large memory model.
                                        (0211) IF (SYSTEM_LARGE_MEMORY_MODEL)
070E: 70 3F    AND   F,0x3F             
0710: 71 80    OR    F,0x80             (0212)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_2              ; Set Page Mode
0712: 5D D3    MOV   A,REG[0xD3]        
0714: 08       PUSH  A                  (0213)    REG_PRESERVE IDX_PP                             ; Save Index Page Pointer
0715: 5D D0    MOV   A,REG[0xD0]        
0717: 08       PUSH  A                  (0214)    REG_PRESERVE CUR_PP                             ; Save Current Page Pointer
0718: 62 D0 00 MOV   REG[0xD0],0x0      (0215)    RAM_SETPAGE_CUR  >EzI2Cs_1_varPage      ; Set the current page mode Pointer
071B: 51 04    MOV   A,[0x4]            (0216)    mov   A, [EzI2Cs_1_pRAM_Buf_Addr_MSB]   ; Set Index page mode pointer
071D: 60 D3    MOV   REG[0xD3],A        (0217)    RAM_SETPAGE_IDX A
                                        (0218) ENDIF
                                        (0219) 
071F: 2E 01 80 OR    [0x1],0x80         (0220)     or   [EzI2Cs_1_bState],EzI2Cs_1_ANY_ACTIVITY                     ; Set Activity flag
0722: 49 D7 08 TST   REG[0xD7],0x8      (0221)     tst  reg[EzI2Cs_1_SCR_REG],EzI2Cs_1_SCR_ADDRESS                  ; Check for address
0725: A0 09    JZ    0x072F             (0222)     jz   .I2C_CHECK_STOP                                             ; Go to check for Stop condition if no Address
0727: 26 01 F0 AND   [0x1],0xF0         (0223)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bits.                       
072A: 2E 01 00 OR    [0x1],0x0          (0224)     or   [EzI2Cs_1_bState],STATE_IDLE                                ; Address flag set, change to IDLE state
072D: 80 0B    JMP   0x0739             (0225)     jmp  .I2C_DO_STATE_MACHINE
                                        (0226) .I2C_CHECK_STOP:
                                        (0227)     ; Check for Stop condition here.  If a stop condition
                                        (0228)     ; exists, reset state machine to idle.
072F: 49 D7 20 TST   REG[0xD7],0x20     (0229)     tst reg[EzI2Cs_1_SCR_REG],EzI2Cs_1_SCR_STOP_STATUS               ; Check for Stop condition
0732: A0 06    JZ    0x0739             (0230)     jz .I2C_DO_STATE_MACHINE                                            ; No Stop condition - do I2C state mashine
0734: 41 D7 DF AND   REG[0xD7],0xDF     (0231)     and reg[EzI2Cs_1_SCR_REG],~EzI2Cs_1_SCR_STOP_STATUS              ; Clear Stop bit
0737: 80 A8    JMP   0x07E0             (0232)     jmp  I2C_STATE_RESET
                                        (0233) .I2C_DO_STATE_MACHINE:
0739: 51 01    MOV   A,[0x1]            (0234)     mov  A,[EzI2Cs_1_bState]    ; Get State
073B: 21 0E    AND   A,0xE              (0235)     and  A,STATE_MASK                   ; Mask off invalid states
073D: E0 01    JACC  0x073F             (0236)     jacc I2C_STATE_JUMP_TABLE
                                        (0237) 
                                        (0238) I2C_STATE_JUMP_TABLE:
073F: 80 11    JMP   0x0751             (0239)     jmp  I2C_STATE_IDLE                 ; Idle state
0741: 80 67    JMP   0x07A9             (0240)     jmp  I2C_STATE_WR_RAM_ADDR              ; Wait for Address write state
0743: 80 79    JMP   0x07BD             (0241)     jmp  I2C_STATE_WR_RAM               ; 
0745: 80 47    JMP   0x078D             (0242)     jmp  I2C_STATE_RD_RAM
                                        (0243) IF (EzI2Cs_1_ROM_ENABLE)        ; Only valid if ROM enabled
                                        (0244)     jmp  I2C_STATE_WR_ROM_ADDR
                                        (0245)     jmp  I2C_STATE_RD_ROM
                                        (0246)     jmp  I2C_STATE_WR_ROM
                                        (0247) ELSE
0747: 80 98    JMP   0x07E0             (0248)     jmp  I2C_STATE_RESET
0749: 80 96    JMP   0x07E0             (0249)     jmp  I2C_STATE_RESET
074B: 80 94    JMP   0x07E0             (0250)     jmp  I2C_STATE_RESET
                                        (0251) ENDIF
074D: 80 92    JMP   0x07E0             (0252)     jmp  I2C_STATE_RESET
                                        (0253) 
074F: 80 99    JMP   0x07E9             (0254)     jmp  EzI2Cs_1_ISR_END
                                        (0255) 
                                        (0256) 
                                        (0257)     ;            *** I2C Idle state ***
                                        (0258)     ;
                                        (0259)     ;   Sit idle until a start with address is issued.
                                        (0260)     ;   Check to see if there is an address match
                                        (0261)     ;     If address match, ACK the bus and determine next state
                                        (0262)     ;     Else NAK the transfer and return to idle state.
                                        (0263)     ;   Also check stop for condition.IF (EzI2Cs_1_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0264)     ;
                                        (0265) I2C_STATE_IDLE:                 ; Idle state
                                        (0266) 
                                        (0267) IF (EzI2Cs_1_AUTO_ADDR_CHECK^1)   ;; for CY8C28X45 chip: skip address comparison and NACK sending stage-hardware will do this for us  if AutoAddressCompare feature is enabled.
                                        (0268)                                           ;; The code in this pre-compiler directive will be executed for all chips except CY8C28X45.
                                        (0269) IF (EzI2Cs_1_DYNAMIC_ADDR)  ;; DYNAMIC ADDRESS
                                        (0270)     mov  A,reg[EzI2Cs_1_DR_REG]                                      ; Get transmitted address
                                        (0271)     and  A,EzI2Cs_1_ADDR_MASK                                        ; Mask off alt address bit and R/W bit
                                        (0272)     cmp  A,[EzI2Cs_1_bAddr]                                          ; Check for proper Address
                                        (0273)     jz   .CHK_ADDR_MODE 
                                        (0274)     SetEzI2Cs_1_SCR ( EzI2Cs_1_SCR_NAK )                             ; NAK Address 
                                        (0275)     jmp  EzI2Cs_1_ISR_END                                            ; Not valid Address, leave
                                        (0276) 
                                        (0277) ELSE    ;; STATIC ADDRESS
0751: 5D D8    MOV   A,REG[0xD8]        (0278)     mov  A,reg[EzI2Cs_1_DR_REG]                                      ; Get transmitted address
0753: 21 FE    AND   A,0xFE             (0279)     and  A,EzI2Cs_1_ADDR_MASK                                        ; Mask off alt address bit and R/W bit
0755: 39 A0    CMP   A,0xA0             (0280)     cmp  A,EzI2Cs_1_SLAVE_ADDR                                       ; Check for proper Address
0757: A0 06    JZ    0x075E             (0281)     jz   .CHK_ADDR_MODE 
0759: 62 D7 00 MOV   REG[0xD7],0x0      (0282)     SetEzI2Cs_1_SCR ( EzI2Cs_1_SCR_NAK )                             ; NAK Address 
075C: 80 8C    JMP   0x07E9             (0283)     jmp  EzI2Cs_1_ISR_END                                            ; Not valid Address, leave
                                        (0284) ENDIF
                                        (0285) ENDIF
                                        (0286) 
                                        (0287) .CHK_ADDR_MODE:   ; A proper address has been detected, now determine what mode, R/W alt_addr?? 
                                        (0288) IF (EzI2Cs_1_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0289)     tst  reg[EzI2Cs_1_DR_REG],EzI2Cs_1_ALT_ADDR_BIT                  ; Check for Alt address
                                        (0290)     jnz  SERVICE_ROM_ADDR
                                        (0291) ENDIF
                                        (0292) 
                                        (0293) .STANDARD_ADDR:
075E: 49 D8 01 TST   REG[0xD8],0x1      (0294)     tst  reg[EzI2Cs_1_DR_REG],EzI2Cs_1_RD_FLAG                       ; Check for a Read operation
0761: B0 0F    JNZ   0x0771             (0295)     jnz  .PREPARE_FOR_RAM_READ
                                        (0296) 
0763: 55 08 02 MOV   [0x8],0x2          (0297)     mov [EzI2Cs_1_bBusy_Flag], EzI2Cs_1_I2C_BUSY_RAM_WRITE           ; Write transaction in process - set Busy flag to WRITE
                                        (0298) 
                                        (0299)     ; Prepare for RAM Write Address operation
0766: 26 01 F0 AND   [0x1],0xF0         (0300)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bit.                       
0769: 2E 01 02 OR    [0x1],0x2          (0301)     or   [EzI2Cs_1_bState],STATE_WR_RAM_ADDR                         ; Set state machine to do RAM Write
076C: 62 D7 10 MOV   REG[0xD7],0x10     (0302)     SetEzI2Cs_1_SCR ( EzI2Cs_1_SCR_ACK )                             ; ACK Address 
076F: 80 79    JMP   0x07E9             (0303)     jmp  EzI2Cs_1_ISR_END                                     ; Base address to RAM buffer.  
                                        (0304) 
                                        (0305) .PREPARE_FOR_RAM_READ:
0771: 55 08 01 MOV   [0x8],0x1          (0306)     mov [EzI2Cs_1_bBusy_Flag], EzI2Cs_1_I2C_BUSY_RAM_READ            ; Possible read transaction in process - set Busy flag to READ
                                        (0307) 
0774: 26 01 F0 AND   [0x1],0xF0         (0308)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bit.                       
0777: 2E 01 06 OR    [0x1],0x6          (0309)     or   [EzI2Cs_1_bState],STATE_RD_RAM                              ; Set state machine to do RAM Read 
077A: 5F 03 02 MOV   [0x3],[0x2]        (0310)     mov  [EzI2Cs_1_bRAM_RWcntr],[EzI2Cs_1_bRAM_RWoffset]             ; Reset address counter to start of Offset
077D: 51 05    MOV   A,[0x5]            (0311)     mov  A,[EzI2Cs_1_pRAM_Buf_Addr_LSB]                              ; Get base address
077F: 02 03    ADD   A,[0x3]            (0312)     add  A,[EzI2Cs_1_bRAM_RWcntr]                                    ; Set Offset and add to base address      
0781: 5C       MOV   X,A                (0313)     mov  X,A                                                         ; Put offset in X
0782: 52 00    MOV   A,[X+0]            (0314)     mov  A,[X]                                                       ; Get first byte to transmit
0784: 60 D8    MOV   REG[0xD8],A        (0315)     mov  reg[EzI2Cs_1_DR_REG],A                               ; Base address to RAM buffer.  
0786: 76 03    INC   [0x3]              (0316)     inc  [EzI2Cs_1_bRAM_RWcntr]                                      ; Increment RAM buffer counter to next location.
                                        (0317) 
                                        (0318)                                                                      ; ACK command and transmit first byte.
0788: 62 D7 14 MOV   REG[0xD7],0x14     (0319)     SetEzI2Cs_1_SCR (EzI2Cs_1_SCR_ACK|EzI2Cs_1_SCR_TRANSMIT)   
078B: 80 5D    JMP   0x07E9             (0320)     jmp  EzI2Cs_1_ISR_END
                                        (0321) 
                                        (0322)     ;            *** I2C Read RAM state ***
                                        (0323)     ;
                                        (0324) I2C_STATE_RD_RAM:
                                        (0325)     ;@PSoC_UserCode_RAM_RD@ (Do not change this line.)
                                        (0326)     ;---------------------------------------------------
                                        (0327)     ; Insert your custom code below this banner
                                        (0328)     ;---------------------------------------------------
                                        (0329)     
                                        (0330)     ;---------------------------------------------------
                                        (0331)     ; Insert your custom code above this banner
                                        (0332)     ;---------------------------------------------------
                                        (0333)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0334)     
078D: 51 06    MOV   A,[0x6]            (0335)     mov  A,[EzI2Cs_1_bRAM_Buf_Size]
078F: 78       DEC   A                  (0336)     dec  A
0790: 3A 03    CMP   A,[0x3]            (0337)     cmp  A,[EzI2Cs_1_bRAM_RWcntr]                                    ; Check to see if out of range.
0792: C0 0F    JC    0x07A2             (0338)     jc   .I2C_TRANSMIT_DATA  ; WARNING!! Bogas data will be transmitted if out of range.   
                                        (0339) 
0794: 51 05    MOV   A,[0x5]            (0340)     mov  A,[EzI2Cs_1_pRAM_Buf_Addr_LSB]                              ; Get base address
0796: 02 03    ADD   A,[0x3]            (0341)     add  A,[EzI2Cs_1_bRAM_RWcntr]                                    ; Set Offset and add to base address      
0798: 5C       MOV   X,A                (0342)     mov  X,A                                                         ; Put offset in X
0799: 52 00    MOV   A,[X+0]            (0343)     mov  A,[X]                                                       ; Get first byte to transmit
079B: 60 D8    MOV   REG[0xD8],A        (0344)     mov  reg[EzI2Cs_1_DR_REG],A                                      ; Write data to transmit register
079D: 76 03    INC   [0x3]              (0345)     inc  [EzI2Cs_1_bRAM_RWcntr]                                      ; Increment RAM buffer counter to next location.
079F: 2E 01 20 OR    [0x1],0x20         (0346)     or   [EzI2Cs_1_bState],EzI2Cs_1_READ_ACTIVITY                    ; Set Read Activity flag
                                        (0347) 
                                        (0348) 
                                        (0349) .I2C_TRANSMIT_DATA:     
07A2: 60 D8    MOV   REG[0xD8],A        (0350)     mov  reg[EzI2Cs_1_DR_REG],A                                      ; Write data to transmit register
07A4: 62 D7 04 MOV   REG[0xD7],0x4      (0351)     SetEzI2Cs_1_SCR ( EzI2Cs_1_SCR_TRANSMIT )                        ; ACK command and transmit first byte. 
07A7: 80 41    JMP   0x07E9             (0352)     jmp  EzI2Cs_1_ISR_END
                                        (0353) 
                                        (0354) 
                                        (0355)     ;            *** I2C Write RAM Address state ***
                                        (0356)     ;
                                        (0357)     ;  During this state, the RAM address offset is set.
                                        (0358) I2C_STATE_WR_RAM_ADDR:              ; Wait for Address write state
07A9: 5D D8    MOV   A,REG[0xD8]        (0359)     mov  A,reg[EzI2Cs_1_DR_REG]                                      ; Get transmitted Address offset
07AB: 3A 06    CMP   A,[0x6]            (0360)     cmp  A,[EzI2Cs_1_bRAM_Buf_Size]                                  ; Check if out of range.
07AD: D0 2D    JNC   0x07DB             (0361)     jnc  I2C_NAK_DATA                                                ; If out of range NAK address
07AF: A0 2B    JZ    0x07DB             (0362)     jz   I2C_NAK_DATA
                                        (0363) 
                                        (0364)     ; Address in range
07B1: 53 03    MOV   [0x3],A            (0365)     mov  [EzI2Cs_1_bRAM_RWcntr],A                                    ; Reset address counter with new value
07B3: 53 02    MOV   [0x2],A            (0366)     mov  [EzI2Cs_1_bRAM_RWoffset],A                                  ; Set offset with new value.
07B5: 26 01 F0 AND   [0x1],0xF0         (0367)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bit.                       
07B8: 2E 01 04 OR    [0x1],0x4          (0368)     or   [EzI2Cs_1_bState],STATE_WR_RAM                              ; Set state machine to do RAM Write
07BB: 80 1A    JMP   0x07D6             (0369)     jmp  I2C_ACK_DATA                         ; ACK the data
                                        (0370) 
                                        (0371) 
                                        (0372)     ;            *** I2C Write RAM state
                                        (0373) I2C_STATE_WR_RAM:  
                                        (0374)     ;@PSoC_UserCode_RAM_WR@ (Do not change this line.)
                                        (0375)     ;---------------------------------------------------
                                        (0376)     ; Insert your custom code below this banner
                                        (0377)     ;---------------------------------------------------
                                        (0378)     
                                        (0379)     ;---------------------------------------------------
                                        (0380)     ; Insert your custom code above this banner
                                        (0381)     ;---------------------------------------------------
                                        (0382)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0383)     
07BD: 51 07    MOV   A,[0x7]            (0384)     mov  A,[EzI2Cs_1_bRAM_Buf_WSize]                                 ; Get buffer size to make sure we
07BF: A0 1B    JZ    0x07DB             (0385)     jz   I2C_NAK_DATA                                                ; If RAM WSize is zero, do not allow write.
07C1: 78       DEC   A                  (0386)     dec  A                                                           ; are in a valid area.
07C2: 3A 03    CMP   A,[0x3]            (0387)     cmp  A,[EzI2Cs_1_bRAM_RWcntr]                                    ; Check to see if out of range.
07C4: C0 16    JC    0x07DB             (0388)     jc   I2C_NAK_DATA                                                ; If out of range NAK address
                                        (0389) 
07C6: 51 05    MOV   A,[0x5]            (0390)     mov  A,[EzI2Cs_1_pRAM_Buf_Addr_LSB]                              ; Get base address
07C8: 02 03    ADD   A,[0x3]            (0391)     add  A,[EzI2Cs_1_bRAM_RWcntr]                                    ; Set Offset and add to base address      
07CA: 5C       MOV   X,A                (0392)     mov  X,A                                                         ; Put offset in X
                                        (0393) 
07CB: 5D D8    MOV   A,REG[0xD8]        (0394)     mov  A,reg[EzI2Cs_1_DR_REG]                                      ; Read data to be written
07CD: 54 00    MOV   [X+0],A            (0395)     mov  [X],A                                                       ; Store data in Buffer
07CF: 2E 01 10 OR    [0x1],0x10         (0396)     or   [EzI2Cs_1_bState],EzI2Cs_1_WRITE_ACTIVITY                   ; Set Write Activity flag
07D2: 76 03    INC   [0x3]              (0397)     inc  [EzI2Cs_1_bRAM_RWcntr]                                      ; Advance pointer to next location
07D4: 80 01    JMP   0x07D6             (0398)     jmp  I2C_ACK_DATA                         ; ACK the data
                                        (0399) 
                                        (0400)     
                                        (0401)     
                                        (0402) IF (EzI2Cs_1_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0403) 
                                        (0404) SERVICE_ROM_ADDR:  ; At this time only ROM Read is supported.  
                                        (0405)     tst  reg[EzI2Cs_1_DR_REG],EzI2Cs_1_RD_FLAG                       ; Check for a Read operation
                                        (0406)     jnz  PREPARE_FOR_ROM_READ
                                        (0407) 
                                        (0408)     mov [EzI2Cs_1_bBusy_Flag], EzI2Cs_1_I2C_BUSY_ROM_WRITE           ; Write transaction in process - set Busy flag to WRITE
                                        (0409)     
                                        (0410)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bit.                       
                                        (0411)     or   [EzI2Cs_1_bState],STATE_WR_ROM_ADDR                         ; Set state machine to do ROM ADDR Write
                                        (0412)     SetEzI2Cs_1_SCR ( EzI2Cs_1_SCR_ACK )                             ; ACK Address 
                                        (0413)     jmp  EzI2Cs_1_ISR_END                                    ; Base address to RAM buffer.  
                                        (0414) 
                                        (0415)     ; Prepare for Write ROM Address.              
                                        (0416) I2C_STATE_WR_ROM_ADDR:
                                        (0417)     mov  A,reg[EzI2Cs_1_DR_REG]                                      ; Get transmitted Address offset
                                        (0418)     cmp  A,[EzI2Cs_1_bROM_Buf_Size]                                  ; Check if out of range.
                                        (0419)     jnc  I2C_NAK_DATA                                                ; If out of range NAK address
                                        (0420)     jz   I2C_NAK_DATA
                                        (0421) 
                                        (0422)     mov  [EzI2Cs_1_bROM_RWcntr],A                                    ; Reset address counter with new value
                                        (0423)     mov  [EzI2Cs_1_bROM_RWoffset],A                                  ; Set offset with new value.
                                        (0424)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bit.                       
                                        (0425)     or   [EzI2Cs_1_bState],STATE_WR_ROM                              ; Set state machine to do ROM Write
                                        (0426)     jmp  I2C_ACK_DATA
                                        (0427) 
                                        (0428) I2C_STATE_WR_ROM:  // Flash command interpreter
                                        (0429)    ;@PSoC_UserCode_ROM_WR@ (Do not change this line.)
                                        (0430)    ;---------------------------------------------------
                                        (0431)    ; Insert your custom code below this banner
                                        (0432)    ;---------------------------------------------------
                                        (0433) 
                                        (0434)    ;---------------------------------------------------
                                        (0435)    ; Insert your custom code above this banner
                                        (0436)    ;---------------------------------------------------
                                        (0437)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0438) 
                                        (0439)     jnc  I2C_NAK_DATA                                                ; Write to ROM not supported.
                                        (0440) 
                                        (0441) PREPARE_FOR_ROM_READ:
                                        (0442)     mov [EzI2Cs_1_bBusy_Flag], EzI2Cs_1_I2C_BUSY_ROM_READ            ; Possible read transaction in process - set Busy flag to READ
                                        (0443)     
                                        (0444)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bit.                       
                                        (0445)     or   [EzI2Cs_1_bState],STATE_RD_ROM                              ; Set state machine to do ROM Read 
                                        (0446)     mov  [EzI2Cs_1_bROM_RWcntr],[EzI2Cs_1_bROM_RWoffset]             ; Reset address counter to start of Offset
                                        (0447)     mov  X,[EzI2Cs_1_pROM_Buf_Addr_MSB]                              ; Get MSB of ROM address in X
                                        (0448)     mov  A,[EzI2Cs_1_pROM_Buf_Addr_LSB]                              ; Get LSB of ROM base address
                                        (0449)     add  A,[EzI2Cs_1_bROM_RWcntr]                                    ; Set Offset and add to base address      
                                        (0450)     jnc  .GET_ROM_VALUE
                                        (0451)     inc  X    ; Inc the MSB
                                        (0452) .GET_ROM_VALUE:
                                        (0453)     swap A,X  ; Place MSB of ROM address in A, and LSB in X for ROMX
                                        (0454)     romx      ; Get Rom value in A
                                        (0455) 
                                        (0456)     mov  reg[EzI2Cs_1_DR_REG],A                              ; Base address to RAM buffer.  
                                        (0457)     inc  [EzI2Cs_1_bROM_RWcntr]                                      ; Increment RAM buffer counter to next location.
                                        (0458) 
                                        (0459)                                                                      ; ACK command and transmit first byte.
                                        (0460)     SetEzI2Cs_1_SCR  (EzI2Cs_1_SCR_ACK|EzI2Cs_1_SCR_TRANSMIT)   
                                        (0461)     jmp  EzI2Cs_1_ISR_END
                                        (0462) 
                                        (0463) 
                                        (0464) I2C_STATE_RD_ROM:
                                        (0465)     ;@PSoC_UserCode_ROM_RD@ (Do not change this line.)
                                        (0466)     ;---------------------------------------------------
                                        (0467)     ; Insert your custom code below this banner
                                        (0468)     ;---------------------------------------------------
                                        (0469) 
                                        (0470)     ;---------------------------------------------------
                                        (0471)     ; Insert your custom code above this banner
                                        (0472)     ;---------------------------------------------------
                                        (0473)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0474) 
                                        (0475)     mov  A,[EzI2Cs_1_bROM_Buf_Size]
                                        (0476)     dec  A
                                        (0477)     cmp  A,[EzI2Cs_1_bROM_RWcntr]                                    ; Check to see if out of range.
                                        (0478)     jc   .I2C_TRANSMIT_ROM_DATA  ; WARNING!! Bogas data will be transmitted if out of range.   
                                        (0479) 
                                        (0480)     mov  X,[EzI2Cs_1_pROM_Buf_Addr_MSB]                              ; Get MSB of ROM address in X
                                        (0481)     mov  A,[EzI2Cs_1_pROM_Buf_Addr_LSB]                              ; Get LSB of ROM base address
                                        (0482)     add  A,[EzI2Cs_1_bROM_RWcntr]                                    ; Set Offset and add to base address      
                                        (0483)     jnc  .GET_ROM_VALUE
                                        (0484)     inc  X    ; Inc the MSB
                                        (0485) .GET_ROM_VALUE:
                                        (0486)     swap A,X  ; Place MSB of ROM address in A, and LSB in X for ROMX
                                        (0487)     romx      ; Get Rom value in A
                                        (0488)     mov  reg[EzI2Cs_1_DR_REG],A                              ; Base address to RAM buffer.  
                                        (0489)     inc  [EzI2Cs_1_bROM_RWcntr]                                      ; Increment RAM buffer counter to next location.
                                        (0490) 
                                        (0491) .I2C_TRANSMIT_ROM_DATA:     
                                        (0492)     mov  reg[EzI2Cs_1_DR_REG],A                                      ; Write data to transmit register
                                        (0493)     SetEzI2Cs_1_SCR  (EzI2Cs_1_SCR_TRANSMIT)                         ; ACK command and transmit first byte. 
                                        (0494)     jmp  EzI2Cs_1_ISR_END
                                        (0495) 
                                        (0496) ENDIF
                                        (0497) 
                                        (0498) ;; Generic handlers
                                        (0499) 
                                        (0500) I2C_ACK_DATA:
07D6: 62 D7 10 MOV   REG[0xD7],0x10     (0501)     SetEzI2Cs_1_SCR ( EzI2Cs_1_SCR_ACK )                             ; ACK Data
07D9: 80 0F    JMP   0x07E9             (0502)     jmp  EzI2Cs_1_ISR_END
                                        (0503) 
                                        (0504) I2C_NAK_DATA:   ;; NAK data and return  !!WARNING, NOT SURE IF THIS WILL WORK
07DB: 62 D7 00 MOV   REG[0xD7],0x0      (0505)     SetEzI2Cs_1_SCR ( EzI2Cs_1_SCR_NAK )                             ;  NAK Data
07DE: 80 0A    JMP   0x07E9             (0506)     jmp  EzI2Cs_1_ISR_END
                                        (0507) 
                                        (0508) I2C_STATE_RESET:
07E0: 26 01 F0 AND   [0x1],0xF0         (0509)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bit.                       
07E3: 2E 01 00 OR    [0x1],0x0          (0510)     or   [EzI2Cs_1_bState], STATE_IDLE    ; Reset State
07E6: 55 08 00 MOV   [0x8],0x0          (0511)     mov [EzI2Cs_1_bBusy_Flag],EzI2Cs_1_I2C_FREE                      ; Clear Busy flag
                                        (0512)     ; Reset pointer buffers as well
                                        (0513) 
                                        (0514) 
                                        (0515) EzI2Cs_1_ISR_END:
                                        (0516) 
                                        (0517) ; This conditional code is only used when using the large memory model.
                                        (0518) IF (SYSTEM_LARGE_MEMORY_MODEL)
07E9: 18       POP   A                  
07EA: 60 D0    MOV   REG[0xD0],A        (0519)    REG_RESTORE CUR_PP           ; Restore Current Page Pointer
07EC: 18       POP   A                  
07ED: 60 D3    MOV   REG[0xD3],A        (0520)    REG_RESTORE IDX_PP           ; Restore Index Page Pointer
                                        (0521) ENDIF
07EF: 20       POP   X                  (0522)     pop  X
07F0: 18       POP   A                  (0523)     pop  A
                                        (0524) 
07F1: 7E       RETI                     (0525)     reti
(0526) 
(0527) 
(0528) 
(0529) 
(0530) 
(0531) ; end of file EzI2Cs_1INT.asm
FILE: lib\ezi2cs_1.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: EzI2Cs_1.asm
                                        (0004) ;;  Version: 1.2, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: EzI2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "EzI2Cs_1.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ; include instance specific register definitions
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) ;-----------------------------------------------
                                        (0031) ;  Global Symbols
                                        (0032) ;-----------------------------------------------
                                        (0033) ;-------------------------------------------------------------------
                                        (0034) ;  Declare the functions global for both assembler and C compiler.
                                        (0035) ;
                                        (0036) ;  Note that there are two names for each API. First name is
                                        (0037) ;  assembler reference. Name with underscore is name refence for
                                        (0038) ;  C compiler.  Calling function in C source code does not require
                                        (0039) ;  the underscore.
                                        (0040) ;-------------------------------------------------------------------
                                        (0041) 
                                        (0042) export    EzI2Cs_1_EnableInt
                                        (0043) export   _EzI2Cs_1_EnableInt
                                        (0044) export    EzI2Cs_1_ResumeInt
                                        (0045) export   _EzI2Cs_1_ResumeInt
                                        (0046) export    EzI2Cs_1_Start
                                        (0047) export   _EzI2Cs_1_Start
                                        (0048) 
                                        (0049) export    EzI2Cs_1_DisableInt
                                        (0050) export   _EzI2Cs_1_DisableInt
                                        (0051) export    EzI2Cs_1_Stop
                                        (0052) export   _EzI2Cs_1_Stop
                                        (0053) export    EzI2Cs_1_SetRamBuffer
                                        (0054) export   _EzI2Cs_1_SetRamBuffer
                                        (0055) export    EzI2Cs_1_GetAddr
                                        (0056) export   _EzI2Cs_1_GetAddr
                                        (0057) export    EzI2Cs_1_GetActivity
                                        (0058) export   _EzI2Cs_1_GetActivity
                                        (0059) 
                                        (0060) 
                                        (0061) IF (EzI2Cs_1_DYNAMIC_ADDR | EzI2Cs_1_AUTO_ADDR_CHECK) ;; Enable this function if Address is Dynamic or the AUTO_ADDR_CHECK is enabled
                                        (0062) export    EzI2Cs_1_SetAddr
                                        (0063) export   _EzI2Cs_1_SetAddr
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) IF (EzI2Cs_1_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0067) export    EzI2Cs_1_SetRomBuffer
                                        (0068) export   _EzI2Cs_1_SetRomBuffer
                                        (0069) ENDIF
                                        (0070) 
                                        (0071) 
                                        (0072) AREA UserModules (ROM, REL, CON)
                                        (0073) 
                                        (0074) .SECTION
                                        (0075) 
                                        (0076) ;-----------------------------------------------------------------------------
                                        (0077) ;  FUNCTION NAME: EzI2Cs_1_Start
                                        (0078) ;
                                        (0079) ;  DESCRIPTION:
                                        (0080) ;   Initialize the EzI2Cs_1 I2C bus interface.
                                        (0081) ;
                                        (0082) ;-----------------------------------------------------------------------------
                                        (0083) ;
                                        (0084) ;  ARGUMENTS:
                                        (0085) ;
                                        (0086) ;  RETURNS: none
                                        (0087) ;
                                        (0088) ;  SIDE EFFECTS:
                                        (0089) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0090) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0091) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0092) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0093) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0094) ;          
                                        (0095) ;    Page Pointer Registers Modified: 
                                        (0096) ;          CUR_PP
                                        (0097) ;
                                        (0098) ;  THEORY of OPERATION or PROCEDURE:
                                        (0099) ;
                                        (0100) 
                                        (0101)  EzI2Cs_1_Start:
                                        (0102) _EzI2Cs_1_Start:
                                        (0103) 
                                        (0104)    RAM_PROLOGUE RAM_USE_CLASS_4
07F2: 62 D0 00 MOV   REG[0xD0],0x0      (0105)    RAM_SETPAGE_CUR >EzI2Cs_1_varPage
                                        (0106)    
                                        (0107) IF (EzI2Cs_1_DYNAMIC_ADDR)  ;; DYNAMIC ADDRESS
                                        (0108) IF (EzI2Cs_1_AUTO_ADDR_CHECK^1) ;; for CY8C28X45 chip: do not touch the EzI2Cs_1_bAddr variable if AutoAddressCompare feature is enabled.
                                        (0109)    mov  [EzI2Cs_1_bAddr],EzI2Cs_1_SLAVE_ADDR
                                        (0110) ENDIF   
                                        (0111) ENDIF
                                        (0112) 
07F5: 55 01 00 MOV   [0x1],0x0          (0113)    mov  [EzI2Cs_1_bState],0x00    ;; Make sure state machine is initialized
07F8: 55 08 00 MOV   [0x8],0x0          (0114)    mov [EzI2Cs_1_bBusy_Flag],EzI2Cs_1_I2C_FREE ;; Clear Busy flag
                                        (0115) 
07FB: 90 14    CALL  0x0811             (0116)    call EzI2Cs_1_EnableInt
07FD: 90 1E    CALL  0x081D             (0117)    call EzI2Cs_1_EnableSlave
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_4
07FF: 7F       RET                      (0120)    ret
                                        (0121) 
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) IF (EzI2Cs_1_DYNAMIC_ADDR | EzI2Cs_1_AUTO_ADDR_CHECK) ;; Enable this function if Address is Dynamic or the AUTO_ADDR_CHECK is enabled
                                        (0125) .SECTION
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;  FUNCTION NAME: EzI2Cs_1_SetAddr(BYTE bAddr)
                                        (0128) ;
                                        (0129) ;  DESCRIPTION:
                                        (0130) ;   Set the I2C slave address for the EzI2Cs_1 I2C bus interface.
                                        (0131) ;
                                        (0132) ;-----------------------------------------------------------------------------
                                        (0133) ;
                                        (0134) ;  ARGUMENTS:
                                        (0135) ;      A =>  Slave address
                                        (0136) ;
                                        (0137) ;  RETURNS: none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS;    
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0142) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0143) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0144) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0145) ;          
                                        (0146) ;    Page Pointer Registers Modified: 
                                        (0147) ;          CUR_PP
                                        (0148) ;
                                        (0149) ;  THEORY of OPERATION or PROCEDURE:
                                        (0150) ;
                                        (0151) 
                                        (0152)  EzI2Cs_1_SetAddr:
                                        (0153) _EzI2Cs_1_SetAddr:
                                        (0154)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0155) IF (EzI2Cs_1_AUTO_ADDR_CHECK^1) ;; for CY8C28X45 chip: do not touch the EzI2Cs_1_bAddr variable if AutoAddressCompare feature is enabled.
                                        (0156)    RAM_SETPAGE_CUR >EzI2Cs_1_bAddr
                                        (0157)    asl   A
                                        (0158)    mov   [EzI2Cs_1_bAddr],A
                                        (0159) ELSE                          ;; write to the ADDR register instead
                                        (0160)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0161)    and  A, ~EzI2Cs_1_HW_ADDR_MASK	; verify address value
                                        (0162)    mov  X, SP
                                        (0163)    push A                                   ; store address value
                                        (0164)    M8C_SetBank1               ;; Set Bank 1
                                        (0165)    mov  A, reg[EzI2Cs_1_ADDR_REG]   ; get value from address register
                                        (0166)    and  A, EzI2Cs_1_HW_ADDR_MASK    ; define highest bit
                                        (0167)    or   A, [X]                              ; form address value 	
                                        (0168)    mov  reg[EzI2Cs_1_ADDR_REG], A   ; set new address value to register
                                        (0169)    M8C_SetBank0               ;; Set Bank 0
                                        (0170)    pop  A
                                        (0171)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0172) ENDIF
                                        (0173)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0174)    ret
                                        (0175) 
                                        (0176) .ENDSECTION
                                        (0177) ENDIF
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME:BYTE EzI2Cs_1_GetActivity(void)
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Return a non-zero value if the I2C hardware has seen activity on the bus.
                                        (0185) ;    The activity flag will be cleared if set when calling this function.
                                        (0186) ;
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;
                                        (0189) ;  ARGUMENTS:  none
                                        (0190) ;
                                        (0191) ;  RETURNS: 
                                        (0192) ;    BYTE  non-zero = Activity
                                        (0193) ;          zero     = No Activity
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS;    
                                        (0196) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0197) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0198) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0199) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0200) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0201) ;          
                                        (0202) ;    Page Pointer Registers Modified: 
                                        (0203) ;          CUR_PP
                                        (0204) ;
                                        (0205) ;  THEORY of OPERATION or PROCEDURE:
                                        (0206) ;
                                        (0207) 
                                        (0208)  EzI2Cs_1_GetActivity:
                                        (0209) _EzI2Cs_1_GetActivity:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_4
0800: 62 D0 00 MOV   REG[0xD0],0x0      (0211)    RAM_SETPAGE_CUR >EzI2Cs_1_bState
0803: 51 01    MOV   A,[0x1]            (0212)    mov   A,[EzI2Cs_1_bState]
0805: 21 B0    AND   A,0xB0             (0213)    and   A,EzI2Cs_1_ACTIVITY_MASK         ; Mask off activity bits
0807: 26 01 4F AND   [0x1],0x4F         (0214)    and   [EzI2Cs_1_bState],~EzI2Cs_1_ACTIVITY_MASK ; Clear system activity bits
                                        (0215) 
                                        (0216) EzI2Cs_1_GetActivity_End:
                                        (0217)    RAM_EPILOGUE RAM_USE_CLASS_4
080A: 7F       RET                      (0218)    ret
                                        (0219) 
                                        (0220) .ENDSECTION
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: BYTE EzI2Cs_1_GetAddr(Void)
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;   Get the I2C slave address for the EzI2Cs_1 I2C bus interface.
                                        (0228) ;
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS: none
                                        (0232) ;
                                        (0233) ;  RETURNS: none
                                        (0234) ;
                                        (0235) ;  SIDE EFFECTS;    
                                        (0236) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0237) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0238) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0239) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0240) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0241) ;          
                                        (0242) ;    Page Pointer Registers Modified: 
                                        (0243) ;          CUR_PP
                                        (0244) ;
                                        (0245) ;
                                        (0246) ;  THEORY of OPERATION or PROCEDURE:
                                        (0247) ;
                                        (0248) 
                                        (0249)  EzI2Cs_1_GetAddr:
                                        (0250) _EzI2Cs_1_GetAddr:
                                        (0251) 
                                        (0252) IF (EzI2Cs_1_DYNAMIC_ADDR | EzI2Cs_1_AUTO_ADDR_CHECK) ;; if Address is Dynamic or the AUTO_ADDR_CHECK is enabled
                                        (0253)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0254) IF (EzI2Cs_1_AUTO_ADDR_CHECK^1) ;; for CY8C28X45 chip: do not touch the EzI2Cs_1_bAddr variable if AutoAddressCompare feature is enabled.
                                        (0255)    RAM_SETPAGE_CUR >EzI2Cs_1_bAddr
                                        (0256)    mov   A,[EzI2Cs_1_bAddr]
                                        (0257)    asr   A                          ; Shift Addr to right to drop RW bit.
                                        (0258) ELSE                          ;; read the address from ADDR register instead
                                        (0259)    M8C_SetBank1               ;; Set Bank 1 
                                        (0260)    mov A, reg[EzI2Cs_1_ADDR_REG]
                                        (0261)    M8C_SetBank0               ;; Set Bank 0
                                        (0262) ENDIF
                                        (0263)    and   A, 0x7f              ; Mask off bogus MSb
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0265) ELSE
080B: 50 50    MOV   A,0x50             (0266)    mov   A,0x50            
                                        (0267) ENDIF
080D: 7F       RET                      (0268)    ret
                                        (0269) 
                                        (0270) .ENDSECTION
                                        (0271) 
                                        (0272) 
                                        (0273) 
                                        (0274) .SECTION
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  FUNCTION NAME: EzI2Cs_1_EnableInt
                                        (0277) ;  FUNCTION NAME: EzI2Cs_1_ResumeInt
                                        (0278) ;  DESCRIPTION:
                                        (0279) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0280) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0281) ;	  EzI2Cs_1_ResumeInt performs the enable int function without fist clearing
                                        (0282) ;     pending interrupts.
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS: none
                                        (0286) ;
                                        (0287) ;  RETURNS: none
                                        (0288) ;
                                        (0289) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0290) ;
                                        (0291) ;  THEORY of OPERATION or PROCEDURE:
                                        (0292) ;
                                        (0293)  EzI2Cs_1_ResumeInt:
                                        (0294) _EzI2Cs_1_ResumeInt:
                                        (0295)    RAM_PROLOGUE RAM_USE_CLASS_1
080E: 08       PUSH  A                  (0296)    push A
080F: 80 08    JMP   0x0818             (0297)    jmp ResumeEntry
                                        (0298) 
                                        (0299) 
                                        (0300)  EzI2Cs_1_EnableInt:
                                        (0301) _EzI2Cs_1_EnableInt:
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0303)    ;first clear any pending interrupts
0811: 08       PUSH  A                  (0304)    push A
0812: 5D DD    MOV   A,REG[0xDD]        (0305)    mov  A, reg[INT_CLR3]
0814: 21 FE    AND   A,0xFE             (0306)    and  A, ~EzI2Cs_1_INT_MASK
0816: 60 DD    MOV   REG[0xDD],A        (0307)    mov  reg[INT_CLR3], A
                                        (0308) ResumeEntry:
0818: 43 DE 01 OR    REG[0xDE],0x1      (0309)    M8C_EnableIntMask EzI2Cs_1_INT_REG, EzI2Cs_1_INT_MASK
081B: 18       POP   A                  (0310)    pop  A
                                        (0311)    RAM_EPILOGUE RAM_USE_CLASS_1
081C: 7F       RET                      (0312)    ret
                                        (0313) 
                                        (0314) .ENDSECTION
                                        (0315) 
                                        (0316) .SECTION
                                        (0317) ;-----------------------------------------------------------------------------
                                        (0318) ;  FUNCTION NAME: EzI2Cs_1_EnableSlave
                                        (0319) ;
                                        (0320) ;  DESCRIPTION:
                                        (0321) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0322) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0323) ;
                                        (0324) ;-----------------------------------------------------------------------------
                                        (0325) ;
                                        (0326) ;  ARGUMENTS: none
                                        (0327) ;
                                        (0328) ;  RETURNS: none
                                        (0329) ;
                                        (0330) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0331) ;
                                        (0332) ;  THEORY of OPERATION or PROCEDURE:
                                        (0333) ;
                                        (0334) 
                                        (0335)  EzI2Cs_1_EnableSlave:
                                        (0336) _EzI2Cs_1_EnableSlave:
                                        (0337) 
                                        (0338)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0339)     
                                        (0340)     IF (EzI2Cs_1_CY8C27XXXA_ID) ;; Enable this code if we have CY8C27XXXA chip ID
                                        (0341)     ; Save original CPU clock speed
                                        (0342)     M8C_SetBank1          ; Set Bank 1 
                                        (0343)     mov  A,reg[OSC_CR0]   ; Get current configuration of OSC_CR0 (Bank 1)
                                        (0344)     push A                ; Save OSC_CR0 configuration
                                        (0345)     and  A,0xF8           ; Mask off CPU speed
                                        (0346)     or   A,0x05           ; Set clock to 750KHz
                                        (0347)     mov  reg[OSC_CR0],A   ; Write new value to OSC_CR0 (Bank 1)
                                        (0348)     M8C_SetBank0          ; Back to Bank 0
                                        (0349)     ENDIF 
                                        (0350)     ; Enable I2C Slave
                                        (0351)     IF(EzI2Cs_1_USED_I2C_BLOCK)
                                        (0352)     M8C_SetBank1
                                        (0353)     or   reg[EzI2Cs_1_CFG_REG],(EzI2Cs_1_CFG_Slave_EN | EzI2Cs_1_CFG_BUS_ERROR_IE | EzI2Cs_1_CFG_STOP_IE)
                                        (0354)     M8C_SetBank0
                                        (0355)     ELSE
081D: 43 D6 31 OR    REG[0xD6],0x31     (0356)     or   reg[EzI2Cs_1_CFG_REG],(EzI2Cs_1_CFG_Slave_EN | EzI2Cs_1_CFG_BUS_ERROR_IE | EzI2Cs_1_CFG_STOP_IE)
                                        (0357)     ENDIF
                                        (0358)     IF (EzI2Cs_1_CY8C27XXXA_ID) ;; Enable this code if we have CY8C27XXXA chip ID    
                                        (0359)     ; Restore original CPU clock speed
                                        (0360)     pop  A
                                        (0361)     M8C_SetBank1          ; Set Bank 1
                                        (0362)     mov  reg[OSC_CR0],A   ; Restore
                                        (0363)     M8C_SetBank0          ; Back to Bank 0
                                        (0364)     ENDIF    
                                        (0365)     RAM_EPILOGUE RAM_USE_CLASS_1
0820: 7F       RET                      (0366)     ret
                                        (0367) 
                                        (0368) .ENDSECTION
                                        (0369) 
                                        (0370) .SECTION
                                        (0371) ;-----------------------------------------------------------------------------
                                        (0372) ;  FUNCTION NAME: EzI2Cs_1_DisableInt
                                        (0373) ;  FUNCTION NAME: EzI2Cs_1_Stop
                                        (0374) ;
                                        (0375) ;  DESCRIPTION:
                                        (0376) ;     Disables EzI2Cs_1 slave by disabling SDA interrupt
                                        (0377) ;
                                        (0378) ;-----------------------------------------------------------------------------
                                        (0379) ;
                                        (0380) ;  ARGUMENTS: none
                                        (0381) ;
                                        (0382) ;  RETURNS: none
                                        (0383) ;
                                        (0384) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0385) ;
                                        (0386) ;  THEORY of OPERATION or PROCEDURE:
                                        (0387) ;
                                        (0388) 
                                        (0389)  EzI2Cs_1_Stop:
                                        (0390) _EzI2Cs_1_Stop:
                                        (0391)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0392) 
0821: 41 DE FE AND   REG[0xDE],0xFE     (0393)    M8C_DisableIntMask EzI2Cs_1_INT_REG, EzI2Cs_1_INT_MASK
                                        (0394)    IF(EzI2Cs_1_USED_I2C_BLOCK)
                                        (0395)    M8C_SetBank1
                                        (0396)    and  reg[EzI2Cs_1_CFG_REG],~EzI2Cs_1_CFG_Slave_EN
                                        (0397)    M8C_SetBank0
                                        (0398)    ELSE
0824: 41 D6 FE AND   REG[0xD6],0xFE     (0399)    and  reg[EzI2Cs_1_CFG_REG],~EzI2Cs_1_CFG_Slave_EN
                                        (0400)    ENDIF
                                        (0401)    RAM_EPILOGUE RAM_USE_CLASS_1
0827: 7F       RET                      (0402)    ret
                                        (0403) 
                                        (0404) .ENDSECTION
                                        (0405) 
                                        (0406) 
                                        (0407) 
                                        (0408) .SECTION
                                        (0409) ;-----------------------------------------------------------------------------
                                        (0410) ;  FUNCTION NAME: EzI2Cs_1_DisableInt
                                        (0411) ;  FUNCTION NAME: EzI2Cs_1_Stop
                                        (0412) ;
                                        (0413) ;  DESCRIPTION:
                                        (0414) ;     Disables EzI2Cs_1 slave by disabling SDA interrupt
                                        (0415) ;
                                        (0416) ;-----------------------------------------------------------------------------
                                        (0417) ;
                                        (0418) ;  ARGUMENTS: none
                                        (0419) ;
                                        (0420) ;  RETURNS: none
                                        (0421) ;
                                        (0422) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0423) ;
                                        (0424) ;  THEORY of OPERATION or PROCEDURE:
                                        (0425) ;
                                        (0426) 
                                        (0427)  EzI2Cs_1_DisableInt:
                                        (0428) _EzI2Cs_1_DisableInt:
                                        (0429)    RAM_PROLOGUE RAM_USE_CLASS_1
0828: 41 DE FE AND   REG[0xDE],0xFE     (0430)    M8C_DisableIntMask EzI2Cs_1_INT_REG, EzI2Cs_1_INT_MASK
                                        (0431)    RAM_EPILOGUE RAM_USE_CLASS_1
082B: 7F       RET                      (0432)    ret
                                        (0433) 
                                        (0434) .ENDSECTION
                                        (0435) 
                                        (0436) .SECTION
                                        (0437) ;-----------------------------------------------------------------------------
                                        (0438) ;  FUNCTION NAME: EzI2Cs_1_DisableSlave
                                        (0439) ;
                                        (0440) ;  DESCRIPTION:
                                        (0441) ;     Disables EzI2Cs_1 slave by disabling SDA interrupt
                                        (0442) ;
                                        (0443) ;-----------------------------------------------------------------------------
                                        (0444) ;
                                        (0445) ;  ARGUMENTS: none
                                        (0446) ;
                                        (0447) ;  RETURNS: none
                                        (0448) ;
                                        (0449) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0450) ;
                                        (0451) ;  THEORY of OPERATION or PROCEDURE:
                                        (0452) ;
                                        (0453) 
                                        (0454)  EzI2Cs_1_DisableSlave:
                                        (0455) _EzI2Cs_1_DisableSlave:
                                        (0456)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0457)    IF(EzI2Cs_1_USED_I2C_BLOCK)
                                        (0458)    M8C_SetBank1
                                        (0459)    and  reg[EzI2Cs_1_CFG_REG],~EzI2Cs_1_CFG_Slave_EN
                                        (0460)    M8C_SetBank0
                                        (0461)    ELSE
082C: 41 D6 FE AND   REG[0xD6],0xFE     (0462)    and  reg[EzI2Cs_1_CFG_REG],~EzI2Cs_1_CFG_Slave_EN
                                        (0463)    ENDIF
                                        (0464)    RAM_EPILOGUE RAM_USE_CLASS_1
082F: 7F       RET                      (0465)    ret
                                        (0466) 
                                        (0467) .ENDSECTION
                                        (0468) 
                                        (0469) .SECTION
                                        (0470) ;-----------------------------------------------------------------------------
                                        (0471) ;  FUNCTION NAME: 
                                        (0472) ;          void EzI2Cs_1_SetRamBuffer(BYTE bSize, BYTE bRWboundry, BYTE * pAddr)
                                        (0473) ;
                                        (0474) ;  DESCRIPTION:
                                        (0475) ;     Sets the location and size of the I2C RAM buffer.          
                                        (0476) ;
                                        (0477) ;-----------------------------------------------------------------------------
                                        (0478) ;
                                        (0479) ;  ARGUMENTS: 
                                        (0480) ;     [SP-3] =>  Size of data structure
                                        (0481) ;     [SP-4] =>  R/W boundary of (Must be less than or equal to size.)
                                        (0482) ;     [SP-5] =>  LSB of data pointer
                                        (0483) ;     [SP-6] =>  MSB of data pointer (Only used for large memory model)
                                        (0484) ;
                                        (0485) ;  RETURNS: none
                                        (0486) ;
                                        (0487) ;  SIDE EFFECTS;    
                                        (0488) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0489) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0490) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0491) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0492) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0493) ;          
                                        (0494) ;    Page Pointer Registers Modified: 
                                        (0495) ;          CUR_PP
                                        (0496) ;
                                        (0497) ;  THEORY of OPERATION or PROCEDURE:
                                        (0498) ;
                                        (0499) 
                                        (0500) ; Stack offset constants
                                        (0501) RAMBUF_SIZE:   equ  -3   ; Stack position for data structure size.
                                        (0502) RW_SIZE:       equ  -4   ; Stack position for R/W area size.       
                                        (0503) RAMPTR_LSB:    equ  -5   ; Stack position for RAM pointer LSB.   
                                        (0504) RAMPTR_MSB:    equ  -6   ; Stack position for RAM pointer MSB.   
                                        (0505) 
                                        (0506)  EzI2Cs_1_SetRamBuffer:
                                        (0507) _EzI2Cs_1_SetRamBuffer:
                                        (0508) 
                                        (0509)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0510)     RAM_PROLOGUE RAM_USE_CLASS_2
0830: 62 D0 00 MOV   REG[0xD0],0x0      (0511)     RAM_SETPAGE_CUR >EzI2Cs_1_bRAM_Buf_Size     ; Set page to global var page.
                                        (0512)                                                         ; All these globals should be
                                        (0513)                                                         ; on the same page.          
0833: 4F       MOV   X,SP               (0514)     mov   X,SP
0834: 52 FD    MOV   A,[X-3]            (0515)     mov   A,[X+RAMBUF_SIZE]
0836: 53 06    MOV   [0x6],A            (0516)     mov   [EzI2Cs_1_bRAM_Buf_Size],A         ; Store the buffer size
                                        (0517) 
0838: 52 FC    MOV   A,[X-4]            (0518)     mov   A,[X+RW_SIZE]                            ; Store R/W boundary             
083A: 53 07    MOV   [0x7],A            (0519)     mov   [EzI2Cs_1_bRAM_Buf_WSize],A        ; 
                                        (0520)     
083C: 52 FB    MOV   A,[X-5]            (0521)     mov   A,[X+RAMPTR_LSB]                         ; Store only LSB of data pointer
083E: 53 05    MOV   [0x5],A            (0522)     mov   [EzI2Cs_1_pRAM_Buf_Addr_LSB],A     ; 
                                        (0523) 
                                        (0524) IF (SYSTEM_LARGE_MEMORY_MODEL)                             ; Only worry about the address MSB
                                        (0525)                                                            ; if in the large memory Model
0840: 52 FA    MOV   A,[X-6]            (0526)     mov   A,[X+RAMPTR_MSB]                         ; Store only MSB of data pointer
0842: 53 04    MOV   [0x4],A            (0527)     mov   [EzI2Cs_1_pRAM_Buf_Addr_MSB],A     ; 
                                        (0528) ENDIF
                                        (0529) 
0844: 70 3F    AND   F,0x3F             
0846: 71 C0    OR    F,0xC0             (0530)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0531)     RAM_EPILOGUE RAM_USE_CLASS_4
0848: 7F       RET                      (0532)     ret
(0533) 
(0534) .ENDSECTION
(0535) 
(0536) IF (EzI2Cs_1_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
(0537) .SECTION
(0538) ;-----------------------------------------------------------------------------
(0539) ;  FUNCTION NAME: 
(0540) ;          void EzI2Cs_1_SetRomBuffer(BYTE bSize, BYTE * pAddr)
(0541) ;
(0542) ;  DESCRIPTION:
(0543) ;     Sets the location and size of the I2C ROM buffer.          
(0544) ;
(0545) ;-----------------------------------------------------------------------------
(0546) ;
(0547) ;  ARGUMENTS: 
(0548) ;     [SP-3] =>  Size of data const data structure
(0549) ;     [SP-4] =>  LSB of data pointer
(0550) ;     [SP-5] =>  MSB of data pointer (Only used for large memory model)
(0551) ;
(0552) ;  RETURNS: none
(0553) ;
(0554) ;  SIDE EFFECTS;    
(0555) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
(0556) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
(0557) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
(0558) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
(0559) ;    REGISTERS WILL NOT BE MODIFIED.
(0560) ;          
(0561) ;    Page Pointer Registers Modified: 
(0562) ;          CUR_PP
(0563) ;
(0564) ;  THEORY of OPERATION or PROCEDURE:
(0565) ;
(0566) 
(0567) ; Stack offset constants
(0568) ROMBUF_SIZE:   equ  -3   ; Stack position for data structure size.
(0569) ROMPTR_LSB:    equ  -4   ; Stack position for ROM pointer LSB.   
(0570) ROMPTR_MSB:    equ  -5   ; Stack position for ROM pointer MSB.   
(0571) 
(0572)  EzI2Cs_1_SetRomBuffer:
(0573) _EzI2Cs_1_SetRomBuffer:
(0574) 
(0575)     RAM_PROLOGUE RAM_USE_CLASS_4
(0576)     RAM_PROLOGUE RAM_USE_CLASS_2
(0577)     RAM_SETPAGE_CUR >EzI2Cs_1_bROM_Buf_Size     ; Set page to global var page.
(0578)                                                         ; All these globals should be
(0579)                                                         ; on the same page.          
(0580)     mov   X,SP
(0581)     mov   A,[X+ROMBUF_SIZE]
(0582)     mov   [EzI2Cs_1_bROM_Buf_Size],A         ; Store the buffer size
(0583) 
(0584)     mov   A,[X+ROMPTR_LSB]                         ; Store LSB of data pointer
(0585)     mov   [EzI2Cs_1_pROM_Buf_Addr_LSB],A     ; 
(0586)     mov   A,[X+ROMPTR_MSB]                         ; Store MSB of data pointer
(0587)     mov   [EzI2Cs_1_pROM_Buf_Addr_MSB],A     ; 
(0588)     RAM_EPILOGUE RAM_USE_CLASS_2
(0589)     RAM_EPILOGUE RAM_USE_CLASS_4
(0590)     ret
(0591) 
(0592) .ENDSECTION
(0593) ENDIF
(0594) 
(0595) ; End of File EzI2Cs_1.asm
FILE: lib\digital_out.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   DIGITAL_OUT.asm
                                        (0004) ;;  Version: 1.2, Updated on 2009/10/9 at 10:6:29
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "DIGITAL_OUT.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _DIGITAL_OUT_Start
                                        (0027) export  DIGITAL_OUT_Start
                                        (0028) 
                                        (0029) export _DIGITAL_OUT_Stop
                                        (0030) export  DIGITAL_OUT_Stop
                                        (0031) 
                                        (0032) export _DIGITAL_OUT_On
                                        (0033) export  DIGITAL_OUT_On
                                        (0034) 
                                        (0035) export _DIGITAL_OUT_Off
                                        (0036) export  DIGITAL_OUT_Off
                                        (0037) 
                                        (0038) export _DIGITAL_OUT_Switch
                                        (0039) export  DIGITAL_OUT_Switch
                                        (0040) 
                                        (0041) export _DIGITAL_OUT_Invert
                                        (0042) export  DIGITAL_OUT_Invert
                                        (0043) 
                                        (0044) export _DIGITAL_OUT_GetState
                                        (0045) export  DIGITAL_OUT_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: DIGITAL_OUT_Start(void)
                                        (0054) ;  FUNCTION NAME: DIGITAL_OUT_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: DIGITAL_OUT_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _DIGITAL_OUT_On:
                                        (0079)  DIGITAL_OUT_On:
0849: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
084B: 80 03    JMP   0x084F             (0081)    jmp  DIGITAL_OUT_Switch 
                                        (0082) 
                                        (0083) _DIGITAL_OUT_Start:
                                        (0084)  DIGITAL_OUT_Start:
                                        (0085) _DIGITAL_OUT_Stop:
                                        (0086)  DIGITAL_OUT_Stop:
                                        (0087) _DIGITAL_OUT_Off:
                                        (0088)  DIGITAL_OUT_Off:
084D: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _DIGITAL_OUT_Switch:
                                        (0092)  DIGITAL_OUT_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
084F: 62 D0 00 MOV   REG[0xD0],0x0      (0095)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0096) 
0852: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
0854: A0 06    JZ    0x085B             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
0856: 2E 00 10 OR    [0x0],0x10         (0102)    or   [Port_2_Data_SHADE],DIGITAL_OUT_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_2_Data_SHADE],~DIGITAL_OUT_PinMask
                                        (0105) ENDIF
0859: 80 04    JMP   0x085E             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
085B: 26 00 EF AND   [0x0],0xEF         (0110)    and  [Port_2_Data_SHADE],~DIGITAL_OUT_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_2_Data_SHADE],DIGITAL_OUT_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
085E: 51 00    MOV   A,[0x0]            (0116)    mov  A,[Port_2_Data_SHADE]
0860: 60 08    MOV   REG[0x8],A         (0117)    mov  reg[DIGITAL_OUT_PortDR],A
                                        (0118) 
0862: 70 3F    AND   F,0x3F             
0864: 71 C0    OR    F,0xC0             (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
0866: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: DIGITAL_OUT_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _DIGITAL_OUT_Invert:
                                        (0144)  DIGITAL_OUT_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
0867: 62 D0 00 MOV   REG[0xD0],0x0      (0147)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0148) 
086A: 36 00 10 XOR   [0x0],0x10         (0149)    xor  [Port_2_Data_SHADE],DIGITAL_OUT_PinMask
086D: 51 00    MOV   A,[0x0]            (0150)    mov  A,[Port_2_Data_SHADE]
086F: 60 08    MOV   REG[0x8],A         (0151)    mov  reg[DIGITAL_OUT_PortDR],A
                                        (0152) 
0871: 70 3F    AND   F,0x3F             
0873: 71 C0    OR    F,0xC0             (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
0875: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: DIGITAL_OUT_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _DIGITAL_OUT_GetState:
                                        (0177)  DIGITAL_OUT_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
0876: 62 D0 00 MOV   REG[0xD0],0x0      (0180)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0181) 
0879: 51 00    MOV   A,[0x0]            (0182)    mov   A,[Port_2_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
087B: 21 10    AND   A,0x10             (0188)    and   A,DIGITAL_OUT_PinMask         ; Mask off the trash
087D: A0 03    JZ    0x0881             (0189)    jz    .End_LED_GS                   ; If zero, we're done
087F: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
0881: 70 3F    AND   F,0x3F             
0883: 71 C0    OR    F,0xC0             (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
0885: 7F       RET                      (0195)    ret
(0196) .ENDSECTION
FILE: lib\bpf4_4khz.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: BPF4_4KHz.asm
                                        (0004) ;;  Version: 1.0, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Asm source for 4 Pole Band Pass Filter
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "BPF4_4KHz.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  BPF4_4KHz_Start
                                        (0030) export _BPF4_4KHz_Start
                                        (0031) export  BPF4_4KHz_SetPower
                                        (0032) export _BPF4_4KHz_SetPower
                                        (0033) export  BPF4_4KHz_Stop
                                        (0034) export _BPF4_4KHz_Stop
                                        (0035) 
                                        (0036) export  BPF4_4KHz_SetC1L
                                        (0037) export _BPF4_4KHz_SetC1L
                                        (0038) export  BPF4_4KHz_SetC2L
                                        (0039) export _BPF4_4KHz_SetC2L
                                        (0040) export  BPF4_4KHz_SetC3L
                                        (0041) export _BPF4_4KHz_SetC3L
                                        (0042) export  BPF4_4KHz_SetC4L
                                        (0043) export _BPF4_4KHz_SetC4L
                                        (0044) 
                                        (0045) export  BPF4_4KHz_SetC1H
                                        (0046) export _BPF4_4KHz_SetC1H
                                        (0047) export  BPF4_4KHz_SetC2H
                                        (0048) export _BPF4_4KHz_SetC2H
                                        (0049) export  BPF4_4KHz_SetC3H
                                        (0050) export _BPF4_4KHz_SetC3H
                                        (0051) export  BPF4_4KHz_SetC4H
                                        (0052) export _BPF4_4KHz_SetC4H
                                        (0053) 
                                        (0054) ;-----------------------------------------------
                                        (0055) ;  EQUATES
                                        (0056) ;-----------------------------------------------
                                        (0057) BPF4_4KHz_POWERMASK:    equ 03h                  ; Power field mask for CR3
                                        (0058) BPF4_4KHz_CNUMMASK:     equ 1fh                  ; Mask for A, B & C Caps
                                        (0059) 
                                        (0060) BPF4_4KHz_IfCond:       equ BPF4_4KHz_AMD_MSK & 0x01
                                        (0061) 
                                        (0062) IF (BPF4_4KHz_AMD_VAL)
                                        (0063)  IF (BPF4_4KHz_IfCond)
                                        (0064)   BPF4_4KHz_AMD:        equ BPF4_4KHz_AMD_VAL
                                        (0065)  ELSE
                                        (0066)   BPF4_4KHz_AMD:        equ BPF4_4KHz_AMD_VAL << 4
                                        (0067)  ENDIF
                                        (0068) ENDIF
                                        (0069) 
                                        (0070) AREA UserModules (ROM,REL)
                                        (0071) 
                                        (0072) .SECTION
                                        (0073) ;-----------------------------------------------------------------------------
                                        (0074) ;  FUNCTION NAME: BPF4_4KHz_Start
                                        (0075) ;
                                        (0076) ;  DESCRIPTION: Applies power setting to the module's PSoC blocks
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  ARGUMENTS:    A register contains the power setting (constant)
                                        (0079) ;  RETURNS:      Nothing
                                        (0080) ;  SIDE EFFECTS: 
                                        (0081) ;    The A and X registers may be modified by this or future implementations
                                        (0082) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0083) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0084) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0085) ;    functions.
                                        (0086) 
                                        (0087) 
                                        (0088)  BPF4_4KHz_Start:
                                        (0089) _BPF4_4KHz_Start:
                                        (0090)  BPF4_4KHz_SetPower:
                                        (0091) _BPF4_4KHz_SetPower:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_2
0886: 21 03    AND   A,0x3              (0093)    and   A, BPF4_4KHz_POWERMASK                  ; mask A to protect unchanged bits
0888: 4F       MOV   X,SP               (0094)    mov   X, SP                                   ; define temp store location
0889: 08       PUSH  A                  (0095)    push  A                                       ; put power value in temp store
                                        (0096) 
                                        (0097) IF (BPF4_4KHz_AMD_VAL)
                                        (0098)    M8C_SetBank1
                                        (0099)    mov   A, reg[BPF4_4KHz_AMD_REG]               ; read modulator register
                                        (0100)    and   A, ~BPF4_4KHz_AMD_MSK                   ; clear modulator bittfield in A
                                        (0101)    or    A, BPF4_4KHz_AMD                        ; combine modulator value with balance of register
                                        (0102)    mov   reg[BPF4_4KHz_AMD_REG], A               ; move complete value back to register
                                        (0103)    M8C_SetBank0
                                        (0104) ENDIF
                                        (0105)    
088A: 5D 83    MOV   A,REG[0x83]        (0106)    mov   A, reg[BPF4_4KHz_FLINL_CR3]             ; read power value
088C: 21 FC    AND   A,0xFC             (0107)    and   A, ~BPF4_4KHz_POWERMASK                 ; clear power bits in A
088E: 2B 00    OR    A,[X+0]            (0108)    or    A, [X]                                  ; combine power value with balance of reg.
0890: 60 83    MOV   REG[0x83],A        (0109)    mov   reg[BPF4_4KHz_FLINL_CR3], A             ; move complete value back to register
                                        (0110) 
0892: 5D 93    MOV   A,REG[0x93]        (0111)    mov   A, reg[BPF4_4KHz_FLFBL_CR3]             ; read power value
0894: 21 FC    AND   A,0xFC             (0112)    and   A, ~BPF4_4KHz_POWERMASK                 ; clear power bits in A
0896: 2B 00    OR    A,[X+0]            (0113)    or    A, [X]                                  ; combine power value with balance of reg.
0898: 60 93    MOV   REG[0x93],A        (0114)    mov   reg[BPF4_4KHz_FLFBL_CR3], A             ; move complete value back to register
                                        (0115) 
089A: 5D 97    MOV   A,REG[0x97]        (0116)    mov   A, reg[BPF4_4KHz_FLINH_CR3]             ; read power value
089C: 21 FC    AND   A,0xFC             (0117)    and   A, ~BPF4_4KHz_POWERMASK                 ; clear power bits in A
089E: 2B 00    OR    A,[X+0]            (0118)    or    A, [X]                                  ; combine power value with balance of reg.
08A0: 60 97    MOV   REG[0x97],A        (0119)    mov   reg[BPF4_4KHz_FLINH_CR3], A             ; move complete value back to register
                                        (0120) 
08A2: 5D 87    MOV   A,REG[0x87]        (0121)    mov   A, reg[BPF4_4KHz_FLFBH_CR3]             ; read power value
08A4: 21 FC    AND   A,0xFC             (0122)    and   A, ~BPF4_4KHz_POWERMASK                 ; clear power bits in A
08A6: 2B 00    OR    A,[X+0]            (0123)    or    A, [X]                                  ; combine power value with balance of reg.
08A8: 60 87    MOV   REG[0x87],A        (0124)    mov   reg[BPF4_4KHz_FLFBH_CR3], A             ; move complete value back to register
                                        (0125) 
08AA: 18       POP   A                  (0126)    pop   A
08AB: 70 3F    AND   F,0x3F             
08AD: 71 C0    OR    F,0xC0             (0127)    RAM_EPILOGUE RAM_USE_CLASS_2
08AF: 7F       RET                      (0128)    ret
                                        (0129) .ENDSECTION
                                        (0130) 
                                        (0131) .SECTION
                                        (0132) ;-----------------------------------------------------------------------------
                                        (0133) ;  FUNCTION NAME: BPF4_4KHz_Stop
                                        (0134) ;
                                        (0135) ;  DESCRIPTION: Cuts power to the user module.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  ARGUMENTS:     None
                                        (0138) ;  RETURNS:       Nothing
                                        (0139) ;  SIDE EFFECTS: 
                                        (0140) ;    The A and X registers may be modified by this or future implementations
                                        (0141) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0142) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0143) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0144) ;    functions.
                                        (0145) 
                                        (0146)  BPF4_4KHz_Stop:
                                        (0147) _BPF4_4KHz_Stop:
                                        (0148)    RAM_PROLOGUE RAM_USE_CLASS_1
08B0: 41 83 FC AND   REG[0x83],0xFC     (0149)    and   reg[BPF4_4KHz_FLINL_CR3], ~BPF4_4KHz_POWERMASK
08B3: 41 93 FC AND   REG[0x93],0xFC     (0150)    and   reg[BPF4_4KHz_FLFBL_CR3], ~BPF4_4KHz_POWERMASK
08B6: 41 97 FC AND   REG[0x97],0xFC     (0151)    and   reg[BPF4_4KHz_FLINH_CR3], ~BPF4_4KHz_POWERMASK
08B9: 41 87 FC AND   REG[0x87],0xFC     (0152)    and   reg[BPF4_4KHz_FLFBH_CR3], ~BPF4_4KHz_POWERMASK
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_1
08BC: 7F       RET                      (0154)    ret
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: BPF4_4KHz_SetC1L
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0162) ;                 of the capacitor C1L
                                        (0163) ;-----------------------------------------------------------------------------
                                        (0164) ;  ARGUMENTS:    The A register contains a non-negative integer less than 32
                                        (0165) ;  RETURNS:
                                        (0166) ;  SIDE EFFECTS: 
                                        (0167) ;    The A and X registers may be modified by this or future implementations
                                        (0168) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0169) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0170) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0171) ;    functions.
                                        (0172) 
                                        (0173)  BPF4_4KHz_SetC1L:
                                        (0174) _BPF4_4KHz_SetC1L:
                                        (0175)    RAM_PROLOGUE RAM_USE_CLASS_2
08BD: 21 1F    AND   A,0x1F             (0176)    and   A, BPF4_4KHz_CNUMMASK                   ; mask A to protect unchanged bits
08BF: 4F       MOV   X,SP               (0177)    mov   X, SP                                   ; define temp store location
08C0: 08       PUSH  A                  (0178)    push  A                                       ; put C1L value in temp store
08C1: 5D 80    MOV   A,REG[0x80]        (0179)    mov   A, reg[BPF4_4KHz_FILT_C1L_REG]          ; read current C1L
08C3: 21 E0    AND   A,0xE0             (0180)    and   A, ~BPF4_4KHz_CNUMMASK                  ; clear C1L bits in A
08C5: 2B 00    OR    A,[X+0]            (0181)    or    A, [X]                                  ; combine C1L value with balance of reg.
08C7: 60 80    MOV   REG[0x80],A        (0182)    mov   reg[BPF4_4KHz_FILT_C1L_REG], A          ; move complete value back to register
08C9: 18       POP   A                  (0183)    pop   A
08CA: 70 3F    AND   F,0x3F             
08CC: 71 C0    OR    F,0xC0             (0184)    RAM_EPILOGUE RAM_USE_CLASS_2
08CE: 7F       RET                      (0185)    ret
                                        (0186) .ENDSECTION
                                        (0187)    
                                        (0188) .SECTION
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;  FUNCTION NAME: BPF4_4KHz_SetC2L
                                        (0191) ;
                                        (0192) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0193) ;                 of the capacitor C2L
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  ARGUMENTS:    The A register contains a non-negative integer less than 32
                                        (0196) ;  RETURNS:
                                        (0197) ;  SIDE EFFECTS: 
                                        (0198) ;    The A and X registers may be modified by this or future implementations
                                        (0199) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0200) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0201) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0202) ;    functions.
                                        (0203) 
                                        (0204)  BPF4_4KHz_SetC2L:
                                        (0205) _BPF4_4KHz_SetC2L:
                                        (0206)    RAM_PROLOGUE RAM_USE_CLASS_2
08CF: 21 1F    AND   A,0x1F             (0207)    and   A, BPF4_4KHz_CNUMMASK                   ; mask A to protect unchanged bits
08D1: 4F       MOV   X,SP               (0208)    mov   X, SP                                   ; define temp store location
08D2: 08       PUSH  A                  (0209)    push  A                                       ; put C2L value in temp store
08D3: 5D 81    MOV   A,REG[0x81]        (0210)    mov   A, reg[BPF4_4KHz_FILT_C2L_REG]          ; read current C2L
08D5: 21 E0    AND   A,0xE0             (0211)    and   A, ~BPF4_4KHz_CNUMMASK                  ; clear C2L bits in A
08D7: 2B 00    OR    A,[X+0]            (0212)    or    A, [X]                                  ; combine C2L value with balance of reg.
08D9: 60 81    MOV   REG[0x81],A        (0213)    mov   reg[BPF4_4KHz_FILT_C2L_REG], A          ; move complete value back to register
08DB: 18       POP   A                  (0214)    pop   A
08DC: 70 3F    AND   F,0x3F             
08DE: 71 C0    OR    F,0xC0             (0215)    RAM_EPILOGUE RAM_USE_CLASS_2
08E0: 7F       RET                      (0216)    ret
                                        (0217) .ENDSECTION
                                        (0218)    
                                        (0219) .SECTION
                                        (0220) ;-----------------------------------------------------------------------------
                                        (0221) ;  FUNCTION NAME: BPF4_4KHz_SetC3L
                                        (0222) ;
                                        (0223) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0224) ;                 of the capacitor C3L
                                        (0225) ;-----------------------------------------------------------------------------
                                        (0226) ;  ARGUMENTS:    The A register contains a non-negative integer less than 32
                                        (0227) ;  RETURNS:
                                        (0228) ;  SIDE EFFECTS: 
                                        (0229) ;    The A and X registers may be modified by this or future implementations
                                        (0230) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0231) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0232) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0233) ;    functions.
                                        (0234)    
                                        (0235)  BPF4_4KHz_SetC3L:
                                        (0236) _BPF4_4KHz_SetC3L:
                                        (0237)    RAM_PROLOGUE RAM_USE_CLASS_2
08E1: 21 1F    AND   A,0x1F             (0238)    and   A, BPF4_4KHz_CNUMMASK                   ; mask A to protect unchanged bits
08E3: 4F       MOV   X,SP               (0239)    mov   X, SP                                   ; define temp store location
08E4: 08       PUSH  A                  (0240)    push  A                                       ; put C3L value in temp store
08E5: 5D 90    MOV   A,REG[0x90]        (0241)    mov   A, reg[BPF4_4KHz_FILT_C3L_REG]          ; read current C3L
08E7: 21 E0    AND   A,0xE0             (0242)    and   A, ~BPF4_4KHz_CNUMMASK                  ; clear C3L bits in A
08E9: 2B 00    OR    A,[X+0]            (0243)    or    A, [X]                                  ; combine C3L value with balance of reg.
08EB: 60 90    MOV   REG[0x90],A        (0244)    mov   reg[BPF4_4KHz_FILT_C3L_REG], A          ; move complete value back to register
08ED: 18       POP   A                  (0245)    pop   A
08EE: 70 3F    AND   F,0x3F             
08F0: 71 C0    OR    F,0xC0             (0246)    RAM_EPILOGUE RAM_USE_CLASS_2
08F2: 7F       RET                      (0247)    ret
                                        (0248) .ENDSECTION
                                        (0249)    
                                        (0250) .SECTION
                                        (0251) ;-----------------------------------------------------------------------------
                                        (0252) ;  FUNCTION NAME: BPF4_4KHz_SetC4L
                                        (0253) ;
                                        (0254) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0255) ;                 of the capacitor C4L
                                        (0256) ;-----------------------------------------------------------------------------
                                        (0257) ;  ARGUMENTS:    The A register contains a non-negative integer less than 32
                                        (0258) ;  RETURNS:
                                        (0259) ;  SIDE EFFECTS: 
                                        (0260) ;    The A and X registers may be modified by this or future implementations
                                        (0261) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0262) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0263) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0264) ;    functions. 
                                        (0265) 
                                        (0266)  BPF4_4KHz_SetC4L:
                                        (0267) _BPF4_4KHz_SetC4L:
                                        (0268)    RAM_PROLOGUE RAM_USE_CLASS_2
08F3: 21 1F    AND   A,0x1F             (0269)    and   A, BPF4_4KHz_CNUMMASK                   ; mask A to protect unchanged bits
08F5: 4F       MOV   X,SP               (0270)    mov   X, SP                                   ; define temp store location
08F6: 08       PUSH  A                  (0271)    push  A                                       ; put C4L value in temp store
08F7: 5D 92    MOV   A,REG[0x92]        (0272)    mov   A, reg[BPF4_4KHz_FILT_C4L_REG]          ; read current C4L
08F9: 21 E0    AND   A,0xE0             (0273)    and   A, ~BPF4_4KHz_CNUMMASK                  ; clear C4L bits in A
08FB: 2B 00    OR    A,[X+0]            (0274)    or    A, [X]                                  ; combine C4L value with balance of reg.
08FD: 60 92    MOV   REG[0x92],A        (0275)    mov   reg[BPF4_4KHz_FILT_C4L_REG], A          ; move complete value back to register
08FF: 18       POP   A                  (0276)    pop   A
0900: 70 3F    AND   F,0x3F             
0902: 71 C0    OR    F,0xC0             (0277)    RAM_EPILOGUE RAM_USE_CLASS_2
0904: 7F       RET                      (0278)    ret
                                        (0279) .ENDSECTION 
                                        (0280)   
                                        (0281) .SECTION
                                        (0282) ;-----------------------------------------------------------------------------
                                        (0283) ;  FUNCTION NAME: BPF4_4KHz_SetC1H
                                        (0284) ;
                                        (0285) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0286) ;                 of the capacitor C1H
                                        (0287) ;-----------------------------------------------------------------------------
                                        (0288) ;  ARGUMENTS:    The A register contains a non-negative integer less than 32
                                        (0289) ;  RETURNS:
                                        (0290) ;  SIDE EFFECTS: 
                                        (0291) ;    The A and X registers may be modified by this or future implementations
                                        (0292) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0293) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0294) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0295) ;    functions.
                                        (0296) 
                                        (0297)  BPF4_4KHz_SetC1H:
                                        (0298) _BPF4_4KHz_SetC1H:
                                        (0299)    RAM_PROLOGUE RAM_USE_CLASS_2
0905: 21 1F    AND   A,0x1F             (0300)    and   A, BPF4_4KHz_CNUMMASK                   ; mask A to protect unchanged bits
0907: 4F       MOV   X,SP               (0301)    mov   X, SP                                   ; define temp store location
0908: 08       PUSH  A                  (0302)    push  A                                       ; put C1H value in temp store
0909: 5D 94    MOV   A,REG[0x94]        (0303)    mov   A, reg[BPF4_4KHz_FILT_C1H_REG]          ; read current C1H
090B: 21 E0    AND   A,0xE0             (0304)    and   A, ~BPF4_4KHz_CNUMMASK                  ; clear C1H bits in A
090D: 2B 00    OR    A,[X+0]            (0305)    or    A, [X]                                  ; combine C1H value with balance of reg.
090F: 60 94    MOV   REG[0x94],A        (0306)    mov   reg[BPF4_4KHz_FILT_C1H_REG], A          ; move complete value back to register
0911: 18       POP   A                  (0307)    pop   A
0912: 70 3F    AND   F,0x3F             
0914: 71 C0    OR    F,0xC0             (0308)    RAM_EPILOGUE RAM_USE_CLASS_2
0916: 7F       RET                      (0309)    ret
                                        (0310) .ENDSECTION
                                        (0311)    
                                        (0312) .SECTION
                                        (0313) ;-----------------------------------------------------------------------------
                                        (0314) ;  FUNCTION NAME: BPF4_4KHz_SetC2H
                                        (0315) ;
                                        (0316) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0317) ;                 of the capacitor C2H
                                        (0318) ;-----------------------------------------------------------------------------
                                        (0319) ;  ARGUMENTS:    The A register contains a non-negative integer less than 32
                                        (0320) ;  RETURNS:
                                        (0321) ;  SIDE EFFECTS: 
                                        (0322) ;    The A and X registers may be modified by this or future implementations
                                        (0323) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0324) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0325) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0326) ;    functions.
                                        (0327)    
                                        (0328)  BPF4_4KHz_SetC2H:
                                        (0329) _BPF4_4KHz_SetC2H:
                                        (0330)    RAM_PROLOGUE RAM_USE_CLASS_2
0917: 21 1F    AND   A,0x1F             (0331)    and   A, BPF4_4KHz_CNUMMASK                   ; mask A to protect unchanged bits
0919: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; define temp store location
091A: 08       PUSH  A                  (0333)    push  A                                       ; put C2H value in temp store
091B: 5D 95    MOV   A,REG[0x95]        (0334)    mov   A, reg[BPF4_4KHz_FILT_C2H_REG]          ; read current C2H
091D: 21 E0    AND   A,0xE0             (0335)    and   A, ~BPF4_4KHz_CNUMMASK                  ; clear C2H bits in A
091F: 2B 00    OR    A,[X+0]            (0336)    or    A, [X]                                  ; combine C2H value with balance of reg.
0921: 60 95    MOV   REG[0x95],A        (0337)    mov   reg[BPF4_4KHz_FILT_C2H_REG], A          ; move complete value back to register
0923: 18       POP   A                  (0338)    pop   A
0924: 70 3F    AND   F,0x3F             
0926: 71 C0    OR    F,0xC0             (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
0928: 7F       RET                      (0340)    ret
                                        (0341) .ENDSECTION
                                        (0342)    
                                        (0343) .SECTION
                                        (0344) ;-----------------------------------------------------------------------------
                                        (0345) ;  FUNCTION NAME: BPF4_4KHz_SetC3H
                                        (0346) ;
                                        (0347) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0348) ;                 of the capacitor C3H
                                        (0349) ;-----------------------------------------------------------------------------
                                        (0350) ;  ARGUMENTS:    The A register contains a non-negative integer less than 32
                                        (0351) ;  RETURNS:
                                        (0352) ;  SIDE EFFECTS: 
                                        (0353) ;    The A and X registers may be modified by this or future implementations
                                        (0354) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0355) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0356) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0357) ;    functions.
                                        (0358)    
                                        (0359)  BPF4_4KHz_SetC3H:
                                        (0360) _BPF4_4KHz_SetC3H:
                                        (0361)    RAM_PROLOGUE RAM_USE_CLASS_2
0929: 21 1F    AND   A,0x1F             (0362)    and   A, BPF4_4KHz_CNUMMASK                   ; mask A to protect unchanged bits
092B: 4F       MOV   X,SP               (0363)    mov   X, SP                                   ; define temp store location
092C: 08       PUSH  A                  (0364)    push  A                                       ; put C3H value in temp store
092D: 5D 84    MOV   A,REG[0x84]        (0365)    mov   A, reg[BPF4_4KHz_FILT_C3H_REG]          ; read current C3H
092F: 21 E0    AND   A,0xE0             (0366)    and   A, ~BPF4_4KHz_CNUMMASK                  ; clear C3H bits in A
0931: 2B 00    OR    A,[X+0]            (0367)    or    A, [X]                                  ; combine C3H value with balance of reg.
0933: 60 84    MOV   REG[0x84],A        (0368)    mov   reg[BPF4_4KHz_FILT_C3H_REG], A          ; move complete value back to register
0935: 18       POP   A                  (0369)    pop   A
0936: 70 3F    AND   F,0x3F             
0938: 71 C0    OR    F,0xC0             (0370)    RAM_EPILOGUE RAM_USE_CLASS_2
093A: 7F       RET                      (0371)    ret
                                        (0372) .ENDSECTION
                                        (0373)    
                                        (0374) .SECTION
                                        (0375) ;-----------------------------------------------------------------------------
                                        (0376) ;  FUNCTION NAME: BPF4_4KHz_SetC4H
                                        (0377) ;
                                        (0378) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0379) ;                 of the capacitor C4H
                                        (0380) ;-----------------------------------------------------------------------------
                                        (0381) ;  ARGUMENTS:    The A register contains a non-negative integer less than 32
                                        (0382) ;  RETURNS:
                                        (0383) ;  SIDE EFFECTS: 
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389)    
                                        (0390)  BPF4_4KHz_SetC4H:
                                        (0391) _BPF4_4KHz_SetC4H:
                                        (0392)    RAM_PROLOGUE RAM_USE_CLASS_2
093B: 21 1F    AND   A,0x1F             (0393)    and   A, BPF4_4KHz_CNUMMASK                   ; mask A to protect unchanged bits
093D: 4F       MOV   X,SP               (0394)    mov   X, SP                                   ; define temp store location
093E: 08       PUSH  A                  (0395)    push  A                                       ; put C4H value in temp store
093F: 5D 86    MOV   A,REG[0x86]        (0396)    mov   A, reg[BPF4_4KHz_FILT_C4H_REG]          ; read current C4H
0941: 21 E0    AND   A,0xE0             (0397)    and   A, ~BPF4_4KHz_CNUMMASK                  ; clear C4H bits in A
0943: 2B 00    OR    A,[X+0]            (0398)    or    A, [X]                                  ; combine C4H value with balance of reg.
0945: 60 86    MOV   REG[0x86],A        (0399)    mov   reg[BPF4_4KHz_FILT_C4H_REG], A          ; move complete value back to register
0947: 18       POP   A                  (0400)    pop   A
0948: 70 3F    AND   F,0x3F             
094A: 71 C0    OR    F,0xC0             (0401)    RAM_EPILOGUE RAM_USE_CLASS_2
094C: 7F       RET                      (0402)    ret
(0403) .ENDSECTION
(0404) 
(0405) ; End of File BPF4_4KHz.asm
FILE: lib\amux4_mic.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   AMUX4_mic.asm
                                        (0004) ;;  Version: 1.4, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: AMux4 User Module software implementation file devices.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) 
                                        (0023) include "AMUX4_mic.inc"
                                        (0024) include "m8c.inc"
                                        (0025) include "memory.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  AMUX4_mic_InputSelect
                                        (0031) export _AMUX4_mic_InputSelect
                                        (0032) 
                                        (0033) export  AMUX4_mic_Start
                                        (0034) export _AMUX4_mic_Start
                                        (0035) 
                                        (0036) export  AMUX4_mic_Stop
                                        (0037) export _AMUX4_mic_Stop
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  EQUATES
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) MUXMASK:                     equ 03h
                                        (0044) 
                                        (0045) AREA UserModules (ROM, REL)
                                        (0046) .SECTION
                                        (0047) ;-----------------------------------------------------------------------------
                                        (0048) ;  FUNCTION NAME: AMUX4_mic_InputSelect
                                        (0049) ;
                                        (0050) ;  DESCRIPTION:
                                        (0051) ;    Place the signal from one of four port0 pins on the Analog Column bus.
                                        (0052) ;
                                        (0053) ;-----------------------------------------------------------------------------
                                        (0054) ;
                                        (0055) ;  ARGUMENTS:
                                        (0056) ;    A contains the mux input control value
                                        (0057) ;
                                        (0058) ;      Input           Code
                                        (0059) ;   Mux input 0,1       00h
                                        (0060) ;   Mux input 2,3       01h
                                        (0061) ;   Mux input 4,5       02h
                                        (0062) ;   Mux input 6,7       03h
                                        (0063) ;
                                        (0064) ;  RETURNS: none
                                        (0065) ;
                                        (0066) ;  SIDE EFFECTS:
                                        (0067) ;    The A and X registers may be modified by this or future implementations
                                        (0068) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0069) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0070) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0071) ;    functions.
                                        (0072) ;
                                        (0073)  AMUX4_mic_InputSelect:
                                        (0074) _AMUX4_mic_InputSelect:
                                        (0075)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0076) 	
                                        (0077) IF (AMUX4_mic_COL_COUNT)
                                        (0078) 	M8C_SetBank1      ; ACE_AMX_IN is in Bank 1
                                        (0079) ENDIF
                                        (0080) 	
094D: 21 03    AND   A,0x3              (0081)     and  A, MUXMASK                    ; Mask off only valid port0 input bits
094F: 57 00    MOV   X,0x0              (0082)     mov  X,AMUX4_mic_MUX_COL
                                        (0083) .AMUX4_ShiftIt:                         ; Shift value to correct bit position for Mux
0951: 79       DEC   X                  (0084)     dec  X
0952: C0 05    JC    0x0958             (0085)     jc   .AMUX4_SetIt
0954: 64       ASL   A                  (0086)     asl  A
0955: 64       ASL   A                  (0087)     asl  A
0956: 8F FA    JMP   0x0951             (0088)     jmp  .AMUX4_ShiftIt                ; Loop until bits shifted to 2 LSBs
                                        (0089) 
                                        (0090) .AMUX4_SetIt:
0958: 4F       MOV   X,SP               (0091)     mov  X,SP                          ; Get current stack location
0959: 08       PUSH  A                  (0092)     push A                             ; Save a to OR it to AMX_IN later	
                                        (0093) IF (AMUX4_mic_COL_COUNT)
                                        (0094) 	mov  A, reg[ACE_AMX_IN]                 ; Get current value of mux control register    
                                        (0095) ELSE
095A: 5D 60    MOV   A,REG[0x60]        (0096) 	mov  A, reg[AMX_IN]                 ; Get current value of mux control register
                                        (0097) ENDIF
095C: 21 FC    AND   A,0xFC             (0098)     and  A,~AMUX4_mic_MUX_MASK         ; Mask off the bits for this Mux
095E: 2B 00    OR    A,[X+0]            (0099)     or   A,[X]                         ; OR in the mux control bits
                                        (0100) IF (AMUX4_mic_COL_COUNT)
                                        (0101) 	mov  reg[ACE_AMX_IN], A                 ; Get current value of mux control register    
                                        (0102) ELSE
0960: 60 60    MOV   REG[0x60],A        (0103) 	mov  reg[AMX_IN], A                 ; Write out mux value to mux control register
                                        (0104) ENDIF	
0962: 18       POP   A                  (0105)     pop  A                             ; Restore the stack
                                        (0106) 	
                                        (0107) IF (AMUX4_mic_COL_COUNT)
                                        (0108) 	M8C_SetBank0
                                        (0109) ENDIF
0963: 70 3F    AND   F,0x3F             
0965: 71 C0    OR    F,0xC0             (0110)     RAM_EPILOGUE RAM_USE_CLASS_2
0967: 7F       RET                      (0111)     ret
                                        (0112) .ENDSECTION
                                        (0113) 
                                        (0114) .SECTION
                                        (0115) ;-----------------------------------------------------------------------------
                                        (0116) ;  FUNCTION NAME: AMUX4_mic_Start
                                        (0117) ;
                                        (0118) ;  DESCRIPTION:
                                        (0119) ;   This function does nothing at this time.  It is only here for
                                        (0120) ;   future compatibility.
                                        (0121) ;
                                        (0122) ;-----------------------------------------------------------------------------
                                        (0123) ;
                                        (0124) ;  ARGUMENTS: none
                                        (0125) ;
                                        (0126) ;  RETURNS: none
                                        (0127) ;
                                        (0128) ;  SIDE EFFECTS:
                                        (0129) ;    The A and X registers may be modified by this or future implementations
                                        (0130) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0131) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0132) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0133) ;    functions.
                                        (0134) ;
                                        (0135)  AMUX4_mic_Start:
                                        (0136) _AMUX4_mic_Start:
                                        (0137)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0138)     RAM_EPILOGUE RAM_USE_CLASS_1
0968: 7F       RET                      (0139)     ret
                                        (0140) .ENDSECTION
                                        (0141) 
                                        (0142) .SECTION
                                        (0143) ;-----------------------------------------------------------------------------
                                        (0144) ;  FUNCTION NAME: AMUX4_mic_Stop
                                        (0145) ;
                                        (0146) ;  DESCRIPTION:
                                        (0147) ;   This function does nothing at this time.  It is only here for
                                        (0148) ;   future compatibility.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) ;
                                        (0152) ;  ARGUMENTS:  none
                                        (0153) ;
                                        (0154) ;  RETURNS: none
                                        (0155) ;
                                        (0156) ;  SIDE EFFECTS:
                                        (0157) ;    The A and X registers may be modified by this or future implementations
                                        (0158) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0159) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0160) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0161) ;    functions.
                                        (0162) ;
                                        (0163)  AMUX4_mic_Stop:
                                        (0164) _AMUX4_mic_Stop:
                                        (0165)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0166)     RAM_EPILOGUE RAM_USE_CLASS_1
0969: 7F       RET                      (0167)     ret
(0168) .ENDSECTION
(0169) ; End of File AMUX4_mic.asm
FILE: lib\adcincvr_potint.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   ADCINCVR_potINT.asm
                                        (0004) ;;  Version: 3.1, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: ADCINCVR Interrupt Service Routines
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "ADCINCVR_pot.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export _ADCINCVR_pot_CNT_ISR
                                        (0021) export _ADCINCVR_pot_PWM16_ISR
                                        (0022) export  ADCINCVR_pot_cCounterU
                                        (0023) export _ADCINCVR_pot_iResult
                                        (0024) export  ADCINCVR_pot_iResult
                                        (0025) export _ADCINCVR_pot_bfStatus
                                        (0026) export  ADCINCVR_pot_bfStatus
                                        (0027) export  ADCINCVR_pot_bSampC
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) AREA InterruptRAM(RAM, REL, CON)
                                        (0033) 
                                        (0034)  ADCINCVR_pot_cCounterU:     BLK   1  ;The Upper byte of the Counter
                                        (0035) _ADCINCVR_pot_iResult:
                                        (0036)  ADCINCVR_pot_iResult:       BLK   2  ;A/D value
                                        (0037) _ADCINCVR_pot_bfStatus:
                                        (0038)  ADCINCVR_pot_bfStatus:      BLK   1  ;Data Valid Flag
                                        (0039)  ADCINCVR_pot_bSampC:        BLK   1  ;# of times to run A/D
                                        (0040) 
                                        (0041) 
                                        (0042) ;-----------------------------------------------
                                        (0043) ;  EQUATES and TABLES
                                        (0044) ;-----------------------------------------------
                                        (0045) LowByte:   equ 1
                                        (0046) HighByte:  equ 0
                                        (0047) 
                                        (0048) 
                                        (0049) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0050) ;---------------------------------------------------
                                        (0051) ; Insert your custom declarations below this banner
                                        (0052) ;---------------------------------------------------
                                        (0053) 
                                        (0054) ;------------------------
                                        (0055) ; Includes
                                        (0056) ;------------------------
                                        (0057) 
                                        (0058) 	
                                        (0059) ;------------------------
                                        (0060) ;  Constant Definitions
                                        (0061) ;------------------------
                                        (0062) 
                                        (0063) 
                                        (0064) ;------------------------
                                        (0065) ; Variable Allocation
                                        (0066) ;------------------------
                                        (0067) 
                                        (0068) 
                                        (0069) ;---------------------------------------------------
                                        (0070) ; Insert your custom declarations above this banner
                                        (0071) ;---------------------------------------------------
                                        (0072) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0073) 
                                        (0074) AREA UserModules (ROM, REL)
                                        (0075) 
                                        (0076) .LITERAL
                                        (0077) ADCINCVR_potMaxNegX4Table:
                                        (0078) ; Bits  7    8    9   10   11   12   13
                                        (0079)    DB  FFh, FEh, FCh, F8h, F0h, E0h, C0h
                                        (0080) 
                                        (0081) ADCINCVR_potMaxPosX4Table:
                                        (0082) IF (ADCINCVR_pot_DATA_FORMAT)
                                        (0083) ; Bits (signed)    7    8    9   10   11   12   13
                                        (0084)               DB  01h, 02h, 04h, 08h, 10h, 20h, 40h
                                        (0085) ELSE
                                        (0086) ; Bits (unsigned)  7    8    9   10   11   12   13
                                        (0087)               DB  02h, 04h, 08h, 10h, 20h, 40h, 80h
                                        (0088) 
                                        (0089)  ENDIF
                                        (0090) .ENDLITERAL
                                        (0091) 
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) ;  FUNCTION NAME: _ADCINCVR_pot_CNT_ISR (Counter8 Interrupt)
                                        (0094) ;
                                        (0095) ;
                                        (0096) ;  DESCRIPTION:
                                        (0097) ;     Increment the upper (software) half on the counter whenever the
                                        (0098) ;     lower (hardware) half of the counter underflows.  This counter
                                        (0099) ;     should start out at the most negative value (0xFF).
                                        (0100) ;
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;
                                        (0103) _ADCINCVR_pot_CNT_ISR:

0978: 76 09    INC   [0x9]              (0104)    inc [ADCINCVR_pot_cCounterU]
                                        (0105)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0106)    ;---------------------------------------------------
                                        (0107)    ; Insert your custom code below this banner
                                        (0108)    ;---------------------------------------------------
                                        (0109)    ;   NOTE: interrupt service routines must preserve
                                        (0110)    ;   the values of the A and X CPU registers.
                                        (0111) 
                                        (0112)    ;---------------------------------------------------
                                        (0113)    ; Insert your custom code above this banner
                                        (0114)    ;---------------------------------------------------
                                        (0115)    ;@PSoC_UserCode_END@ (Do not change this line.)
097A: 7E       RETI                     (0116)    reti
                                        (0117) 
                                        (0118) 
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: _ADCINCVR_pot_PWM16_ISR  (PWM16 Interrupt)
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     This ISR is called when the ADC has completed and integrate cycle.
                                        (0124) ;     The ADC value is calculated and stored in a global location before
                                        (0125) ;     the end of the ISR.
                                        (0126) ;
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;
                                        (0129) _ADCINCVR_pot_PWM16_ISR:
097B: 41 2F FE AND   REG[0x2F],0xFE     (0130)    and   reg[ADCINCVR_pot_bCounter_CR0], ~ADCINCVR_pot_fDBLK_ENABLE  ; Disable Counter
                                        (0131) IF ADCINCVR_pot_NoAZ
097E: 43 9A 20 OR    REG[0x9A],0x20     (0132)    or    reg[ADCINCVR_pot_bfAtoDcr2], ADCINCVR_pot_fAutoZero      ; Put Integrator in AutoZero
                                        (0133) ENDIF
0981: 43 9B 10 OR    REG[0x9B],0x10     (0134)    or   reg[ADCINCVR_pot_bfAtoDcr3],ADCINCVR_pot_fFSW0        ; Put Integrator in reset
                                        (0135) 
                                        (0136)                                                            ; Enable interrupts for a short period of time just in case.
                                        (0137)                                                            ; Make sure we didn't have a counter interrupt ready to fire
0984: 71 01    OR    F,0x1              (0138)    M8C_EnableGInt
0986: 40       NOP                      (0139)    nop                                                     ; Wait a couple cycles
0987: 70 FE    AND   F,0xFE             (0140)    M8C_DisableGInt                                         ; Disable interrupt, read to complete processing
0989: 08       PUSH  A                  (0141)    push  A                                                 ; Save the Accumulator
098A: 5D 2C    MOV   A,REG[0x2C]        (0142)    mov   A,reg[ADCINCVR_pot_bCount]                        ; Read counter value  (Bogus read puts value in Period register)
098C: 5D 2E    MOV   A,REG[0x2E]        (0143)    mov   A,reg[ADCINCVR_pot_bCompare]                      ; Read counter value
098E: 78       DEC   A                  (0144)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
098F: 73       CPL   A                  (0145)    cpl   A                                                 ; Invert the value
0990: D0 03    JNC   0x0994             (0146)    jnc   ADCINCVR_pot_INT_CALCV                            ; if carry, then inc MSB as well
0992: 76 09    INC   [0x9]              (0147)    inc   [ADCINCVR_pot_cCounterU]
                                        (0148) ADCINCVR_pot_INT_CALCV:
0994: 53 0B    MOV   [0xB],A            (0149)    mov   [(ADCINCVR_pot_iResult + LowByte)], A             ; Store LSB value
0996: 51 09    MOV   A,[0x9]            (0150)    mov   A, [ADCINCVR_pot_cCounterU]                       ; Store MSB from temp counter
0998: 53 0A    MOV   [0xA],A            (0151)    mov   [(ADCINCVR_pot_iResult + HighByte)], A
                                        (0152)                                                            ; The new value has been stored,
                                        (0153)                                                            ; so get counters ready for next reading first.
099A: 62 2D FF MOV   REG[0x2D],0xFF     (0154)    mov   reg[ADCINCVR_pot_bPeriod], ffh                    ; Initialize counter to FF - Set to overflow after 256 counts
099D: 43 2F 01 OR    REG[0x2F],0x1      (0155)    or    reg[ADCINCVR_pot_bCounter_CR0],ADCINCVR_pot_fDBLK_ENABLE  ; Enable Counter
                                        (0156) 
                                        (0157) IF (ADCINCVR_pot_DATA_FORMAT)                              ; Only check for Negative numbers if SIGNED result
09A0: 51 0C    MOV   A,[0xC]            (0158)    mov   A, [ADCINCVR_pot_bfStatus]                        ; Get Status with Resolution
09A2: 21 0F    AND   A,0xF              (0159)    and   A, ADCINCVR_pot_bRES_MASK                         ; Mask of resolution
09A4: FF C4    INDEX 0x096A             (0160)    index ADCINCVR_potMaxNegX4Table                         ; Get Maximum negative value from table
09A6: 53 09    MOV   [0x9],A            (0161)    mov   [ADCINCVR_pot_cCounterU], A                       ; Place result back into MSB of counter
                                        (0162) ELSE
                                        (0163)    mov   [ADCINCVR_pot_cCounterU], 00h                     ; Place result back into MSB of counter
                                        (0164) ENDIF
                                        (0165) 
                                        (0166)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0167)    ;---------------------------------------------------
                                        (0168)    ; If the input is muxed with multiple inputs
                                        (0169)    ; this is a good place to change inputs.
                                        (0170)    ; Insert your custom code below this banner
                                        (0171)    ;---------------------------------------------------
                                        (0172)    ;   NOTE: interrupt service routines must preserve
                                        (0173)    ;   the values of the A and X CPU registers. At this
                                        (0174)    ;   point A is already preserved and will be restored;
                                        (0175)    ;   however, if you use X, you must take care of it
                                        (0176)    ;   here!
                                        (0177) 
                                        (0178)    ;---------------------------------------------------
                                        (0179)    ; Insert your custom code above this banner
                                        (0180)    ;---------------------------------------------------
                                        (0181)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0182) 
09A8: 41 9B EF AND   REG[0x9B],0xEF     (0183)    and   reg[ADCINCVR_pot_bfAtoDcr3],~ADCINCVR_pot_fFSW0   ; Take Integrator out of reset
                                        (0184) IF ADCINCVR_pot_NoAZ
09AB: 41 9A DF AND   REG[0x9A],0xDF     (0185)    and   reg[ADCINCVR_pot_bfAtoDcr2],~ADCINCVR_pot_fAutoZero  ; Take Integrator out of AutoZero
                                        (0186) ENDIF
                                        (0187) 
                                        (0188)    ;****************************************************************************
                                        (0189)    ;M8C_EnableGInt            ; May want to re-enable interrupts at this point,
                                        (0190)    ;                          ; if stack space isn't at a premium.
                                        (0191)    ; NOTE:  this will make system more responsive but, will increase the
                                        (0192)    ;        overall processing time of the A/D calctime.  If an interrupt is
                                        (0193)    ;        taken, it must return within the specified CalcTime to guarantee
                                        (0194)    ;        successful acquisition of the next byte.
                                        (0195)    ;****************************************************************************
                                        (0196) IF (ADCINCVR_pot_DATA_FORMAT)                    ; Only check for Negative numbers if SIGNED result
                                        (0197) 
                                        (0198)                                                  ; Negative Overflow Check
09AE: 47 0A 80 TST   [0xA],0x80         (0199)    tst   [(ADCINCVR_pot_iResult + HighByte)],80h
09B1: B0 17    JNZ   0x09C9             (0200)    jnz   ADCINCVR_pot_NOT_POVFL2
                                        (0201) 
                                        (0202) ENDIF
                                        (0203)                                                  ; Postive Overflow Check
                                        (0204)                                                  ; Get MSB of Max Positive value x4 + 1
09B3: 51 0C    MOV   A,[0xC]            (0205)    mov   A,[ADCINCVR_pot_bfStatus]               ; Get Status with Resolution
09B5: 21 0F    AND   A,0xF              (0206)    and   A,ADCINCVR_pot_bRES_MASK                ; Mask of resolution normalized to 0
09B7: FF B8    INDEX 0x0971             (0207)    index ADCINCVR_potMaxPosX4Table               ; Get Maximum positive value x4 + 1 from table
09B9: 08       PUSH  A                  (0208)    push  A
09BA: 22 0A    AND   A,[0xA]            (0209)    and   A, [(ADCINCVR_pot_iResult + HighByte)]
09BC: A0 0B    JZ    0x09C8             (0210)    jz    ADCINCVR_pot_NOT_POVFL
                                        (0211)                                                  ; Positive overflow, fix it - set to Max Positive + 1
09BE: 18       POP   A                  (0212)    pop   A
09BF: 11 01    SUB   A,0x1              (0213)    sub   A, 01h
                                        (0214) 
                                        (0215)                                                  ; Force most positive * 4 into result
09C1: 53 0A    MOV   [0xA],A            (0216)    mov   [(ADCINCVR_pot_iResult + HighByte)], A
09C3: 55 0B FF MOV   [0xB],0xFF         (0217)    mov   [(ADCINCVR_pot_iResult + LowByte)], ffh
09C6: 80 02    JMP   0x09C9             (0218)    jmp   ADCINCVR_pot_NOT_POVFL2
                                        (0219) ADCINCVR_pot_NOT_POVFL:
09C8: 18       POP   A                  (0220)    pop   A
                                        (0221) 
                                        (0222) ADCINCVR_pot_NOT_POVFL2:
09C9: 68 0A    ASR   [0xA]              (0223)    asr   [(ADCINCVR_pot_iResult + HighByte)]     ; Shift MSB and LSB right twice to divide by four
09CB: 6E 0B    RRC   [0xB]              (0224)    rrc   [(ADCINCVR_pot_iResult + LowByte)]      ; Remember digital clock 4 times analog clock
09CD: 68 0A    ASR   [0xA]              (0225)    asr   [(ADCINCVR_pot_iResult + HighByte)]
09CF: 6E 0B    RRC   [0xB]              (0226)    rrc   [(ADCINCVR_pot_iResult + LowByte)]
                                        (0227) 
                                        (0228)    ;@PSoC_UserCode_BODY_3@ (Do not change this line.)
                                        (0229)    ;---------------------------------------------------
                                        (0230)    ; Data is ready at this point.
                                        (0231)    ; If processing Data at Interrupt level - add
                                        (0232)    ; User Code to handle the data below this banner
                                        (0233)    ;---------------------------------------------------
                                        (0234)    ;   NOTE: interrupt service routines must preserve
                                        (0235)    ;   the values of the A and X CPU registers. At this
                                        (0236)    ;   point A is already preserved and will be restored;
                                        (0237)    ;   however, if you use X, you must take care of it
                                        (0238)    ;   here!
                                        (0239) 
                                        (0240)    ;---------------------------------------------------
                                        (0241)    ; Insert your custom code above this banner
                                        (0242)    ;---------------------------------------------------
                                        (0243)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0244) 
09D1: 18       POP   A                  (0245)    pop   A                                       ; Restore A, not used any more
                                        (0246) 
09D2: 2E 0C 10 OR    [0xC],0x10         (0247)    or    [ADCINCVR_pot_bfStatus],ADCINCVR_pot_fDATA_READY  ; Set Data ready bit
                                        (0248) 
09D5: 47 0D FF TST   [0xD],0xFF         (0249)    tst   [ADCINCVR_pot_bSampC], ffh              ; If sample_counter == 0 -->> continuous data collection
09D8: A0 17    JZ    0x09F0             (0250)    jz    ADCINCVR_pot_END_PWM16_ISR
                                        (0251) 
09DA: 7A 0D    DEC   [0xD]              (0252)    dec   [ADCINCVR_pot_bSampC]                   ; Dec sample counter and check for zero
09DC: B0 13    JNZ   0x09F0             (0253)    jnz   ADCINCVR_pot_END_PWM16_ISR
                                        (0254) 
                                        (0255)    ;**********************************************
                                        (0256)    ; Turn off ADC
                                        (0257)    ;**********************************************
09DE: 41 33 FE AND   REG[0x33],0xFE     (0258)    and   reg[ADCINCVR_pot_fPWM_LSB_CR0], ~ADCINCVR_pot_fDBLK_ENABLE     ; Disable the PWM
09E1: 41 2F FE AND   REG[0x2F],0xFE     (0259)    and   reg[ADCINCVR_pot_bCounter_CR0], ~ADCINCVR_pot_fDBLK_ENABLE           ; Disable the Counter
                                        (0260) IF ADCINCVR_pot_NoAZ
09E4: 43 9A 20 OR    REG[0x9A],0x20     (0261)    or    reg[ADCINCVR_pot_bfAtoDcr2], ADCINCVR_pot_fAutoZero   ; Put the Integrator into Autozero mode
                                        (0262) ENDIF
09E7: 43 9B 10 OR    REG[0x9B],0x10     (0263)    or    reg[ADCINCVR_pot_bfAtoDcr3], ADCINCVR_pot_fFSW0       ; Put Integrator into reset
09EA: 41 E1 DF AND   REG[0xE1],0xDF     (0264)    and   reg[ADCINCVR_pot_bfPWM16_INT_REG], ~ADCINCVR_pot_bfPWM16_Mask      ; Disable interrupts
09ED: 41 E1 F7 AND   REG[0xE1],0xF7     (0265)    and   reg[ADCINCVR_pot_bfCounter_INT_REG], ~ADCINCVR_pot_bfCounter_Mask
                                        (0266) 
                                        (0267) ADCINCVR_pot_END_PWM16_ISR:
09F0: 7E       RETI                     (0268)    reti
(0269) 
(0270) ; End of File ADCINCVR_potINT.asm
FILE: lib\adcincvr_pot.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  ADCINCVR_pot.asm
                                        (0004) ;;  Version: 3.1, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: ADCINCVR User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "ADCINCVR_pot.inc"
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  ADCINCVR_pot_Start
                                        (0030) export _ADCINCVR_pot_Start
                                        (0031) export  ADCINCVR_pot_SetPower
                                        (0032) export _ADCINCVR_pot_SetPower
                                        (0033) export  ADCINCVR_pot_Stop
                                        (0034) export _ADCINCVR_pot_Stop
                                        (0035) export  ADCINCVR_pot_GetSamples
                                        (0036) export _ADCINCVR_pot_GetSamples
                                        (0037) export  ADCINCVR_pot_StopAD
                                        (0038) export _ADCINCVR_pot_StopAD
                                        (0039) export  ADCINCVR_pot_fIsData
                                        (0040) export _ADCINCVR_pot_fIsData
                                        (0041) export  ADCINCVR_pot_fIsDataAvailable
                                        (0042) export _ADCINCVR_pot_fIsDataAvailable
                                        (0043) export  ADCINCVR_pot_iGetData
                                        (0044) export _ADCINCVR_pot_iGetData
                                        (0045) export  ADCINCVR_pot_ClearFlag
                                        (0046) export _ADCINCVR_pot_ClearFlag
                                        (0047) export  ADCINCVR_pot_iGetDataClearFlag
                                        (0048) export _ADCINCVR_pot_iGetDataClearFlag
                                        (0049) export  ADCINCVR_pot_SetResolution
                                        (0050) export _ADCINCVR_pot_SetResolution
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ;  EQUATES
                                        (0054) ;-----------------------------------------------
                                        (0055) LowByte:       equ 1
                                        (0056) HighByte:      equ 0
                                        (0057) 
                                        (0058) ; Calctime parameters
                                        (0059) wCalcTime:     equ   ADCINCVR_pot_bCALCTIME
                                        (0060) 
                                        (0061) AREA UserModules (ROM, REL)
                                        (0062) 
                                        (0063) .SECTION
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;  FUNCTION NAME: ADCINCVR_pot_Start
                                        (0066) ;  FUNCTION NAME: ADCINCVR_pot_SetPower
                                        (0067) ;
                                        (0068) ;  DESCRIPTION:
                                        (0069) ;  Applies power setting to the module's analog PSoc block.
                                        (0070) ;
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;
                                        (0073) ;  ARGUMENTS:
                                        (0074) ;   A  Contains power level setting 0 to 3
                                        (0075) ;
                                        (0076) ;  RETURNS:  NA
                                        (0077) ;
                                        (0078) ;  SIDE EFFECTS:
                                        (0079) ;    The A and X registers may be modified by this or future implementations
                                        (0080) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0081) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0082) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0083) ;    functions.
                                        (0084) ;          
                                        (0085) ;    Currently only the page pointer registers listed below are modified:
                                        (0086) ;          CUR_PP
                                        (0087) ;
                                        (0088)  ADCINCVR_pot_Start:
                                        (0089) _ADCINCVR_pot_Start:
                                        (0090)  ADCINCVR_pot_SetPower:
                                        (0091) _ADCINCVR_pot_SetPower:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_2
09F1: 62 D0 00 MOV   REG[0xD0],0x0      (0094)    RAM_SETPAGE_CUR >ADCINCVR_pot_bfStatus
                                        (0095)    
09F4: 4F       MOV   X,SP               (0096)    mov   X, SP                                       ; Get location of next location on stack
09F5: 21 03    AND   A,0x3              (0097)    and   A,ADCINCVR_pot_bfPOWERMASK                  ; Mask only the valid power setting bits
09F7: 08       PUSH  A                  (0098)    push  A                                           ; Save power value on temp location
09F8: 5D 9B    MOV   A,REG[0x9B]        (0099)    mov   A, reg[ADCINCVR_pot_bfAtoDcr3]              ; Get current value of AtoDcr3
09FA: 21 FC    AND   A,0xFC             (0100)    and   A, ~ADCINCVR_pot_bfPOWERMASK                ; Mask off old power value
09FC: 2B 00    OR    A,[X+0]            (0101)    or    A, [X]                                      ; OR in new power value
09FE: 29 F0    OR    A,0xF0             (0102)    or    A, f0h                                      ; Make sure other register is set correctly
0A00: 60 9B    MOV   REG[0x9B],A        (0103)    mov   reg[ADCINCVR_pot_bfAtoDcr3], A              ; Reload CR with new power value
                                        (0104) 
0A02: 49 9A 01 TST   REG[0x9A],0x1      (0105)    tst   reg[ADCINCVR_pot_bfAtoDcr2], ADCINCVR_pot_fRES_SET
0A05: A0 05    JZ    0x0A0B             (0106)    jz    .DoNotLoadRes
0A07: 50 04    MOV   A,0x4              (0107)    mov   A,ADCINCVR_pot_bNUMBITS - ADCINCVR_pot_bMINRES         ; get and set the resolution
0A09: 53 0C    MOV   [0xC],A            (0108)    mov   [ADCINCVR_pot_bfStatus], A              ; place it in the status variable
                                        (0109) .DoNotLoadRes:
0A0B: 18       POP   A                  (0110)    pop   A                                           ; Restore the stack and power value
0A0C: 70 3F    AND   F,0x3F             
0A0E: 71 C0    OR    F,0xC0             (0111)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_4
0A10: 7F       RET                      (0113)    ret
                                        (0114) .ENDSECTION
                                        (0115) 
                                        (0116) .SECTION
                                        (0117) ;-----------------------------------------------------------------------------
                                        (0118) ;  FUNCTION NAME: ADCINCVR_pot_Stop
                                        (0119) ;
                                        (0120) ;  DESCRIPTION:
                                        (0121) ;  Removes power from the module's analog PSoc block, but the digital
                                        (0122) ;  blocks keep on running.
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) ;  ARGUMENTS: None
                                        (0127) ;
                                        (0128) ;  RETURNS:   NA
                                        (0129) ;
                                        (0130) ;  SIDE EFFECTS:
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  ADCINCVR_pot_Stop:
                                        (0138) _ADCINCVR_pot_Stop:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
0A11: 41 9B FC AND   REG[0x9B],0xFC     (0140)    and   reg[ADCINCVR_pot_bfAtoDcr3], ~ADCINCVR_pot_bfPOWERMASK
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
0A14: 7F       RET                      (0142)    ret
                                        (0143) .ENDSECTION
                                        (0144) 
                                        (0145) .SECTION
                                        (0146) ;-----------------------------------------------------------------------------
                                        (0147) ;  FUNCTION NAME: ADCINCVR_pot_Get_Samples
                                        (0148) ;
                                        (0149) ;  DESCRIPTION:
                                        (0150) ;  Starts the A/D convertor and will place data is memory.  A flag
                                        (0151) ;  is set whenever a new data value is available.
                                        (0152) ;
                                        (0153) ;-----------------------------------------------------------------------------
                                        (0154) ;
                                        (0155) ;  ARGUMENTS:
                                        (0156) ;  A  Number of samples to be taken.  A zero will cause the ADC to run
                                        (0157) ;     continuously.
                                        (0158) ;
                                        (0159) ;  RETURNS:  NA
                                        (0160) ;
                                        (0161) ;  SIDE EFFECTS:
                                        (0162) ;    The A and X registers may be modified by this or future implementations
                                        (0163) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0164) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0165) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0166) ;    functions.
                                        (0167) ;          
                                        (0168) ;    Currently only the page pointer registers listed below are modified:
                                        (0169) ;          CUR_PP
                                        (0170) ;
                                        (0171)  ADCINCVR_pot_GetSamples:
                                        (0172) _ADCINCVR_pot_GetSamples:
                                        (0173)    RAM_PROLOGUE RAM_USE_CLASS_4
0A15: 62 D0 00 MOV   REG[0xD0],0x0      (0174)    RAM_SETPAGE_CUR >ADCINCVR_pot_bfStatus
0A18: 53 0D    MOV   [0xD],A            (0175)    mov   [ADCINCVR_pot_bSampC], A                          ; Store sample count
                                        (0176)                                                            ; Interrupts, Put A/D in reset
0A1A: 51 0C    MOV   A,[0xC]            (0177)    mov   A,[ADCINCVR_pot_bfStatus]                         ; get and set the resolution
0A1C: 21 0F    AND   A,0xF              (0178)    and   A,ADCINCVR_pot_bRES_MASK
0A1E: 01 07    ADD   A,0x7              (0179)    add   A,ADCINCVR_pot_bMINRES
0A20: 90 5A    CALL  0x0A7C             (0180)    call  ADCINCVR_pot_SetResolution
                                        (0181) 
                                        (0182) ADCINCVR_pot_LoadMSBCounter:                               ; The PWM has been setup by SetResolution, now set the upper
                                        (0183)                                                            ; counter which will be the same as the period.
                                        (0184)                                                            ; Reset MSB of counter to most negative value
                                        (0185) 
0A22: 5D 36    MOV   A,REG[0x36]        (0186)    mov   A,reg[ADCINCVR_pot_bPWM_IntTime_MSB]              ; Get MSB of PWM and move it into RAM
0A24: 53 09    MOV   [0x9],A            (0187)    mov   [ADCINCVR_pot_cCounterU], A                       ; Use counter as temp location
0A26: 50 00    MOV   A,0x0              (0188)    mov   A, 00h                                            ; Load A with zero for the calculation
0A28: 12 09    SUB   A,[0x9]            (0189)    sub   A, [ADCINCVR_pot_cCounterU]                       ; 0 - MSB_PWM = MSB_of_most_neg_value
0A2A: 67       ASR   A                  (0190)    asr   A                                                 ; Half the range (+ and -)
                                        (0191) IF (ADCINCVR_pot_DATA_FORMAT)
0A2B: 53 09    MOV   [0x9],A            (0192)    mov   [ADCINCVR_pot_cCounterU], A                       ; Place result back into MSB of counter
                                        (0193) ELSE
                                        (0194)    mov   [ADCINCVR_pot_cCounterU], 00h                     ; Always start at zero for unsigned values
                                        (0195) ENDIF
0A2D: 5D 32    MOV   A,REG[0x32]        (0196)    mov   A, reg[ADCINCVR_pot_bPWM_IntTime_LSB]             ; Dummy Read  - required do not remove
0A2F: 62 2D FF MOV   REG[0x2D],0xFF     (0197)    mov   reg[ADCINCVR_pot_bPeriod], FFh                    ; Make sure counter starts at FF
                                        (0198) 
0A32: 41 9B EF AND   REG[0x9B],0xEF     (0199)    and   reg[ADCINCVR_pot_bfAtoDcr3],~ADCINCVR_pot_fFSW0   ; Take Integrator out of reset
                                        (0200) IF ADCINCVR_pot_NoAZ
0A35: 41 9A DF AND   REG[0x9A],0xDF     (0201)     and  reg[ADCINCVR_pot_bfAtoDcr2],~ADCINCVR_pot_fAutoZero  ; Take Integrator out of AutoZero
                                        (0202) ENDIF
                                        (0203) 
                                        (0204)                                                                ; Enable the A/D and Start it!
0A38: 43 2F 05 OR    REG[0x2F],0x5      (0205)    or    reg[ADCINCVR_pot_bCounter_CR0], (ADCINCVR_pot_fDBLK_ENABLE|ADCINCVR_pot_fPULSE_WIDE)   ; Enable the Counter
0A3B: 43 33 01 OR    REG[0x33],0x1      (0206)    or    reg[ADCINCVR_pot_fPWM_LSB_CR0], ADCINCVR_pot_fDBLK_ENABLE          ; Enable PWM
0A3E: 43 E1 20 OR    REG[0xE1],0x20     (0207)    or    reg[ADCINCVR_pot_bfPWM16_INT_REG], ADCINCVR_pot_bfPWM16_Mask    ; Enable Counter interrupts
0A41: 43 E1 08 OR    REG[0xE1],0x8      (0208)    or    reg[ADCINCVR_pot_bfCounter_INT_REG], ADCINCVR_pot_bfCounter_Mask
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_4
0A44: 7F       RET                      (0210)    ret
                                        (0211) .ENDSECTION
                                        (0212) 
                                        (0213) .SECTION
                                        (0214) ;-----------------------------------------------------------------------------
                                        (0215) ;  FUNCTION NAME: ADCINCVR_pot_StopAD
                                        (0216) ;
                                        (0217) ;  DESCRIPTION:
                                        (0218) ;  Completely shuts down the A/D is an orderly manner.  Both the
                                        (0219) ;  Timer and Counter are disabled and their interrupts are deactivated.
                                        (0220) ;
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:  None
                                        (0224) ;
                                        (0225) ;  RETURNS: NA
                                        (0226) ;
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  ADCINCVR_pot_StopAD:
                                        (0235) _ADCINCVR_pot_StopAD:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
0A45: 41 33 FE AND   REG[0x33],0xFE     (0237)    and   reg[ADCINCVR_pot_fPWM_LSB_CR0], ~ADCINCVR_pot_fDBLK_ENABLE     ; Disable the PWM
                                        (0238) 
0A48: 41 2F FE AND   REG[0x2F],0xFE     (0239)    and   reg[ADCINCVR_pot_bCounter_CR0], ~ADCINCVR_pot_fDBLK_ENABLE           ; Disable the Counter
                                        (0240) 
                                        (0241) IF ADCINCVR_pot_NoAZ
0A4B: 43 9A 20 OR    REG[0x9A],0x20     (0242)    or   reg[ADCINCVR_pot_bfAtoDcr2], ADCINCVR_pot_fAutoZero    ; Put the Integrator into Autozero mode
                                        (0243) ENDIF
                                        (0244) 
0A4E: 43 9B 10 OR    REG[0x9B],0x10     (0245)    or   reg[ADCINCVR_pot_bfAtoDcr3], ADCINCVR_pot_fFSW0        ; Put Integrator into reset
0A51: 08       PUSH  A                  (0246)    push A
0A52: 41 E1 DF AND   REG[0xE1],0xDF     (0247)    M8C_DisableIntMask ADCINCVR_pot_bfPWM16_INT_REG, ADCINCVR_pot_bfPWM16_Mask      ; Disable interrupts
0A55: 41 E1 F7 AND   REG[0xE1],0xF7     (0248)    M8C_DisableIntMask ADCINCVR_pot_bfCounter_INT_REG, ADCINCVR_pot_bfCounter_Mask
0A58: 18       POP   A                  (0249)    pop  A
                                        (0250)    RAM_EPILOGUE RAM_USE_CLASS_1
0A59: 7F       RET                      (0251)    ret
                                        (0252) .ENDSECTION
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: ADCINCVR_pot_fIsData
                                        (0257) ;  FUNCTION NAME: ADCINCVR_pot_fIsDataAvailable
                                        (0258) ;
                                        (0259) ;  DESCRIPTION:
                                        (0260) ;  Returns the status of the A/D Data is set whenever a new data
                                        (0261) ;  value is available.
                                        (0262) ;
                                        (0263) ;-----------------------------------------------------------------------------
                                        (0264) ;
                                        (0265) ;  ARGUMENTS: None
                                        (0266) ;
                                        (0267) ;  RETURNS:
                                        (0268) ;  A  Returns data status  A == 0 no data available
                                        (0269) ;                          A != 0 data available
                                        (0270) ;
                                        (0271) ;  SIDE EFFECTS:
                                        (0272) ;    The A and X registers may be modified by this or future implementations
                                        (0273) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0274) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0275) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0276) ;    functions.
                                        (0277) ;          
                                        (0278) ;    Currently only the page pointer registers listed below are modified: 
                                        (0279) ;          CUR_PP
                                        (0280) ;
                                        (0281)  ADCINCVR_pot_fIsData:
                                        (0282) _ADCINCVR_pot_fIsData:
                                        (0283)  ADCINCVR_pot_fIsDataAvailable:
                                        (0284) _ADCINCVR_pot_fIsDataAvailable:
                                        (0285)    RAM_PROLOGUE RAM_USE_CLASS_4
0A5A: 62 D0 00 MOV   REG[0xD0],0x0      (0286)    RAM_SETPAGE_CUR >ADCINCVR_pot_bfStatus
0A5D: 51 0C    MOV   A,[0xC]            (0287)    mov   A, [ADCINCVR_pot_bfStatus]                   ; Get status byte
0A5F: 21 10    AND   A,0x10             (0288)    and   A, ADCINCVR_pot_fDATA_READY                  ; Mask off other bits
                                        (0289)    RAM_EPILOGUE RAM_USE_CLASS_4
0A61: 7F       RET                      (0290)    ret
                                        (0291) .ENDSECTION
                                        (0292) 
                                        (0293) .SECTION
                                        (0294) ;-----------------------------------------------------------------------------
                                        (0295) ;  FUNCTION NAME: ADCINCVR_pot_iGetDataClearFlag
                                        (0296) ;  FUNCTION NAME: ADCINCVR_pot_iGetData
                                        (0297) ;
                                        (0298) ;  DESCRIPTION:
                                        (0299) ;  Returns the data from the A/D.  Does not check if data is available.
                                        (0300) ;  iGetDataClearFlag clears the result ready flag as well.
                                        (0301) ;
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;
                                        (0304) ;  ARGUMENTS: None
                                        (0305) ;
                                        (0306) ;  RETURNS:
                                        (0307) ;  A:X  return the ADC result.
                                        (0308) ;
                                        (0309) ;  SIDE EFFECTS:
                                        (0310) ;    The A and X registers may be modified by this or future implementations
                                        (0311) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0313) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0314) ;    functions.
                                        (0315) ;          
                                        (0316) ;    Currently only the page pointer registers listed below are modified: 
                                        (0317) ;          CUR_PP
                                        (0318) ;
                                        (0319)  ADCINCVR_pot_iGetDataClearFlag:
                                        (0320) _ADCINCVR_pot_iGetDataClearFlag:   
                                        (0321)    RAM_PROLOGUE RAM_USE_CLASS_4
0A62: 62 D0 00 MOV   REG[0xD0],0x0      (0322)    RAM_SETPAGE_CUR >ADCINCVR_pot_bfStatus
0A65: 26 0C EF AND   [0xC],0xEF         (0323)    and   [ADCINCVR_pot_bfStatus], ~ADCINCVR_pot_fDATA_READY  ; Clear Data ready bit
0A68: 58 0A    MOV   X,[0xA]            (0324)    mov   X, [(ADCINCVR_pot_iResult + HighByte)]
0A6A: 51 0B    MOV   A,[0xB]            (0325)    mov   A, [(ADCINCVR_pot_iResult + LowByte)]
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_4
0A6C: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) 
                                        (0330)  ADCINCVR_pot_iGetData:
                                        (0331) _ADCINCVR_pot_iGetData:
                                        (0332)    RAM_PROLOGUE RAM_USE_CLASS_4
0A6D: 62 D0 00 MOV   REG[0xD0],0x0      (0333)    RAM_SETPAGE_CUR >ADCINCVR_pot_iResult
0A70: 58 0A    MOV   X,[0xA]            (0334)    mov   X, [(ADCINCVR_pot_iResult + HighByte)]
0A72: 51 0B    MOV   A,[0xB]            (0335)    mov   A, [(ADCINCVR_pot_iResult + LowByte)]
                                        (0336)    RAM_EPILOGUE RAM_USE_CLASS_4
0A74: 7F       RET                      (0337)    ret
                                        (0338) .ENDSECTION
                                        (0339) 
                                        (0340) .SECTION
                                        (0341) ;-----------------------------------------------------------------------------
                                        (0342) ;  FUNCTION NAME: ADCINCVR_pot_ClearFlag
                                        (0343) ;
                                        (0344) ;  DESCRIPTION:
                                        (0345) ;  Clears the data ready flag.
                                        (0346) ;
                                        (0347) ;-----------------------------------------------------------------------------
                                        (0348) ;
                                        (0349) ;  ARGUMENTS: None
                                        (0350) ;
                                        (0351) ;  RETURNS: NA
                                        (0352) ;
                                        (0353) ;  SIDE EFFECTS:
                                        (0354) ;    The A and X registers may be modified by this or future implementations
                                        (0355) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0356) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0357) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0358) ;    functions.
                                        (0359) ;          
                                        (0360) ;    Currently only the page pointer registers listed below are modified: 
                                        (0361) ;          CUR_PP
                                        (0362) ;
                                        (0363)  ADCINCVR_pot_ClearFlag:
                                        (0364) _ADCINCVR_pot_ClearFlag:
                                        (0365)    RAM_PROLOGUE RAM_USE_CLASS_4
0A75: 62 D0 00 MOV   REG[0xD0],0x0      (0366)    RAM_SETPAGE_CUR >ADCINCVR_pot_bfStatus
0A78: 26 0C EF AND   [0xC],0xEF         (0367)    and   [ADCINCVR_pot_bfStatus], ~ADCINCVR_pot_fDATA_READY  ; Clear Data ready bit
                                        (0368)    RAM_EPILOGUE RAM_USE_CLASS_4
0A7B: 7F       RET                      (0369)    ret
                                        (0370) .ENDSECTION
                                        (0371) 
                                        (0372) .SECTION
                                        (0373) ;-----------------------------------------------------------------------------
                                        (0374) ;  FUNCTION NAME: ADCINCVR_pot_SetResolution
                                        (0375) ;
                                        (0376) ;  DESCRIPTION:
                                        (0377) ;  Sets A/D resolution between 7 and 13 bits.
                                        (0378) ;
                                        (0379) ;-----------------------------------------------------------------------------
                                        (0380) ;
                                        (0381) ;  ARGUMENTS:
                                        (0382) ;  A  Passes the number of bits of resolution, between 7 and 13.
                                        (0383) ;
                                        (0384) ;  RETURNS:  NA
                                        (0385) ;
                                        (0386) ;  SIDE EFFECTS:
                                        (0387) ;    The A and X registers may be modified by this or future implementations
                                        (0388) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0389) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0390) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0391) ;    functions.
                                        (0392) ;          
                                        (0393) ;    Currently only the page pointer registers listed below are modified: 
                                        (0394) ;          CUR_PP
                                        (0395) ;
                                        (0396) ;     This function halts the PWM and the counter to sync the A/D , but
                                        (0397) ;     does not re-enable the counter or PWM. To restart the A/D, "Get_Samples"
                                        (0398) ;     should be called.
                                        (0399) ;
                                        (0400)  ADCINCVR_pot_SetResolution:
                                        (0401) _ADCINCVR_pot_SetResolution:
                                        (0402)    RAM_PROLOGUE RAM_USE_CLASS_4
0A7C: 62 D0 00 MOV   REG[0xD0],0x0      (0403)    RAM_SETPAGE_CUR >ADCINCVR_pot_bfStatus
                                        (0404)    
0A7F: 41 9A FE AND   REG[0x9A],0xFE     (0405)    and   reg[ADCINCVR_pot_bfAtoDcr2], ~ADCINCVR_pot_fRES_SET
                                        (0406) 
0A82: 9F C1    CALL  0x0A45             (0407)    call  ADCINCVR_pot_StopAD                       ; Stop the A/D if it is running
0A84: 55 0C 00 MOV   [0xC],0x0          (0408)    mov   [ADCINCVR_pot_bfStatus], 00h              ; and clear status and old resolution
                                        (0409) 
                                        (0410)                                                    ; Check for resolution to be within min and max values
0A87: 39 07    CMP   A,0x7              (0411)    cmp   A,ADCINCVR_pot_bMINRES                    ; Check low end of resolution
0A89: D0 05    JNC   0x0A8F             (0412)    jnc   ADCINCVR_pot_CHECKHI
0A8B: 50 07    MOV   A,0x7              (0413)    mov   A,ADCINCVR_pot_bMINRES                    ; Too low - load legal low value
0A8D: 80 07    JMP   0x0A95             (0414)    jmp   ADCINCVR_pot_RES_OK
                                        (0415) 
                                        (0416) ADCINCVR_pot_CHECKHI:                              ; Check high end of resolution
0A8F: 39 0D    CMP   A,0xD              (0417)    cmp   A,ADCINCVR_pot_bMAXRES
0A91: C0 03    JC    0x0A95             (0418)    jc    ADCINCVR_pot_RES_OK
0A93: 50 0D    MOV   A,0xD              (0419)    mov   A,ADCINCVR_pot_bMAXRES                    ; Too high - load legal Max value
                                        (0420) 
                                        (0421) ADCINCVR_pot_RES_OK:
                                        (0422)                                                    ; Calculate compare value for the PWM which
                                        (0423)                                                    ; computes the integrate time
0A95: 11 07    SUB   A,0x7              (0424)    sub   A, ADCINCVR_pot_bMINRES                   ; Normalize with min resolution
0A97: 2C 0C    OR    [0xC],A            (0425)    or    [ADCINCVR_pot_bfStatus], A
                                        (0426)                                                    ; Since min resolution is 7, 2^^7 = 128, the clock
                                        (0427)                                                    ; is running 4x so 128*4=512 or 0x0200
0A99: 01 01    ADD   A,0x1              (0428)    add   A,01h                                     ; The MSB is 02h.
0A9B: 5C       MOV   X,A                (0429)    mov   X,A
0A9C: 50 01    MOV   A,0x1              (0430)    mov   A,01h
                                        (0431) 
                                        (0432) ADCINCVR_pot_CALC_INTTIME:                         ; Now shift the MSB left for every bit of resolution of min (7).
0A9E: 64       ASL   A                  (0433)    asl   A
0A9F: 79       DEC   X                  (0434)    dec   X
0AA0: BF FD    JNZ   0x0A9E             (0435)    jnz   ADCINCVR_pot_CALC_INTTIME
                                        (0436) 
                                        (0437) ADCINCVR_pot_LOAD_INTTIME:                         ; Load compare value and Calc time into registers
                                        (0438)                                                    ; Since minimum resolution is 7 bits, this value will always start at 0
0AA2: 62 32 00 MOV   REG[0x32],0x0      (0439)    mov   reg[ADCINCVR_pot_bPWM_IntTime_LSB], 00h
0AA5: 60 36    MOV   REG[0x36],A        (0440)    mov   reg[ADCINCVR_pot_bPWM_IntTime_MSB], A
                                        (0441) 
                                        (0442)                                                    ; Load the CalcTime into the PWM Period
0AA7: 62 31 24 MOV   REG[0x31],0x24     (0443)    mov   reg[ADCINCVR_pot_bPWM_Period_LSB], <wCalcTime
0AAA: 01 00    ADD   A,0x0              (0444)    add   A, >wCalcTime
0AAC: 60 35    MOV   REG[0x35],A        (0445)    mov   reg[ADCINCVR_pot_bPWM_Period_MSB],A
                                        (0446)    RAM_EPILOGUE RAM_USE_CLASS_4
0AAE: 7F       RET                      (0447)    ret
(0448) .ENDSECTION
(0449) ; End of File ADCINCVR_pot.asm
FILE: lib\adcincvr_mesint.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   ADCINCVR_mesINT.asm
                                        (0004) ;;  Version: 3.1, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: ADCINCVR Interrupt Service Routines
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "ADCINCVR_mes.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export _ADCINCVR_mes_CNT_ISR
                                        (0021) export _ADCINCVR_mes_PWM16_ISR
                                        (0022) export  ADCINCVR_mes_cCounterU
                                        (0023) export _ADCINCVR_mes_iResult
                                        (0024) export  ADCINCVR_mes_iResult
                                        (0025) export _ADCINCVR_mes_bfStatus
                                        (0026) export  ADCINCVR_mes_bfStatus
                                        (0027) export  ADCINCVR_mes_bSampC
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) AREA InterruptRAM(RAM, REL, CON)
                                        (0033) 
                                        (0034)  ADCINCVR_mes_cCounterU:     BLK   1  ;The Upper byte of the Counter
                                        (0035) _ADCINCVR_mes_iResult:
                                        (0036)  ADCINCVR_mes_iResult:       BLK   2  ;A/D value
                                        (0037) _ADCINCVR_mes_bfStatus:
                                        (0038)  ADCINCVR_mes_bfStatus:      BLK   1  ;Data Valid Flag
                                        (0039)  ADCINCVR_mes_bSampC:        BLK   1  ;# of times to run A/D
                                        (0040) 
                                        (0041) 
                                        (0042) ;-----------------------------------------------
                                        (0043) ;  EQUATES and TABLES
                                        (0044) ;-----------------------------------------------
                                        (0045) LowByte:   equ 1
                                        (0046) HighByte:  equ 0
                                        (0047) 
                                        (0048) 
                                        (0049) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0050) ;---------------------------------------------------
                                        (0051) ; Insert your custom declarations below this banner
                                        (0052) ;---------------------------------------------------
                                        (0053) 
                                        (0054) ;------------------------
                                        (0055) ; Includes
                                        (0056) ;------------------------
                                        (0057) 
                                        (0058) 	
                                        (0059) ;------------------------
                                        (0060) ;  Constant Definitions
                                        (0061) ;------------------------
                                        (0062) 
                                        (0063) 
                                        (0064) ;------------------------
                                        (0065) ; Variable Allocation
                                        (0066) ;------------------------
                                        (0067) 
                                        (0068) 
                                        (0069) ;---------------------------------------------------
                                        (0070) ; Insert your custom declarations above this banner
                                        (0071) ;---------------------------------------------------
                                        (0072) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0073) 
                                        (0074) AREA UserModules (ROM, REL)
                                        (0075) 
                                        (0076) .LITERAL
                                        (0077) ADCINCVR_mesMaxNegX4Table:
                                        (0078) ; Bits  7    8    9   10   11   12   13
                                        (0079)    DB  FFh, FEh, FCh, F8h, F0h, E0h, C0h
                                        (0080) 
                                        (0081) ADCINCVR_mesMaxPosX4Table:
                                        (0082) IF (ADCINCVR_mes_DATA_FORMAT)
                                        (0083) ; Bits (signed)    7    8    9   10   11   12   13
                                        (0084)               DB  01h, 02h, 04h, 08h, 10h, 20h, 40h
                                        (0085) ELSE
                                        (0086) ; Bits (unsigned)  7    8    9   10   11   12   13
                                        (0087)               DB  02h, 04h, 08h, 10h, 20h, 40h, 80h
                                        (0088) 
                                        (0089)  ENDIF
                                        (0090) .ENDLITERAL
                                        (0091) 
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) ;  FUNCTION NAME: _ADCINCVR_mes_CNT_ISR (Counter8 Interrupt)
                                        (0094) ;
                                        (0095) ;
                                        (0096) ;  DESCRIPTION:
                                        (0097) ;     Increment the upper (software) half on the counter whenever the
                                        (0098) ;     lower (hardware) half of the counter underflows.  This counter
                                        (0099) ;     should start out at the most negative value (0xFF).
                                        (0100) ;
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;
                                        (0103) _ADCINCVR_mes_CNT_ISR:

0ABD: 76 0E    INC   [0xE]              (0104)    inc [ADCINCVR_mes_cCounterU]
                                        (0105)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0106)    ;---------------------------------------------------
                                        (0107)    ; Insert your custom code below this banner
                                        (0108)    ;---------------------------------------------------
                                        (0109)    ;   NOTE: interrupt service routines must preserve
                                        (0110)    ;   the values of the A and X CPU registers.
                                        (0111) 
                                        (0112)    ;---------------------------------------------------
                                        (0113)    ; Insert your custom code above this banner
                                        (0114)    ;---------------------------------------------------
                                        (0115)    ;@PSoC_UserCode_END@ (Do not change this line.)
0ABF: 7E       RETI                     (0116)    reti
                                        (0117) 
                                        (0118) 
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: _ADCINCVR_mes_PWM16_ISR  (PWM16 Interrupt)
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     This ISR is called when the ADC has completed and integrate cycle.
                                        (0124) ;     The ADC value is calculated and stored in a global location before
                                        (0125) ;     the end of the ISR.
                                        (0126) ;
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;
                                        (0129) _ADCINCVR_mes_PWM16_ISR:
0AC0: 41 23 FE AND   REG[0x23],0xFE     (0130)    and   reg[ADCINCVR_mes_bCounter_CR0], ~ADCINCVR_mes_fDBLK_ENABLE  ; Disable Counter
                                        (0131) IF ADCINCVR_mes_NoAZ
0AC3: 43 8E 20 OR    REG[0x8E],0x20     (0132)    or    reg[ADCINCVR_mes_bfAtoDcr2], ADCINCVR_mes_fAutoZero      ; Put Integrator in AutoZero
                                        (0133) ENDIF
0AC6: 43 8F 10 OR    REG[0x8F],0x10     (0134)    or   reg[ADCINCVR_mes_bfAtoDcr3],ADCINCVR_mes_fFSW0        ; Put Integrator in reset
                                        (0135) 
                                        (0136)                                                            ; Enable interrupts for a short period of time just in case.
                                        (0137)                                                            ; Make sure we didn't have a counter interrupt ready to fire
0AC9: 71 01    OR    F,0x1              (0138)    M8C_EnableGInt
0ACB: 40       NOP                      (0139)    nop                                                     ; Wait a couple cycles
0ACC: 70 FE    AND   F,0xFE             (0140)    M8C_DisableGInt                                         ; Disable interrupt, read to complete processing
0ACE: 08       PUSH  A                  (0141)    push  A                                                 ; Save the Accumulator
0ACF: 5D 20    MOV   A,REG[0x20]        (0142)    mov   A,reg[ADCINCVR_mes_bCount]                        ; Read counter value  (Bogus read puts value in Period register)
0AD1: 5D 22    MOV   A,REG[0x22]        (0143)    mov   A,reg[ADCINCVR_mes_bCompare]                      ; Read counter value
0AD3: 78       DEC   A                  (0144)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
0AD4: 73       CPL   A                  (0145)    cpl   A                                                 ; Invert the value
0AD5: D0 03    JNC   0x0AD9             (0146)    jnc   ADCINCVR_mes_INT_CALCV                            ; if carry, then inc MSB as well
0AD7: 76 0E    INC   [0xE]              (0147)    inc   [ADCINCVR_mes_cCounterU]
                                        (0148) ADCINCVR_mes_INT_CALCV:
0AD9: 53 10    MOV   [iles+1],A         (0149)    mov   [(ADCINCVR_mes_iResult + LowByte)], A             ; Store LSB value
0ADB: 51 0E    MOV   A,[0xE]            (0150)    mov   A, [ADCINCVR_mes_cCounterU]                       ; Store MSB from temp counter
0ADD: 53 0F    MOV   [iles],A           (0151)    mov   [(ADCINCVR_mes_iResult + HighByte)], A
                                        (0152)                                                            ; The new value has been stored,
                                        (0153)                                                            ; so get counters ready for next reading first.
0ADF: 62 21 FF MOV   REG[0x21],0xFF     (0154)    mov   reg[ADCINCVR_mes_bPeriod], ffh                    ; Initialize counter to FF - Set to overflow after 256 counts
0AE2: 43 23 01 OR    REG[0x23],0x1      (0155)    or    reg[ADCINCVR_mes_bCounter_CR0],ADCINCVR_mes_fDBLK_ENABLE  ; Enable Counter
                                        (0156) 
                                        (0157) IF (ADCINCVR_mes_DATA_FORMAT)                              ; Only check for Negative numbers if SIGNED result
0AE5: 51 11    MOV   A,[iles+2]         (0158)    mov   A, [ADCINCVR_mes_bfStatus]                        ; Get Status with Resolution
0AE7: 21 0F    AND   A,0xF              (0159)    and   A, ADCINCVR_mes_bRES_MASK                         ; Mask of resolution
0AE9: FF C4    INDEX 0x0AAF             (0160)    index ADCINCVR_mesMaxNegX4Table                         ; Get Maximum negative value from table
0AEB: 53 0E    MOV   [0xE],A            (0161)    mov   [ADCINCVR_mes_cCounterU], A                       ; Place result back into MSB of counter
                                        (0162) ELSE
                                        (0163)    mov   [ADCINCVR_mes_cCounterU], 00h                     ; Place result back into MSB of counter
                                        (0164) ENDIF
                                        (0165) 
                                        (0166)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0167)    ;---------------------------------------------------
                                        (0168)    ; If the input is muxed with multiple inputs
                                        (0169)    ; this is a good place to change inputs.
                                        (0170)    ; Insert your custom code below this banner
                                        (0171)    ;---------------------------------------------------
                                        (0172)    ;   NOTE: interrupt service routines must preserve
                                        (0173)    ;   the values of the A and X CPU registers. At this
                                        (0174)    ;   point A is already preserved and will be restored;
                                        (0175)    ;   however, if you use X, you must take care of it
                                        (0176)    ;   here!
                                        (0177) 
                                        (0178)    ;---------------------------------------------------
                                        (0179)    ; Insert your custom code above this banner
                                        (0180)    ;---------------------------------------------------
                                        (0181)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0182) 
0AED: 41 8F EF AND   REG[0x8F],0xEF     (0183)    and   reg[ADCINCVR_mes_bfAtoDcr3],~ADCINCVR_mes_fFSW0   ; Take Integrator out of reset
                                        (0184) IF ADCINCVR_mes_NoAZ
0AF0: 41 8E DF AND   REG[0x8E],0xDF     (0185)    and   reg[ADCINCVR_mes_bfAtoDcr2],~ADCINCVR_mes_fAutoZero  ; Take Integrator out of AutoZero
                                        (0186) ENDIF
                                        (0187) 
                                        (0188)    ;****************************************************************************
                                        (0189)    ;M8C_EnableGInt            ; May want to re-enable interrupts at this point,
                                        (0190)    ;                          ; if stack space isn't at a premium.
                                        (0191)    ; NOTE:  this will make system more responsive but, will increase the
                                        (0192)    ;        overall processing time of the A/D calctime.  If an interrupt is
                                        (0193)    ;        taken, it must return within the specified CalcTime to guarantee
                                        (0194)    ;        successful acquisition of the next byte.
                                        (0195)    ;****************************************************************************
                                        (0196) IF (ADCINCVR_mes_DATA_FORMAT)                    ; Only check for Negative numbers if SIGNED result
                                        (0197) 
                                        (0198)                                                  ; Negative Overflow Check
0AF3: 47 0F 80 TST   [iles],0x80        (0199)    tst   [(ADCINCVR_mes_iResult + HighByte)],80h
0AF6: B0 17    JNZ   0x0B0E             (0200)    jnz   ADCINCVR_mes_NOT_POVFL2
                                        (0201) 
                                        (0202) ENDIF
                                        (0203)                                                  ; Postive Overflow Check
                                        (0204)                                                  ; Get MSB of Max Positive value x4 + 1
0AF8: 51 11    MOV   A,[iles+2]         (0205)    mov   A,[ADCINCVR_mes_bfStatus]               ; Get Status with Resolution
0AFA: 21 0F    AND   A,0xF              (0206)    and   A,ADCINCVR_mes_bRES_MASK                ; Mask of resolution normalized to 0
0AFC: FF B8    INDEX 0x0AB6             (0207)    index ADCINCVR_mesMaxPosX4Table               ; Get Maximum positive value x4 + 1 from table
0AFE: 08       PUSH  A                  (0208)    push  A
0AFF: 22 0F    AND   A,[iles]           (0209)    and   A, [(ADCINCVR_mes_iResult + HighByte)]
0B01: A0 0B    JZ    0x0B0D             (0210)    jz    ADCINCVR_mes_NOT_POVFL
                                        (0211)                                                  ; Positive overflow, fix it - set to Max Positive + 1
0B03: 18       POP   A                  (0212)    pop   A
0B04: 11 01    SUB   A,0x1              (0213)    sub   A, 01h
                                        (0214) 
                                        (0215)                                                  ; Force most positive * 4 into result
0B06: 53 0F    MOV   [iles],A           (0216)    mov   [(ADCINCVR_mes_iResult + HighByte)], A
0B08: 55 10 FF MOV   [iles+1],0xFF      (0217)    mov   [(ADCINCVR_mes_iResult + LowByte)], ffh
0B0B: 80 02    JMP   0x0B0E             (0218)    jmp   ADCINCVR_mes_NOT_POVFL2
                                        (0219) ADCINCVR_mes_NOT_POVFL:
0B0D: 18       POP   A                  (0220)    pop   A
                                        (0221) 
                                        (0222) ADCINCVR_mes_NOT_POVFL2:
0B0E: 68 0F    ASR   [iles]             (0223)    asr   [(ADCINCVR_mes_iResult + HighByte)]     ; Shift MSB and LSB right twice to divide by four
0B10: 6E 10    RRC   [iles+1]           (0224)    rrc   [(ADCINCVR_mes_iResult + LowByte)]      ; Remember digital clock 4 times analog clock
0B12: 68 0F    ASR   [iles]             (0225)    asr   [(ADCINCVR_mes_iResult + HighByte)]
0B14: 6E 10    RRC   [iles+1]           (0226)    rrc   [(ADCINCVR_mes_iResult + LowByte)]
                                        (0227) 
                                        (0228)    ;@PSoC_UserCode_BODY_3@ (Do not change this line.)
                                        (0229)    ;---------------------------------------------------
                                        (0230)    ; Data is ready at this point.
                                        (0231)    ; If processing Data at Interrupt level - add
                                        (0232)    ; User Code to handle the data below this banner
                                        (0233)    ;---------------------------------------------------
                                        (0234)    ;   NOTE: interrupt service routines must preserve
                                        (0235)    ;   the values of the A and X CPU registers. At this
                                        (0236)    ;   point A is already preserved and will be restored;
                                        (0237)    ;   however, if you use X, you must take care of it
                                        (0238)    ;   here!
                                        (0239) 
                                        (0240)    ;---------------------------------------------------
                                        (0241)    ; Insert your custom code above this banner
                                        (0242)    ;---------------------------------------------------
                                        (0243)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0244) 
0B16: 18       POP   A                  (0245)    pop   A                                       ; Restore A, not used any more
                                        (0246) 
0B17: 2E 11 10 OR    [iles+2],0x10      (0247)    or    [ADCINCVR_mes_bfStatus],ADCINCVR_mes_fDATA_READY  ; Set Data ready bit
                                        (0248) 
0B1A: 47 12 FF TST   [iles+3],0xFF      (0249)    tst   [ADCINCVR_mes_bSampC], ffh              ; If sample_counter == 0 -->> continuous data collection
0B1D: A0 17    JZ    0x0B35             (0250)    jz    ADCINCVR_mes_END_PWM16_ISR
                                        (0251) 
0B1F: 7A 12    DEC   [iles+3]           (0252)    dec   [ADCINCVR_mes_bSampC]                   ; Dec sample counter and check for zero
0B21: B0 13    JNZ   0x0B35             (0253)    jnz   ADCINCVR_mes_END_PWM16_ISR
                                        (0254) 
                                        (0255)    ;**********************************************
                                        (0256)    ; Turn off ADC
                                        (0257)    ;**********************************************
0B23: 41 27 FE AND   REG[0x27],0xFE     (0258)    and   reg[ADCINCVR_mes_fPWM_LSB_CR0], ~ADCINCVR_mes_fDBLK_ENABLE     ; Disable the PWM
0B26: 41 23 FE AND   REG[0x23],0xFE     (0259)    and   reg[ADCINCVR_mes_bCounter_CR0], ~ADCINCVR_mes_fDBLK_ENABLE           ; Disable the Counter
                                        (0260) IF ADCINCVR_mes_NoAZ
0B29: 43 8E 20 OR    REG[0x8E],0x20     (0261)    or    reg[ADCINCVR_mes_bfAtoDcr2], ADCINCVR_mes_fAutoZero   ; Put the Integrator into Autozero mode
                                        (0262) ENDIF
0B2C: 43 8F 10 OR    REG[0x8F],0x10     (0263)    or    reg[ADCINCVR_mes_bfAtoDcr3], ADCINCVR_mes_fFSW0       ; Put Integrator into reset
0B2F: 41 E1 FB AND   REG[0xE1],0xFB     (0264)    and   reg[ADCINCVR_mes_bfPWM16_INT_REG], ~ADCINCVR_mes_bfPWM16_Mask      ; Disable interrupts
0B32: 41 E1 FE AND   REG[0xE1],0xFE     (0265)    and   reg[ADCINCVR_mes_bfCounter_INT_REG], ~ADCINCVR_mes_bfCounter_Mask
                                        (0266) 
                                        (0267) ADCINCVR_mes_END_PWM16_ISR:
0B35: 7E       RETI                     (0268)    reti
(0269) 
(0270) ; End of File ADCINCVR_mesINT.asm
FILE: lib\adcincvr_mes.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  ADCINCVR_mes.asm
                                        (0004) ;;  Version: 3.1, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: ADCINCVR User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "ADCINCVR_mes.inc"
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  ADCINCVR_mes_Start
                                        (0030) export _ADCINCVR_mes_Start
                                        (0031) export  ADCINCVR_mes_SetPower
                                        (0032) export _ADCINCVR_mes_SetPower
                                        (0033) export  ADCINCVR_mes_Stop
                                        (0034) export _ADCINCVR_mes_Stop
                                        (0035) export  ADCINCVR_mes_GetSamples
                                        (0036) export _ADCINCVR_mes_GetSamples
                                        (0037) export  ADCINCVR_mes_StopAD
                                        (0038) export _ADCINCVR_mes_StopAD
                                        (0039) export  ADCINCVR_mes_fIsData
                                        (0040) export _ADCINCVR_mes_fIsData
                                        (0041) export  ADCINCVR_mes_fIsDataAvailable
                                        (0042) export _ADCINCVR_mes_fIsDataAvailable
                                        (0043) export  ADCINCVR_mes_iGetData
                                        (0044) export _ADCINCVR_mes_iGetData
                                        (0045) export  ADCINCVR_mes_ClearFlag
                                        (0046) export _ADCINCVR_mes_ClearFlag
                                        (0047) export  ADCINCVR_mes_iGetDataClearFlag
                                        (0048) export _ADCINCVR_mes_iGetDataClearFlag
                                        (0049) export  ADCINCVR_mes_SetResolution
                                        (0050) export _ADCINCVR_mes_SetResolution
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ;  EQUATES
                                        (0054) ;-----------------------------------------------
                                        (0055) LowByte:       equ 1
                                        (0056) HighByte:      equ 0
                                        (0057) 
                                        (0058) ; Calctime parameters
                                        (0059) wCalcTime:     equ   ADCINCVR_mes_bCALCTIME
                                        (0060) 
                                        (0061) AREA UserModules (ROM, REL)
                                        (0062) 
                                        (0063) .SECTION
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;  FUNCTION NAME: ADCINCVR_mes_Start
                                        (0066) ;  FUNCTION NAME: ADCINCVR_mes_SetPower
                                        (0067) ;
                                        (0068) ;  DESCRIPTION:
                                        (0069) ;  Applies power setting to the module's analog PSoc block.
                                        (0070) ;
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;
                                        (0073) ;  ARGUMENTS:
                                        (0074) ;   A  Contains power level setting 0 to 3
                                        (0075) ;
                                        (0076) ;  RETURNS:  NA
                                        (0077) ;
                                        (0078) ;  SIDE EFFECTS:
                                        (0079) ;    The A and X registers may be modified by this or future implementations
                                        (0080) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0081) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0082) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0083) ;    functions.
                                        (0084) ;          
                                        (0085) ;    Currently only the page pointer registers listed below are modified:
                                        (0086) ;          CUR_PP
                                        (0087) ;
                                        (0088)  ADCINCVR_mes_Start:
                                        (0089) _ADCINCVR_mes_Start:
                                        (0090)  ADCINCVR_mes_SetPower:
                                        (0091) _ADCINCVR_mes_SetPower:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_2
0B36: 62 D0 00 MOV   REG[0xD0],0x0      (0094)    RAM_SETPAGE_CUR >ADCINCVR_mes_bfStatus
                                        (0095)    
0B39: 4F       MOV   X,SP               (0096)    mov   X, SP                                       ; Get location of next location on stack
0B3A: 21 03    AND   A,0x3              (0097)    and   A,ADCINCVR_mes_bfPOWERMASK                  ; Mask only the valid power setting bits
0B3C: 08       PUSH  A                  (0098)    push  A                                           ; Save power value on temp location
0B3D: 5D 8F    MOV   A,REG[0x8F]        (0099)    mov   A, reg[ADCINCVR_mes_bfAtoDcr3]              ; Get current value of AtoDcr3
0B3F: 21 FC    AND   A,0xFC             (0100)    and   A, ~ADCINCVR_mes_bfPOWERMASK                ; Mask off old power value
0B41: 2B 00    OR    A,[X+0]            (0101)    or    A, [X]                                      ; OR in new power value
0B43: 29 F0    OR    A,0xF0             (0102)    or    A, f0h                                      ; Make sure other register is set correctly
0B45: 60 8F    MOV   REG[0x8F],A        (0103)    mov   reg[ADCINCVR_mes_bfAtoDcr3], A              ; Reload CR with new power value
                                        (0104) 
0B47: 49 8E 01 TST   REG[0x8E],0x1      (0105)    tst   reg[ADCINCVR_mes_bfAtoDcr2], ADCINCVR_mes_fRES_SET
0B4A: A0 05    JZ    0x0B50             (0106)    jz    .DoNotLoadRes
0B4C: 50 04    MOV   A,0x4              (0107)    mov   A,ADCINCVR_mes_bNUMBITS - ADCINCVR_mes_bMINRES         ; get and set the resolution
0B4E: 53 11    MOV   [iles+2],A         (0108)    mov   [ADCINCVR_mes_bfStatus], A              ; place it in the status variable
                                        (0109) .DoNotLoadRes:
0B50: 18       POP   A                  (0110)    pop   A                                           ; Restore the stack and power value
0B51: 70 3F    AND   F,0x3F             
0B53: 71 C0    OR    F,0xC0             (0111)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_4
0B55: 7F       RET                      (0113)    ret
                                        (0114) .ENDSECTION
                                        (0115) 
                                        (0116) .SECTION
                                        (0117) ;-----------------------------------------------------------------------------
                                        (0118) ;  FUNCTION NAME: ADCINCVR_mes_Stop
                                        (0119) ;
                                        (0120) ;  DESCRIPTION:
                                        (0121) ;  Removes power from the module's analog PSoc block, but the digital
                                        (0122) ;  blocks keep on running.
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) ;  ARGUMENTS: None
                                        (0127) ;
                                        (0128) ;  RETURNS:   NA
                                        (0129) ;
                                        (0130) ;  SIDE EFFECTS:
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  ADCINCVR_mes_Stop:
                                        (0138) _ADCINCVR_mes_Stop:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
0B56: 41 8F FC AND   REG[0x8F],0xFC     (0140)    and   reg[ADCINCVR_mes_bfAtoDcr3], ~ADCINCVR_mes_bfPOWERMASK
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
0B59: 7F       RET                      (0142)    ret
                                        (0143) .ENDSECTION
                                        (0144) 
                                        (0145) .SECTION
                                        (0146) ;-----------------------------------------------------------------------------
                                        (0147) ;  FUNCTION NAME: ADCINCVR_mes_Get_Samples
                                        (0148) ;
                                        (0149) ;  DESCRIPTION:
                                        (0150) ;  Starts the A/D convertor and will place data is memory.  A flag
                                        (0151) ;  is set whenever a new data value is available.
                                        (0152) ;
                                        (0153) ;-----------------------------------------------------------------------------
                                        (0154) ;
                                        (0155) ;  ARGUMENTS:
                                        (0156) ;  A  Number of samples to be taken.  A zero will cause the ADC to run
                                        (0157) ;     continuously.
                                        (0158) ;
                                        (0159) ;  RETURNS:  NA
                                        (0160) ;
                                        (0161) ;  SIDE EFFECTS:
                                        (0162) ;    The A and X registers may be modified by this or future implementations
                                        (0163) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0164) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0165) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0166) ;    functions.
                                        (0167) ;          
                                        (0168) ;    Currently only the page pointer registers listed below are modified:
                                        (0169) ;          CUR_PP
                                        (0170) ;
                                        (0171)  ADCINCVR_mes_GetSamples:
                                        (0172) _ADCINCVR_mes_GetSamples:
                                        (0173)    RAM_PROLOGUE RAM_USE_CLASS_4
0B5A: 62 D0 00 MOV   REG[0xD0],0x0      (0174)    RAM_SETPAGE_CUR >ADCINCVR_mes_bfStatus
0B5D: 53 12    MOV   [iles+3],A         (0175)    mov   [ADCINCVR_mes_bSampC], A                          ; Store sample count
                                        (0176)                                                            ; Interrupts, Put A/D in reset
0B5F: 51 11    MOV   A,[iles+2]         (0177)    mov   A,[ADCINCVR_mes_bfStatus]                         ; get and set the resolution
0B61: 21 0F    AND   A,0xF              (0178)    and   A,ADCINCVR_mes_bRES_MASK
0B63: 01 07    ADD   A,0x7              (0179)    add   A,ADCINCVR_mes_bMINRES
0B65: 90 5A    CALL  0x0BC1             (0180)    call  ADCINCVR_mes_SetResolution
                                        (0181) 
                                        (0182) ADCINCVR_mes_LoadMSBCounter:                               ; The PWM has been setup by SetResolution, now set the upper
                                        (0183)                                                            ; counter which will be the same as the period.
                                        (0184)                                                            ; Reset MSB of counter to most negative value
                                        (0185) 
0B67: 5D 2A    MOV   A,REG[0x2A]        (0186)    mov   A,reg[ADCINCVR_mes_bPWM_IntTime_MSB]              ; Get MSB of PWM and move it into RAM
0B69: 53 0E    MOV   [0xE],A            (0187)    mov   [ADCINCVR_mes_cCounterU], A                       ; Use counter as temp location
0B6B: 50 00    MOV   A,0x0              (0188)    mov   A, 00h                                            ; Load A with zero for the calculation
0B6D: 12 0E    SUB   A,[0xE]            (0189)    sub   A, [ADCINCVR_mes_cCounterU]                       ; 0 - MSB_PWM = MSB_of_most_neg_value
0B6F: 67       ASR   A                  (0190)    asr   A                                                 ; Half the range (+ and -)
                                        (0191) IF (ADCINCVR_mes_DATA_FORMAT)
0B70: 53 0E    MOV   [0xE],A            (0192)    mov   [ADCINCVR_mes_cCounterU], A                       ; Place result back into MSB of counter
                                        (0193) ELSE
                                        (0194)    mov   [ADCINCVR_mes_cCounterU], 00h                     ; Always start at zero for unsigned values
                                        (0195) ENDIF
0B72: 5D 26    MOV   A,REG[0x26]        (0196)    mov   A, reg[ADCINCVR_mes_bPWM_IntTime_LSB]             ; Dummy Read  - required do not remove
0B74: 62 21 FF MOV   REG[0x21],0xFF     (0197)    mov   reg[ADCINCVR_mes_bPeriod], FFh                    ; Make sure counter starts at FF
                                        (0198) 
0B77: 41 8F EF AND   REG[0x8F],0xEF     (0199)    and   reg[ADCINCVR_mes_bfAtoDcr3],~ADCINCVR_mes_fFSW0   ; Take Integrator out of reset
                                        (0200) IF ADCINCVR_mes_NoAZ
0B7A: 41 8E DF AND   REG[0x8E],0xDF     (0201)     and  reg[ADCINCVR_mes_bfAtoDcr2],~ADCINCVR_mes_fAutoZero  ; Take Integrator out of AutoZero
                                        (0202) ENDIF
                                        (0203) 
                                        (0204)                                                                ; Enable the A/D and Start it!
0B7D: 43 23 05 OR    REG[0x23],0x5      (0205)    or    reg[ADCINCVR_mes_bCounter_CR0], (ADCINCVR_mes_fDBLK_ENABLE|ADCINCVR_mes_fPULSE_WIDE)   ; Enable the Counter
0B80: 43 27 01 OR    REG[0x27],0x1      (0206)    or    reg[ADCINCVR_mes_fPWM_LSB_CR0], ADCINCVR_mes_fDBLK_ENABLE          ; Enable PWM
0B83: 43 E1 04 OR    REG[0xE1],0x4      (0207)    or    reg[ADCINCVR_mes_bfPWM16_INT_REG], ADCINCVR_mes_bfPWM16_Mask    ; Enable Counter interrupts
0B86: 43 E1 01 OR    REG[0xE1],0x1      (0208)    or    reg[ADCINCVR_mes_bfCounter_INT_REG], ADCINCVR_mes_bfCounter_Mask
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_4
0B89: 7F       RET                      (0210)    ret
                                        (0211) .ENDSECTION
                                        (0212) 
                                        (0213) .SECTION
                                        (0214) ;-----------------------------------------------------------------------------
                                        (0215) ;  FUNCTION NAME: ADCINCVR_mes_StopAD
                                        (0216) ;
                                        (0217) ;  DESCRIPTION:
                                        (0218) ;  Completely shuts down the A/D is an orderly manner.  Both the
                                        (0219) ;  Timer and Counter are disabled and their interrupts are deactivated.
                                        (0220) ;
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:  None
                                        (0224) ;
                                        (0225) ;  RETURNS: NA
                                        (0226) ;
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  ADCINCVR_mes_StopAD:
                                        (0235) _ADCINCVR_mes_StopAD:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
0B8A: 41 27 FE AND   REG[0x27],0xFE     (0237)    and   reg[ADCINCVR_mes_fPWM_LSB_CR0], ~ADCINCVR_mes_fDBLK_ENABLE     ; Disable the PWM
                                        (0238) 
0B8D: 41 23 FE AND   REG[0x23],0xFE     (0239)    and   reg[ADCINCVR_mes_bCounter_CR0], ~ADCINCVR_mes_fDBLK_ENABLE           ; Disable the Counter
                                        (0240) 
                                        (0241) IF ADCINCVR_mes_NoAZ
0B90: 43 8E 20 OR    REG[0x8E],0x20     (0242)    or   reg[ADCINCVR_mes_bfAtoDcr2], ADCINCVR_mes_fAutoZero    ; Put the Integrator into Autozero mode
                                        (0243) ENDIF
                                        (0244) 
0B93: 43 8F 10 OR    REG[0x8F],0x10     (0245)    or   reg[ADCINCVR_mes_bfAtoDcr3], ADCINCVR_mes_fFSW0        ; Put Integrator into reset
0B96: 08       PUSH  A                  (0246)    push A
0B97: 41 E1 FB AND   REG[0xE1],0xFB     (0247)    M8C_DisableIntMask ADCINCVR_mes_bfPWM16_INT_REG, ADCINCVR_mes_bfPWM16_Mask      ; Disable interrupts
0B9A: 41 E1 FE AND   REG[0xE1],0xFE     (0248)    M8C_DisableIntMask ADCINCVR_mes_bfCounter_INT_REG, ADCINCVR_mes_bfCounter_Mask
0B9D: 18       POP   A                  (0249)    pop  A
                                        (0250)    RAM_EPILOGUE RAM_USE_CLASS_1
0B9E: 7F       RET                      (0251)    ret
                                        (0252) .ENDSECTION
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: ADCINCVR_mes_fIsData
                                        (0257) ;  FUNCTION NAME: ADCINCVR_mes_fIsDataAvailable
                                        (0258) ;
                                        (0259) ;  DESCRIPTION:
                                        (0260) ;  Returns the status of the A/D Data is set whenever a new data
                                        (0261) ;  value is available.
                                        (0262) ;
                                        (0263) ;-----------------------------------------------------------------------------
                                        (0264) ;
                                        (0265) ;  ARGUMENTS: None
                                        (0266) ;
                                        (0267) ;  RETURNS:
                                        (0268) ;  A  Returns data status  A == 0 no data available
                                        (0269) ;                          A != 0 data available
                                        (0270) ;
                                        (0271) ;  SIDE EFFECTS:
                                        (0272) ;    The A and X registers may be modified by this or future implementations
                                        (0273) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0274) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0275) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0276) ;    functions.
                                        (0277) ;          
                                        (0278) ;    Currently only the page pointer registers listed below are modified: 
                                        (0279) ;          CUR_PP
                                        (0280) ;
                                        (0281)  ADCINCVR_mes_fIsData:
                                        (0282) _ADCINCVR_mes_fIsData:
                                        (0283)  ADCINCVR_mes_fIsDataAvailable:
                                        (0284) _ADCINCVR_mes_fIsDataAvailable:
                                        (0285)    RAM_PROLOGUE RAM_USE_CLASS_4
0B9F: 62 D0 00 MOV   REG[0xD0],0x0      (0286)    RAM_SETPAGE_CUR >ADCINCVR_mes_bfStatus
0BA2: 51 11    MOV   A,[iles+2]         (0287)    mov   A, [ADCINCVR_mes_bfStatus]                   ; Get status byte
0BA4: 21 10    AND   A,0x10             (0288)    and   A, ADCINCVR_mes_fDATA_READY                  ; Mask off other bits
                                        (0289)    RAM_EPILOGUE RAM_USE_CLASS_4
0BA6: 7F       RET                      (0290)    ret
                                        (0291) .ENDSECTION
                                        (0292) 
                                        (0293) .SECTION
                                        (0294) ;-----------------------------------------------------------------------------
                                        (0295) ;  FUNCTION NAME: ADCINCVR_mes_iGetDataClearFlag
                                        (0296) ;  FUNCTION NAME: ADCINCVR_mes_iGetData
                                        (0297) ;
                                        (0298) ;  DESCRIPTION:
                                        (0299) ;  Returns the data from the A/D.  Does not check if data is available.
                                        (0300) ;  iGetDataClearFlag clears the result ready flag as well.
                                        (0301) ;
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;
                                        (0304) ;  ARGUMENTS: None
                                        (0305) ;
                                        (0306) ;  RETURNS:
                                        (0307) ;  A:X  return the ADC result.
                                        (0308) ;
                                        (0309) ;  SIDE EFFECTS:
                                        (0310) ;    The A and X registers may be modified by this or future implementations
                                        (0311) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0313) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0314) ;    functions.
                                        (0315) ;          
                                        (0316) ;    Currently only the page pointer registers listed below are modified: 
                                        (0317) ;          CUR_PP
                                        (0318) ;
                                        (0319)  ADCINCVR_mes_iGetDataClearFlag:
                                        (0320) _ADCINCVR_mes_iGetDataClearFlag:   
                                        (0321)    RAM_PROLOGUE RAM_USE_CLASS_4
0BA7: 62 D0 00 MOV   REG[0xD0],0x0      (0322)    RAM_SETPAGE_CUR >ADCINCVR_mes_bfStatus
0BAA: 26 11 EF AND   [iles+2],0xEF      (0323)    and   [ADCINCVR_mes_bfStatus], ~ADCINCVR_mes_fDATA_READY  ; Clear Data ready bit
0BAD: 58 0F    MOV   X,[iles]           (0324)    mov   X, [(ADCINCVR_mes_iResult + HighByte)]
0BAF: 51 10    MOV   A,[iles+1]         (0325)    mov   A, [(ADCINCVR_mes_iResult + LowByte)]
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_4
0BB1: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) 
                                        (0330)  ADCINCVR_mes_iGetData:
                                        (0331) _ADCINCVR_mes_iGetData:
                                        (0332)    RAM_PROLOGUE RAM_USE_CLASS_4
0BB2: 62 D0 00 MOV   REG[0xD0],0x0      (0333)    RAM_SETPAGE_CUR >ADCINCVR_mes_iResult
0BB5: 58 0F    MOV   X,[iles]           (0334)    mov   X, [(ADCINCVR_mes_iResult + HighByte)]
0BB7: 51 10    MOV   A,[iles+1]         (0335)    mov   A, [(ADCINCVR_mes_iResult + LowByte)]
                                        (0336)    RAM_EPILOGUE RAM_USE_CLASS_4
0BB9: 7F       RET                      (0337)    ret
                                        (0338) .ENDSECTION
                                        (0339) 
                                        (0340) .SECTION
                                        (0341) ;-----------------------------------------------------------------------------
                                        (0342) ;  FUNCTION NAME: ADCINCVR_mes_ClearFlag
                                        (0343) ;
                                        (0344) ;  DESCRIPTION:
                                        (0345) ;  Clears the data ready flag.
                                        (0346) ;
                                        (0347) ;-----------------------------------------------------------------------------
                                        (0348) ;
                                        (0349) ;  ARGUMENTS: None
                                        (0350) ;
                                        (0351) ;  RETURNS: NA
                                        (0352) ;
                                        (0353) ;  SIDE EFFECTS:
                                        (0354) ;    The A and X registers may be modified by this or future implementations
                                        (0355) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0356) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0357) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0358) ;    functions.
                                        (0359) ;          
                                        (0360) ;    Currently only the page pointer registers listed below are modified: 
                                        (0361) ;          CUR_PP
                                        (0362) ;
                                        (0363)  ADCINCVR_mes_ClearFlag:
                                        (0364) _ADCINCVR_mes_ClearFlag:
                                        (0365)    RAM_PROLOGUE RAM_USE_CLASS_4
0BBA: 62 D0 00 MOV   REG[0xD0],0x0      (0366)    RAM_SETPAGE_CUR >ADCINCVR_mes_bfStatus
0BBD: 26 11 EF AND   [iles+2],0xEF      (0367)    and   [ADCINCVR_mes_bfStatus], ~ADCINCVR_mes_fDATA_READY  ; Clear Data ready bit
                                        (0368)    RAM_EPILOGUE RAM_USE_CLASS_4
0BC0: 7F       RET                      (0369)    ret
                                        (0370) .ENDSECTION
                                        (0371) 
                                        (0372) .SECTION
                                        (0373) ;-----------------------------------------------------------------------------
                                        (0374) ;  FUNCTION NAME: ADCINCVR_mes_SetResolution
                                        (0375) ;
                                        (0376) ;  DESCRIPTION:
                                        (0377) ;  Sets A/D resolution between 7 and 13 bits.
                                        (0378) ;
                                        (0379) ;-----------------------------------------------------------------------------
                                        (0380) ;
                                        (0381) ;  ARGUMENTS:
                                        (0382) ;  A  Passes the number of bits of resolution, between 7 and 13.
                                        (0383) ;
                                        (0384) ;  RETURNS:  NA
                                        (0385) ;
                                        (0386) ;  SIDE EFFECTS:
                                        (0387) ;    The A and X registers may be modified by this or future implementations
                                        (0388) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0389) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0390) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0391) ;    functions.
                                        (0392) ;          
                                        (0393) ;    Currently only the page pointer registers listed below are modified: 
                                        (0394) ;          CUR_PP
                                        (0395) ;
                                        (0396) ;     This function halts the PWM and the counter to sync the A/D , but
                                        (0397) ;     does not re-enable the counter or PWM. To restart the A/D, "Get_Samples"
                                        (0398) ;     should be called.
                                        (0399) ;
                                        (0400)  ADCINCVR_mes_SetResolution:
                                        (0401) _ADCINCVR_mes_SetResolution:
                                        (0402)    RAM_PROLOGUE RAM_USE_CLASS_4
0BC1: 62 D0 00 MOV   REG[0xD0],0x0      (0403)    RAM_SETPAGE_CUR >ADCINCVR_mes_bfStatus
                                        (0404)    
0BC4: 41 8E FE AND   REG[0x8E],0xFE     (0405)    and   reg[ADCINCVR_mes_bfAtoDcr2], ~ADCINCVR_mes_fRES_SET
                                        (0406) 
0BC7: 9F C1    CALL  0x0B8A             (0407)    call  ADCINCVR_mes_StopAD                       ; Stop the A/D if it is running
0BC9: 55 11 00 MOV   [iles+2],0x0       (0408)    mov   [ADCINCVR_mes_bfStatus], 00h              ; and clear status and old resolution
                                        (0409) 
                                        (0410)                                                    ; Check for resolution to be within min and max values
0BCC: 39 07    CMP   A,0x7              (0411)    cmp   A,ADCINCVR_mes_bMINRES                    ; Check low end of resolution
0BCE: D0 05    JNC   0x0BD4             (0412)    jnc   ADCINCVR_mes_CHECKHI
0BD0: 50 07    MOV   A,0x7              (0413)    mov   A,ADCINCVR_mes_bMINRES                    ; Too low - load legal low value
0BD2: 80 07    JMP   0x0BDA             (0414)    jmp   ADCINCVR_mes_RES_OK
                                        (0415) 
                                        (0416) ADCINCVR_mes_CHECKHI:                              ; Check high end of resolution
0BD4: 39 0D    CMP   A,0xD              (0417)    cmp   A,ADCINCVR_mes_bMAXRES
0BD6: C0 03    JC    0x0BDA             (0418)    jc    ADCINCVR_mes_RES_OK
0BD8: 50 0D    MOV   A,0xD              (0419)    mov   A,ADCINCVR_mes_bMAXRES                    ; Too high - load legal Max value
                                        (0420) 
                                        (0421) ADCINCVR_mes_RES_OK:
                                        (0422)                                                    ; Calculate compare value for the PWM which
                                        (0423)                                                    ; computes the integrate time
0BDA: 11 07    SUB   A,0x7              (0424)    sub   A, ADCINCVR_mes_bMINRES                   ; Normalize with min resolution
0BDC: 2C 11    OR    [iles+2],A         (0425)    or    [ADCINCVR_mes_bfStatus], A
                                        (0426)                                                    ; Since min resolution is 7, 2^^7 = 128, the clock
                                        (0427)                                                    ; is running 4x so 128*4=512 or 0x0200
0BDE: 01 01    ADD   A,0x1              (0428)    add   A,01h                                     ; The MSB is 02h.
0BE0: 5C       MOV   X,A                (0429)    mov   X,A
0BE1: 50 01    MOV   A,0x1              (0430)    mov   A,01h
                                        (0431) 
                                        (0432) ADCINCVR_mes_CALC_INTTIME:                         ; Now shift the MSB left for every bit of resolution of min (7).
0BE3: 64       ASL   A                  (0433)    asl   A
0BE4: 79       DEC   X                  (0434)    dec   X
0BE5: BF FD    JNZ   0x0BE3             (0435)    jnz   ADCINCVR_mes_CALC_INTTIME
                                        (0436) 
                                        (0437) ADCINCVR_mes_LOAD_INTTIME:                         ; Load compare value and Calc time into registers
                                        (0438)                                                    ; Since minimum resolution is 7 bits, this value will always start at 0
0BE7: 62 26 00 MOV   REG[0x26],0x0      (0439)    mov   reg[ADCINCVR_mes_bPWM_IntTime_LSB], 00h
0BEA: 60 2A    MOV   REG[0x2A],A        (0440)    mov   reg[ADCINCVR_mes_bPWM_IntTime_MSB], A
                                        (0441) 
                                        (0442)                                                    ; Load the CalcTime into the PWM Period
0BEC: 62 25 24 MOV   REG[0x25],0x24     (0443)    mov   reg[ADCINCVR_mes_bPWM_Period_LSB], <wCalcTime
0BEF: 01 00    ADD   A,0x0              (0444)    add   A, >wCalcTime
0BF1: 60 29    MOV   REG[0x29],A        (0445)    mov   reg[ADCINCVR_mes_bPWM_Period_MSB],A
                                        (0446)    RAM_EPILOGUE RAM_USE_CLASS_4
0BF3: 7F       RET                      (0447)    ret
(0448) .ENDSECTION
(0449) ; End of File ADCINCVR_mes.asm
FILE: .\delay.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: delay.asm
                                        (0004) ;;
                                        (0005) ;;  DESCRIPTION: Delay functions implementation file
                                        (0006) ;;
                                        (0007) ;;-----------------------------------------------------------------------------
                                        (0008) ;;  Copyright (c) Cypress MicroSystems 2002-2006. All Rights Reserved.
                                        (0009) ;;*****************************************************************************
                                        (0010) ;;*****************************************************************************
                                        (0011) 
                                        (0012) ;-----------------------------------------------------------------------------
                                        (0013) ;  Include Files
                                        (0014) ;-----------------------------------------------------------------------------
                                        (0015) include "m8c.inc"
                                        (0016) include "memory.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------------------------------------
                                        (0021) export  Delay50uTimes
                                        (0022) export _Delay50uTimes
                                        (0023) 
                                        (0024) export  Delay50u
                                        (0025) export _Delay50u
                                        (0026) 
                                        (0027) area text(rom)
                                        (0028) .SECTION
                                        (0029) ;-----------------------------------------------------------------------------
                                        (0030) ;  FUNCTION NAME: Delay50uTimes
                                        (0031) ;
                                        (0032) ;  DESCRIPTION:
                                        (0033) ;     Delay increments of 50uSeconds
                                        (0034) ;
                                        (0035) ;-----------------------------------------------------------------------------
                                        (0036) ;
                                        (0037) ;  ARGUMENTS:
                                        (0038) ;     A contains the delay multiplier
                                        (0039) ;
                                        (0040) ;  RETURNS:
                                        (0041) ;
                                        (0042) ;  SIDE EFFECTS:
                                        (0043) ;    The A and X registers may be modified by this or future implementations
                                        (0044) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0045) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0046) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0047) ;    functions.
                                        (0048) ;
                                        (0049) ;
                                        (0050)  Delay50uTimes:
                                        (0051) _Delay50uTimes:
                                        (0052)     RAM_PROLOGUE RAM_USE_CLASS_1
0BF4: 90 0C    CALL  Delay50u|_Delay50u (0053)     call  Delay50u
0BF6: 78       DEC   A                  (0054)     dec   A
0BF7: BF FC    JNZ   __text_start|Delay50uTimes|_Delay50uTimes(0055)     jnz   Delay50uTimes
                                        (0056)     RAM_EPILOGUE RAM_USE_CLASS_1
0BF9: 7F       RET                      (0057)     ret
                                        (0058) 
                                        (0059) .ENDSECTION
                                        (0060) 
                                        (0061) ;-----------------------------------------------------------------------------
                                        (0062) ;  FUNCTION NAME: Delay50u
                                        (0063) ;
                                        (0064) ;  DESCRIPTION:
                                        (0065) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0066) ;     Slower clock frequencies the delay will be;
                                        (0067) ;           1.5
                                        (0068) ;        -------------- * 50uSec
                                        (0069) ;        clock_freq(MHz)
                                        (0070) ;
                                        (0071) ;
                                        (0072) ;-----------------------------------------------------------------------------
                                        (0073) ;
                                        (0074) ;  ARGUMENTS: none
                                        (0075) ;
                                        (0076) ;  RETURNS: none
                                        (0077) ;
                                        (0078) ;  SIDE EFFECTS:
                                        (0079) ;    The A and X registers may be modified by this or future implementations
                                        (0080) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0081) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0082) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0083) ;    functions.
                                        (0084) ;
                                        (0085) ;  THEORY of OPERATION or PROCEDURE:
                                        (0086) ;
                                        (0087) .LITERAL
                                        (0088)  Delay50u_Table::
                                        (0089)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0090) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0091) .ENDLITERAL
                                        (0092) .SECTION
                                        (0093) 
                                        (0094)   Delay50u:
                                        (0095)  _Delay50u:                      ; [11]  Call
                                        (0096)     RAM_PROLOGUE RAM_USE_CLASS_1
0BFA: 08       PUSH  A                  
0BFB: 19 3A    SBB   A,0x3A             
0BFD: 7C 01 01 LCALL 0x0101             
0C00: 01 01    ADD   A,0x1              
0C02: 08       PUSH  A                  (0097)     push  A
0C03: 71 10    OR    F,0x10             (0098)     M8C_SetBank1                       ; [4]
0C05: 5D E0    MOV   A,REG[0xE0]        (0099)     mov   A, reg[OSC_CR0]              ; [6] Get delay value
0C07: 70 EF    AND   F,0xEF             (0100)     M8C_SetBank0                       ; [4]
0C09: 21 07    AND   A,0x7              (0101)     and   A,07h                        ; [4] Mask off only the clock bits
0C0B: 39 05    CMP   A,0x5              (0102)     cmp   A,05h
0C0D: D0 06    JNC   0x0C14             (0103)     jnc   Delay50u_End
0C0F: FF E9    INDEX Delay50u_Table     (0104)     index Delay50u_Table               ; [13] Get delay value
                                        (0105) Delay50u_Loop:                         ;
0C11: 78       DEC   A                  (0106)     dec   A                            ; [4]
0C12: BF FE    JNZ   0x0C11             (0107)     jnz   Delay50u_Loop                ; [5]
                                        (0108) Delay50u_End:
0C14: 18       POP   A                  (0109)     pop   A
                                        (0110)     RAM_EPILOGUE RAM_USE_CLASS_1
0C15: 7F       RET                      (0111)     ret
(0112) .ENDSECTION
FILE: D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\main.c
(0001) /* ////////////////////////////////////////////////////////////////////////////
(0002) ** Project:      ExplorerSound
(0003) ** Author:    Guido Ottaviani-->guido@guiott.com<--
(0004) ** Description: 
(0005) ** version 1.1   12-12-2010
(0006) **
(0007) ** Detailed descriptions are on file "Notes.txt" 
(0008) **
(0009) -------------------------------------------------------------------------------
(0010) Copyright 2010 Guido Ottaviani
(0011) guido@guiott.com
(0012) 
(0013) 	ExplorerSound is free software: you can redistribute it and/or modify
(0014)     it under the terms of the GNU General Public License as published by
(0015)     the Free Software Foundation, either version 3 of the License, or
(0016)     (at your option) any later version.
(0017) 
(0018)     ExplorerSound is distributed in the hope that it will be useful,
(0019)     but WITHOUT ANY WARRANTY; without even the implied warranty of
(0020)     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
(0021)     GNU General Public License for more details.
(0022) 
(0023)     You should have received a copy of the GNU General Public License
(0024)     along with ExplorerSound.  If not, see <http://www.gnu.org/licenses/>.
(0025) -------------------------------------------------------------------------------      
(0026) /////////////////////////////////////////////////////////////////////////////*/
(0027) 
(0028) #include <m8c.h>        // part specific constants and macros
(0029) #include <stdlib.h>
(0030) #include <math.h>
(0031) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0032) #include "prototypes.h"
(0033) #include "definitions.h"
(0034) #include "delay.h"
(0035) 
(0036) #pragma interrupt_handler HB_Tmr_ISR_C // int handler for program clock
(0037) 
(0038) void main(void)
_main:
  PortNum              --> X+0
    0C16: 10       PUSH  X
    0C17: 4F       MOV   X,SP
    0C18: 38 05    ADD   SP,0x5
(0039) {
(0040) 	BYTE PortNum[3];
(0041) 	
(0042) 	BlocksInit();
    0C1A: 7C 17 AF LCALL _BlocksInit
(0043) 	
(0044) 	M8C_EnableGInt ;               // Turn on interrupts 
    0C1D: 71 01    OR    F,0x1
(0045) 	
(0046)  	LED_2_On();
    0C1F: 10       PUSH  X
    0C20: 7C 06 2E LCALL 0x062E
    0C23: 20       POP   X
(0047) 	PortNum[0] = AMUX4_mic_PORT0_1;
    0C24: 56 00 00 MOV   [X+0],0x0
(0048) 	PortNum[1] = AMUX4_mic_PORT0_3;
    0C27: 56 01 01 MOV   [X+1],0x1
(0049) 	PortNum[2] = AMUX4_mic_PORT0_7;
    0C2A: 56 02 03 MOV   [X+2],0x3
(0050) 	
(0051) 	LedTest();
    0C2D: 7C 18 C5 LCALL _LedTest
(0052) 	I2C_Regs.I2cCheck = 0;
    0C30: 62 D0 00 MOV   REG[0xD0],0x0
    0C33: 55 43 00 MOV   [I2C_Regs+12],0x0
    0C36: 84 AA    JMP   0x10E1
(0053) 	
(0054) 	// Main loop=============================================================
(0055) 	while (1)
(0056) 	{
(0057) 		if(ADCINCVR_pot_fIsDataAvailable() != 0)// Wait for data to be ready
    0C38: 10       PUSH  X
    0C39: 7C 0A 5A LCALL 0x0A5A
    0C3C: 62 D0 00 MOV   REG[0xD0],0x0
    0C3F: 20       POP   X
    0C40: 39 00    CMP   A,0x0
    0C42: A0 5F    JZ    0x0CA2
(0058)         {   
(0059) 			// Get Data, Clear data ready flag, in the range 0-1800
(0060) 			// multiplying by 256 is to have the same order of ADC_mes values
(0061) 			PotValue = (((long)ADCINCVR_pot_iGetDataClearFlag())+900) << 8;  
    0C44: 10       PUSH  X
    0C45: 7C 0A 62 LCALL 0x0A62
    0C48: 62 D0 00 MOV   REG[0xD0],0x0
    0C4B: 5A 55    MOV   [__r0],X
    0C4D: 20       POP   X
    0C4E: 53 52    MOV   [__r3],A
    0C50: 51 55    MOV   A,[__r0]
    0C52: 53 53    MOV   [__r2],A
    0C54: 47 53 80 TST   [__r2],0x80
    0C57: A0 09    JZ    0x0C61
    0C59: 55 54 FF MOV   [__r1],0xFF
    0C5C: 55 55 FF MOV   [__r0],0xFF
    0C5F: 80 0A    JMP   0x0C6A
    0C61: 62 D0 00 MOV   REG[0xD0],0x0
    0C64: 55 54 00 MOV   [__r1],0x0
    0C67: 55 55 00 MOV   [__r0],0x0
    0C6A: 62 D0 00 MOV   REG[0xD0],0x0
    0C6D: 06 52 84 ADD   [__r3],0x84
    0C70: 0E 53 03 ADC   [__r2],0x3
    0C73: 0E 54 00 ADC   [__r1],0x0
    0C76: 0E 55 00 ADC   [__r0],0x0
    0C79: 50 08    MOV   A,0x8
    0C7B: 62 D0 00 MOV   REG[0xD0],0x0
    0C7E: 65 52    ASL   [__r3]
    0C80: 6B 53    RLC   [__r2]
    0C82: 6B 54    RLC   [__r1]
    0C84: 6B 55    RLC   [__r0]
    0C86: 78       DEC   A
    0C87: BF F3    JNZ   0x0C7B
    0C89: 51 55    MOV   A,[__r0]
    0C8B: 08       PUSH  A
    0C8C: 51 54    MOV   A,[__r1]
    0C8E: 08       PUSH  A
    0C8F: 51 53    MOV   A,[__r2]
    0C91: 08       PUSH  A
    0C92: 51 52    MOV   A,[__r3]
    0C94: 62 D0 00 MOV   REG[0xD0],0x0
    0C97: 53 78    MOV   [PotValue+3],A
    0C99: 18       POP   A
    0C9A: 53 77    MOV   [PotValue+2],A
    0C9C: 18       POP   A
    0C9D: 53 76    MOV   [PotValue+1],A
    0C9F: 18       POP   A
    0CA0: 53 75    MOV   [PotValue],A
(0062) 		}
(0063)         
(0064) 		if (Tmr2>2) // every 30ms
    0CA2: 62 D0 00 MOV   REG[0xD0],0x0
    0CA5: 50 02    MOV   A,0x2
    0CA7: 12 7A    SUB   A,[Tmr2+1]
    0CA9: 50 00    MOV   A,0x0
    0CAB: 1A 79    SBB   A,[Tmr2]
    0CAD: D4 00    JNC   0x10AE
(0065) 		{
(0066) 			Tmr2=0;
    0CAF: 62 D0 00 MOV   REG[0xD0],0x0
    0CB2: 55 7A 00 MOV   [Tmr2+1],0x0
    0CB5: 55 79 00 MOV   [Tmr2],0x0
(0067) 			ADCINCVR_mes_GetSamples(1); // Start ADC to read once more
    0CB8: 10       PUSH  X
    0CB9: 50 01    MOV   A,0x1
    0CBB: 7C 0B 5A LCALL 0x0B5A
    0CBE: 20       POP   X
(0068) 			while(! ADCINCVR_mes_fIsDataAvailable());// Wait for data to be ready 
    0CBF: 10       PUSH  X
    0CC0: 7C 0B 9F LCALL 0x0B9F
    0CC3: 62 D0 00 MOV   REG[0xD0],0x0
    0CC6: 20       POP   X
    0CC7: 39 00    CMP   A,0x0
    0CC9: AF F5    JZ    0x0CBF
(0069) 			// Get Data, Clear data ready flag
(0070) 			MesValue[PortIndx][2]=((long)ADCINCVR_mes_iGetDataClearFlag()) << 8; // [1]
    0CCB: 10       PUSH  X
    0CCC: 7C 0B A7 LCALL 0x0BA7
    0CCF: 62 D0 00 MOV   REG[0xD0],0x0
    0CD2: 5A 55    MOV   [__r0],X
    0CD4: 20       POP   X
    0CD5: 53 52    MOV   [__r3],A
    0CD7: 51 55    MOV   A,[__r0]
    0CD9: 53 53    MOV   [__r2],A
    0CDB: 47 53 80 TST   [__r2],0x80
    0CDE: A0 09    JZ    0x0CE8
    0CE0: 55 54 FF MOV   [__r1],0xFF
    0CE3: 55 55 FF MOV   [__r0],0xFF
    0CE6: 80 0A    JMP   0x0CF1
    0CE8: 62 D0 00 MOV   REG[0xD0],0x0
    0CEB: 55 54 00 MOV   [__r1],0x0
    0CEE: 55 55 00 MOV   [__r0],0x0
    0CF1: 62 D0 00 MOV   REG[0xD0],0x0
    0CF4: 50 08    MOV   A,0x8
    0CF6: 62 D0 00 MOV   REG[0xD0],0x0
    0CF9: 65 52    ASL   [__r3]
    0CFB: 6B 53    RLC   [__r2]
    0CFD: 6B 54    RLC   [__r1]
    0CFF: 6B 55    RLC   [__r0]
    0D01: 78       DEC   A
    0D02: BF F3    JNZ   0x0CF6
    0D04: 62 D0 00 MOV   REG[0xD0],0x0
    0D07: 51 81    MOV   A,[PortIndx]
    0D09: 62 D0 00 MOV   REG[0xD0],0x0
    0D0C: 53 50    MOV   [__r5],A
    0D0E: 50 00    MOV   A,0x0
    0D10: 08       PUSH  A
    0D11: 51 50    MOV   A,[__r5]
    0D13: 08       PUSH  A
    0D14: 50 00    MOV   A,0x0
    0D16: 08       PUSH  A
    0D17: 50 0C    MOV   A,0xC
    0D19: 08       PUSH  A
    0D1A: 7C 1E C0 LCALL __mul16
    0D1D: 38 FC    ADD   SP,0xFC
    0D1F: 51 49    MOV   A,[__rX]
    0D21: 53 50    MOV   [__r5],A
    0D23: 51 48    MOV   A,[__rY]
    0D25: 53 51    MOV   [__r4],A
    0D27: 06 50 1B ADD   [__r5],0x1B
    0D2A: 0E 51 00 ADC   [__r4],0x0
    0D2D: 51 51    MOV   A,[__r4]
    0D2F: 60 D5    MOV   REG[0xD5],A
    0D31: 51 55    MOV   A,[__r0]
    0D33: 3F 50    MVI   [__r5],A
    0D35: 51 54    MOV   A,[__r1]
    0D37: 3F 50    MVI   [__r5],A
    0D39: 51 53    MOV   A,[__r2]
    0D3B: 3F 50    MVI   [__r5],A
    0D3D: 51 52    MOV   A,[__r3]
    0D3F: 3F 50    MVI   [__r5],A
(0071) 			MesValue[PortIndx][1]=(MesValue[PortIndx][2])/GF[GainIndx[PortIndx][1]][1]; // [2]
    0D41: 62 D0 00 MOV   REG[0xD0],0x0
    0D44: 51 81    MOV   A,[PortIndx]
    0D46: 62 D0 00 MOV   REG[0xD0],0x0
    0D49: 53 54    MOV   [__r1],A
    0D4B: 50 00    MOV   A,0x0
    0D4D: 08       PUSH  A
    0D4E: 51 54    MOV   A,[__r1]
    0D50: 08       PUSH  A
    0D51: 50 00    MOV   A,0x0
    0D53: 08       PUSH  A
    0D54: 50 0C    MOV   A,0xC
    0D56: 08       PUSH  A
    0D57: 7C 1E C0 LCALL __mul16
    0D5A: 38 FC    ADD   SP,0xFC
    0D5C: 51 49    MOV   A,[__rX]
    0D5E: 53 54    MOV   [__r1],A
    0D60: 51 48    MOV   A,[__rY]
    0D62: 53 55    MOV   [__r0],A
    0D64: 62 D0 00 MOV   REG[0xD0],0x0
    0D67: 51 81    MOV   A,[PortIndx]
    0D69: 62 D0 00 MOV   REG[0xD0],0x0
    0D6C: 53 52    MOV   [__r3],A
    0D6E: 55 53 00 MOV   [__r2],0x0
    0D71: 65 52    ASL   [__r3]
    0D73: 6B 53    RLC   [__r2]
    0D75: 06 52 6C ADD   [__r3],0x6C
    0D78: 0E 53 00 ADC   [__r2],0x0
    0D7B: 51 53    MOV   A,[__r2]
    0D7D: 60 D4    MOV   REG[0xD4],A
    0D7F: 3E 52    MVI   A,[__r3]
    0D81: 53 52    MOV   [__r3],A
    0D83: 55 53 00 MOV   [__r2],0x0
    0D86: 65 52    ASL   [__r3]
    0D88: 6B 53    RLC   [__r2]
    0D8A: 06 52 57 ADD   [__r3],0x57
    0D8D: 0E 53 00 ADC   [__r2],0x0
    0D90: 51 53    MOV   A,[__r2]
    0D92: 60 D4    MOV   REG[0xD4],A
    0D94: 3E 52    MVI   A,[__r3]
    0D96: 53 4E    MOV   [__r7],A
    0D98: 51 54    MOV   A,[__r1]
    0D9A: 01 1B    ADD   A,0x1B
    0D9C: 53 52    MOV   [__r3],A
    0D9E: 51 55    MOV   A,[__r0]
    0DA0: 09 00    ADC   A,0x0
    0DA2: 60 D4    MOV   REG[0xD4],A
    0DA4: 3E 52    MVI   A,[__r3]
    0DA6: 53 4D    MOV   [__r8],A
    0DA8: 3E 52    MVI   A,[__r3]
    0DAA: 53 4C    MOV   [__r9],A
    0DAC: 3E 52    MVI   A,[__r3]
    0DAE: 53 4B    MOV   [__r10],A
    0DB0: 3E 52    MVI   A,[__r3]
    0DB2: 53 4A    MOV   [__r11],A
    0DB4: 50 00    MOV   A,0x0
    0DB6: 08       PUSH  A
    0DB7: 08       PUSH  A
    0DB8: 08       PUSH  A
    0DB9: 51 4E    MOV   A,[__r7]
    0DBB: 08       PUSH  A
    0DBC: 51 4D    MOV   A,[__r8]
    0DBE: 08       PUSH  A
    0DBF: 51 4C    MOV   A,[__r9]
    0DC1: 08       PUSH  A
    0DC2: 51 4B    MOV   A,[__r10]
    0DC4: 08       PUSH  A
    0DC5: 51 4A    MOV   A,[__r11]
    0DC7: 08       PUSH  A
    0DC8: 7C 19 27 LCALL __divmod_32X32_32
    0DCB: 18       POP   A
    0DCC: 53 4E    MOV   [__r7],A
    0DCE: 18       POP   A
    0DCF: 53 4F    MOV   [__r6],A
    0DD1: 18       POP   A
    0DD2: 53 50    MOV   [__r5],A
    0DD4: 18       POP   A
    0DD5: 53 51    MOV   [__r4],A
    0DD7: 38 FC    ADD   SP,0xFC
    0DD9: 06 54 17 ADD   [__r1],0x17
    0DDC: 0E 55 00 ADC   [__r0],0x0
    0DDF: 51 55    MOV   A,[__r0]
    0DE1: 60 D5    MOV   REG[0xD5],A
    0DE3: 51 51    MOV   A,[__r4]
    0DE5: 3F 54    MVI   [__r1],A
    0DE7: 51 50    MOV   A,[__r5]
    0DE9: 3F 54    MVI   [__r1],A
    0DEB: 51 4F    MOV   A,[__r6]
    0DED: 3F 54    MVI   [__r1],A
    0DEF: 51 4E    MOV   A,[__r7]
    0DF1: 3F 54    MVI   [__r1],A
(0072) 			MesValue[PortIndx][0]=(MesValue[PortIndx][1])/GF[GainIndx[PortIndx][0]][1]; // [3]	
    0DF3: 62 D0 00 MOV   REG[0xD0],0x0
    0DF6: 51 81    MOV   A,[PortIndx]
    0DF8: 62 D0 00 MOV   REG[0xD0],0x0
    0DFB: 53 54    MOV   [__r1],A
    0DFD: 50 00    MOV   A,0x0
    0DFF: 08       PUSH  A
    0E00: 51 54    MOV   A,[__r1]
    0E02: 08       PUSH  A
    0E03: 50 00    MOV   A,0x0
    0E05: 08       PUSH  A
    0E06: 50 0C    MOV   A,0xC
    0E08: 08       PUSH  A
    0E09: 7C 1E C0 LCALL __mul16
    0E0C: 38 FC    ADD   SP,0xFC
    0E0E: 51 49    MOV   A,[__rX]
    0E10: 53 54    MOV   [__r1],A
    0E12: 51 48    MOV   A,[__rY]
    0E14: 53 55    MOV   [__r0],A
    0E16: 62 D0 00 MOV   REG[0xD0],0x0
    0E19: 51 81    MOV   A,[PortIndx]
    0E1B: 62 D0 00 MOV   REG[0xD0],0x0
    0E1E: 53 52    MOV   [__r3],A
    0E20: 55 53 00 MOV   [__r2],0x0
    0E23: 65 52    ASL   [__r3]
    0E25: 6B 53    RLC   [__r2]
    0E27: 06 52 6B ADD   [__r3],0x6B
    0E2A: 0E 53 00 ADC   [__r2],0x0
    0E2D: 51 53    MOV   A,[__r2]
    0E2F: 60 D4    MOV   REG[0xD4],A
    0E31: 3E 52    MVI   A,[__r3]
    0E33: 53 52    MOV   [__r3],A
    0E35: 55 53 00 MOV   [__r2],0x0
    0E38: 65 52    ASL   [__r3]
    0E3A: 6B 53    RLC   [__r2]
    0E3C: 06 52 57 ADD   [__r3],0x57
    0E3F: 0E 53 00 ADC   [__r2],0x0
    0E42: 51 53    MOV   A,[__r2]
    0E44: 60 D4    MOV   REG[0xD4],A
    0E46: 3E 52    MVI   A,[__r3]
    0E48: 53 4E    MOV   [__r7],A
    0E4A: 51 54    MOV   A,[__r1]
    0E4C: 01 17    ADD   A,0x17
    0E4E: 53 52    MOV   [__r3],A
    0E50: 51 55    MOV   A,[__r0]
    0E52: 09 00    ADC   A,0x0
    0E54: 60 D4    MOV   REG[0xD4],A
    0E56: 3E 52    MVI   A,[__r3]
    0E58: 53 4D    MOV   [__r8],A
    0E5A: 3E 52    MVI   A,[__r3]
    0E5C: 53 4C    MOV   [__r9],A
    0E5E: 3E 52    MVI   A,[__r3]
    0E60: 53 4B    MOV   [__r10],A
    0E62: 3E 52    MVI   A,[__r3]
    0E64: 53 4A    MOV   [__r11],A
    0E66: 50 00    MOV   A,0x0
    0E68: 08       PUSH  A
    0E69: 08       PUSH  A
    0E6A: 08       PUSH  A
    0E6B: 51 4E    MOV   A,[__r7]
    0E6D: 08       PUSH  A
    0E6E: 51 4D    MOV   A,[__r8]
    0E70: 08       PUSH  A
    0E71: 51 4C    MOV   A,[__r9]
    0E73: 08       PUSH  A
    0E74: 51 4B    MOV   A,[__r10]
    0E76: 08       PUSH  A
    0E77: 51 4A    MOV   A,[__r11]
    0E79: 08       PUSH  A
    0E7A: 7C 19 27 LCALL __divmod_32X32_32
    0E7D: 18       POP   A
    0E7E: 53 4E    MOV   [__r7],A
    0E80: 18       POP   A
    0E81: 53 4F    MOV   [__r6],A
    0E83: 18       POP   A
    0E84: 53 50    MOV   [__r5],A
    0E86: 18       POP   A
    0E87: 53 51    MOV   [__r4],A
    0E89: 38 FC    ADD   SP,0xFC
    0E8B: 06 54 13 ADD   [__r1],0x13
    0E8E: 0E 55 00 ADC   [__r0],0x0
    0E91: 51 55    MOV   A,[__r0]
    0E93: 60 D5    MOV   REG[0xD5],A
    0E95: 51 51    MOV   A,[__r4]
    0E97: 3F 54    MVI   [__r1],A
    0E99: 51 50    MOV   A,[__r5]
    0E9B: 3F 54    MVI   [__r1],A
    0E9D: 51 4F    MOV   A,[__r6]
    0E9F: 3F 54    MVI   [__r1],A
    0EA1: 51 4E    MOV   A,[__r7]
    0EA3: 3F 54    MVI   [__r1],A
(0073) 			// Expose data to I2C master
(0074) 			I2C_Regs.I2C_MesValue[PortIndx]=MesValue[PortIndx][0]; // linear
    0EA5: 62 D0 00 MOV   REG[0xD0],0x0
    0EA8: 51 81    MOV   A,[PortIndx]
    0EAA: 62 D0 00 MOV   REG[0xD0],0x0
    0EAD: 53 54    MOV   [__r1],A
    0EAF: 50 00    MOV   A,0x0
    0EB1: 08       PUSH  A
    0EB2: 51 54    MOV   A,[__r1]
    0EB4: 08       PUSH  A
    0EB5: 50 00    MOV   A,0x0
    0EB7: 08       PUSH  A
    0EB8: 50 0C    MOV   A,0xC
    0EBA: 08       PUSH  A
    0EBB: 7C 1E C0 LCALL __mul16
    0EBE: 38 FC    ADD   SP,0xFC
    0EC0: 51 49    MOV   A,[__rX]
    0EC2: 53 54    MOV   [__r1],A
    0EC4: 51 48    MOV   A,[__rY]
    0EC6: 53 55    MOV   [__r0],A
    0EC8: 06 54 13 ADD   [__r1],0x13
    0ECB: 0E 55 00 ADC   [__r0],0x0
    0ECE: 51 55    MOV   A,[__r0]
    0ED0: 60 D4    MOV   REG[0xD4],A
    0ED2: 3E 54    MVI   A,[__r1]
    0ED4: 53 51    MOV   [__r4],A
    0ED6: 3E 54    MVI   A,[__r1]
    0ED8: 53 50    MOV   [__r5],A
    0EDA: 3E 54    MVI   A,[__r1]
    0EDC: 53 4F    MOV   [__r6],A
    0EDE: 3E 54    MVI   A,[__r1]
    0EE0: 53 4E    MOV   [__r7],A
    0EE2: 62 D0 00 MOV   REG[0xD0],0x0
    0EE5: 51 81    MOV   A,[PortIndx]
    0EE7: 62 D0 00 MOV   REG[0xD0],0x0
    0EEA: 53 54    MOV   [__r1],A
    0EEC: 55 55 00 MOV   [__r0],0x0
    0EEF: 65 54    ASL   [__r1]
    0EF1: 6B 55    RLC   [__r0]
    0EF3: 65 54    ASL   [__r1]
    0EF5: 6B 55    RLC   [__r0]
    0EF7: 06 54 37 ADD   [__r1],0x37
    0EFA: 0E 55 00 ADC   [__r0],0x0
    0EFD: 51 55    MOV   A,[__r0]
    0EFF: 60 D5    MOV   REG[0xD5],A
    0F01: 51 51    MOV   A,[__r4]
    0F03: 3F 54    MVI   [__r1],A
    0F05: 51 50    MOV   A,[__r5]
    0F07: 3F 54    MVI   [__r1],A
    0F09: 51 4F    MOV   A,[__r6]
    0F0B: 3F 54    MVI   [__r1],A
    0F0D: 51 4E    MOV   A,[__r7]
    0F0F: 3F 54    MVI   [__r1],A
(0075) 			I2C_Regs.DbMesValue[PortIndx]=(10*log10(MesValue[PortIndx][0]))+0.5; // logarithmic (dB rounded to next)
    0F11: 62 D0 00 MOV   REG[0xD0],0x0
    0F14: 51 81    MOV   A,[PortIndx]
    0F16: 62 D0 00 MOV   REG[0xD0],0x0
    0F19: 53 54    MOV   [__r1],A
    0F1B: 50 00    MOV   A,0x0
    0F1D: 08       PUSH  A
    0F1E: 51 54    MOV   A,[__r1]
    0F20: 08       PUSH  A
    0F21: 50 00    MOV   A,0x0
    0F23: 08       PUSH  A
    0F24: 50 0C    MOV   A,0xC
    0F26: 08       PUSH  A
    0F27: 7C 1E C0 LCALL __mul16
    0F2A: 38 FC    ADD   SP,0xFC
    0F2C: 51 49    MOV   A,[__rX]
    0F2E: 53 54    MOV   [__r1],A
    0F30: 51 48    MOV   A,[__rY]
    0F32: 53 55    MOV   [__r0],A
    0F34: 06 54 13 ADD   [__r1],0x13
    0F37: 0E 55 00 ADC   [__r0],0x0
    0F3A: 51 55    MOV   A,[__r0]
    0F3C: 60 D4    MOV   REG[0xD4],A
    0F3E: 3E 54    MVI   A,[__r1]
    0F40: 53 51    MOV   [__r4],A
    0F42: 3E 54    MVI   A,[__r1]
    0F44: 53 50    MOV   [__r5],A
    0F46: 3E 54    MVI   A,[__r1]
    0F48: 53 4F    MOV   [__r6],A
    0F4A: 3E 54    MVI   A,[__r1]
    0F4C: 53 4E    MOV   [__r7],A
    0F4E: 51 51    MOV   A,[__r4]
    0F50: 08       PUSH  A
    0F51: 51 50    MOV   A,[__r5]
    0F53: 08       PUSH  A
    0F54: 51 4F    MOV   A,[__r6]
    0F56: 08       PUSH  A
    0F57: 51 4E    MOV   A,[__r7]
    0F59: 08       PUSH  A
    0F5A: 7C 1E 55 LCALL __long2fp
    0F5D: 18       POP   A
    0F5E: 53 52    MOV   [__r3],A
    0F60: 18       POP   A
    0F61: 53 53    MOV   [__r2],A
    0F63: 18       POP   A
    0F64: 53 54    MOV   [__r1],A
    0F66: 18       POP   A
    0F67: 08       PUSH  A
    0F68: 51 54    MOV   A,[__r1]
    0F6A: 08       PUSH  A
    0F6B: 51 53    MOV   A,[__r2]
    0F6D: 08       PUSH  A
    0F6E: 51 52    MOV   A,[__r3]
    0F70: 08       PUSH  A
    0F71: 7C 24 18 LCALL _log10f
    0F74: 38 FC    ADD   SP,0xFC
    0F76: 62 D0 00 MOV   REG[0xD0],0x0
    0F79: 51 55    MOV   A,[__r0]
    0F7B: 08       PUSH  A
    0F7C: 51 54    MOV   A,[__r1]
    0F7E: 08       PUSH  A
    0F7F: 51 53    MOV   A,[__r2]
    0F81: 08       PUSH  A
    0F82: 51 52    MOV   A,[__r3]
    0F84: 08       PUSH  A
    0F85: 50 41    MOV   A,0x41
    0F87: 08       PUSH  A
    0F88: 50 20    MOV   A,0x20
    0F8A: 08       PUSH  A
    0F8B: 50 00    MOV   A,0x0
    0F8D: 08       PUSH  A
    0F8E: 08       PUSH  A
    0F8F: 7C 1C CF LCALL __fpmul
    0F92: 18       POP   A
    0F93: 53 52    MOV   [__r3],A
    0F95: 18       POP   A
    0F96: 53 53    MOV   [__r2],A
    0F98: 18       POP   A
    0F99: 53 54    MOV   [__r1],A
    0F9B: 18       POP   A
    0F9C: 53 55    MOV   [__r0],A
    0F9E: 38 FC    ADD   SP,0xFC
    0FA0: 50 3F    MOV   A,0x3F
    0FA2: 08       PUSH  A
    0FA3: 50 00    MOV   A,0x0
    0FA5: 08       PUSH  A
    0FA6: 08       PUSH  A
    0FA7: 08       PUSH  A
    0FA8: 51 55    MOV   A,[__r0]
    0FAA: 08       PUSH  A
    0FAB: 51 54    MOV   A,[__r1]
    0FAD: 08       PUSH  A
    0FAE: 51 53    MOV   A,[__r2]
    0FB0: 08       PUSH  A
    0FB1: 51 52    MOV   A,[__r3]
    0FB3: 08       PUSH  A
    0FB4: 7C 1A 8F LCALL __fpadd
    0FB7: 18       POP   A
    0FB8: 53 52    MOV   [__r3],A
    0FBA: 18       POP   A
    0FBB: 53 53    MOV   [__r2],A
    0FBD: 18       POP   A
    0FBE: 53 54    MOV   [__r1],A
    0FC0: 18       POP   A
    0FC1: 53 55    MOV   [__r0],A
    0FC3: 38 FC    ADD   SP,0xFC
    0FC5: 50 47    MOV   A,0x47
    0FC7: 08       PUSH  A
    0FC8: 50 00    MOV   A,0x0
    0FCA: 08       PUSH  A
    0FCB: 08       PUSH  A
    0FCC: 08       PUSH  A
    0FCD: 51 55    MOV   A,[__r0]
    0FCF: 08       PUSH  A
    0FD0: 51 54    MOV   A,[__r1]
    0FD2: 08       PUSH  A
    0FD3: 51 53    MOV   A,[__r2]
    0FD5: 08       PUSH  A
    0FD6: 51 52    MOV   A,[__r3]
    0FD8: 08       PUSH  A
    0FD9: 7C 1B 8F LCALL __fpcmp
    0FDC: 38 F8    ADD   SP,0xF8
    0FDE: 39 FF    CMP   A,0xFF
    0FE0: A0 47    JZ    0x1028
    0FE2: 50 47    MOV   A,0x47
    0FE4: 08       PUSH  A
    0FE5: 50 00    MOV   A,0x0
    0FE7: 08       PUSH  A
    0FE8: 08       PUSH  A
    0FE9: 08       PUSH  A
    0FEA: 51 55    MOV   A,[__r0]
    0FEC: 08       PUSH  A
    0FED: 51 54    MOV   A,[__r1]
    0FEF: 08       PUSH  A
    0FF0: 51 53    MOV   A,[__r2]
    0FF2: 08       PUSH  A
    0FF3: 51 52    MOV   A,[__r3]
    0FF5: 08       PUSH  A
    0FF6: 7C 1D 98 LCALL __fpsub
    0FF9: 18       POP   A
    0FFA: 53 4E    MOV   [__r7],A
    0FFC: 18       POP   A
    0FFD: 53 4F    MOV   [__r6],A
    0FFF: 18       POP   A
    1000: 53 50    MOV   [__r5],A
    1002: 18       POP   A
    1003: 38 FC    ADD   SP,0xFC
    1005: 08       PUSH  A
    1006: 51 50    MOV   A,[__r5]
    1008: 08       PUSH  A
    1009: 51 4F    MOV   A,[__r6]
    100B: 08       PUSH  A
    100C: 51 4E    MOV   A,[__r7]
    100E: 08       PUSH  A
    100F: 7C 19 7E LCALL __fp2long
    1012: 18       POP   A
    1013: 53 50    MOV   [__r5],A
    1015: 18       POP   A
    1016: 53 51    MOV   [__r4],A
    1018: 38 FE    ADD   SP,0xFE
    101A: 51 50    MOV   A,[__r5]
    101C: 01 00    ADD   A,0x0
    101E: 54 04    MOV   [X+4],A
    1020: 51 51    MOV   A,[__r4]
    1022: 09 80    ADC   A,0x80
    1024: 54 03    MOV   [X+3],A
    1026: 80 23    JMP   0x104A
    1028: 62 D0 00 MOV   REG[0xD0],0x0
    102B: 51 55    MOV   A,[__r0]
    102D: 08       PUSH  A
    102E: 51 54    MOV   A,[__r1]
    1030: 08       PUSH  A
    1031: 51 53    MOV   A,[__r2]
    1033: 08       PUSH  A
    1034: 51 52    MOV   A,[__r3]
    1036: 08       PUSH  A
    1037: 7C 19 7E LCALL __fp2long
    103A: 18       POP   A
    103B: 53 54    MOV   [__r1],A
    103D: 18       POP   A
    103E: 53 55    MOV   [__r0],A
    1040: 38 FE    ADD   SP,0xFE
    1042: 51 54    MOV   A,[__r1]
    1044: 54 04    MOV   [X+4],A
    1046: 51 55    MOV   A,[__r0]
    1048: 54 03    MOV   [X+3],A
    104A: 62 D0 00 MOV   REG[0xD0],0x0
    104D: 52 04    MOV   A,[X+4]
    104F: 53 55    MOV   [__r0],A
    1051: 62 D0 00 MOV   REG[0xD0],0x0
    1054: 51 81    MOV   A,[PortIndx]
    1056: 62 D0 00 MOV   REG[0xD0],0x0
    1059: 53 52    MOV   [__r3],A
    105B: 55 53 00 MOV   [__r2],0x0
    105E: 06 52 44 ADD   [__r3],0x44
    1061: 0E 53 00 ADC   [__r2],0x0
    1064: 51 53    MOV   A,[__r2]
    1066: 60 D5    MOV   REG[0xD5],A
    1068: 51 55    MOV   A,[__r0]
    106A: 3F 52    MVI   [__r3],A
(0076) 
(0077) 			AGC(); 
    106C: 90 7A    CALL  _AGC
(0078) 			
(0079) 			PortIndx++;
    106E: 62 D0 00 MOV   REG[0xD0],0x0
    1071: 76 81    INC   [PortIndx]
(0080) 			if(PortIndx > 2) 
    1073: 50 02    MOV   A,0x2
    1075: 3A 81    CMP   A,[PortIndx]
    1077: D0 07    JNC   0x107F
(0081) 			{
(0082) 				PortIndx=0; // next mux port
    1079: 62 D0 00 MOV   REG[0xD0],0x0
    107C: 55 81 00 MOV   [PortIndx],0x0
(0083) 			}
(0084) 			AMUX4_mic_InputSelect(PortNum[PortIndx]);
    107F: 62 D0 00 MOV   REG[0xD0],0x0
    1082: 55 55 07 MOV   [__r0],0x7
    1085: 5A 54    MOV   [__r1],X
    1087: 62 D0 00 MOV   REG[0xD0],0x0
    108A: 51 81    MOV   A,[PortIndx]
    108C: 62 D0 00 MOV   REG[0xD0],0x0
    108F: 02 54    ADD   A,[__r1]
    1091: 53 54    MOV   [__r1],A
    1093: 50 00    MOV   A,0x0
    1095: 0A 55    ADC   A,[__r0]
    1097: 60 D4    MOV   REG[0xD4],A
    1099: 3E 54    MVI   A,[__r1]
    109B: 10       PUSH  X
    109C: 7C 09 4D LCALL 0x094D
    109F: 20       POP   X
(0085) 			
(0086) 			// I2C comm test. If master is able to change I2cCheck the comm is working
(0087) 			// otherwise the CPU will be reset by the watchdog timer
(0088) 			if (I2C_Regs.I2cCheck)	 
    10A0: 62 D0 00 MOV   REG[0xD0],0x0
    10A3: 3C 43 00 CMP   [I2C_Regs+12],0x0
    10A6: A0 07    JZ    0x10AE
(0089) 			{
(0090) 				I2C_Regs.I2cCheck = 0;
    10A8: 55 43 00 MOV   [I2C_Regs+12],0x0
(0091) 				M8C_ClearWDT;
    10AB: 62 E3 00 MOV   REG[0xE3],0x0
(0092) 			}
(0093) 		}
(0094) 		
(0095) 		if (TmrFlag) // every 10ms
    10AE: 62 D0 00 MOV   REG[0xD0],0x0
    10B1: 3C 82 00 CMP   [TmrFlag],0x0
    10B4: A0 0B    JZ    0x10C0
(0096) 		{	
(0097) 			TmrFlag = 0;
    10B6: 55 82 00 MOV   [TmrFlag],0x0
(0098) 			ADCINCVR_pot_GetSamples(1);    // Start ADC to read 1 sample
    10B9: 10       PUSH  X
    10BA: 50 01    MOV   A,0x1
    10BC: 7C 0A 15 LCALL 0x0A15
    10BF: 20       POP   X
(0099) 		}
(0100) 		
(0101) 		if (Tmr1 > 9) // every 100ms
    10C0: 62 D0 00 MOV   REG[0xD0],0x0
    10C3: 50 09    MOV   A,0x9
    10C5: 12 7C    SUB   A,[Tmr1+1]
    10C7: 50 00    MOV   A,0x0
    10C9: 1A 7B    SBB   A,[Tmr1]
    10CB: D0 15    JNC   0x10E1
(0102) 		{
(0103) 			Tmr1 = 0;
    10CD: 62 D0 00 MOV   REG[0xD0],0x0
    10D0: 55 7C 00 MOV   [Tmr1+1],0x0
    10D3: 55 7B 00 MOV   [Tmr1],0x0
(0104) 			Tmr2 = 0;
    10D6: 62 D0 00 MOV   REG[0xD0],0x0
    10D9: 55 7A 00 MOV   [Tmr2+1],0x0
    10DC: 55 79 00 MOV   [Tmr2],0x0
(0105) 		 	// UartTxValues(); // uncomment this line for debug
(0106) 		 	// M8C_ClearWDT;   // uncomment this line for debug without I2C master
(0107) 			DigitalOut();
    10DF: 93 6A    CALL  _DigitalOut
(0108) 		}
(0109) 	}// ========================================================== Main loop 
    10E1: 8B 56    JMP   0x0C38
    10E3: 38 FB    ADD   SP,0xFB
    10E5: 20       POP   X
    10E6: 8F FF    JMP   0x10E6
(0110) }
(0111) 
(0112) // Functions ***************************************************************
(0113) 
(0114) void AGC(void)
(0115) {// [5]
(0116) 	     if((MesValue[PortIndx][2] > V_MAX) && (GainIndx[PortIndx][1] > I_MIN))// PGA_out
_AGC:
    10E8: 62 D0 00 MOV   REG[0xD0],0x0
    10EB: 51 81    MOV   A,[PortIndx]
    10ED: 62 D0 00 MOV   REG[0xD0],0x0
    10F0: 53 54    MOV   [__r1],A
    10F2: 50 00    MOV   A,0x0
    10F4: 08       PUSH  A
    10F5: 51 54    MOV   A,[__r1]
    10F7: 08       PUSH  A
    10F8: 50 00    MOV   A,0x0
    10FA: 08       PUSH  A
    10FB: 50 0C    MOV   A,0xC
    10FD: 08       PUSH  A
    10FE: 7C 1E C0 LCALL __mul16
    1101: 38 FC    ADD   SP,0xFC
    1103: 51 49    MOV   A,[__rX]
    1105: 53 54    MOV   [__r1],A
    1107: 51 48    MOV   A,[__rY]
    1109: 53 55    MOV   [__r0],A
    110B: 06 54 1B ADD   [__r1],0x1B
    110E: 0E 55 00 ADC   [__r0],0x0
    1111: 51 55    MOV   A,[__r0]
    1113: 60 D4    MOV   REG[0xD4],A
    1115: 3E 54    MVI   A,[__r1]
    1117: 53 51    MOV   [__r4],A
    1119: 3E 54    MVI   A,[__r1]
    111B: 53 50    MOV   [__r5],A
    111D: 3E 54    MVI   A,[__r1]
    111F: 53 4F    MOV   [__r6],A
    1121: 3E 54    MVI   A,[__r1]
    1123: 53 4E    MOV   [__r7],A
    1125: 50 40    MOV   A,0x40
    1127: 12 4E    SUB   A,[__r7]
    1129: 50 0D    MOV   A,0xD
    112B: 1A 4F    SBB   A,[__r6]
    112D: 50 03    MOV   A,0x3
    112F: 1A 50    SBB   A,[__r5]
    1131: 51 51    MOV   A,[__r4]
    1133: 31 80    XOR   A,0x80
    1135: 53 49    MOV   [__rX],A
    1137: 50 80    MOV   A,0x80
    1139: 1A 49    SBB   A,[__rX]
    113B: D0 8B    JNC   0x11C7
    113D: 62 D0 00 MOV   REG[0xD0],0x0
    1140: 51 81    MOV   A,[PortIndx]
    1142: 62 D0 00 MOV   REG[0xD0],0x0
    1145: 53 54    MOV   [__r1],A
    1147: 55 55 00 MOV   [__r0],0x0
    114A: 65 54    ASL   [__r1]
    114C: 6B 55    RLC   [__r0]
    114E: 06 54 6C ADD   [__r1],0x6C
    1151: 0E 55 00 ADC   [__r0],0x0
    1154: 51 55    MOV   A,[__r0]
    1156: 60 D4    MOV   REG[0xD4],A
    1158: 3E 54    MVI   A,[__r1]
    115A: 53 55    MOV   [__r0],A
    115C: 50 00    MOV   A,0x0
    115E: 3A 55    CMP   A,[__r0]
    1160: D0 66    JNC   0x11C7
(0117) 	{
(0118) 		GainIndx[PortIndx][1]--;
    1162: 62 D0 00 MOV   REG[0xD0],0x0
    1165: 51 81    MOV   A,[PortIndx]
    1167: 62 D0 00 MOV   REG[0xD0],0x0
    116A: 53 54    MOV   [__r1],A
    116C: 55 55 00 MOV   [__r0],0x0
    116F: 65 54    ASL   [__r1]
    1171: 6B 55    RLC   [__r0]
    1173: 06 54 6C ADD   [__r1],0x6C
    1176: 0E 55 00 ADC   [__r0],0x0
    1179: 51 55    MOV   A,[__r0]
    117B: 60 D4    MOV   REG[0xD4],A
    117D: 3E 54    MVI   A,[__r1]
    117F: 7A 54    DEC   [__r1]
    1181: 53 53    MOV   [__r2],A
    1183: 16 53 01 SUB   [__r2],0x1
    1186: 51 55    MOV   A,[__r0]
    1188: 60 D5    MOV   REG[0xD5],A
    118A: 51 53    MOV   A,[__r2]
    118C: 3F 54    MVI   [__r1],A
(0119) 		PGA_out_SetGain(GF[GainIndx[PortIndx][1]][0]); // set gain on PGA
    118E: 62 D0 00 MOV   REG[0xD0],0x0
    1191: 51 81    MOV   A,[PortIndx]
    1193: 62 D0 00 MOV   REG[0xD0],0x0
    1196: 53 54    MOV   [__r1],A
    1198: 55 55 00 MOV   [__r0],0x0
    119B: 65 54    ASL   [__r1]
    119D: 6B 55    RLC   [__r0]
    119F: 06 54 6C ADD   [__r1],0x6C
    11A2: 0E 55 00 ADC   [__r0],0x0
    11A5: 51 55    MOV   A,[__r0]
    11A7: 60 D4    MOV   REG[0xD4],A
    11A9: 3E 54    MVI   A,[__r1]
    11AB: 53 54    MOV   [__r1],A
    11AD: 55 55 00 MOV   [__r0],0x0
    11B0: 65 54    ASL   [__r1]
    11B2: 6B 55    RLC   [__r0]
    11B4: 06 54 56 ADD   [__r1],0x56
    11B7: 0E 55 00 ADC   [__r0],0x0
    11BA: 51 55    MOV   A,[__r0]
    11BC: 60 D4    MOV   REG[0xD4],A
    11BE: 3E 54    MVI   A,[__r1]
    11C0: 10       PUSH  X
    11C1: 7C 05 C3 LCALL 0x05C3
    11C4: 20       POP   X
(0120) 	}
    11C5: 82 84    JMP   0x144A
(0121) 	else if((MesValue[PortIndx][1] > V_MAX) && (GainIndx[PortIndx][0] > I_MIN))// PGA_pre
    11C7: 62 D0 00 MOV   REG[0xD0],0x0
    11CA: 51 81    MOV   A,[PortIndx]
    11CC: 62 D0 00 MOV   REG[0xD0],0x0
    11CF: 53 54    MOV   [__r1],A
    11D1: 50 00    MOV   A,0x0
    11D3: 08       PUSH  A
    11D4: 51 54    MOV   A,[__r1]
    11D6: 08       PUSH  A
    11D7: 50 00    MOV   A,0x0
    11D9: 08       PUSH  A
    11DA: 50 0C    MOV   A,0xC
    11DC: 08       PUSH  A
    11DD: 7C 1E C0 LCALL __mul16
    11E0: 38 FC    ADD   SP,0xFC
    11E2: 51 49    MOV   A,[__rX]
    11E4: 53 54    MOV   [__r1],A
    11E6: 51 48    MOV   A,[__rY]
    11E8: 53 55    MOV   [__r0],A
    11EA: 06 54 17 ADD   [__r1],0x17
    11ED: 0E 55 00 ADC   [__r0],0x0
    11F0: 51 55    MOV   A,[__r0]
    11F2: 60 D4    MOV   REG[0xD4],A
    11F4: 3E 54    MVI   A,[__r1]
    11F6: 53 51    MOV   [__r4],A
    11F8: 3E 54    MVI   A,[__r1]
    11FA: 53 50    MOV   [__r5],A
    11FC: 3E 54    MVI   A,[__r1]
    11FE: 53 4F    MOV   [__r6],A
    1200: 3E 54    MVI   A,[__r1]
    1202: 53 4E    MOV   [__r7],A
    1204: 50 40    MOV   A,0x40
    1206: 12 4E    SUB   A,[__r7]
    1208: 50 0D    MOV   A,0xD
    120A: 1A 4F    SBB   A,[__r6]
    120C: 50 03    MOV   A,0x3
    120E: 1A 50    SBB   A,[__r5]
    1210: 51 51    MOV   A,[__r4]
    1212: 31 80    XOR   A,0x80
    1214: 53 49    MOV   [__rX],A
    1216: 50 80    MOV   A,0x80
    1218: 1A 49    SBB   A,[__rX]
    121A: D0 8B    JNC   0x12A6
    121C: 62 D0 00 MOV   REG[0xD0],0x0
    121F: 51 81    MOV   A,[PortIndx]
    1221: 62 D0 00 MOV   REG[0xD0],0x0
    1224: 53 54    MOV   [__r1],A
    1226: 55 55 00 MOV   [__r0],0x0
    1229: 65 54    ASL   [__r1]
    122B: 6B 55    RLC   [__r0]
    122D: 06 54 6B ADD   [__r1],0x6B
    1230: 0E 55 00 ADC   [__r0],0x0
    1233: 51 55    MOV   A,[__r0]
    1235: 60 D4    MOV   REG[0xD4],A
    1237: 3E 54    MVI   A,[__r1]
    1239: 53 55    MOV   [__r0],A
    123B: 50 00    MOV   A,0x0
    123D: 3A 55    CMP   A,[__r0]
    123F: D0 66    JNC   0x12A6
(0122) 	{
(0123) 		GainIndx[PortIndx][0]--;
    1241: 62 D0 00 MOV   REG[0xD0],0x0
    1244: 51 81    MOV   A,[PortIndx]
    1246: 62 D0 00 MOV   REG[0xD0],0x0
    1249: 53 54    MOV   [__r1],A
    124B: 55 55 00 MOV   [__r0],0x0
    124E: 65 54    ASL   [__r1]
    1250: 6B 55    RLC   [__r0]
    1252: 06 54 6B ADD   [__r1],0x6B
    1255: 0E 55 00 ADC   [__r0],0x0
    1258: 51 55    MOV   A,[__r0]
    125A: 60 D4    MOV   REG[0xD4],A
    125C: 3E 54    MVI   A,[__r1]
    125E: 7A 54    DEC   [__r1]
    1260: 53 53    MOV   [__r2],A
    1262: 16 53 01 SUB   [__r2],0x1
    1265: 51 55    MOV   A,[__r0]
    1267: 60 D5    MOV   REG[0xD5],A
    1269: 51 53    MOV   A,[__r2]
    126B: 3F 54    MVI   [__r1],A
(0124) 		PGA_pre_SetGain(GF[GainIndx[PortIndx][0]][0]); // set gain on PGA
    126D: 62 D0 00 MOV   REG[0xD0],0x0
    1270: 51 81    MOV   A,[PortIndx]
    1272: 62 D0 00 MOV   REG[0xD0],0x0
    1275: 53 54    MOV   [__r1],A
    1277: 55 55 00 MOV   [__r0],0x0
    127A: 65 54    ASL   [__r1]
    127C: 6B 55    RLC   [__r0]
    127E: 06 54 6B ADD   [__r1],0x6B
    1281: 0E 55 00 ADC   [__r0],0x0
    1284: 51 55    MOV   A,[__r0]
    1286: 60 D4    MOV   REG[0xD4],A
    1288: 3E 54    MVI   A,[__r1]
    128A: 53 54    MOV   [__r1],A
    128C: 55 55 00 MOV   [__r0],0x0
    128F: 65 54    ASL   [__r1]
    1291: 6B 55    RLC   [__r0]
    1293: 06 54 56 ADD   [__r1],0x56
    1296: 0E 55 00 ADC   [__r0],0x0
    1299: 51 55    MOV   A,[__r0]
    129B: 60 D4    MOV   REG[0xD4],A
    129D: 3E 54    MVI   A,[__r1]
    129F: 10       PUSH  X
    12A0: 7C 05 83 LCALL 0x0583
    12A3: 20       POP   X
(0125) 	}
    12A4: 81 A5    JMP   0x144A
(0126) 	else if((MesValue[PortIndx][2] < V_MIN) && (GainIndx[PortIndx][1] < I_MAX))// PGA_out
    12A6: 62 D0 00 MOV   REG[0xD0],0x0
    12A9: 51 81    MOV   A,[PortIndx]
    12AB: 62 D0 00 MOV   REG[0xD0],0x0
    12AE: 53 54    MOV   [__r1],A
    12B0: 50 00    MOV   A,0x0
    12B2: 08       PUSH  A
    12B3: 51 54    MOV   A,[__r1]
    12B5: 08       PUSH  A
    12B6: 50 00    MOV   A,0x0
    12B8: 08       PUSH  A
    12B9: 50 0C    MOV   A,0xC
    12BB: 08       PUSH  A
    12BC: 7C 1E C0 LCALL __mul16
    12BF: 38 FC    ADD   SP,0xFC
    12C1: 51 49    MOV   A,[__rX]
    12C3: 53 54    MOV   [__r1],A
    12C5: 51 48    MOV   A,[__rY]
    12C7: 53 55    MOV   [__r0],A
    12C9: 06 54 1B ADD   [__r1],0x1B
    12CC: 0E 55 00 ADC   [__r0],0x0
    12CF: 51 55    MOV   A,[__r0]
    12D1: 60 D4    MOV   REG[0xD4],A
    12D3: 3E 54    MVI   A,[__r1]
    12D5: 53 51    MOV   [__r4],A
    12D7: 3E 54    MVI   A,[__r1]
    12D9: 53 50    MOV   [__r5],A
    12DB: 3E 54    MVI   A,[__r1]
    12DD: 53 4F    MOV   [__r6],A
    12DF: 3E 54    MVI   A,[__r1]
    12E1: 11 50    SUB   A,0x50
    12E3: 51 4F    MOV   A,[__r6]
    12E5: 19 C3    SBB   A,0xC3
    12E7: 51 50    MOV   A,[__r5]
    12E9: 19 00    SBB   A,0x0
    12EB: 51 51    MOV   A,[__r4]
    12ED: 31 80    XOR   A,0x80
    12EF: 19 80    SBB   A,0x80
    12F1: D0 87    JNC   0x1379
    12F3: 62 D0 00 MOV   REG[0xD0],0x0
    12F6: 51 81    MOV   A,[PortIndx]
    12F8: 62 D0 00 MOV   REG[0xD0],0x0
    12FB: 53 54    MOV   [__r1],A
    12FD: 55 55 00 MOV   [__r0],0x0
    1300: 65 54    ASL   [__r1]
    1302: 6B 55    RLC   [__r0]
    1304: 06 54 6C ADD   [__r1],0x6C
    1307: 0E 55 00 ADC   [__r0],0x0
    130A: 51 55    MOV   A,[__r0]
    130C: 60 D4    MOV   REG[0xD4],A
    130E: 3E 54    MVI   A,[__r1]
    1310: 39 06    CMP   A,0x6
    1312: D0 66    JNC   0x1379
(0127) 	{
(0128) 		GainIndx[PortIndx][1]++;
    1314: 62 D0 00 MOV   REG[0xD0],0x0
    1317: 51 81    MOV   A,[PortIndx]
    1319: 62 D0 00 MOV   REG[0xD0],0x0
    131C: 53 54    MOV   [__r1],A
    131E: 55 55 00 MOV   [__r0],0x0
    1321: 65 54    ASL   [__r1]
    1323: 6B 55    RLC   [__r0]
    1325: 06 54 6C ADD   [__r1],0x6C
    1328: 0E 55 00 ADC   [__r0],0x0
    132B: 51 55    MOV   A,[__r0]
    132D: 60 D4    MOV   REG[0xD4],A
    132F: 3E 54    MVI   A,[__r1]
    1331: 7A 54    DEC   [__r1]
    1333: 53 53    MOV   [__r2],A
    1335: 06 53 01 ADD   [__r2],0x1
    1338: 51 55    MOV   A,[__r0]
    133A: 60 D5    MOV   REG[0xD5],A
    133C: 51 53    MOV   A,[__r2]
    133E: 3F 54    MVI   [__r1],A
(0129) 		PGA_out_SetGain(GF[GainIndx[PortIndx][1]][0]); // set gain on PGA
    1340: 62 D0 00 MOV   REG[0xD0],0x0
    1343: 51 81    MOV   A,[PortIndx]
    1345: 62 D0 00 MOV   REG[0xD0],0x0
    1348: 53 54    MOV   [__r1],A
    134A: 55 55 00 MOV   [__r0],0x0
    134D: 65 54    ASL   [__r1]
    134F: 6B 55    RLC   [__r0]
    1351: 06 54 6C ADD   [__r1],0x6C
    1354: 0E 55 00 ADC   [__r0],0x0
    1357: 51 55    MOV   A,[__r0]
    1359: 60 D4    MOV   REG[0xD4],A
    135B: 3E 54    MVI   A,[__r1]
    135D: 53 54    MOV   [__r1],A
    135F: 55 55 00 MOV   [__r0],0x0
    1362: 65 54    ASL   [__r1]
    1364: 6B 55    RLC   [__r0]
    1366: 06 54 56 ADD   [__r1],0x56
    1369: 0E 55 00 ADC   [__r0],0x0
    136C: 51 55    MOV   A,[__r0]
    136E: 60 D4    MOV   REG[0xD4],A
    1370: 3E 54    MVI   A,[__r1]
    1372: 10       PUSH  X
    1373: 7C 05 C3 LCALL 0x05C3
    1376: 20       POP   X
(0130) 	}
    1377: 80 D2    JMP   0x144A
(0131) 	else if((MesValue[PortIndx][1] < V_MIN) && (GainIndx[PortIndx][0] < I_MAX))// PGA_pre
    1379: 62 D0 00 MOV   REG[0xD0],0x0
    137C: 51 81    MOV   A,[PortIndx]
    137E: 62 D0 00 MOV   REG[0xD0],0x0
    1381: 53 54    MOV   [__r1],A
    1383: 50 00    MOV   A,0x0
    1385: 08       PUSH  A
    1386: 51 54    MOV   A,[__r1]
    1388: 08       PUSH  A
    1389: 50 00    MOV   A,0x0
    138B: 08       PUSH  A
    138C: 50 0C    MOV   A,0xC
    138E: 08       PUSH  A
    138F: 7C 1E C0 LCALL __mul16
    1392: 38 FC    ADD   SP,0xFC
    1394: 51 49    MOV   A,[__rX]
    1396: 53 54    MOV   [__r1],A
    1398: 51 48    MOV   A,[__rY]
    139A: 53 55    MOV   [__r0],A
    139C: 06 54 17 ADD   [__r1],0x17
    139F: 0E 55 00 ADC   [__r0],0x0
    13A2: 51 55    MOV   A,[__r0]
    13A4: 60 D4    MOV   REG[0xD4],A
    13A6: 3E 54    MVI   A,[__r1]
    13A8: 53 51    MOV   [__r4],A
    13AA: 3E 54    MVI   A,[__r1]
    13AC: 53 50    MOV   [__r5],A
    13AE: 3E 54    MVI   A,[__r1]
    13B0: 53 4F    MOV   [__r6],A
    13B2: 3E 54    MVI   A,[__r1]
    13B4: 11 50    SUB   A,0x50
    13B6: 51 4F    MOV   A,[__r6]
    13B8: 19 C3    SBB   A,0xC3
    13BA: 51 50    MOV   A,[__r5]
    13BC: 19 00    SBB   A,0x0
    13BE: 51 51    MOV   A,[__r4]
    13C0: 31 80    XOR   A,0x80
    13C2: 19 80    SBB   A,0x80
    13C4: D0 85    JNC   0x144A
    13C6: 62 D0 00 MOV   REG[0xD0],0x0
    13C9: 51 81    MOV   A,[PortIndx]
    13CB: 62 D0 00 MOV   REG[0xD0],0x0
    13CE: 53 54    MOV   [__r1],A
    13D0: 55 55 00 MOV   [__r0],0x0
    13D3: 65 54    ASL   [__r1]
    13D5: 6B 55    RLC   [__r0]
    13D7: 06 54 6B ADD   [__r1],0x6B
    13DA: 0E 55 00 ADC   [__r0],0x0
    13DD: 51 55    MOV   A,[__r0]
    13DF: 60 D4    MOV   REG[0xD4],A
    13E1: 3E 54    MVI   A,[__r1]
    13E3: 39 06    CMP   A,0x6
    13E5: D0 64    JNC   0x144A
(0132) 	{
(0133) 		GainIndx[PortIndx][0]++;
    13E7: 62 D0 00 MOV   REG[0xD0],0x0
    13EA: 51 81    MOV   A,[PortIndx]
    13EC: 62 D0 00 MOV   REG[0xD0],0x0
    13EF: 53 54    MOV   [__r1],A
    13F1: 55 55 00 MOV   [__r0],0x0
    13F4: 65 54    ASL   [__r1]
    13F6: 6B 55    RLC   [__r0]
    13F8: 06 54 6B ADD   [__r1],0x6B
    13FB: 0E 55 00 ADC   [__r0],0x0
    13FE: 51 55    MOV   A,[__r0]
    1400: 60 D4    MOV   REG[0xD4],A
    1402: 3E 54    MVI   A,[__r1]
    1404: 7A 54    DEC   [__r1]
    1406: 53 53    MOV   [__r2],A
    1408: 06 53 01 ADD   [__r2],0x1
    140B: 51 55    MOV   A,[__r0]
    140D: 60 D5    MOV   REG[0xD5],A
    140F: 51 53    MOV   A,[__r2]
    1411: 3F 54    MVI   [__r1],A
(0134) 		PGA_pre_SetGain(GF[GainIndx[PortIndx][0]][0]); // set gain on PGA
    1413: 62 D0 00 MOV   REG[0xD0],0x0
    1416: 51 81    MOV   A,[PortIndx]
    1418: 62 D0 00 MOV   REG[0xD0],0x0
    141B: 53 54    MOV   [__r1],A
    141D: 55 55 00 MOV   [__r0],0x0
    1420: 65 54    ASL   [__r1]
    1422: 6B 55    RLC   [__r0]
    1424: 06 54 6B ADD   [__r1],0x6B
    1427: 0E 55 00 ADC   [__r0],0x0
    142A: 51 55    MOV   A,[__r0]
    142C: 60 D4    MOV   REG[0xD4],A
    142E: 3E 54    MVI   A,[__r1]
    1430: 53 54    MOV   [__r1],A
    1432: 55 55 00 MOV   [__r0],0x0
    1435: 65 54    ASL   [__r1]
    1437: 6B 55    RLC   [__r0]
    1439: 06 54 56 ADD   [__r1],0x56
    143C: 0E 55 00 ADC   [__r0],0x0
    143F: 51 55    MOV   A,[__r0]
    1441: 60 D4    MOV   REG[0xD4],A
    1443: 3E 54    MVI   A,[__r1]
    1445: 10       PUSH  X
    1446: 7C 05 83 LCALL 0x0583
    1449: 20       POP   X
(0135) 	}	
    144A: 7F       RET   
(0136) }
(0137) 
(0138) void DigitalOut(void)
(0139) {// Controls the outputs according to pot setting point
(0140) 	DIGITAL_OUT_Off();
_DigitalOut:
    144B: 10       PUSH  X
    144C: 7C 08 4D LCALL 0x084D
    144F: 20       POP   X
(0141) 	if (MesValue[0][0]>PotValue)
    1450: 62 D0 00 MOV   REG[0xD0],0x0
    1453: 51 78    MOV   A,[PotValue+3]
    1455: 62 D0 00 MOV   REG[0xD0],0x0
    1458: 12 16    SUB   A,[MesValue+3]
    145A: 62 D0 00 MOV   REG[0xD0],0x0
    145D: 51 77    MOV   A,[PotValue+2]
    145F: 62 D0 00 MOV   REG[0xD0],0x0
    1462: 1A 15    SBB   A,[MesValue+2]
    1464: 62 D0 00 MOV   REG[0xD0],0x0
    1467: 51 76    MOV   A,[PotValue+1]
    1469: 62 D0 00 MOV   REG[0xD0],0x0
    146C: 1A 14    SBB   A,[MesValue+1]
    146E: 51 13    MOV   A,[MesValue]
    1470: 31 80    XOR   A,0x80
    1472: 62 D0 00 MOV   REG[0xD0],0x0
    1475: 53 49    MOV   [__rX],A
    1477: 62 D0 00 MOV   REG[0xD0],0x0
    147A: 51 75    MOV   A,[PotValue]
    147C: 31 80    XOR   A,0x80
    147E: 62 D0 00 MOV   REG[0xD0],0x0
    1481: 1A 49    SBB   A,[__rX]
    1483: D0 0B    JNC   0x148F
(0142) 	{
(0143) 		DIGITAL_OUT_On();
    1485: 10       PUSH  X
    1486: 7C 08 49 LCALL 0x0849
(0144) 		LED_3_On();
    1489: 7C 05 F1 LCALL 0x05F1
    148C: 20       POP   X
(0145) 	}
    148D: 80 06    JMP   0x1494
(0146) 	else
(0147) 	{
(0148) 		LED_3_Off();
    148F: 10       PUSH  X
    1490: 7C 05 F5 LCALL 0x05F5
    1493: 20       POP   X
(0149) 	}
(0150) 		
(0151) 	if (MesValue[1][0]>PotValue)
    1494: 62 D0 00 MOV   REG[0xD0],0x0
    1497: 51 78    MOV   A,[PotValue+3]
    1499: 62 D0 00 MOV   REG[0xD0],0x0
    149C: 12 22    SUB   A,[MesValue+15]
    149E: 62 D0 00 MOV   REG[0xD0],0x0
    14A1: 51 77    MOV   A,[PotValue+2]
    14A3: 62 D0 00 MOV   REG[0xD0],0x0
    14A6: 1A 21    SBB   A,[MesValue+14]
    14A8: 62 D0 00 MOV   REG[0xD0],0x0
    14AB: 51 76    MOV   A,[PotValue+1]
    14AD: 62 D0 00 MOV   REG[0xD0],0x0
    14B0: 1A 20    SBB   A,[MesValue+13]
    14B2: 51 1F    MOV   A,[MesValue+12]
    14B4: 31 80    XOR   A,0x80
    14B6: 62 D0 00 MOV   REG[0xD0],0x0
    14B9: 53 49    MOV   [__rX],A
    14BB: 62 D0 00 MOV   REG[0xD0],0x0
    14BE: 51 75    MOV   A,[PotValue]
    14C0: 31 80    XOR   A,0x80
    14C2: 62 D0 00 MOV   REG[0xD0],0x0
    14C5: 1A 49    SBB   A,[__rX]
    14C7: D0 0B    JNC   0x14D3
(0152) 	{
(0153) 		DIGITAL_OUT_On();
    14C9: 10       PUSH  X
    14CA: 7C 08 49 LCALL 0x0849
(0154) 		LED_2_On();
    14CD: 7C 06 2E LCALL 0x062E
    14D0: 20       POP   X
(0155) 	}
    14D1: 80 06    JMP   0x14D8
(0156) 	else
(0157) 	{
(0158) 		LED_2_Off();
    14D3: 10       PUSH  X
    14D4: 7C 06 32 LCALL 0x0632
    14D7: 20       POP   X
(0159) 	}
(0160) 	
(0161) 	if (MesValue[2][0]>PotValue)
    14D8: 62 D0 00 MOV   REG[0xD0],0x0
    14DB: 51 78    MOV   A,[PotValue+3]
    14DD: 62 D0 00 MOV   REG[0xD0],0x0
    14E0: 12 2E    SUB   A,[MesValue+27]
    14E2: 62 D0 00 MOV   REG[0xD0],0x0
    14E5: 51 77    MOV   A,[PotValue+2]
    14E7: 62 D0 00 MOV   REG[0xD0],0x0
    14EA: 1A 2D    SBB   A,[MesValue+26]
    14EC: 62 D0 00 MOV   REG[0xD0],0x0
    14EF: 51 76    MOV   A,[PotValue+1]
    14F1: 62 D0 00 MOV   REG[0xD0],0x0
    14F4: 1A 2C    SBB   A,[MesValue+25]
    14F6: 51 2B    MOV   A,[MesValue+24]
    14F8: 31 80    XOR   A,0x80
    14FA: 62 D0 00 MOV   REG[0xD0],0x0
    14FD: 53 49    MOV   [__rX],A
    14FF: 62 D0 00 MOV   REG[0xD0],0x0
    1502: 51 75    MOV   A,[PotValue]
    1504: 31 80    XOR   A,0x80
    1506: 62 D0 00 MOV   REG[0xD0],0x0
    1509: 1A 49    SBB   A,[__rX]
    150B: D0 0B    JNC   0x1517
(0162) 	{
(0163) 		DIGITAL_OUT_On();
    150D: 10       PUSH  X
    150E: 7C 08 49 LCALL 0x0849
(0164) 		LED_1_On();
    1511: 7C 06 6B LCALL 0x066B
    1514: 20       POP   X
(0165) 	}
    1515: 80 06    JMP   0x151C
(0166) 	else
(0167) 	{
(0168) 		LED_1_Off();
    1517: 10       PUSH  X
    1518: 7C 06 6F LCALL 0x066F
    151B: 20       POP   X
(0169) 	}
    151C: 7F       RET   
(0170) }
(0171) 
(0172) void UartTxValues(void)
(0173) {/* Transmit via UART the analog values read from various inputs.
(0174) 	Usefull for debugging purposes, it could be converted in a
(0175) 	command string using the same protocol used for dsNav if
(0176) 	needed to output sound level values via serial comm
(0177) */
(0178) 	TX8_CPutString("\n\r");
_UartTxValues:
    151D: 10       PUSH  X
    151E: 50 01    MOV   A,0x1
    1520: 08       PUSH  A
    1521: 50 D4    MOV   A,0xD4
    1523: 5C       MOV   X,A
    1524: 18       POP   A
    1525: 7C 05 16 LCALL 0x0516
    1528: 20       POP   X
(0179) 	
(0180) /*	TX8_CPutString("Pot Value = ");
(0181) 	itoa(str, PotValue,10);
(0182) 	TX8_PutString(str);
(0183) */
(0184) 
(0185) 	TX8_CPutString("Mes: 1 = ");
    1529: 10       PUSH  X
    152A: 50 01    MOV   A,0x1
    152C: 08       PUSH  A
    152D: 50 CA    MOV   A,0xCA
    152F: 5C       MOV   X,A
    1530: 18       POP   A
    1531: 7C 05 16 LCALL 0x0516
    1534: 20       POP   X
(0186) 	ltoa(str, I2C_Regs.DbMesValue[0],10);
    1535: 50 00    MOV   A,0x0
    1537: 08       PUSH  A
    1538: 50 0A    MOV   A,0xA
    153A: 08       PUSH  A
    153B: 62 D0 00 MOV   REG[0xD0],0x0
    153E: 51 44    MOV   A,[I2C_Regs+13]
    1540: 62 D0 00 MOV   REG[0xD0],0x0
    1543: 53 52    MOV   [__r3],A
    1545: 50 00    MOV   A,0x0
    1547: 08       PUSH  A
    1548: 08       PUSH  A
    1549: 08       PUSH  A
    154A: 51 52    MOV   A,[__r3]
    154C: 08       PUSH  A
    154D: 50 00    MOV   A,0x0
    154F: 08       PUSH  A
    1550: 50 64    MOV   A,0x64
    1552: 08       PUSH  A
    1553: 7C 20 C9 LCALL _ltoa
    1556: 38 F8    ADD   SP,0xF8
(0187) 	TX8_PutString(str);
    1558: 10       PUSH  X
    1559: 50 00    MOV   A,0x0
    155B: 08       PUSH  A
    155C: 50 64    MOV   A,0x64
    155E: 5C       MOV   X,A
    155F: 18       POP   A
    1560: 7C 04 B4 LCALL 0x04B4
    1563: 20       POP   X
(0188) 	TX8_CPutString("  -  2 = ");
    1564: 10       PUSH  X
    1565: 50 01    MOV   A,0x1
    1567: 08       PUSH  A
    1568: 50 C0    MOV   A,0xC0
    156A: 5C       MOV   X,A
    156B: 18       POP   A
    156C: 7C 05 16 LCALL 0x0516
    156F: 20       POP   X
(0189) 	ltoa(str, I2C_Regs.DbMesValue[1],10);
    1570: 50 00    MOV   A,0x0
    1572: 08       PUSH  A
    1573: 50 0A    MOV   A,0xA
    1575: 08       PUSH  A
    1576: 62 D0 00 MOV   REG[0xD0],0x0
    1579: 51 45    MOV   A,[I2C_Regs+14]
    157B: 62 D0 00 MOV   REG[0xD0],0x0
    157E: 53 52    MOV   [__r3],A
    1580: 50 00    MOV   A,0x0
    1582: 08       PUSH  A
    1583: 08       PUSH  A
    1584: 08       PUSH  A
    1585: 51 52    MOV   A,[__r3]
    1587: 08       PUSH  A
    1588: 50 00    MOV   A,0x0
    158A: 08       PUSH  A
    158B: 50 64    MOV   A,0x64
    158D: 08       PUSH  A
    158E: 7C 20 C9 LCALL _ltoa
    1591: 38 F8    ADD   SP,0xF8
(0190) 	TX8_PutString(str);
    1593: 10       PUSH  X
    1594: 50 00    MOV   A,0x0
    1596: 08       PUSH  A
    1597: 50 64    MOV   A,0x64
    1599: 5C       MOV   X,A
    159A: 18       POP   A
    159B: 7C 04 B4 LCALL 0x04B4
    159E: 20       POP   X
(0191) 	TX8_CPutString("  -  3 = ");
    159F: 10       PUSH  X
    15A0: 50 01    MOV   A,0x1
    15A2: 08       PUSH  A
    15A3: 50 B6    MOV   A,0xB6
    15A5: 5C       MOV   X,A
    15A6: 18       POP   A
    15A7: 7C 05 16 LCALL 0x0516
    15AA: 20       POP   X
(0192) 	ltoa(str, I2C_Regs.DbMesValue[2],10);
    15AB: 50 00    MOV   A,0x0
    15AD: 08       PUSH  A
    15AE: 50 0A    MOV   A,0xA
    15B0: 08       PUSH  A
    15B1: 62 D0 00 MOV   REG[0xD0],0x0
    15B4: 51 46    MOV   A,[I2C_Regs+15]
    15B6: 62 D0 00 MOV   REG[0xD0],0x0
    15B9: 53 52    MOV   [__r3],A
    15BB: 50 00    MOV   A,0x0
    15BD: 08       PUSH  A
    15BE: 08       PUSH  A
    15BF: 08       PUSH  A
    15C0: 51 52    MOV   A,[__r3]
    15C2: 08       PUSH  A
    15C3: 50 00    MOV   A,0x0
    15C5: 08       PUSH  A
    15C6: 50 64    MOV   A,0x64
    15C8: 08       PUSH  A
    15C9: 7C 20 C9 LCALL _ltoa
    15CC: 38 F8    ADD   SP,0xF8
(0193) 	TX8_PutString(str);
    15CE: 10       PUSH  X
    15CF: 50 00    MOV   A,0x0
    15D1: 08       PUSH  A
    15D2: 50 64    MOV   A,0x64
    15D4: 5C       MOV   X,A
    15D5: 18       POP   A
    15D6: 7C 04 B4 LCALL 0x04B4
    15D9: 20       POP   X
(0194) 	TX8_CPutString(" Pre: 1 = ");
    15DA: 10       PUSH  X
    15DB: 50 01    MOV   A,0x1
    15DD: 08       PUSH  A
    15DE: 50 AB    MOV   A,0xAB
    15E0: 5C       MOV   X,A
    15E1: 18       POP   A
    15E2: 7C 05 16 LCALL 0x0516
    15E5: 20       POP   X
(0195) 	itoa(str, GF[GainIndx[0][0]][1], 10);
    15E6: 50 00    MOV   A,0x0
    15E8: 08       PUSH  A
    15E9: 50 0A    MOV   A,0xA
    15EB: 08       PUSH  A
    15EC: 62 D0 00 MOV   REG[0xD0],0x0
    15EF: 51 6B    MOV   A,[GainIndx]
    15F1: 62 D0 00 MOV   REG[0xD0],0x0
    15F4: 53 54    MOV   [__r1],A
    15F6: 55 55 00 MOV   [__r0],0x0
    15F9: 65 54    ASL   [__r1]
    15FB: 6B 55    RLC   [__r0]
    15FD: 06 54 57 ADD   [__r1],0x57
    1600: 0E 55 00 ADC   [__r0],0x0
    1603: 51 55    MOV   A,[__r0]
    1605: 60 D4    MOV   REG[0xD4],A
    1607: 3E 54    MVI   A,[__r1]
    1609: 53 54    MOV   [__r1],A
    160B: 50 00    MOV   A,0x0
    160D: 08       PUSH  A
    160E: 51 54    MOV   A,[__r1]
    1610: 08       PUSH  A
    1611: 50 00    MOV   A,0x0
    1613: 08       PUSH  A
    1614: 50 64    MOV   A,0x64
    1616: 08       PUSH  A
    1617: 7C 1E F0 LCALL _itoa
    161A: 38 FA    ADD   SP,0xFA
(0196) 	TX8_PutString(str);
    161C: 10       PUSH  X
    161D: 50 00    MOV   A,0x0
    161F: 08       PUSH  A
    1620: 50 64    MOV   A,0x64
    1622: 5C       MOV   X,A
    1623: 18       POP   A
    1624: 7C 04 B4 LCALL 0x04B4
    1627: 20       POP   X
(0197) 	TX8_CPutString("  -  2 = ");
    1628: 10       PUSH  X
    1629: 50 01    MOV   A,0x1
    162B: 08       PUSH  A
    162C: 50 C0    MOV   A,0xC0
    162E: 5C       MOV   X,A
    162F: 18       POP   A
    1630: 7C 05 16 LCALL 0x0516
    1633: 20       POP   X
(0198) 	itoa(str, GF[GainIndx[1][0]][1], 10);
    1634: 50 00    MOV   A,0x0
    1636: 08       PUSH  A
    1637: 50 0A    MOV   A,0xA
    1639: 08       PUSH  A
    163A: 62 D0 00 MOV   REG[0xD0],0x0
    163D: 51 6D    MOV   A,[GainIndx+2]
    163F: 62 D0 00 MOV   REG[0xD0],0x0
    1642: 53 54    MOV   [__r1],A
    1644: 55 55 00 MOV   [__r0],0x0
    1647: 65 54    ASL   [__r1]
    1649: 6B 55    RLC   [__r0]
    164B: 06 54 57 ADD   [__r1],0x57
    164E: 0E 55 00 ADC   [__r0],0x0
    1651: 51 55    MOV   A,[__r0]
    1653: 60 D4    MOV   REG[0xD4],A
    1655: 3E 54    MVI   A,[__r1]
    1657: 53 54    MOV   [__r1],A
    1659: 50 00    MOV   A,0x0
    165B: 08       PUSH  A
    165C: 51 54    MOV   A,[__r1]
    165E: 08       PUSH  A
    165F: 50 00    MOV   A,0x0
    1661: 08       PUSH  A
    1662: 50 64    MOV   A,0x64
    1664: 08       PUSH  A
    1665: 7C 1E F0 LCALL _itoa
    1668: 38 FA    ADD   SP,0xFA
(0199) 	TX8_PutString(str);	
    166A: 10       PUSH  X
    166B: 50 00    MOV   A,0x0
    166D: 08       PUSH  A
    166E: 50 64    MOV   A,0x64
    1670: 5C       MOV   X,A
    1671: 18       POP   A
    1672: 7C 04 B4 LCALL 0x04B4
    1675: 20       POP   X
(0200) 	TX8_CPutString("  -  3 = ");
    1676: 10       PUSH  X
    1677: 50 01    MOV   A,0x1
    1679: 08       PUSH  A
    167A: 50 B6    MOV   A,0xB6
    167C: 5C       MOV   X,A
    167D: 18       POP   A
    167E: 7C 05 16 LCALL 0x0516
    1681: 20       POP   X
(0201) 	itoa(str, GF[GainIndx[2][0]][1], 10);
    1682: 50 00    MOV   A,0x0
    1684: 08       PUSH  A
    1685: 50 0A    MOV   A,0xA
    1687: 08       PUSH  A
    1688: 62 D0 00 MOV   REG[0xD0],0x0
    168B: 51 6F    MOV   A,[GainIndx+4]
    168D: 62 D0 00 MOV   REG[0xD0],0x0
    1690: 53 54    MOV   [__r1],A
    1692: 55 55 00 MOV   [__r0],0x0
    1695: 65 54    ASL   [__r1]
    1697: 6B 55    RLC   [__r0]
    1699: 06 54 57 ADD   [__r1],0x57
    169C: 0E 55 00 ADC   [__r0],0x0
    169F: 51 55    MOV   A,[__r0]
    16A1: 60 D4    MOV   REG[0xD4],A
    16A3: 3E 54    MVI   A,[__r1]
    16A5: 53 54    MOV   [__r1],A
    16A7: 50 00    MOV   A,0x0
    16A9: 08       PUSH  A
    16AA: 51 54    MOV   A,[__r1]
    16AC: 08       PUSH  A
    16AD: 50 00    MOV   A,0x0
    16AF: 08       PUSH  A
    16B0: 50 64    MOV   A,0x64
    16B2: 08       PUSH  A
    16B3: 7C 1E F0 LCALL _itoa
    16B6: 38 FA    ADD   SP,0xFA
(0202) 	TX8_PutString(str);	
    16B8: 10       PUSH  X
    16B9: 50 00    MOV   A,0x0
    16BB: 08       PUSH  A
    16BC: 50 64    MOV   A,0x64
    16BE: 5C       MOV   X,A
    16BF: 18       POP   A
    16C0: 7C 04 B4 LCALL 0x04B4
    16C3: 20       POP   X
(0203) 	TX8_CPutString(" Out: 1 = ");
    16C4: 10       PUSH  X
    16C5: 50 01    MOV   A,0x1
    16C7: 08       PUSH  A
    16C8: 50 A0    MOV   A,0xA0
    16CA: 5C       MOV   X,A
    16CB: 18       POP   A
    16CC: 7C 05 16 LCALL 0x0516
    16CF: 20       POP   X
(0204) 	itoa(str, GF[GainIndx[0][1]][1], 10);
    16D0: 50 00    MOV   A,0x0
    16D2: 08       PUSH  A
    16D3: 50 0A    MOV   A,0xA
    16D5: 08       PUSH  A
    16D6: 62 D0 00 MOV   REG[0xD0],0x0
    16D9: 51 6C    MOV   A,[GainIndx+1]
    16DB: 62 D0 00 MOV   REG[0xD0],0x0
    16DE: 53 54    MOV   [__r1],A
    16E0: 55 55 00 MOV   [__r0],0x0
    16E3: 65 54    ASL   [__r1]
    16E5: 6B 55    RLC   [__r0]
    16E7: 06 54 57 ADD   [__r1],0x57
    16EA: 0E 55 00 ADC   [__r0],0x0
    16ED: 51 55    MOV   A,[__r0]
    16EF: 60 D4    MOV   REG[0xD4],A
    16F1: 3E 54    MVI   A,[__r1]
    16F3: 53 54    MOV   [__r1],A
    16F5: 50 00    MOV   A,0x0
    16F7: 08       PUSH  A
    16F8: 51 54    MOV   A,[__r1]
    16FA: 08       PUSH  A
    16FB: 50 00    MOV   A,0x0
    16FD: 08       PUSH  A
    16FE: 50 64    MOV   A,0x64
    1700: 08       PUSH  A
    1701: 7C 1E F0 LCALL _itoa
    1704: 38 FA    ADD   SP,0xFA
(0205) 	TX8_PutString(str);
    1706: 10       PUSH  X
    1707: 50 00    MOV   A,0x0
    1709: 08       PUSH  A
    170A: 50 64    MOV   A,0x64
    170C: 5C       MOV   X,A
    170D: 18       POP   A
    170E: 7C 04 B4 LCALL 0x04B4
    1711: 20       POP   X
(0206) 	TX8_CPutString("  -  2 = ");
    1712: 10       PUSH  X
    1713: 50 01    MOV   A,0x1
    1715: 08       PUSH  A
    1716: 50 C0    MOV   A,0xC0
    1718: 5C       MOV   X,A
    1719: 18       POP   A
    171A: 7C 05 16 LCALL 0x0516
    171D: 20       POP   X
(0207) 	itoa(str, GF[GainIndx[1][1]][1], 10);
    171E: 50 00    MOV   A,0x0
    1720: 08       PUSH  A
    1721: 50 0A    MOV   A,0xA
    1723: 08       PUSH  A
    1724: 62 D0 00 MOV   REG[0xD0],0x0
    1727: 51 6E    MOV   A,[GainIndx+3]
    1729: 62 D0 00 MOV   REG[0xD0],0x0
    172C: 53 54    MOV   [__r1],A
    172E: 55 55 00 MOV   [__r0],0x0
    1731: 65 54    ASL   [__r1]
    1733: 6B 55    RLC   [__r0]
    1735: 06 54 57 ADD   [__r1],0x57
    1738: 0E 55 00 ADC   [__r0],0x0
    173B: 51 55    MOV   A,[__r0]
    173D: 60 D4    MOV   REG[0xD4],A
    173F: 3E 54    MVI   A,[__r1]
    1741: 53 54    MOV   [__r1],A
    1743: 50 00    MOV   A,0x0
    1745: 08       PUSH  A
    1746: 51 54    MOV   A,[__r1]
    1748: 08       PUSH  A
    1749: 50 00    MOV   A,0x0
    174B: 08       PUSH  A
    174C: 50 64    MOV   A,0x64
    174E: 08       PUSH  A
    174F: 7C 1E F0 LCALL _itoa
    1752: 38 FA    ADD   SP,0xFA
(0208) 	TX8_PutString(str);	
    1754: 10       PUSH  X
    1755: 50 00    MOV   A,0x0
    1757: 08       PUSH  A
    1758: 50 64    MOV   A,0x64
    175A: 5C       MOV   X,A
    175B: 18       POP   A
    175C: 7C 04 B4 LCALL 0x04B4
    175F: 20       POP   X
(0209) 	TX8_CPutString("  -  3 = ");
    1760: 10       PUSH  X
    1761: 50 01    MOV   A,0x1
    1763: 08       PUSH  A
    1764: 50 B6    MOV   A,0xB6
    1766: 5C       MOV   X,A
    1767: 18       POP   A
    1768: 7C 05 16 LCALL 0x0516
    176B: 20       POP   X
(0210) 	itoa(str, GF[GainIndx[2][1]][1], 10);
    176C: 50 00    MOV   A,0x0
    176E: 08       PUSH  A
    176F: 50 0A    MOV   A,0xA
    1771: 08       PUSH  A
    1772: 62 D0 00 MOV   REG[0xD0],0x0
    1775: 51 70    MOV   A,[GainIndx+5]
    1777: 62 D0 00 MOV   REG[0xD0],0x0
    177A: 53 54    MOV   [__r1],A
    177C: 55 55 00 MOV   [__r0],0x0
    177F: 65 54    ASL   [__r1]
    1781: 6B 55    RLC   [__r0]
    1783: 06 54 57 ADD   [__r1],0x57
    1786: 0E 55 00 ADC   [__r0],0x0
    1789: 51 55    MOV   A,[__r0]
    178B: 60 D4    MOV   REG[0xD4],A
    178D: 3E 54    MVI   A,[__r1]
    178F: 53 54    MOV   [__r1],A
    1791: 50 00    MOV   A,0x0
    1793: 08       PUSH  A
    1794: 51 54    MOV   A,[__r1]
    1796: 08       PUSH  A
    1797: 50 00    MOV   A,0x0
    1799: 08       PUSH  A
    179A: 50 64    MOV   A,0x64
    179C: 08       PUSH  A
    179D: 7C 1E F0 LCALL _itoa
    17A0: 38 FA    ADD   SP,0xFA
(0211) 	TX8_PutString(str);	
    17A2: 10       PUSH  X
    17A3: 50 00    MOV   A,0x0
    17A5: 08       PUSH  A
    17A6: 50 64    MOV   A,0x64
    17A8: 5C       MOV   X,A
    17A9: 18       POP   A
    17AA: 7C 04 B4 LCALL 0x04B4
    17AD: 20       POP   X
    17AE: 7F       RET   
(0212) 				
(0213) /*
(0214) 	TX8_CPutString("  --Pre = ");
(0215) 	itoa(str, MesValue[0][0], 10);
(0216) 	TX8_PutString(str);
(0217) 	
(0218) 	TX8_CPutString("  --Out = ");
(0219) 	itoa(str, MesValue[0][1], 10);
(0220) 	TX8_PutString(str);
(0221) 	
(0222) 	TX8_CPutString("  --Sum = ");
(0223) 	itoa(str, MesValueSum[0][0], 10);
(0224) 	TX8_PutString(str);
(0225) 	
(0226) 	TX8_CPutString("  --Count = ");
(0227) 	itoa(str, MesValueSum[0][1], 10);
(0228) 	TX8_PutString(str);
(0229) */
(0230) }
(0231) 	
(0232) void BlocksInit(void)
(0233) {// Analog and digital blocks inizialization
(0234) 	ADCINCVR_pot_Start(ADCINCVR_pot_HIGHPOWER);	
_BlocksInit:
    17AF: 10       PUSH  X
    17B0: 50 03    MOV   A,0x3
    17B2: 7C 09 F1 LCALL 0x09F1
    17B5: 20       POP   X
(0235) 	ADCINCVR_mes_Start(ADCINCVR_mes_HIGHPOWER);
    17B6: 10       PUSH  X
    17B7: 50 03    MOV   A,0x3
    17B9: 7C 0B 36 LCALL 0x0B36
(0236) 	AMUX4_mic_Start();
    17BC: 7C 09 68 LCALL 0x0968
    17BF: 20       POP   X
(0237) 	BPF4_4KHz_Start(BPF4_4KHz_HIGHPOWER);
    17C0: 10       PUSH  X
    17C1: 50 03    MOV   A,0x3
    17C3: 7C 08 86 LCALL 0x0886
    17C6: 20       POP   X
(0238) 	
(0239) 	 // Set up I2C RAM buffer  
(0240)    	EzI2Cs_1_SetRamBuffer(sizeof(I2C_Regs), 13, (BYTE *) &I2C_Regs);
    17C7: 10       PUSH  X
    17C8: 50 00    MOV   A,0x0
    17CA: 08       PUSH  A
    17CB: 50 37    MOV   A,0x37
    17CD: 08       PUSH  A
    17CE: 50 0D    MOV   A,0xD
    17D0: 08       PUSH  A
    17D1: 50 10    MOV   A,0x10
    17D3: 08       PUSH  A
    17D4: 7C 08 30 LCALL 0x0830
    17D7: 38 FC    ADD   SP,0xFC
(0241) 	EzI2Cs_1_Start(); // Turn on EzI2C 
    17D9: 7C 07 F2 LCALL 0x07F2
    17DC: 20       POP   X
(0242) 	
(0243) 	PGA_out_Start(PGA_out_HIGHPOWER);
    17DD: 10       PUSH  X
    17DE: 50 03    MOV   A,0x3
    17E0: 7C 05 B1 LCALL 0x05B1
    17E3: 20       POP   X
(0244) 	PGA_pre_Start(PGA_pre_HIGHPOWER); 
    17E4: 10       PUSH  X
    17E5: 50 03    MOV   A,0x3
    17E7: 7C 05 71 LCALL 0x0571
    17EA: 20       POP   X
(0245) 	RefMux_1_Start(RefMux_1_HIGHPOWER);
    17EB: 10       PUSH  X
    17EC: 50 03    MOV   A,0x3
    17EE: 7C 05 49 LCALL 0x0549
    17F1: 20       POP   X
(0246)     SCBLOCK_inbuff_Start(SCBLOCK_inbuff_HIGHPOWER);
    17F2: 10       PUSH  X
    17F3: 50 03    MOV   A,0x3
    17F5: 7C 05 31 LCALL 0x0531
(0247) 	LED_1_Start();
    17F8: 7C 06 6F LCALL 0x066F
(0248) 	LED_2_Start();
    17FB: 7C 06 32 LCALL 0x0632
(0249) 	LED_3_Start();
    17FE: 7C 05 F5 LCALL 0x05F5
(0250) 	DIGITAL_OUT_Start();  
    1801: 7C 08 4D LCALL 0x084D
(0251) 	
(0252) 	TX8_EnableInt();
    1804: 7C 04 59 LCALL 0x0459
    1807: 20       POP   X
(0253) 	TX8_Start(TX8_PARITY_NONE);
    1808: 10       PUSH  X
    1809: 50 00    MOV   A,0x0
    180B: 7C 04 73 LCALL 0x0473
    180E: 20       POP   X
(0254) 	
(0255) 	AMUX4_mic_InputSelect(AMUX4_mic_PORT0_1);
    180F: 10       PUSH  X
    1810: 50 00    MOV   A,0x0
    1812: 7C 09 4D LCALL 0x094D
    1815: 20       POP   X
(0256) 
(0257) 	PGA_pre_SetGain(GF[GainIndx[0][0]][0]);
    1816: 62 D0 00 MOV   REG[0xD0],0x0
    1819: 51 6B    MOV   A,[GainIndx]
    181B: 62 D0 00 MOV   REG[0xD0],0x0
    181E: 53 54    MOV   [__r1],A
    1820: 55 55 00 MOV   [__r0],0x0
    1823: 65 54    ASL   [__r1]
    1825: 6B 55    RLC   [__r0]
    1827: 06 54 56 ADD   [__r1],0x56
    182A: 0E 55 00 ADC   [__r0],0x0
    182D: 51 55    MOV   A,[__r0]
    182F: 60 D4    MOV   REG[0xD4],A
    1831: 3E 54    MVI   A,[__r1]
    1833: 10       PUSH  X
    1834: 7C 05 83 LCALL 0x0583
    1837: 20       POP   X
(0258) 	PGA_out_SetGain(GF[GainIndx[0][1]][0]);
    1838: 62 D0 00 MOV   REG[0xD0],0x0
    183B: 51 6C    MOV   A,[GainIndx+1]
    183D: 62 D0 00 MOV   REG[0xD0],0x0
    1840: 53 54    MOV   [__r1],A
    1842: 55 55 00 MOV   [__r0],0x0
    1845: 65 54    ASL   [__r1]
    1847: 6B 55    RLC   [__r0]
    1849: 06 54 56 ADD   [__r1],0x56
    184C: 0E 55 00 ADC   [__r0],0x0
    184F: 51 55    MOV   A,[__r0]
    1851: 60 D4    MOV   REG[0xD4],A
    1853: 3E 54    MVI   A,[__r1]
    1855: 10       PUSH  X
    1856: 7C 05 C3 LCALL 0x05C3
(0259) 	
(0260)     HB_Tmr_EnableInt();  
    1859: 7C 06 AC LCALL 0x06AC
(0261) 	HB_Tmr_Start();  	
    185C: 7C 06 B4 LCALL 0x06B4
    185F: 20       POP   X
    1860: 7F       RET   
(0262) }
(0263) 	
(0264) void HB_Tmr_ISR_C(void)
(0265) {// Base clock for all of the timings in the program
_HB_Tmr_ISR_C:
    1861: 71 C0    OR    F,0xC0
    1863: 08       PUSH  A
    1864: 5D D0    MOV   A,REG[0xD0]
    1866: 08       PUSH  A
(0266) 	TmrFlag = 1;
    1867: 62 D0 00 MOV   REG[0xD0],0x0
    186A: 55 82 01 MOV   [TmrFlag],0x1
(0267) 	Tmr1++;
    186D: 62 D0 00 MOV   REG[0xD0],0x0
    1870: 76 7C    INC   [Tmr1+1]
    1872: 0E 7B 00 ADC   [Tmr1],0x0
(0268) 	Tmr2++;
    1875: 62 D0 00 MOV   REG[0xD0],0x0
    1878: 76 7A    INC   [Tmr2+1]
    187A: 0E 79 00 ADC   [Tmr2],0x0
(0269) 	Time10ms++;	
    187D: 62 D0 00 MOV   REG[0xD0],0x0
    1880: 06 74 01 ADD   [Time10ms+3],0x1
    1883: 0E 73 00 ADC   [Time10ms+2],0x0
    1886: 0E 72 00 ADC   [Time10ms+1],0x0
    1889: 0E 71 00 ADC   [Time10ms],0x0
    188C: 18       POP   A
    188D: 60 D0    MOV   REG[0xD0],A
    188F: 18       POP   A
    1890: 7E       RETI  
(0270) }
(0271) 
(0272) void DelayMs(int Ms)
(0273) {
_DelayMs:
  i                    --> X+0
  Ms                   --> X-5
    1891: 10       PUSH  X
    1892: 4F       MOV   X,SP
    1893: 38 02    ADD   SP,0x2
(0274) 	int i;
(0275) 	M8C_ClearWDT; //WDT is every 1/8*3=375ms
    1895: 62 E3 00 MOV   REG[0xE3],0x0
(0276) 	for (i=0; i<Ms; i++)
    1898: 56 01 00 MOV   [X+1],0x0
    189B: 56 00 00 MOV   [X+0],0x0
    189E: 80 0D    JMP   0x18AC
(0277) 	{
(0278) 		Delay50uTimes(20);
    18A0: 10       PUSH  X
    18A1: 50 14    MOV   A,0x14
    18A3: 7C 0B F4 LCALL __text_start|Delay50uTimes|_Delay50uTimes
    18A6: 20       POP   X
(0279) 	}
    18A7: 77 01    INC   [X+1]
    18A9: 0F 00 00 ADC   [X+0],0x0
    18AC: 52 01    MOV   A,[X+1]
    18AE: 13 FC    SUB   A,[X-4]
    18B0: 52 FB    MOV   A,[X-5]
    18B2: 31 80    XOR   A,0x80
    18B4: 62 D0 00 MOV   REG[0xD0],0x0
    18B7: 53 49    MOV   [__rX],A
    18B9: 52 00    MOV   A,[X+0]
    18BB: 31 80    XOR   A,0x80
    18BD: 1A 49    SBB   A,[__rX]
    18BF: CF E0    JC    0x18A0
    18C1: 38 FE    ADD   SP,0xFE
    18C3: 20       POP   X
    18C4: 7F       RET   
(0280) }
(0281) 
(0282) void LedTest(void)
(0283) {
_LedTest:
  i                    --> X+0
    18C5: 10       PUSH  X
    18C6: 4F       MOV   X,SP
    18C7: 38 02    ADD   SP,0x2
(0284) 	int i;
(0285) 	LED_1_Off();
    18C9: 10       PUSH  X
    18CA: 7C 06 6F LCALL 0x066F
(0286) 	LED_2_Off();
    18CD: 7C 06 32 LCALL 0x0632
(0287) 	LED_3_Off();
    18D0: 7C 05 F5 LCALL 0x05F5
    18D3: 20       POP   X
(0288) 	
(0289) 	for (i=0; i<2; i++)
    18D4: 56 01 00 MOV   [X+1],0x0
    18D7: 56 00 00 MOV   [X+0],0x0
(0290) 	{
(0291) 		LED_1_On();
    18DA: 10       PUSH  X
    18DB: 7C 06 6B LCALL 0x066B
    18DE: 20       POP   X
(0292) 		DelayMs(150);
    18DF: 50 00    MOV   A,0x0
    18E1: 08       PUSH  A
    18E2: 50 96    MOV   A,0x96
    18E4: 08       PUSH  A
    18E5: 9F AA    CALL  _DelayMs
    18E7: 38 FE    ADD   SP,0xFE
(0293) 		LED_1_Off();
    18E9: 10       PUSH  X
    18EA: 7C 06 6F LCALL 0x066F
(0294) 		LED_2_On();
    18ED: 7C 06 2E LCALL 0x062E
    18F0: 20       POP   X
(0295) 		DelayMs(150);
    18F1: 50 00    MOV   A,0x0
    18F3: 08       PUSH  A
    18F4: 50 96    MOV   A,0x96
    18F6: 08       PUSH  A
    18F7: 9F 98    CALL  _DelayMs
    18F9: 38 FE    ADD   SP,0xFE
(0296) 		LED_2_Off();
    18FB: 10       PUSH  X
    18FC: 7C 06 32 LCALL 0x0632
(0297) 		LED_3_On();
    18FF: 7C 05 F1 LCALL 0x05F1
    1902: 20       POP   X
(0298) 		DelayMs(150);
    1903: 50 00    MOV   A,0x0
    1905: 08       PUSH  A
    1906: 50 96    MOV   A,0x96
    1908: 08       PUSH  A
    1909: 9F 86    CALL  _DelayMs
    190B: 38 FE    ADD   SP,0xFE
(0299) 		LED_3_Off();
    190D: 10       PUSH  X
    190E: 7C 05 F5 LCALL 0x05F5
    1911: 20       POP   X
(0300) 	}
    1912: 77 01    INC   [X+1]
    1914: 0F 00 00 ADC   [X+0],0x0
    1917: 52 01    MOV   A,[X+1]
    1919: 11 02    SUB   A,0x2
    191B: 52 00    MOV   A,[X+0]
    191D: 31 80    XOR   A,0x80
    191F: 19 80    SBB   A,0x80
    1921: CF B8    JC    0x18DA
    1923: 38 FE    ADD   SP,0xFE
    1925: 20       POP   X
(0301) }
FILE: <library>
--------------------------------------------------------------------------------


PSoC Designer Version: 5.0.1127.0

Copyright (C) 1994 - 2009 ImageCraft Creations Inc.
ImageCraft, 706 Colorado Ave., Suite 10-88, Palo Alto, CA 94303
info@imagecraft.com, phone (650) 493-9326 FAX (650) 493-9329
http://www.imagecraft.com
lcc source code (C) 1995, by David R. Hanson and AT&T. Reproduced by permission.
Release version 7.02.004
