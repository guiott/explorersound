 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _PortIndx::
 0000 00                .byte 0
 0001                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0001                   .dbsym e PortIndx _PortIndx c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _Tmr1::
 0000 0000              .word 0
 0002                   .dbsym e Tmr1 _Tmr1 i
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _Tmr2::
 0000 0000              .word 0
 0002                   .dbsym e Tmr2 _Tmr2 i
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _Time10ms::
 0000 00000000          .word 0,0
 0004                   .dbsym e Time10ms _Time10ms L
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _TmrFlag::
 0000 00                .byte 0
 0001                   .dbsym e TmrFlag _TmrFlag c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _GF::
 0000 F801              .byte 248,1
 0002 7802              .byte 'x,2
 0004 3804              .byte 56,4
 0006 1808              .byte 24,8
 0008 0810              .byte 8,16
 000A                   .dbsym e GF _GF A[10:5:2]c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _GainIndx::
 0000 0202              .byte 2,2
 0002 0202              .byte 2,2
 0004 0202              .byte 2,2
 0006                   .dbsym e GainIndx _GainIndx A[6:3:2]c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area text(rom, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;        PortNum -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3803              add SP,3
 0004                   .dbline 38
 0004           ; /* ////////////////////////////////////////////////////////////////////////////
 0004           ; ** Project:      ExplorerSound
 0004           ; ** Author:    Guido Ottaviani-->guido@guiott.com<--
 0004           ; ** Description: 
 0004           ; ** version 0.3   15-10-2010
 0004           ; **
 0004           ; ** Detailed descriptions are on file "Notes.txt" 
 0004           ; **
 0004           ; -------------------------------------------------------------------------------
 0004           ; Copyright 2010 Guido Ottaviani
 0004           ; guido@guiott.com
 0004           ; 
 0004           ;       ExplorerSound is free software: you can redistribute it and/or modify
 0004           ;     it under the terms of the GNU General Public License as published by
 0004           ;     the Free Software Foundation, either version 3 of the License, or
 0004           ;     (at your option) any later version.
 0004           ; 
 0004           ;     ExplorerSound is distributed in the hope that it will be useful,
 0004           ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
 0004           ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 0004           ;     GNU General Public License for more details.
 0004           ; 
 0004           ;     You should have received a copy of the GNU General Public License
 0004           ;     along with ExplorerSound.  If not, see <http://www.gnu.org/licenses/>.
 0004           ; -------------------------------------------------------------------------------      
 0004           ; /////////////////////////////////////////////////////////////////////////////*/
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include <stdlib.h>
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include "prototypes.h"
 0004           ; #include "definitions.h"
 0004           ; #include "delay.h"
 0004           ; 
 0004           ; #pragma interrupt_handler HB_Tmr_ISR_C // int handler for program clock
 0004           ; 
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 41
 0004           ;       BYTE PortNum[3];
 0004           ;       
 0004           ;       BlocksInit();
 0004 7C08A7            xcall _BlocksInit
 0007                   .dbline 43
 0007           ;       
 0007           ;       M8C_EnableGInt ;               // Turn on interrupts 
 0007 7101                      or  F, 01h
 0009           
 0009                   .dbline 45
 0009           ;       
 0009           ;       LED_2_On();
 0009 10                push X
 000A 7C0000            xcall _LED_2_On
 000D 20                pop X
 000E                   .dbline 46
 000E           ;       PortNum[0] = AMUX4_mic_PORT0_1;
 000E 560000            mov [X+0],0
 0011                   .dbline 47
 0011           ;       PortNum[1] = AMUX4_mic_PORT0_3;
 0011 560101            mov [X+1],1
 0014                   .dbline 48
 0014           ;       PortNum[2] = AMUX4_mic_PORT0_7;
 0014 560203            mov [X+2],3
 0017                   .dbline 50
 0017           ;       
 0017           ;       LedTest();
 0017 7C09A7            xcall _LedTest
 001A 81F1              xjmp L5
 001C           L4:
 001C                   .dbline 54
 001C           ;       
 001C           ;       // Main loop=============================================================
 001C           ;       while (1)
 001C           ;       {
 001C                   .dbline 55
 001C           ;               if(ADCINCVR_pot_fIsDataAvailable() != 0)// Wait for data to be ready
 001C 10                push X
 001D 7C0000            xcall _ADCINCVR_pot_fIsDataAvailable
 0020 62D000            mov REG[0xd0],>__r0
 0023 20                pop X
 0024 3900              cmp A,0
 0026 A01E              jz L7
 0028                   .dbline 56
 0028           ;         {   
 0028                   .dbline 58
 0028           ;                       // Get Data, Clear data ready flag, in the range 0-1800
 0028           ;                       PotValue = ADCINCVR_pot_iGetDataClearFlag()+900;
 0028 10                push X
 0029 7C0000            xcall _ADCINCVR_pot_iGetDataClearFlag
 002C 62D000            mov REG[0xd0],>__r0
 002F 5A00              mov [__r0],X
 0031 20                pop X
 0032 0184              add A,-124
 0034 62D000            mov REG[0xd0],>_PotValue
 0037 5301              mov [_PotValue+1],A
 0039 62D000            mov REG[0xd0],>__r0
 003C 5100              mov A,[__r0]
 003E 0903              adc A,3
 0040 62D000            mov REG[0xd0],>_PotValue
 0043 5300              mov [_PotValue],A
 0045                   .dbline 59
 0045           ;               }
 0045           L7:
 0045                   .dbline 61
 0045           ;         
 0045           ;               if (Tmr2>2) // every 30ms
 0045 62D000            mov REG[0xd0],>_Tmr2
 0048 5002              mov A,2
 004A 1201              sub A,[_Tmr2+1]
 004C 5000              mov A,0
 004E 1A00              sbb A,[_Tmr2]
 0050 D186              jnc L9
 0052           X1:
 0052                   .dbline 62
 0052           ;               {
 0052                   .dbline 63
 0052           ;                       Tmr2=0;
 0052 62D000            mov REG[0xd0],>_Tmr2
 0055 550100            mov [_Tmr2+1],0
 0058 550000            mov [_Tmr2],0
 005B                   .dbline 64
 005B           ;                       ADCINCVR_mes_GetSamples(1); // Start ADC to read once more
 005B 10                push X
 005C 5001              mov A,1
 005E 7C0000            xcall _ADCINCVR_mes_GetSamples
 0061 20                pop X
 0062           L11:
 0062                   .dbline 65
 0062           ;                       while(! ADCINCVR_mes_fIsDataAvailable());// Wait for data to be ready 
 0062           L12:
 0062                   .dbline 65
 0062 10                push X
 0063 7C0000            xcall _ADCINCVR_mes_fIsDataAvailable
 0066 62D000            mov REG[0xd0],>__r0
 0069 20                pop X
 006A 3900              cmp A,0
 006C AFF5              jz L11
 006E                   .dbline 67
 006E           ;                       // Get Data, Clear data ready flag
 006E           ;                       MesValue[PortIndx][2] = ADCINCVR_mes_iGetDataClearFlag(); // [1]
 006E 10                push X
 006F 7C0000            xcall _ADCINCVR_mes_iGetDataClearFlag
 0072 62D000            mov REG[0xd0],>__r0
 0075 5300              mov [__r1],A
 0077 5A00              mov [__r0],X
 0079 20                pop X
 007A 62D000            mov REG[0xd0],>_PortIndx
 007D 5100              mov A,[_PortIndx]
 007F 62D000            mov REG[0xd0],>__r0
 0082 5300              mov [__r3],A
 0084 5000              mov A,0
 0086 08                push A
 0087 5100              mov A,[__r3]
 0089 08                push A
 008A 5000              mov A,0
 008C 08                push A
 008D 5006              mov A,6
 008F 08                push A
 0090 7C0000            xcall __mul16
 0093 38FC              add SP,-4
 0095 5100              mov A,[__rX]
 0097 5300              mov [__r3],A
 0099 5100              mov A,[__rY]
 009B 5300              mov [__r2],A
 009D 060004            add [__r3],<_MesValue+4
 00A0 0E0004            adc [__r2],>_MesValue+4
 00A3 5100              mov A,[__r2]
 00A5 60D5              mov REG[0xd5],A
 00A7 5100              mov A,[__r0]
 00A9 3F00              mvi [__r3],A
 00AB 5100              mov A,[__r1]
 00AD 3F00              mvi [__r3],A
 00AF                   .dbline 68
 00AF           ;                       MesValue[PortIndx][1] = (MesValue[PortIndx][2]) >> (GainIndx[PortIndx][1]);                     // [2][4]
 00AF 62D000            mov REG[0xd0],>_PortIndx
 00B2 5100              mov A,[_PortIndx]
 00B4 62D000            mov REG[0xd0],>__r0
 00B7 5300              mov [__r1],A
 00B9 5000              mov A,0
 00BB 08                push A
 00BC 5100              mov A,[__r1]
 00BE 08                push A
 00BF 5000              mov A,0
 00C1 08                push A
 00C2 5006              mov A,6
 00C4 08                push A
 00C5 7C0000            xcall __mul16
 00C8 38FC              add SP,-4
 00CA 5100              mov A,[__rX]
 00CC 5300              mov [__r1],A
 00CE 5100              mov A,[__rY]
 00D0 5300              mov [__r0],A
 00D2 62D000            mov REG[0xd0],>_PortIndx
 00D5 5100              mov A,[_PortIndx]
 00D7 62D000            mov REG[0xd0],>__r0
 00DA 5300              mov [__r3],A
 00DC 550000            mov [__r2],0
 00DF 6500              asl [__r3]
 00E1 6B00              rlc [__r2]
 00E3 060001            add [__r3],<_GainIndx+1
 00E6 0E0001            adc [__r2],>_GainIndx+1
 00E9 5100              mov A,[__r2]
 00EB 60D4              mov REG[0xd4],A
 00ED 3E00              mvi A,[__r3]
 00EF 5300              mov [__r3],A
 00F1 5100              mov A,[__r1]
 00F3 0104              add A,<_MesValue+4
 00F5 5300              mov [__r5],A
 00F7 5100              mov A,[__r0]
 00F9 0904              adc A,>_MesValue+4
 00FB 60D4              mov REG[0xd4],A
 00FD 3E00              mvi A,[__r5]
 00FF 5300              mov [__r4],A
 0101 3E00              mvi A,[__r5]
 0103 5300              mov [__r5],A
 0105 5100              mov A,[__r3]
 0107 210F              and A,15
 0109 A00B              jz X2
 010B           X3:
 010B 62D000            mov REG[0xd0],>__r0
 010E 6800              asr [__r4]
 0110 6E00              rrc [__r5]
 0112 78                dec A
 0113 BFF7              jnz X3
 0115           X2:
 0115 62D000            mov REG[0xd0],>__r0
 0118 060002            add [__r1],<_MesValue+2
 011B 0E0002            adc [__r0],>_MesValue+2
 011E 5100              mov A,[__r0]
 0120 60D5              mov REG[0xd5],A
 0122 5100              mov A,[__r4]
 0124 3F00              mvi [__r1],A
 0126 5100              mov A,[__r5]
 0128 3F00              mvi [__r1],A
 012A                   .dbline 69
 012A           ;                       MesValue[PortIndx][0] = (MesValue[PortIndx][1]) >> (GainIndx[PortIndx][0]); // [3][4]                   
 012A 62D000            mov REG[0xd0],>_PortIndx
 012D 5100              mov A,[_PortIndx]
 012F 62D000            mov REG[0xd0],>__r0
 0132 5300              mov [__r1],A
 0134 5000              mov A,0
 0136 08                push A
 0137 5100              mov A,[__r1]
 0139 08                push A
 013A 5000              mov A,0
 013C 08                push A
 013D 5006              mov A,6
 013F 08                push A
 0140 7C0000            xcall __mul16
 0143 38FC              add SP,-4
 0145 5100              mov A,[__rX]
 0147 5300              mov [__r1],A
 0149 5100              mov A,[__rY]
 014B 5300              mov [__r0],A
 014D 62D000            mov REG[0xd0],>_PortIndx
 0150 5100              mov A,[_PortIndx]
 0152 62D000            mov REG[0xd0],>__r0
 0155 5300              mov [__r3],A
 0157 550000            mov [__r2],0
 015A 6500              asl [__r3]
 015C 6B00              rlc [__r2]
 015E 060000            add [__r3],<_GainIndx
 0161 0E0000            adc [__r2],>_GainIndx
 0164 5100              mov A,[__r2]
 0166 60D4              mov REG[0xd4],A
 0168 3E00              mvi A,[__r3]
 016A 5300              mov [__r3],A
 016C 5100              mov A,[__r1]
 016E 0102              add A,<_MesValue+2
 0170 5300              mov [__r5],A
 0172 5100              mov A,[__r0]
 0174 0902              adc A,>_MesValue+2
 0176 60D4              mov REG[0xd4],A
 0178 3E00              mvi A,[__r5]
 017A 5300              mov [__r4],A
 017C 3E00              mvi A,[__r5]
 017E 5300              mov [__r5],A
 0180 5100              mov A,[__r3]
 0182 210F              and A,15
 0184 A00B              jz X4
 0186           X5:
 0186 62D000            mov REG[0xd0],>__r0
 0189 6800              asr [__r4]
 018B 6E00              rrc [__r5]
 018D 78                dec A
 018E BFF7              jnz X5
 0190           X4:
 0190 62D000            mov REG[0xd0],>__r0
 0193 060000            add [__r1],<_MesValue
 0196 0E0000            adc [__r0],>_MesValue
 0199 5100              mov A,[__r0]
 019B 60D5              mov REG[0xd5],A
 019D 5100              mov A,[__r4]
 019F 3F00              mvi [__r1],A
 01A1 5100              mov A,[__r5]
 01A3 3F00              mvi [__r1],A
 01A5                   .dbline 73
 01A5           ;                       
 01A5           ;               //      AGC(); ???????????????????????????????????????????????????????????????????????  debug
 01A5           ;                       
 01A5           ;                       PortIndx++;
 01A5 62D000            mov REG[0xd0],>_PortIndx
 01A8 7600              inc [_PortIndx]
 01AA                   .dbline 74
 01AA           ;                       if(PortIndx > 2) 
 01AA 5002              mov A,2
 01AC 3A00              cmp A,[_PortIndx]
 01AE D007              jnc L19
 01B0           X6:
 01B0                   .dbline 75
 01B0           ;                       {
 01B0                   .dbline 76
 01B0           ;                               PortIndx=0; // next mux port
 01B0 62D000            mov REG[0xd0],>_PortIndx
 01B3 550000            mov [_PortIndx],0
 01B6                   .dbline 77
 01B6           ;                       }
 01B6           L19:
 01B6                   .dbline 78
 01B6           ;                       AMUX4_mic_InputSelect(PortNum[PortIndx]);
 01B6 62D000            mov REG[0xd0],>__r0
 01B9 550007            mov [__r0],7
 01BC 5A00              mov [__r1],X
 01BE 62D000            mov REG[0xd0],>_PortIndx
 01C1 5100              mov A,[_PortIndx]
 01C3 62D000            mov REG[0xd0],>__r0
 01C6 0200              add A,[__r1]
 01C8 5300              mov [__r1],A
 01CA 5000              mov A,0
 01CC 0A00              adc A,[__r0]
 01CE 60D4              mov REG[0xd4],A
 01D0 3E00              mvi A,[__r1]
 01D2 10                push X
 01D3 7C0000            xcall _AMUX4_mic_InputSelect
 01D6 20                pop X
 01D7                   .dbline 79
 01D7           ;               }
 01D7           L9:
 01D7                   .dbline 81
 01D7           ;               
 01D7           ;               if (TmrFlag) // every 10ms
 01D7 62D000            mov REG[0xd0],>_TmrFlag
 01DA 3C0000            cmp [_TmrFlag],0
 01DD A00B              jz L21
 01DF                   .dbline 82
 01DF           ;               {       
 01DF                   .dbline 83
 01DF           ;                       TmrFlag = 0;
 01DF 550000            mov [_TmrFlag],0
 01E2                   .dbline 84
 01E2           ;                       ADCINCVR_pot_GetSamples(1);    // Start ADC to read 1 sample
 01E2 10                push X
 01E3 5001              mov A,1
 01E5 7C0000            xcall _ADCINCVR_pot_GetSamples
 01E8 20                pop X
 01E9                   .dbline 85
 01E9           ;               }
 01E9           L21:
 01E9                   .dbline 87
 01E9           ;               
 01E9           ;               if (Tmr1 > 9) // every 100ms
 01E9 62D000            mov REG[0xd0],>_Tmr1
 01EC 5009              mov A,9
 01EE 1201              sub A,[_Tmr1+1]
 01F0 5000              mov A,0
 01F2 1A00              sbb A,[_Tmr1]
 01F4 D017              jnc L23
 01F6           X7:
 01F6                   .dbline 88
 01F6           ;               {
 01F6                   .dbline 89
 01F6           ;                       Tmr1 = 0;
 01F6 62D000            mov REG[0xd0],>_Tmr1
 01F9 550100            mov [_Tmr1+1],0
 01FC 550000            mov [_Tmr1],0
 01FF                   .dbline 90
 01FF           ;                       Tmr2 = 0;
 01FF 62D000            mov REG[0xd0],>_Tmr2
 0202 550100            mov [_Tmr2+1],0
 0205 550000            mov [_Tmr2],0
 0208                   .dbline 91
 0208           ;                       UartTxValues(); // debug
 0208 93C2              xcall _UartTxValues
 020A                   .dbline 92
 020A           ;                       DigitalOut();
 020A 932A              xcall _DigitalOut
 020C                   .dbline 93
 020C           ;               }
 020C           L23:
 020C                   .dbline 94
 020C           ;       }// ========================================================== Main loop 
 020C           L5:
 020C                   .dbline 53
 020C 8E0F              xjmp L4
 020E           X0:
 020E                   .dbline -2
 020E           L1:
 020E 38FD              add SP,-3
 0210 20                pop X
 0211                   .dbline 0 ; func end
 0211 8FFF              jmp .
 0213                   .dbsym l PortNum 0 A[3:3]c
 0213                   .dbend
 0213                   .dbfunc e AGC _AGC fV
 0213           _AGC::
 0213                   .dbline -1
 0213                   .dbline 100
 0213           ; }
 0213           ; 
 0213           ; // Functions ***************************************************************
 0213           ; 
 0213           ; void AGC(void)
 0213           ; {// [5]
 0213                   .dbline 101
 0213           ;            if((MesValue[PortIndx][2] > V_MAX) && (GainIndx[PortIndx][1] > I_MIN))// PGA_out
 0213 62D000            mov REG[0xd0],>_PortIndx
 0216 5100              mov A,[_PortIndx]
 0218 62D000            mov REG[0xd0],>__r0
 021B 5300              mov [__r1],A
 021D 5000              mov A,0
 021F 08                push A
 0220 5100              mov A,[__r1]
 0222 08                push A
 0223 5000              mov A,0
 0225 08                push A
 0226 5006              mov A,6
 0228 08                push A
 0229 7C0000            xcall __mul16
 022C 38FC              add SP,-4
 022E 5100              mov A,[__rX]
 0230 5300              mov [__r1],A
 0232 5100              mov A,[__rY]
 0234 5300              mov [__r0],A
 0236 060004            add [__r1],<_MesValue+4
 0239 0E0004            adc [__r0],>_MesValue+4
 023C 5100              mov A,[__r0]
 023E 60D4              mov REG[0xd4],A
 0240 3E00              mvi A,[__r1]
 0242 5300              mov [__r0],A
 0244 3E00              mvi A,[__r1]
 0246 5300              mov [__r1],A
 0248 508A              mov A,-118
 024A 1200              sub A,[__r1]
 024C 5100              mov A,[__r0]
 024E 3180              xor A,-128
 0250 5300              mov [__rX],A
 0252 5082              mov A,(2 ^ 0x80)
 0254 1A00              sbb A,[__rX]
 0256 D08B              jnc L26
 0258           X8:
 0258 62D000            mov REG[0xd0],>_PortIndx
 025B 5100              mov A,[_PortIndx]
 025D 62D000            mov REG[0xd0],>__r0
 0260 5300              mov [__r1],A
 0262 550000            mov [__r0],0
 0265 6500              asl [__r1]
 0267 6B00              rlc [__r0]
 0269 060001            add [__r1],<_GainIndx+1
 026C 0E0001            adc [__r0],>_GainIndx+1
 026F 5100              mov A,[__r0]
 0271 60D4              mov REG[0xd4],A
 0273 3E00              mvi A,[__r1]
 0275 5300              mov [__r0],A
 0277 5000              mov A,0
 0279 3A00              cmp A,[__r0]
 027B D066              jnc L26
 027D           X9:
 027D                   .dbline 102
 027D           ;       {
 027D                   .dbline 103
 027D           ;               GainIndx[PortIndx][1]--;
 027D 62D000            mov REG[0xd0],>_PortIndx
 0280 5100              mov A,[_PortIndx]
 0282 62D000            mov REG[0xd0],>__r0
 0285 5300              mov [__r1],A
 0287 550000            mov [__r0],0
 028A 6500              asl [__r1]
 028C 6B00              rlc [__r0]
 028E 060001            add [__r1],<_GainIndx+1
 0291 0E0001            adc [__r0],>_GainIndx+1
 0294 5100              mov A,[__r0]
 0296 60D4              mov REG[0xd4],A
 0298 3E00              mvi A,[__r1]
 029A 7A00              dec [__r1]
 029C 5300              mov [__r2],A
 029E 160001            sub [__r2],1
 02A1 5100              mov A,[__r0]
 02A3 60D5              mov REG[0xd5],A
 02A5 5100              mov A,[__r2]
 02A7 3F00              mvi [__r1],A
 02A9                   .dbline 104
 02A9           ;               PGA_out_SetGain(GF[GainIndx[PortIndx][1]][0]); // set gain on PGA
 02A9 62D000            mov REG[0xd0],>_PortIndx
 02AC 5100              mov A,[_PortIndx]
 02AE 62D000            mov REG[0xd0],>__r0
 02B1 5300              mov [__r1],A
 02B3 550000            mov [__r0],0
 02B6 6500              asl [__r1]
 02B8 6B00              rlc [__r0]
 02BA 060001            add [__r1],<_GainIndx+1
 02BD 0E0001            adc [__r0],>_GainIndx+1
 02C0 5100              mov A,[__r0]
 02C2 60D4              mov REG[0xd4],A
 02C4 3E00              mvi A,[__r1]
 02C6 5300              mov [__r1],A
 02C8 550000            mov [__r0],0
 02CB 6500              asl [__r1]
 02CD 6B00              rlc [__r0]
 02CF 060000            add [__r1],<_GF
 02D2 0E0000            adc [__r0],>_GF
 02D5 5100              mov A,[__r0]
 02D7 60D4              mov REG[0xd4],A
 02D9 3E00              mvi A,[__r1]
 02DB 10                push X
 02DC 7C0000            xcall _PGA_out_SetGain
 02DF 20                pop X
 02E0                   .dbline 105
 02E0           ;       }
 02E0 8254              xjmp L27
 02E2           L26:
 02E2                   .dbline 106
 02E2           ;       else if((MesValue[PortIndx][1] > V_MAX) && (GainIndx[PortIndx][0] > I_MIN))// PGA_pre
 02E2 62D000            mov REG[0xd0],>_PortIndx
 02E5 5100              mov A,[_PortIndx]
 02E7 62D000            mov REG[0xd0],>__r0
 02EA 5300              mov [__r1],A
 02EC 5000              mov A,0
 02EE 08                push A
 02EF 5100              mov A,[__r1]
 02F1 08                push A
 02F2 5000              mov A,0
 02F4 08                push A
 02F5 5006              mov A,6
 02F7 08                push A
 02F8 7C0000            xcall __mul16
 02FB 38FC              add SP,-4
 02FD 5100              mov A,[__rX]
 02FF 5300              mov [__r1],A
 0301 5100              mov A,[__rY]
 0303 5300              mov [__r0],A
 0305 060002            add [__r1],<_MesValue+2
 0308 0E0002            adc [__r0],>_MesValue+2
 030B 5100              mov A,[__r0]
 030D 60D4              mov REG[0xd4],A
 030F 3E00              mvi A,[__r1]
 0311 5300              mov [__r0],A
 0313 3E00              mvi A,[__r1]
 0315 5300              mov [__r1],A
 0317 508A              mov A,-118
 0319 1200              sub A,[__r1]
 031B 5100              mov A,[__r0]
 031D 3180              xor A,-128
 031F 5300              mov [__rX],A
 0321 5082              mov A,(2 ^ 0x80)
 0323 1A00              sbb A,[__rX]
 0325 D08B              jnc L32
 0327           X10:
 0327 62D000            mov REG[0xd0],>_PortIndx
 032A 5100              mov A,[_PortIndx]
 032C 62D000            mov REG[0xd0],>__r0
 032F 5300              mov [__r1],A
 0331 550000            mov [__r0],0
 0334 6500              asl [__r1]
 0336 6B00              rlc [__r0]
 0338 060000            add [__r1],<_GainIndx
 033B 0E0000            adc [__r0],>_GainIndx
 033E 5100              mov A,[__r0]
 0340 60D4              mov REG[0xd4],A
 0342 3E00              mvi A,[__r1]
 0344 5300              mov [__r0],A
 0346 5000              mov A,0
 0348 3A00              cmp A,[__r0]
 034A D066              jnc L32
 034C           X11:
 034C                   .dbline 107
 034C           ;       {
 034C                   .dbline 108
 034C           ;               GainIndx[PortIndx][0]--;
 034C 62D000            mov REG[0xd0],>_PortIndx
 034F 5100              mov A,[_PortIndx]
 0351 62D000            mov REG[0xd0],>__r0
 0354 5300              mov [__r1],A
 0356 550000            mov [__r0],0
 0359 6500              asl [__r1]
 035B 6B00              rlc [__r0]
 035D 060000            add [__r1],<_GainIndx
 0360 0E0000            adc [__r0],>_GainIndx
 0363 5100              mov A,[__r0]
 0365 60D4              mov REG[0xd4],A
 0367 3E00              mvi A,[__r1]
 0369 7A00              dec [__r1]
 036B 5300              mov [__r2],A
 036D 160001            sub [__r2],1
 0370 5100              mov A,[__r0]
 0372 60D5              mov REG[0xd5],A
 0374 5100              mov A,[__r2]
 0376 3F00              mvi [__r1],A
 0378                   .dbline 109
 0378           ;               PGA_pre_SetGain(GF[GainIndx[PortIndx][0]][0]); // set gain on PGA
 0378 62D000            mov REG[0xd0],>_PortIndx
 037B 5100              mov A,[_PortIndx]
 037D 62D000            mov REG[0xd0],>__r0
 0380 5300              mov [__r1],A
 0382 550000            mov [__r0],0
 0385 6500              asl [__r1]
 0387 6B00              rlc [__r0]
 0389 060000            add [__r1],<_GainIndx
 038C 0E0000            adc [__r0],>_GainIndx
 038F 5100              mov A,[__r0]
 0391 60D4              mov REG[0xd4],A
 0393 3E00              mvi A,[__r1]
 0395 5300              mov [__r1],A
 0397 550000            mov [__r0],0
 039A 6500              asl [__r1]
 039C 6B00              rlc [__r0]
 039E 060000            add [__r1],<_GF
 03A1 0E0000            adc [__r0],>_GF
 03A4 5100              mov A,[__r0]
 03A6 60D4              mov REG[0xd4],A
 03A8 3E00              mvi A,[__r1]
 03AA 10                push X
 03AB 7C0000            xcall _PGA_pre_SetGain
 03AE 20                pop X
 03AF                   .dbline 110
 03AF           ;       }
 03AF 8185              xjmp L33
 03B1           L32:
 03B1                   .dbline 111
 03B1           ;       else if((MesValue[PortIndx][2] < V_MIN) && (GainIndx[PortIndx][1] < I_MAX))// PGA_out
 03B1 62D000            mov REG[0xd0],>_PortIndx
 03B4 5100              mov A,[_PortIndx]
 03B6 62D000            mov REG[0xd0],>__r0
 03B9 5300              mov [__r1],A
 03BB 5000              mov A,0
 03BD 08                push A
 03BE 5100              mov A,[__r1]
 03C0 08                push A
 03C1 5000              mov A,0
 03C3 08                push A
 03C4 5006              mov A,6
 03C6 08                push A
 03C7 7C0000            xcall __mul16
 03CA 38FC              add SP,-4
 03CC 5100              mov A,[__rX]
 03CE 5300              mov [__r1],A
 03D0 5100              mov A,[__rY]
 03D2 5300              mov [__r0],A
 03D4 060004            add [__r1],<_MesValue+4
 03D7 0E0004            adc [__r0],>_MesValue+4
 03DA 5100              mov A,[__r0]
 03DC 60D4              mov REG[0xd4],A
 03DE 3E00              mvi A,[__r1]
 03E0 5300              mov [__r0],A
 03E2 3E00              mvi A,[__r1]
 03E4 1164              sub A,100
 03E6 5100              mov A,[__r0]
 03E8 3180              xor A,-128
 03EA 1980              sbb A,(0 ^ 0x80)
 03EC D087              jnc L35
 03EE           X12:
 03EE 62D000            mov REG[0xd0],>_PortIndx
 03F1 5100              mov A,[_PortIndx]
 03F3 62D000            mov REG[0xd0],>__r0
 03F6 5300              mov [__r1],A
 03F8 550000            mov [__r0],0
 03FB 6500              asl [__r1]
 03FD 6B00              rlc [__r0]
 03FF 060001            add [__r1],<_GainIndx+1
 0402 0E0001            adc [__r0],>_GainIndx+1
 0405 5100              mov A,[__r0]
 0407 60D4              mov REG[0xd4],A
 0409 3E00              mvi A,[__r1]
 040B 3904              cmp A,4
 040D D066              jnc L35
 040F           X13:
 040F                   .dbline 112
 040F           ;       {
 040F                   .dbline 113
 040F           ;               GainIndx[PortIndx][1]++;
 040F 62D000            mov REG[0xd0],>_PortIndx
 0412 5100              mov A,[_PortIndx]
 0414 62D000            mov REG[0xd0],>__r0
 0417 5300              mov [__r1],A
 0419 550000            mov [__r0],0
 041C 6500              asl [__r1]
 041E 6B00              rlc [__r0]
 0420 060001            add [__r1],<_GainIndx+1
 0423 0E0001            adc [__r0],>_GainIndx+1
 0426 5100              mov A,[__r0]
 0428 60D4              mov REG[0xd4],A
 042A 3E00              mvi A,[__r1]
 042C 7A00              dec [__r1]
 042E 5300              mov [__r2],A
 0430 060001            add [__r2],1
 0433 5100              mov A,[__r0]
 0435 60D5              mov REG[0xd5],A
 0437 5100              mov A,[__r2]
 0439 3F00              mvi [__r1],A
 043B                   .dbline 114
 043B           ;               PGA_out_SetGain(GF[GainIndx[PortIndx][1]][0]); // set gain on PGA
 043B 62D000            mov REG[0xd0],>_PortIndx
 043E 5100              mov A,[_PortIndx]
 0440 62D000            mov REG[0xd0],>__r0
 0443 5300              mov [__r1],A
 0445 550000            mov [__r0],0
 0448 6500              asl [__r1]
 044A 6B00              rlc [__r0]
 044C 060001            add [__r1],<_GainIndx+1
 044F 0E0001            adc [__r0],>_GainIndx+1
 0452 5100              mov A,[__r0]
 0454 60D4              mov REG[0xd4],A
 0456 3E00              mvi A,[__r1]
 0458 5300              mov [__r1],A
 045A 550000            mov [__r0],0
 045D 6500              asl [__r1]
 045F 6B00              rlc [__r0]
 0461 060000            add [__r1],<_GF
 0464 0E0000            adc [__r0],>_GF
 0467 5100              mov A,[__r0]
 0469 60D4              mov REG[0xd4],A
 046B 3E00              mvi A,[__r1]
 046D 10                push X
 046E 7C0000            xcall _PGA_out_SetGain
 0471 20                pop X
 0472                   .dbline 115
 0472           ;       }
 0472 80C2              xjmp L36
 0474           L35:
 0474                   .dbline 116
 0474           ;       else if((MesValue[PortIndx][1] < V_MIN) && (GainIndx[PortIndx][0] < I_MAX))// PGA_pre
 0474 62D000            mov REG[0xd0],>_PortIndx
 0477 5100              mov A,[_PortIndx]
 0479 62D000            mov REG[0xd0],>__r0
 047C 5300              mov [__r1],A
 047E 5000              mov A,0
 0480 08                push A
 0481 5100              mov A,[__r1]
 0483 08                push A
 0484 5000              mov A,0
 0486 08                push A
 0487 5006              mov A,6
 0489 08                push A
 048A 7C0000            xcall __mul16
 048D 38FC              add SP,-4
 048F 5100              mov A,[__rX]
 0491 5300              mov [__r1],A
 0493 5100              mov A,[__rY]
 0495 5300              mov [__r0],A
 0497 060002            add [__r1],<_MesValue+2
 049A 0E0002            adc [__r0],>_MesValue+2
 049D 5100              mov A,[__r0]
 049F 60D4              mov REG[0xd4],A
 04A1 3E00              mvi A,[__r1]
 04A3 5300              mov [__r0],A
 04A5 3E00              mvi A,[__r1]
 04A7 1164              sub A,100
 04A9 5100              mov A,[__r0]
 04AB 3180              xor A,-128
 04AD 1980              sbb A,(0 ^ 0x80)
 04AF D085              jnc L41
 04B1           X14:
 04B1 62D000            mov REG[0xd0],>_PortIndx
 04B4 5100              mov A,[_PortIndx]
 04B6 62D000            mov REG[0xd0],>__r0
 04B9 5300              mov [__r1],A
 04BB 550000            mov [__r0],0
 04BE 6500              asl [__r1]
 04C0 6B00              rlc [__r0]
 04C2 060000            add [__r1],<_GainIndx
 04C5 0E0000            adc [__r0],>_GainIndx
 04C8 5100              mov A,[__r0]
 04CA 60D4              mov REG[0xd4],A
 04CC 3E00              mvi A,[__r1]
 04CE 3904              cmp A,4
 04D0 D064              jnc L41
 04D2           X15:
 04D2                   .dbline 117
 04D2           ;       {
 04D2                   .dbline 118
 04D2           ;               GainIndx[PortIndx][0]++;
 04D2 62D000            mov REG[0xd0],>_PortIndx
 04D5 5100              mov A,[_PortIndx]
 04D7 62D000            mov REG[0xd0],>__r0
 04DA 5300              mov [__r1],A
 04DC 550000            mov [__r0],0
 04DF 6500              asl [__r1]
 04E1 6B00              rlc [__r0]
 04E3 060000            add [__r1],<_GainIndx
 04E6 0E0000            adc [__r0],>_GainIndx
 04E9 5100              mov A,[__r0]
 04EB 60D4              mov REG[0xd4],A
 04ED 3E00              mvi A,[__r1]
 04EF 7A00              dec [__r1]
 04F1 5300              mov [__r2],A
 04F3 060001            add [__r2],1
 04F6 5100              mov A,[__r0]
 04F8 60D5              mov REG[0xd5],A
 04FA 5100              mov A,[__r2]
 04FC 3F00              mvi [__r1],A
 04FE                   .dbline 119
 04FE           ;               PGA_pre_SetGain(GF[GainIndx[PortIndx][0]][0]); // set gain on PGA
 04FE 62D000            mov REG[0xd0],>_PortIndx
 0501 5100              mov A,[_PortIndx]
 0503 62D000            mov REG[0xd0],>__r0
 0506 5300              mov [__r1],A
 0508 550000            mov [__r0],0
 050B 6500              asl [__r1]
 050D 6B00              rlc [__r0]
 050F 060000            add [__r1],<_GainIndx
 0512 0E0000            adc [__r0],>_GainIndx
 0515 5100              mov A,[__r0]
 0517 60D4              mov REG[0xd4],A
 0519 3E00              mvi A,[__r1]
 051B 5300              mov [__r1],A
 051D 550000            mov [__r0],0
 0520 6500              asl [__r1]
 0522 6B00              rlc [__r0]
 0524 060000            add [__r1],<_GF
 0527 0E0000            adc [__r0],>_GF
 052A 5100              mov A,[__r0]
 052C 60D4              mov REG[0xd4],A
 052E 3E00              mvi A,[__r1]
 0530 10                push X
 0531 7C0000            xcall _PGA_pre_SetGain
 0534 20                pop X
 0535                   .dbline 120
 0535           ;       }       
 0535           L41:
 0535           L36:
 0535           L33:
 0535           L27:
 0535                   .dbline -2
 0535           L25:
 0535                   .dbline 0 ; func end
 0535 7F                ret
 0536                   .dbend
 0536                   .dbfunc e DigitalOut _DigitalOut fV
 0536           _DigitalOut::
 0536                   .dbline -1
 0536                   .dbline 124
 0536           ; }
 0536           ; 
 0536           ; void DigitalOut(void)
 0536           ; {// Controls the outputs according to pot setting point
 0536                   .dbline 125
 0536           ;       DIGITAL_OUT_Off();
 0536 10                push X
 0537 7C0000            xcall _DIGITAL_OUT_Off
 053A 20                pop X
 053B                   .dbline 126
 053B           ;       if (MesValue[0][0]>PotValue)
 053B 62D000            mov REG[0xd0],>_PotValue
 053E 5101              mov A,[_PotValue+1]
 0540 62D000            mov REG[0xd0],>_MesValue
 0543 1201              sub A,[_MesValue+1]
 0545 5100              mov A,[_MesValue]
 0547 3180              xor A,-128
 0549 62D000            mov REG[0xd0],>__r0
 054C 5300              mov [__rX],A
 054E 62D000            mov REG[0xd0],>_PotValue
 0551 5100              mov A,[_PotValue]
 0553 3180              xor A,-128
 0555 62D000            mov REG[0xd0],>__r0
 0558 1A00              sbb A,[__rX]
 055A D00B              jnc L45
 055C           X16:
 055C                   .dbline 127
 055C           ;       {
 055C                   .dbline 128
 055C           ;               DIGITAL_OUT_On();
 055C 10                push X
 055D 7C0000            xcall _DIGITAL_OUT_On
 0560                   .dbline 129
 0560           ;               LED_1_On();
 0560 7C0000            xcall _LED_1_On
 0563 20                pop X
 0564                   .dbline 130
 0564           ;       }
 0564 8006              xjmp L46
 0566           L45:
 0566                   .dbline 132
 0566           ;       else
 0566           ;       {
 0566                   .dbline 133
 0566           ;               LED_1_Off();
 0566 10                push X
 0567 7C0000            xcall _LED_1_Off
 056A 20                pop X
 056B                   .dbline 134
 056B           ;       }
 056B           L46:
 056B                   .dbline 136
 056B           ;               
 056B           ;       if (MesValue[1][0]>PotValue)
 056B 62D000            mov REG[0xd0],>_PotValue
 056E 5101              mov A,[_PotValue+1]
 0570 62D000            mov REG[0xd0],>_MesValue
 0573 1207              sub A,[_MesValue+6+1]
 0575 5106              mov A,[_MesValue+6]
 0577 3180              xor A,-128
 0579 62D000            mov REG[0xd0],>__r0
 057C 5300              mov [__rX],A
 057E 62D000            mov REG[0xd0],>_PotValue
 0581 5100              mov A,[_PotValue]
 0583 3180              xor A,-128
 0585 62D000            mov REG[0xd0],>__r0
 0588 1A00              sbb A,[__rX]
 058A D00B              jnc L47
 058C           X17:
 058C                   .dbline 137
 058C           ;       {
 058C                   .dbline 138
 058C           ;               DIGITAL_OUT_On();
 058C 10                push X
 058D 7C0000            xcall _DIGITAL_OUT_On
 0590                   .dbline 139
 0590           ;               LED_2_On();
 0590 7C0000            xcall _LED_2_On
 0593 20                pop X
 0594                   .dbline 140
 0594           ;       }
 0594 8006              xjmp L48
 0596           L47:
 0596                   .dbline 142
 0596           ;       else
 0596           ;       {
 0596                   .dbline 143
 0596           ;               LED_2_Off();
 0596 10                push X
 0597 7C0000            xcall _LED_2_Off
 059A 20                pop X
 059B                   .dbline 144
 059B           ;       }
 059B           L48:
 059B                   .dbline 146
 059B           ;       
 059B           ;       if (MesValue[2][0]>PotValue)
 059B 62D000            mov REG[0xd0],>_PotValue
 059E 5101              mov A,[_PotValue+1]
 05A0 62D000            mov REG[0xd0],>_MesValue
 05A3 120D              sub A,[_MesValue+12+1]
 05A5 510C              mov A,[_MesValue+12]
 05A7 3180              xor A,-128
 05A9 62D000            mov REG[0xd0],>__r0
 05AC 5300              mov [__rX],A
 05AE 62D000            mov REG[0xd0],>_PotValue
 05B1 5100              mov A,[_PotValue]
 05B3 3180              xor A,-128
 05B5 62D000            mov REG[0xd0],>__r0
 05B8 1A00              sbb A,[__rX]
 05BA D00B              jnc L50
 05BC           X18:
 05BC                   .dbline 147
 05BC           ;       {
 05BC                   .dbline 148
 05BC           ;               DIGITAL_OUT_On();
 05BC 10                push X
 05BD 7C0000            xcall _DIGITAL_OUT_On
 05C0                   .dbline 149
 05C0           ;               LED_3_On();
 05C0 7C0000            xcall _LED_3_On
 05C3 20                pop X
 05C4                   .dbline 150
 05C4           ;       }
 05C4 8006              xjmp L51
 05C6           L50:
 05C6                   .dbline 152
 05C6           ;       else
 05C6           ;       {
 05C6                   .dbline 153
 05C6           ;               LED_3_Off();
 05C6 10                push X
 05C7 7C0000            xcall _LED_3_Off
 05CA 20                pop X
 05CB                   .dbline 154
 05CB           ;       }
 05CB           L51:
 05CB                   .dbline -2
 05CB           L44:
 05CB                   .dbline 0 ; func end
 05CB 7F                ret
 05CC                   .dbend
 05CC                   .dbfunc e UartTxValues _UartTxValues fV
 05CC           _UartTxValues::
 05CC                   .dbline -1
 05CC                   .dbline 158
 05CC           ; }
 05CC           ; 
 05CC           ; void UartTxValues(void)
 05CC           ; {/* Transmit via UART the analog values read from various inputs.
 05CC                   .dbline 163
 05CC           ;       Usefull for debugging purposes, it could be converted in a
 05CC           ;       command string using the same protocol used for dsNav if
 05CC           ;       needed to output sound level values via serial comm
 05CC           ; */
 05CC           ;       TX8_CPutString("\n\r");
 05CC 10                push X
 05CD 5067              mov A,>L54
 05CF 08                push A
 05D0 5067              mov A,<L54
 05D2 5C                mov X,A
 05D3 18                pop A
 05D4 7C0000            xcall _TX8_CPutString
 05D7 20                pop X
 05D8                   .dbline 170
 05D8           ;       
 05D8           ; /*    TX8_CPutString("Pot Value = ");
 05D8           ;       itoa(str, PotValue,10);
 05D8           ;       TX8_PutString(str);
 05D8           ; */
 05D8           ; 
 05D8           ;       TX8_CPutString("    Mes Value: 1 = ");
 05D8 10                push X
 05D9 5053              mov A,>L55
 05DB 08                push A
 05DC 5053              mov A,<L55
 05DE 5C                mov X,A
 05DF 18                pop A
 05E0 7C0000            xcall _TX8_CPutString
 05E3 20                pop X
 05E4                   .dbline 171
 05E4           ;       itoa(str, MesValue[0][0],10);
 05E4 5000              mov A,0
 05E6 08                push A
 05E7 500A              mov A,10
 05E9 08                push A
 05EA 62D000            mov REG[0xd0],>_MesValue
 05ED 5100              mov A,[_MesValue]
 05EF 08                push A
 05F0 5101              mov A,[_MesValue+1]
 05F2 08                push A
 05F3 5000              mov A,>_str
 05F5 08                push A
 05F6 5000              mov A,<_str
 05F8 08                push A
 05F9 7C0000            xcall _itoa
 05FC 38FA              add SP,-6
 05FE                   .dbline 172
 05FE           ;       TX8_PutString(str);
 05FE 10                push X
 05FF 5000              mov A,>_str
 0601 08                push A
 0602 5000              mov A,<_str
 0604 5C                mov X,A
 0605 18                pop A
 0606 7C0000            xcall _TX8_PutString
 0609 20                pop X
 060A                   .dbline 173
 060A           ;       TX8_CPutString("  -  2 = ");
 060A 10                push X
 060B 5049              mov A,>L56
 060D 08                push A
 060E 5049              mov A,<L56
 0610 5C                mov X,A
 0611 18                pop A
 0612 7C0000            xcall _TX8_CPutString
 0615 20                pop X
 0616                   .dbline 174
 0616           ;       itoa(str, MesValue[1][0],10);
 0616 5000              mov A,0
 0618 08                push A
 0619 500A              mov A,10
 061B 08                push A
 061C 62D000            mov REG[0xd0],>_MesValue
 061F 5106              mov A,[_MesValue+6]
 0621 08                push A
 0622 5107              mov A,[_MesValue+6+1]
 0624 08                push A
 0625 5000              mov A,>_str
 0627 08                push A
 0628 5000              mov A,<_str
 062A 08                push A
 062B 7C0000            xcall _itoa
 062E 38FA              add SP,-6
 0630                   .dbline 175
 0630           ;       TX8_PutString(str);
 0630 10                push X
 0631 5000              mov A,>_str
 0633 08                push A
 0634 5000              mov A,<_str
 0636 5C                mov X,A
 0637 18                pop A
 0638 7C0000            xcall _TX8_PutString
 063B 20                pop X
 063C                   .dbline 176
 063C           ;       TX8_CPutString("  -  3 = ");
 063C 10                push X
 063D 503F              mov A,>L58
 063F 08                push A
 0640 503F              mov A,<L58
 0642 5C                mov X,A
 0643 18                pop A
 0644 7C0000            xcall _TX8_CPutString
 0647 20                pop X
 0648                   .dbline 177
 0648           ;       itoa(str, MesValue[2][0],10);
 0648 5000              mov A,0
 064A 08                push A
 064B 500A              mov A,10
 064D 08                push A
 064E 62D000            mov REG[0xd0],>_MesValue
 0651 510C              mov A,[_MesValue+12]
 0653 08                push A
 0654 510D              mov A,[_MesValue+12+1]
 0656 08                push A
 0657 5000              mov A,>_str
 0659 08                push A
 065A 5000              mov A,<_str
 065C 08                push A
 065D 7C0000            xcall _itoa
 0660 38FA              add SP,-6
 0662                   .dbline 178
 0662           ;       TX8_PutString(str);
 0662 10                push X
 0663 5000              mov A,>_str
 0665 08                push A
 0666 5000              mov A,<_str
 0668 5C                mov X,A
 0669 18                pop A
 066A 7C0000            xcall _TX8_PutString
 066D 20                pop X
 066E                   .dbline 179
 066E           ;       TX8_CPutString("  Gain Pre: 1 = ");
 066E 10                push X
 066F 502E              mov A,>L60
 0671 08                push A
 0672 502E              mov A,<L60
 0674 5C                mov X,A
 0675 18                pop A
 0676 7C0000            xcall _TX8_CPutString
 0679 20                pop X
 067A                   .dbline 180
 067A           ;       itoa(str, GF[GainIndx[0][0]][1], 10);
 067A 5000              mov A,0
 067C 08                push A
 067D 500A              mov A,10
 067F 08                push A
 0680 62D000            mov REG[0xd0],>_GainIndx
 0683 5100              mov A,[_GainIndx]
 0685 62D000            mov REG[0xd0],>__r0
 0688 5300              mov [__r1],A
 068A 550000            mov [__r0],0
 068D 6500              asl [__r1]
 068F 6B00              rlc [__r0]
 0691 060001            add [__r1],<_GF+1
 0694 0E0001            adc [__r0],>_GF+1
 0697 5100              mov A,[__r0]
 0699 60D4              mov REG[0xd4],A
 069B 3E00              mvi A,[__r1]
 069D 5300              mov [__r1],A
 069F 5000              mov A,0
 06A1 08                push A
 06A2 5100              mov A,[__r1]
 06A4 08                push A
 06A5 5000              mov A,>_str
 06A7 08                push A
 06A8 5000              mov A,<_str
 06AA 08                push A
 06AB 7C0000            xcall _itoa
 06AE 38FA              add SP,-6
 06B0                   .dbline 181
 06B0           ;       TX8_PutString(str);
 06B0 10                push X
 06B1 5000              mov A,>_str
 06B3 08                push A
 06B4 5000              mov A,<_str
 06B6 5C                mov X,A
 06B7 18                pop A
 06B8 7C0000            xcall _TX8_PutString
 06BB 20                pop X
 06BC                   .dbline 182
 06BC           ;       TX8_CPutString("  -  2 = ");
 06BC 10                push X
 06BD 5049              mov A,>L56
 06BF 08                push A
 06C0 5049              mov A,<L56
 06C2 5C                mov X,A
 06C3 18                pop A
 06C4 7C0000            xcall _TX8_CPutString
 06C7 20                pop X
 06C8                   .dbline 183
 06C8           ;       itoa(str, GF[GainIndx[1][0]][1], 10);
 06C8 5000              mov A,0
 06CA 08                push A
 06CB 500A              mov A,10
 06CD 08                push A
 06CE 62D000            mov REG[0xd0],>_GainIndx
 06D1 5102              mov A,[_GainIndx+2]
 06D3 62D000            mov REG[0xd0],>__r0
 06D6 5300              mov [__r1],A
 06D8 550000            mov [__r0],0
 06DB 6500              asl [__r1]
 06DD 6B00              rlc [__r0]
 06DF 060001            add [__r1],<_GF+1
 06E2 0E0001            adc [__r0],>_GF+1
 06E5 5100              mov A,[__r0]
 06E7 60D4              mov REG[0xd4],A
 06E9 3E00              mvi A,[__r1]
 06EB 5300              mov [__r1],A
 06ED 5000              mov A,0
 06EF 08                push A
 06F0 5100              mov A,[__r1]
 06F2 08                push A
 06F3 5000              mov A,>_str
 06F5 08                push A
 06F6 5000              mov A,<_str
 06F8 08                push A
 06F9 7C0000            xcall _itoa
 06FC 38FA              add SP,-6
 06FE                   .dbline 184
 06FE           ;       TX8_PutString(str);     
 06FE 10                push X
 06FF 5000              mov A,>_str
 0701 08                push A
 0702 5000              mov A,<_str
 0704 5C                mov X,A
 0705 18                pop A
 0706 7C0000            xcall _TX8_PutString
 0709 20                pop X
 070A                   .dbline 185
 070A           ;       TX8_CPutString("  -  3 = ");
 070A 10                push X
 070B 503F              mov A,>L58
 070D 08                push A
 070E 503F              mov A,<L58
 0710 5C                mov X,A
 0711 18                pop A
 0712 7C0000            xcall _TX8_CPutString
 0715 20                pop X
 0716                   .dbline 186
 0716           ;       itoa(str, GF[GainIndx[2][0]][1], 10);
 0716 5000              mov A,0
 0718 08                push A
 0719 500A              mov A,10
 071B 08                push A
 071C 62D000            mov REG[0xd0],>_GainIndx
 071F 5104              mov A,[_GainIndx+4]
 0721 62D000            mov REG[0xd0],>__r0
 0724 5300              mov [__r1],A
 0726 550000            mov [__r0],0
 0729 6500              asl [__r1]
 072B 6B00              rlc [__r0]
 072D 060001            add [__r1],<_GF+1
 0730 0E0001            adc [__r0],>_GF+1
 0733 5100              mov A,[__r0]
 0735 60D4              mov REG[0xd4],A
 0737 3E00              mvi A,[__r1]
 0739 5300              mov [__r1],A
 073B 5000              mov A,0
 073D 08                push A
 073E 5100              mov A,[__r1]
 0740 08                push A
 0741 5000              mov A,>_str
 0743 08                push A
 0744 5000              mov A,<_str
 0746 08                push A
 0747 7C0000            xcall _itoa
 074A 38FA              add SP,-6
 074C                   .dbline 187
 074C           ;       TX8_PutString(str);     
 074C 10                push X
 074D 5000              mov A,>_str
 074F 08                push A
 0750 5000              mov A,<_str
 0752 5C                mov X,A
 0753 18                pop A
 0754 7C0000            xcall _TX8_PutString
 0757 20                pop X
 0758                   .dbline 188
 0758           ;       TX8_CPutString("  Gain Out: 1 = ");
 0758 10                push X
 0759 501D              mov A,>L66
 075B 08                push A
 075C 501D              mov A,<L66
 075E 5C                mov X,A
 075F 18                pop A
 0760 7C0000            xcall _TX8_CPutString
 0763 20                pop X
 0764                   .dbline 189
 0764           ;       itoa(str, GF[GainIndx[0][1]][1], 10);
 0764 5000              mov A,0
 0766 08                push A
 0767 500A              mov A,10
 0769 08                push A
 076A 62D000            mov REG[0xd0],>_GainIndx
 076D 5101              mov A,[_GainIndx+1]
 076F 62D000            mov REG[0xd0],>__r0
 0772 5300              mov [__r1],A
 0774 550000            mov [__r0],0
 0777 6500              asl [__r1]
 0779 6B00              rlc [__r0]
 077B 060001            add [__r1],<_GF+1
 077E 0E0001            adc [__r0],>_GF+1
 0781 5100              mov A,[__r0]
 0783 60D4              mov REG[0xd4],A
 0785 3E00              mvi A,[__r1]
 0787 5300              mov [__r1],A
 0789 5000              mov A,0
 078B 08                push A
 078C 5100              mov A,[__r1]
 078E 08                push A
 078F 5000              mov A,>_str
 0791 08                push A
 0792 5000              mov A,<_str
 0794 08                push A
 0795 7C0000            xcall _itoa
 0798 38FA              add SP,-6
 079A                   .dbline 190
 079A           ;       TX8_PutString(str);
 079A 10                push X
 079B 5000              mov A,>_str
 079D 08                push A
 079E 5000              mov A,<_str
 07A0 5C                mov X,A
 07A1 18                pop A
 07A2 7C0000            xcall _TX8_PutString
 07A5 20                pop X
 07A6                   .dbline 191
 07A6           ;       TX8_CPutString("  -  2 = ");
 07A6 10                push X
 07A7 5049              mov A,>L56
 07A9 08                push A
 07AA 5049              mov A,<L56
 07AC 5C                mov X,A
 07AD 18                pop A
 07AE 7C0000            xcall _TX8_CPutString
 07B1 20                pop X
 07B2                   .dbline 192
 07B2           ;       itoa(str, GF[GainIndx[1][1]][1], 10);
 07B2 5000              mov A,0
 07B4 08                push A
 07B5 500A              mov A,10
 07B7 08                push A
 07B8 62D000            mov REG[0xd0],>_GainIndx
 07BB 5103              mov A,[_GainIndx+2+1]
 07BD 62D000            mov REG[0xd0],>__r0
 07C0 5300              mov [__r1],A
 07C2 550000            mov [__r0],0
 07C5 6500              asl [__r1]
 07C7 6B00              rlc [__r0]
 07C9 060001            add [__r1],<_GF+1
 07CC 0E0001            adc [__r0],>_GF+1
 07CF 5100              mov A,[__r0]
 07D1 60D4              mov REG[0xd4],A
 07D3 3E00              mvi A,[__r1]
 07D5 5300              mov [__r1],A
 07D7 5000              mov A,0
 07D9 08                push A
 07DA 5100              mov A,[__r1]
 07DC 08                push A
 07DD 5000              mov A,>_str
 07DF 08                push A
 07E0 5000              mov A,<_str
 07E2 08                push A
 07E3 7C0000            xcall _itoa
 07E6 38FA              add SP,-6
 07E8                   .dbline 193
 07E8           ;       TX8_PutString(str);     
 07E8 10                push X
 07E9 5000              mov A,>_str
 07EB 08                push A
 07EC 5000              mov A,<_str
 07EE 5C                mov X,A
 07EF 18                pop A
 07F0 7C0000            xcall _TX8_PutString
 07F3 20                pop X
 07F4                   .dbline 194
 07F4           ;       TX8_CPutString("  -  3 = ");
 07F4 10                push X
 07F5 503F              mov A,>L58
 07F7 08                push A
 07F8 503F              mov A,<L58
 07FA 5C                mov X,A
 07FB 18                pop A
 07FC 7C0000            xcall _TX8_CPutString
 07FF 20                pop X
 0800                   .dbline 195
 0800           ;       itoa(str, GF[GainIndx[2][1]][1], 10);
 0800 5000              mov A,0
 0802 08                push A
 0803 500A              mov A,10
 0805 08                push A
 0806 62D000            mov REG[0xd0],>_GainIndx
 0809 5105              mov A,[_GainIndx+4+1]
 080B 62D000            mov REG[0xd0],>__r0
 080E 5300              mov [__r1],A
 0810 550000            mov [__r0],0
 0813 6500              asl [__r1]
 0815 6B00              rlc [__r0]
 0817 060001            add [__r1],<_GF+1
 081A 0E0001            adc [__r0],>_GF+1
 081D 5100              mov A,[__r0]
 081F 60D4              mov REG[0xd4],A
 0821 3E00              mvi A,[__r1]
 0823 5300              mov [__r1],A
 0825 5000              mov A,0
 0827 08                push A
 0828 5100              mov A,[__r1]
 082A 08                push A
 082B 5000              mov A,>_str
 082D 08                push A
 082E 5000              mov A,<_str
 0830 08                push A
 0831 7C0000            xcall _itoa
 0834 38FA              add SP,-6
 0836                   .dbline 196
 0836           ;       TX8_PutString(str);     
 0836 10                push X
 0837 5000              mov A,>_str
 0839 08                push A
 083A 5000              mov A,<_str
 083C 5C                mov X,A
 083D 18                pop A
 083E 7C0000            xcall _TX8_PutString
 0841 20                pop X
 0842                   .dbline 199
 0842           ;       
 0842           ;       
 0842           ;       TX8_CPutString("  --MesValue[PortIndx][2] = ");
 0842 10                push X
 0843 5000              mov A,>L75
 0845 08                push A
 0846 5000              mov A,<L75
 0848 5C                mov X,A
 0849 18                pop A
 084A 7C0000            xcall _TX8_CPutString
 084D 20                pop X
 084E                   .dbline 200
 084E           ;       itoa(str, MesValue[PortIndx][2], 10);
 084E 5000              mov A,0
 0850 08                push A
 0851 500A              mov A,10
 0853 08                push A
 0854 62D000            mov REG[0xd0],>_PortIndx
 0857 5100              mov A,[_PortIndx]
 0859 62D000            mov REG[0xd0],>__r0
 085C 5300              mov [__r1],A
 085E 5000              mov A,0
 0860 08                push A
 0861 5100              mov A,[__r1]
 0863 08                push A
 0864 5000              mov A,0
 0866 08                push A
 0867 5006              mov A,6
 0869 08                push A
 086A 7C0000            xcall __mul16
 086D 38FC              add SP,-4
 086F 5100              mov A,[__rX]
 0871 5300              mov [__r1],A
 0873 5100              mov A,[__rY]
 0875 5300              mov [__r0],A
 0877 060004            add [__r1],<_MesValue+4
 087A 0E0004            adc [__r0],>_MesValue+4
 087D 5100              mov A,[__r0]
 087F 60D4              mov REG[0xd4],A
 0881 3E00              mvi A,[__r1]
 0883 5300              mov [__r0],A
 0885 3E00              mvi A,[__r1]
 0887 5300              mov [__r1],A
 0889 5100              mov A,[__r0]
 088B 08                push A
 088C 5100              mov A,[__r1]
 088E 08                push A
 088F 5000              mov A,>_str
 0891 08                push A
 0892 5000              mov A,<_str
 0894 08                push A
 0895 7C0000            xcall _itoa
 0898 38FA              add SP,-6
 089A                   .dbline 201
 089A           ;       TX8_PutString(str);     
 089A 10                push X
 089B 5000              mov A,>_str
 089D 08                push A
 089E 5000              mov A,<_str
 08A0 5C                mov X,A
 08A1 18                pop A
 08A2 7C0000            xcall _TX8_PutString
 08A5 20                pop X
 08A6                   .dbline -2
 08A6           L53:
 08A6                   .dbline 0 ; func end
 08A6 7F                ret
 08A7                   .dbend
 08A7                   .dbfunc e BlocksInit _BlocksInit fV
 08A7           _BlocksInit::
 08A7                   .dbline -1
 08A7                   .dbline 223
 08A7           ; 
 08A7           ; /*
 08A7           ;       TX8_CPutString("  --Pre = ");
 08A7           ;       itoa(str, MesValue[0][0], 10);
 08A7           ;       TX8_PutString(str);
 08A7           ;       
 08A7           ;       TX8_CPutString("  --Out = ");
 08A7           ;       itoa(str, MesValue[0][1], 10);
 08A7           ;       TX8_PutString(str);
 08A7           ;       
 08A7           ;       TX8_CPutString("  --Sum = ");
 08A7           ;       itoa(str, MesValueSum[0][0], 10);
 08A7           ;       TX8_PutString(str);
 08A7           ;       
 08A7           ;       TX8_CPutString("  --Count = ");
 08A7           ;       itoa(str, MesValueSum[0][1], 10);
 08A7           ;       TX8_PutString(str);
 08A7           ; */
 08A7           ; }
 08A7           ;       
 08A7           ; void BlocksInit(void)
 08A7           ; {// Analog and digital blocks inizialization
 08A7                   .dbline 224
 08A7           ;       ADCINCVR_pot_Start(ADCINCVR_pot_HIGHPOWER);     
 08A7 10                push X
 08A8 5003              mov A,3
 08AA 7C0000            xcall _ADCINCVR_pot_Start
 08AD 20                pop X
 08AE                   .dbline 225
 08AE           ;       ADCINCVR_mes_Start(ADCINCVR_mes_HIGHPOWER);
 08AE 10                push X
 08AF 5003              mov A,3
 08B1 7C0000            xcall _ADCINCVR_mes_Start
 08B4                   .dbline 226
 08B4           ;       AMUX4_mic_Start();
 08B4 7C0000            xcall _AMUX4_mic_Start
 08B7 20                pop X
 08B8                   .dbline 227
 08B8           ;       BPF4_4KHz_Start(BPF4_4KHz_HIGHPOWER);
 08B8 10                push X
 08B9 5003              mov A,3
 08BB 7C0000            xcall _BPF4_4KHz_Start
 08BE                   .dbline 228
 08BE           ;       I2CHW_Start();
 08BE 7C0000            xcall _I2CHW_Start
 08C1 20                pop X
 08C2                   .dbline 229
 08C2           ;       PGA_out_Start(PGA_out_HIGHPOWER);
 08C2 10                push X
 08C3 5003              mov A,3
 08C5 7C0000            xcall _PGA_out_Start
 08C8 20                pop X
 08C9                   .dbline 230
 08C9           ;       PGA_pre_Start(PGA_pre_HIGHPOWER); 
 08C9 10                push X
 08CA 5003              mov A,3
 08CC 7C0000            xcall _PGA_pre_Start
 08CF 20                pop X
 08D0                   .dbline 231
 08D0           ;       RefMux_1_Start(RefMux_1_HIGHPOWER);
 08D0 10                push X
 08D1 5003              mov A,3
 08D3 7C0000            xcall _RefMux_1_Start
 08D6 20                pop X
 08D7                   .dbline 232
 08D7           ;     SCBLOCK_inbuff_Start(SCBLOCK_inbuff_HIGHPOWER);
 08D7 10                push X
 08D8 5003              mov A,3
 08DA 7C0000            xcall _SCBLOCK_inbuff_Start
 08DD                   .dbline 233
 08DD           ;       LED_1_Start();
 08DD 7C0000            xcall _LED_1_Start
 08E0                   .dbline 234
 08E0           ;       LED_2_Start();
 08E0 7C0000            xcall _LED_2_Start
 08E3                   .dbline 235
 08E3           ;       LED_3_Start();
 08E3 7C0000            xcall _LED_3_Start
 08E6                   .dbline 236
 08E6           ;       DIGITAL_OUT_Start();  
 08E6 7C0000            xcall _DIGITAL_OUT_Start
 08E9                   .dbline 238
 08E9           ;       
 08E9           ;       TX8_EnableInt();
 08E9 7C0000            xcall _TX8_EnableInt
 08EC 20                pop X
 08ED                   .dbline 239
 08ED           ;       TX8_Start(TX8_PARITY_NONE);
 08ED 10                push X
 08EE 5000              mov A,0
 08F0 7C0000            xcall _TX8_Start
 08F3 20                pop X
 08F4                   .dbline 241
 08F4           ;       
 08F4           ;       AMUX4_mic_InputSelect(AMUX4_mic_PORT0_1);
 08F4 10                push X
 08F5 5000              mov A,0
 08F7 7C0000            xcall _AMUX4_mic_InputSelect
 08FA 20                pop X
 08FB                   .dbline 243
 08FB           ; 
 08FB           ;       PGA_pre_SetGain(GF[GainIndx[0][0]][0]);
 08FB 62D000            mov REG[0xd0],>_GainIndx
 08FE 5100              mov A,[_GainIndx]
 0900 62D000            mov REG[0xd0],>__r0
 0903 5300              mov [__r1],A
 0905 550000            mov [__r0],0
 0908 6500              asl [__r1]
 090A 6B00              rlc [__r0]
 090C 060000            add [__r1],<_GF
 090F 0E0000            adc [__r0],>_GF
 0912 5100              mov A,[__r0]
 0914 60D4              mov REG[0xd4],A
 0916 3E00              mvi A,[__r1]
 0918 10                push X
 0919 7C0000            xcall _PGA_pre_SetGain
 091C 20                pop X
 091D                   .dbline 244
 091D           ;       PGA_out_SetGain(GF[GainIndx[0][1]][0]);
 091D 62D000            mov REG[0xd0],>_GainIndx
 0920 5101              mov A,[_GainIndx+1]
 0922 62D000            mov REG[0xd0],>__r0
 0925 5300              mov [__r1],A
 0927 550000            mov [__r0],0
 092A 6500              asl [__r1]
 092C 6B00              rlc [__r0]
 092E 060000            add [__r1],<_GF
 0931 0E0000            adc [__r0],>_GF
 0934 5100              mov A,[__r0]
 0936 60D4              mov REG[0xd4],A
 0938 3E00              mvi A,[__r1]
 093A 10                push X
 093B 7C0000            xcall _PGA_out_SetGain
 093E                   .dbline 246
 093E           ;       
 093E           ;     HB_Tmr_EnableInt();  
 093E 7C0000            xcall _HB_Tmr_EnableInt
 0941                   .dbline 247
 0941           ;       HB_Tmr_Start();         
 0941 7C0000            xcall _HB_Tmr_Start
 0944 20                pop X
 0945                   .dbline -2
 0945           L77:
 0945                   .dbline 0 ; func end
 0945 7F                ret
 0946                   .dbend
 0946                   .dbfunc e HB_Tmr_ISR_C _HB_Tmr_ISR_C fV
 0946           _HB_Tmr_ISR_C::
 0946                   .dbline -1
 0946 71C0              or F,-64
 0948 08                push A
 0949 5DD0              mov A,REG[0xd0]
 094B 08                push A
 094C                   .dbline 251
 094C           ; }
 094C           ;       
 094C           ; void HB_Tmr_ISR_C(void)
 094C           ; {// Base clock for all of the timings in the program
 094C                   .dbline 252
 094C           ;       TmrFlag = 1;
 094C 62D000            mov REG[0xd0],>_TmrFlag
 094F 550001            mov [_TmrFlag],1
 0952                   .dbline 253
 0952           ;       Tmr1++;
 0952 62D000            mov REG[0xd0],>_Tmr1
 0955 7601              inc [_Tmr1+1]
 0957 0E0000            adc [_Tmr1],0
 095A                   .dbline 254
 095A           ;       Tmr2++;
 095A 62D000            mov REG[0xd0],>_Tmr2
 095D 7601              inc [_Tmr2+1]
 095F 0E0000            adc [_Tmr2],0
 0962                   .dbline 255
 0962           ;       Time10ms++;     
 0962 62D000            mov REG[0xd0],>_Time10ms
 0965 060301            add [_Time10ms+3],1
 0968 0E0200            adc [_Time10ms+2],0
 096B 0E0100            adc [_Time10ms+1],0
 096E 0E0000            adc [_Time10ms],0
 0971                   .dbline -2
 0971           L79:
 0971 18                pop A
 0972 60D0              mov REG[208],A
 0974 18                pop A
 0975                   .dbline 0 ; func end
 0975 7E                reti
 0976                   .dbend
 0976                   .dbfunc e DelayMs _DelayMs fV
 0976           ;              i -> X+0
 0976           ;             Ms -> X-5
 0976           _DelayMs::
 0976                   .dbline -1
 0976 10                push X
 0977 4F                mov X,SP
 0978 3802              add SP,2
 097A                   .dbline 259
 097A           ; }
 097A           ; 
 097A           ; void DelayMs(int Ms)
 097A           ; {
 097A                   .dbline 261
 097A           ;       int i;
 097A           ;       for (i=0; i<Ms; i++)
 097A 560100            mov [X+1],0
 097D 560000            mov [X+0],0
 0980 800D              xjmp L84
 0982           L81:
 0982                   .dbline 262
 0982           ;       {
 0982                   .dbline 263
 0982           ;               Delay50uTimes(20);
 0982 10                push X
 0983 5014              mov A,20
 0985 7C0000            xcall _Delay50uTimes
 0988 20                pop X
 0989                   .dbline 264
 0989           ;       }
 0989           L82:
 0989                   .dbline 261
 0989 7701              inc [X+1]
 098B 0F0000            adc [X+0],0
 098E           L84:
 098E                   .dbline 261
 098E 5201              mov A,[X+1]
 0990 13FC              sub A,[X-4]
 0992 52FB              mov A,[X-5]
 0994 3180              xor A,-128
 0996 62D000            mov REG[0xd0],>__r0
 0999 5300              mov [__rX],A
 099B 5200              mov A,[X+0]
 099D 3180              xor A,-128
 099F 1A00              sbb A,[__rX]
 09A1 CFE0              jc L81
 09A3           X19:
 09A3                   .dbline -2
 09A3           L80:
 09A3 38FE              add SP,-2
 09A5 20                pop X
 09A6                   .dbline 0 ; func end
 09A6 7F                ret
 09A7                   .dbsym l i 0 I
 09A7                   .dbsym l Ms -5 I
 09A7                   .dbend
 09A7                   .dbfunc e LedTest _LedTest fV
 09A7           ;              i -> X+0
 09A7           _LedTest::
 09A7                   .dbline -1
 09A7 10                push X
 09A8 4F                mov X,SP
 09A9 3802              add SP,2
 09AB                   .dbline 268
 09AB           ; }
 09AB           ; 
 09AB           ; void LedTest(void)
 09AB           ; {
 09AB                   .dbline 270
 09AB           ;       int i;
 09AB           ;       LED_1_Off();
 09AB 10                push X
 09AC 7C0000            xcall _LED_1_Off
 09AF                   .dbline 271
 09AF           ;       LED_2_Off();
 09AF 7C0000            xcall _LED_2_Off
 09B2                   .dbline 272
 09B2           ;       LED_3_Off();
 09B2 7C0000            xcall _LED_3_Off
 09B5 20                pop X
 09B6                   .dbline 274
 09B6           ;       
 09B6           ;       for (i=0; i<3; i++)
 09B6 560100            mov [X+1],0
 09B9 560000            mov [X+0],0
 09BC           L86:
 09BC                   .dbline 275
 09BC           ;       {
 09BC                   .dbline 276
 09BC           ;               LED_1_On();
 09BC 10                push X
 09BD 7C0000            xcall _LED_1_On
 09C0 20                pop X
 09C1                   .dbline 277
 09C1           ;               DelayMs(500);
 09C1 5001              mov A,1
 09C3 08                push A
 09C4 50F4              mov A,-12
 09C6 08                push A
 09C7 9FAD              xcall _DelayMs
 09C9 38FE              add SP,-2
 09CB                   .dbline 278
 09CB           ;               LED_1_Off();
 09CB 10                push X
 09CC 7C0000            xcall _LED_1_Off
 09CF                   .dbline 279
 09CF           ;               LED_2_On();
 09CF 7C0000            xcall _LED_2_On
 09D2 20                pop X
 09D3                   .dbline 280
 09D3           ;               DelayMs(500);
 09D3 5001              mov A,1
 09D5 08                push A
 09D6 50F4              mov A,-12
 09D8 08                push A
 09D9 9F9B              xcall _DelayMs
 09DB 38FE              add SP,-2
 09DD                   .dbline 281
 09DD           ;               LED_2_Off();
 09DD 10                push X
 09DE 7C0000            xcall _LED_2_Off
 09E1                   .dbline 282
 09E1           ;               LED_3_On();
 09E1 7C0000            xcall _LED_3_On
 09E4 20                pop X
 09E5                   .dbline 283
 09E5           ;               DelayMs(500);
 09E5 5001              mov A,1
 09E7 08                push A
 09E8 50F4              mov A,-12
 09EA 08                push A
 09EB 9F89              xcall _DelayMs
 09ED 38FE              add SP,-2
 09EF                   .dbline 284
 09EF           ;               LED_3_Off();
 09EF 10                push X
 09F0 7C0000            xcall _LED_3_Off
 09F3 20                pop X
 09F4                   .dbline 285
 09F4           ;       }
 09F4           L87:
 09F4                   .dbline 274
 09F4 7701              inc [X+1]
 09F6 0F0000            adc [X+0],0
 09F9                   .dbline 274
 09F9 5201              mov A,[X+1]
 09FB 1103              sub A,3
 09FD 5200              mov A,[X+0]
 09FF 3180              xor A,-128
 0A01 1980              sbb A,(0 ^ 0x80)
 0A03 CFB8              jc L86
 0A05           X20:
 0A05                   .dbline -2
 0A05           L85:
 0A05 38FE              add SP,-2
 0A07 20                pop X
 0A08                   .dbline 0 ; func end
 0A08 7F                ret
 0A09                   .dbsym l i 0 I
 0A09                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\main.c
 0000           _str::
 0000 00000000000000    .byte 0,0,0,0,0,0,0
 0007                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0007                   .dbsym e str _str A[7:7]c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _i::
 0000 0000              .byte 0,0
 0002                   .dbsym e i _i i
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _MesValue::
 0000 00000000000000000000      .word 0,0,0,0,0
 000A 0000000000000000  .byte 0,0,0,0,0,0,0,0
 0012                   .dbsym e MesValue _MesValue A[18:3:3]I
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _PotValue::
 0000 0000              .byte 0,0
 0002                   .dbsym e PotValue _PotValue I
                        .area lit(rom, con, rel)
 0000           L75:
 0000 20202D2D4D657356616C75655B506F72  .byte 32,32,45,45,'M,'e,'s,'V,'a,'l,'u,'e,91,'P,'o,'r
 0010 74496E64785D5B325D203D2000        .byte 't,'I,'n,'d,'x,93,91,50,93,32,61,32,0
 001D           L66:
 001D 20204761696E204F75743A2031203D20  .byte 32,32,'G,'a,'i,'n,32,'O,'u,'t,58,32,49,32,61,32
 002D 00                .byte 0
 002E           L60:
 002E 20204761696E205072653A2031203D20  .byte 32,32,'G,'a,'i,'n,32,'P,'r,'e,58,32,49,32,61,32
 003E 00                .byte 0
 003F           L58:
 003F 20202D202033203D2000      .byte 32,32,45,32,32,51,32,61,32,0
 0049           L56:
 0049 20202D202032203D2000      .byte 32,32,45,32,32,50,32,61,32,0
 0053           L55:
 0053 202020204D65732056616C75653A2031  .byte 32,32,32,32,'M,'e,'s,32,'V,'a,'l,'u,'e,58,32,49
 0063 203D2000          .byte 32,61,32,0
 0067           L54:
 0067 0A0D00            .byte 10,13,0
