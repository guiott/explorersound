 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _PortIndx::
 0000 00                .byte 0
 0001                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0001                   .dbsym e PortIndx _PortIndx c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _Tmr1::
 0000 0000              .word 0
 0002                   .dbsym e Tmr1 _Tmr1 i
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _Tmr2::
 0000 0000              .word 0
 0002                   .dbsym e Tmr2 _Tmr2 i
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _Time10ms::
 0000 00000000          .word 0,0
 0004                   .dbsym e Time10ms _Time10ms L
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _TmrFlag::
 0000 00                .byte 0
 0001                   .dbsym e TmrFlag _TmrFlag c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _GF::
 0000 F801              .byte 248,1
 0002 7802              .byte 'x,2
 0004 3804              .byte 56,4
 0006 1808              .byte 24,8
 0008 0810              .byte 8,16
 000A                   .dbsym e GF _GF A[10:5:2]c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _GainIndx::
 0000 0202              .byte 2,2
 0002 0202              .byte 2,2
 0004 0202              .byte 2,2
 0006                   .dbsym e GainIndx _GainIndx A[6:3:2]c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area text(rom, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;        PortNum -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3803              add SP,3
 0004                   .dbline 38
 0004           ; /* ////////////////////////////////////////////////////////////////////////////
 0004           ; ** Project:      ExplorerSound
 0004           ; ** Author:    Guido Ottaviani-->guido@guiott.com<--
 0004           ; ** Description: 
 0004           ; ** version 1.0   07-11-2010
 0004           ; **
 0004           ; ** Detailed descriptions are on file "Notes.txt" 
 0004           ; **
 0004           ; -------------------------------------------------------------------------------
 0004           ; Copyright 2010 Guido Ottaviani
 0004           ; guido@guiott.com
 0004           ; 
 0004           ;       ExplorerSound is free software: you can redistribute it and/or modify
 0004           ;     it under the terms of the GNU General Public License as published by
 0004           ;     the Free Software Foundation, either version 3 of the License, or
 0004           ;     (at your option) any later version.
 0004           ; 
 0004           ;     ExplorerSound is distributed in the hope that it will be useful,
 0004           ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
 0004           ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 0004           ;     GNU General Public License for more details.
 0004           ; 
 0004           ;     You should have received a copy of the GNU General Public License
 0004           ;     along with ExplorerSound.  If not, see <http://www.gnu.org/licenses/>.
 0004           ; -------------------------------------------------------------------------------      
 0004           ; /////////////////////////////////////////////////////////////////////////////*/
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include <stdlib.h>
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include "prototypes.h"
 0004           ; #include "definitions.h"
 0004           ; #include "delay.h"
 0004           ; 
 0004           ; #pragma interrupt_handler HB_Tmr_ISR_C // int handler for program clock
 0004           ; 
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 41
 0004           ;       BYTE PortNum[3];
 0004           ;       
 0004           ;       BlocksInit();
 0004 7C099D            xcall _BlocksInit
 0007                   .dbline 43
 0007           ;       
 0007           ;       M8C_EnableGInt ;               // Turn on interrupts 
 0007 7101                      or  F, 01h
 0009           
 0009                   .dbline 45
 0009           ;       
 0009           ;       LED_2_On();
 0009 10                push X
 000A 7C0000            xcall _LED_2_On
 000D 20                pop X
 000E                   .dbline 46
 000E           ;       PortNum[0] = AMUX4_mic_PORT0_1;
 000E 560000            mov [X+0],0
 0011                   .dbline 47
 0011           ;       PortNum[1] = AMUX4_mic_PORT0_3;
 0011 560101            mov [X+1],1
 0014                   .dbline 48
 0014           ;       PortNum[2] = AMUX4_mic_PORT0_7;
 0014 560203            mov [X+2],3
 0017                   .dbline 50
 0017           ;       
 0017           ;       LedTest();
 0017 7C0A9D            xcall _LedTest
 001A 82BD              xjmp L5
 001C           L4:
 001C                   .dbline 54
 001C           ;       
 001C           ;       // Main loop=============================================================
 001C           ;       while (1)
 001C           ;       {
 001C                   .dbline 55
 001C           ;               if(ADCINCVR_pot_fIsDataAvailable() != 0)// Wait for data to be ready
 001C 10                push X
 001D 7C0000            xcall _ADCINCVR_pot_fIsDataAvailable
 0020 62D000            mov REG[0xd0],>__r0
 0023 20                pop X
 0024 3900              cmp A,0
 0026 A05F              jz L7
 0028                   .dbline 56
 0028           ;         {   
 0028                   .dbline 59
 0028           ;                       // Get Data, Clear data ready flag, in the range 0-1800
 0028           ;                       // multiplying by 256 is to have the same order of ADC_mes values
 0028           ;                       PotValue = (((long)ADCINCVR_pot_iGetDataClearFlag())+900) << 8;  
 0028 10                push X
 0029 7C0000            xcall _ADCINCVR_pot_iGetDataClearFlag
 002C 62D000            mov REG[0xd0],>__r0
 002F 5A00              mov [__r0],X
 0031 20                pop X
 0032 5300              mov [__r3],A
 0034 5100              mov A,[__r0]
 0036 5300              mov [__r2],A
 0038 470080            tst [__r2],-128
 003B A009              jz X1
 003D 5500FF            mov [__r1],-1
 0040 5500FF            mov [__r0],-1
 0043 800A              jmp X2
 0045           X1:
 0045 62D000            mov REG[0xd0],>__r0
 0048 550000            mov [__r1],0
 004B 550000            mov [__r0],0
 004E           X2:
 004E 62D000            mov REG[0xd0],>__r0
 0051 060084            add [__r3],-124
 0054 0E0003            adc [__r2],3
 0057 0E0000            adc [__r1],0
 005A 0E0000            adc [__r0],0
 005D 5008              mov A,8
 005F           X3:
 005F 62D000            mov REG[0xd0],>__r0
 0062 6500              asl [__r3]
 0064 6B00              rlc [__r2]
 0066 6B00              rlc [__r1]
 0068 6B00              rlc [__r0]
 006A 78                dec A
 006B BFF3              jnz X3
 006D 5100              mov A,[__r0]
 006F 08                push A
 0070 5100              mov A,[__r1]
 0072 08                push A
 0073 5100              mov A,[__r2]
 0075 08                push A
 0076 5100              mov A,[__r3]
 0078 62D000            mov REG[0xd0],>_PotValue
 007B 5303              mov [_PotValue+3],A
 007D 18                pop A
 007E 5302              mov [_PotValue+2],A
 0080 18                pop A
 0081 5301              mov [_PotValue+1],A
 0083 18                pop A
 0084 5300              mov [_PotValue],A
 0086                   .dbline 60
 0086           ;               }
 0086           L7:
 0086                   .dbline 62
 0086           ;         
 0086           ;               if (Tmr2>2) // every 30ms
 0086 62D000            mov REG[0xd0],>_Tmr2
 0089 5002              mov A,2
 008B 1201              sub A,[_Tmr2+1]
 008D 5000              mov A,0
 008F 1A00              sbb A,[_Tmr2]
 0091 D211              jnc L9
 0093           X4:
 0093                   .dbline 63
 0093           ;               {
 0093                   .dbline 64
 0093           ;                       Tmr2=0;
 0093 62D000            mov REG[0xd0],>_Tmr2
 0096 550100            mov [_Tmr2+1],0
 0099 550000            mov [_Tmr2],0
 009C                   .dbline 65
 009C           ;                       ADCINCVR_mes_GetSamples(1); // Start ADC to read once more
 009C 10                push X
 009D 5001              mov A,1
 009F 7C0000            xcall _ADCINCVR_mes_GetSamples
 00A2 20                pop X
 00A3           L11:
 00A3                   .dbline 66
 00A3           ;                       while(! ADCINCVR_mes_fIsDataAvailable());// Wait for data to be ready 
 00A3           L12:
 00A3                   .dbline 66
 00A3 10                push X
 00A4 7C0000            xcall _ADCINCVR_mes_fIsDataAvailable
 00A7 62D000            mov REG[0xd0],>__r0
 00AA 20                pop X
 00AB 3900              cmp A,0
 00AD AFF5              jz L11
 00AF                   .dbline 68
 00AF           ;                       // Get Data, Clear data ready flag
 00AF           ;                       MesValue[PortIndx][2] = ((long)ADCINCVR_mes_iGetDataClearFlag()) << 8; // [1]
 00AF 10                push X
 00B0 7C0000            xcall _ADCINCVR_mes_iGetDataClearFlag
 00B3 62D000            mov REG[0xd0],>__r0
 00B6 5A00              mov [__r0],X
 00B8 20                pop X
 00B9 5300              mov [__r3],A
 00BB 5100              mov A,[__r0]
 00BD 5300              mov [__r2],A
 00BF 470080            tst [__r2],-128
 00C2 A009              jz X5
 00C4 5500FF            mov [__r1],-1
 00C7 5500FF            mov [__r0],-1
 00CA 800A              jmp X6
 00CC           X5:
 00CC 62D000            mov REG[0xd0],>__r0
 00CF 550000            mov [__r1],0
 00D2 550000            mov [__r0],0
 00D5           X6:
 00D5 62D000            mov REG[0xd0],>__r0
 00D8 5008              mov A,8
 00DA           X7:
 00DA 62D000            mov REG[0xd0],>__r0
 00DD 6500              asl [__r3]
 00DF 6B00              rlc [__r2]
 00E1 6B00              rlc [__r1]
 00E3 6B00              rlc [__r0]
 00E5 78                dec A
 00E6 BFF3              jnz X7
 00E8 62D000            mov REG[0xd0],>_PortIndx
 00EB 5100              mov A,[_PortIndx]
 00ED 62D000            mov REG[0xd0],>__r0
 00F0 5300              mov [__r5],A
 00F2 5000              mov A,0
 00F4 08                push A
 00F5 5100              mov A,[__r5]
 00F7 08                push A
 00F8 5000              mov A,0
 00FA 08                push A
 00FB 500C              mov A,12
 00FD 08                push A
 00FE 7C0000            xcall __mul16
 0101 38FC              add SP,-4
 0103 5100              mov A,[__rX]
 0105 5300              mov [__r5],A
 0107 5100              mov A,[__rY]
 0109 5300              mov [__r4],A
 010B 060008            add [__r5],<_MesValue+8
 010E 0E0008            adc [__r4],>_MesValue+8
 0111 5100              mov A,[__r4]
 0113 60D5              mov REG[0xd5],A
 0115 5100              mov A,[__r0]
 0117 3F00              mvi [__r5],A
 0119 5100              mov A,[__r1]
 011B 3F00              mvi [__r5],A
 011D 5100              mov A,[__r2]
 011F 3F00              mvi [__r5],A
 0121 5100              mov A,[__r3]
 0123 3F00              mvi [__r5],A
 0125                   .dbline 69
 0125           ;                       MesValue[PortIndx][1] = (MesValue[PortIndx][2]) >> (GainIndx[PortIndx][1]);                     // [2][4]
 0125 62D000            mov REG[0xd0],>_PortIndx
 0128 5100              mov A,[_PortIndx]
 012A 62D000            mov REG[0xd0],>__r0
 012D 5300              mov [__r1],A
 012F 5000              mov A,0
 0131 08                push A
 0132 5100              mov A,[__r1]
 0134 08                push A
 0135 5000              mov A,0
 0137 08                push A
 0138 500C              mov A,12
 013A 08                push A
 013B 7C0000            xcall __mul16
 013E 38FC              add SP,-4
 0140 5100              mov A,[__rX]
 0142 5300              mov [__r1],A
 0144 5100              mov A,[__rY]
 0146 5300              mov [__r0],A
 0148 62D000            mov REG[0xd0],>_PortIndx
 014B 5100              mov A,[_PortIndx]
 014D 62D000            mov REG[0xd0],>__r0
 0150 5300              mov [__r3],A
 0152 550000            mov [__r2],0
 0155 6500              asl [__r3]
 0157 6B00              rlc [__r2]
 0159 060001            add [__r3],<_GainIndx+1
 015C 0E0001            adc [__r2],>_GainIndx+1
 015F 5100              mov A,[__r2]
 0161 60D4              mov REG[0xd4],A
 0163 3E00              mvi A,[__r3]
 0165 5300              mov [__r3],A
 0167 5100              mov A,[__r1]
 0169 0108              add A,<_MesValue+8
 016B 5300              mov [__r5],A
 016D 5100              mov A,[__r0]
 016F 0908              adc A,>_MesValue+8
 0171 60D4              mov REG[0xd4],A
 0173 3E00              mvi A,[__r5]
 0175 5300              mov [__r8],A
 0177 3E00              mvi A,[__r5]
 0179 5300              mov [__r9],A
 017B 3E00              mvi A,[__r5]
 017D 5300              mov [__r10],A
 017F 3E00              mvi A,[__r5]
 0181 5300              mov [__r11],A
 0183 5100              mov A,[__r8]
 0185 08                push A
 0186 5100              mov A,[__r9]
 0188 08                push A
 0189 5100              mov A,[__r10]
 018B 08                push A
 018C 5100              mov A,[__r11]
 018E 5300              mov [__r7],A
 0190 18                pop A
 0191 5300              mov [__r6],A
 0193 18                pop A
 0194 5300              mov [__r5],A
 0196 18                pop A
 0197 5300              mov [__r4],A
 0199 5100              mov A,[__r3]
 019B 211F              and A,31
 019D A00F              jz X8
 019F           X9:
 019F 62D000            mov REG[0xd0],>__r0
 01A2 6800              asr [__r4]
 01A4 6E00              rrc [__r5]
 01A6 6E00              rrc [__r6]
 01A8 6E00              rrc [__r7]
 01AA 78                dec A
 01AB BFF3              jnz X9
 01AD           X8:
 01AD 62D000            mov REG[0xd0],>__r0
 01B0 060004            add [__r1],<_MesValue+4
 01B3 0E0004            adc [__r0],>_MesValue+4
 01B6 5100              mov A,[__r0]
 01B8 60D5              mov REG[0xd5],A
 01BA 5100              mov A,[__r4]
 01BC 3F00              mvi [__r1],A
 01BE 5100              mov A,[__r5]
 01C0 3F00              mvi [__r1],A
 01C2 5100              mov A,[__r6]
 01C4 3F00              mvi [__r1],A
 01C6 5100              mov A,[__r7]
 01C8 3F00              mvi [__r1],A
 01CA                   .dbline 70
 01CA           ;                       MesValue[PortIndx][0] = (MesValue[PortIndx][1]) >> (GainIndx[PortIndx][0]); // [3][4]                   
 01CA 62D000            mov REG[0xd0],>_PortIndx
 01CD 5100              mov A,[_PortIndx]
 01CF 62D000            mov REG[0xd0],>__r0
 01D2 5300              mov [__r1],A
 01D4 5000              mov A,0
 01D6 08                push A
 01D7 5100              mov A,[__r1]
 01D9 08                push A
 01DA 5000              mov A,0
 01DC 08                push A
 01DD 500C              mov A,12
 01DF 08                push A
 01E0 7C0000            xcall __mul16
 01E3 38FC              add SP,-4
 01E5 5100              mov A,[__rX]
 01E7 5300              mov [__r1],A
 01E9 5100              mov A,[__rY]
 01EB 5300              mov [__r0],A
 01ED 62D000            mov REG[0xd0],>_PortIndx
 01F0 5100              mov A,[_PortIndx]
 01F2 62D000            mov REG[0xd0],>__r0
 01F5 5300              mov [__r3],A
 01F7 550000            mov [__r2],0
 01FA 6500              asl [__r3]
 01FC 6B00              rlc [__r2]
 01FE 060000            add [__r3],<_GainIndx
 0201 0E0000            adc [__r2],>_GainIndx
 0204 5100              mov A,[__r2]
 0206 60D4              mov REG[0xd4],A
 0208 3E00              mvi A,[__r3]
 020A 5300              mov [__r3],A
 020C 5100              mov A,[__r1]
 020E 0104              add A,<_MesValue+4
 0210 5300              mov [__r5],A
 0212 5100              mov A,[__r0]
 0214 0904              adc A,>_MesValue+4
 0216 60D4              mov REG[0xd4],A
 0218 3E00              mvi A,[__r5]
 021A 5300              mov [__r8],A
 021C 3E00              mvi A,[__r5]
 021E 5300              mov [__r9],A
 0220 3E00              mvi A,[__r5]
 0222 5300              mov [__r10],A
 0224 3E00              mvi A,[__r5]
 0226 5300              mov [__r11],A
 0228 5100              mov A,[__r8]
 022A 08                push A
 022B 5100              mov A,[__r9]
 022D 08                push A
 022E 5100              mov A,[__r10]
 0230 08                push A
 0231 5100              mov A,[__r11]
 0233 5300              mov [__r7],A
 0235 18                pop A
 0236 5300              mov [__r6],A
 0238 18                pop A
 0239 5300              mov [__r5],A
 023B 18                pop A
 023C 5300              mov [__r4],A
 023E 5100              mov A,[__r3]
 0240 211F              and A,31
 0242 A00F              jz X10
 0244           X11:
 0244 62D000            mov REG[0xd0],>__r0
 0247 6800              asr [__r4]
 0249 6E00              rrc [__r5]
 024B 6E00              rrc [__r6]
 024D 6E00              rrc [__r7]
 024F 78                dec A
 0250 BFF3              jnz X11
 0252           X10:
 0252 62D000            mov REG[0xd0],>__r0
 0255 060000            add [__r1],<_MesValue
 0258 0E0000            adc [__r0],>_MesValue
 025B 5100              mov A,[__r0]
 025D 60D5              mov REG[0xd5],A
 025F 5100              mov A,[__r4]
 0261 3F00              mvi [__r1],A
 0263 5100              mov A,[__r5]
 0265 3F00              mvi [__r1],A
 0267 5100              mov A,[__r6]
 0269 3F00              mvi [__r1],A
 026B 5100              mov A,[__r7]
 026D 3F00              mvi [__r1],A
 026F                   .dbline 72
 026F           ;                       
 026F           ;                       AGC(); 
 026F 906E              xcall _AGC
 0271                   .dbline 74
 0271           ;                       
 0271           ;                       PortIndx++;
 0271 62D000            mov REG[0xd0],>_PortIndx
 0274 7600              inc [_PortIndx]
 0276                   .dbline 75
 0276           ;                       if(PortIndx > 2) 
 0276 5002              mov A,2
 0278 3A00              cmp A,[_PortIndx]
 027A D007              jnc L19
 027C           X12:
 027C                   .dbline 76
 027C           ;                       {
 027C                   .dbline 77
 027C           ;                               PortIndx=0; // next mux port
 027C 62D000            mov REG[0xd0],>_PortIndx
 027F 550000            mov [_PortIndx],0
 0282                   .dbline 78
 0282           ;                       }
 0282           L19:
 0282                   .dbline 79
 0282           ;                       AMUX4_mic_InputSelect(PortNum[PortIndx]);
 0282 62D000            mov REG[0xd0],>__r0
 0285 550007            mov [__r0],7
 0288 5A00              mov [__r1],X
 028A 62D000            mov REG[0xd0],>_PortIndx
 028D 5100              mov A,[_PortIndx]
 028F 62D000            mov REG[0xd0],>__r0
 0292 0200              add A,[__r1]
 0294 5300              mov [__r1],A
 0296 5000              mov A,0
 0298 0A00              adc A,[__r0]
 029A 60D4              mov REG[0xd4],A
 029C 3E00              mvi A,[__r1]
 029E 10                push X
 029F 7C0000            xcall _AMUX4_mic_InputSelect
 02A2 20                pop X
 02A3                   .dbline 80
 02A3           ;               }
 02A3           L9:
 02A3                   .dbline 82
 02A3           ;               
 02A3           ;               if (TmrFlag) // every 10ms
 02A3 62D000            mov REG[0xd0],>_TmrFlag
 02A6 3C0000            cmp [_TmrFlag],0
 02A9 A00B              jz L21
 02AB                   .dbline 83
 02AB           ;               {       
 02AB                   .dbline 84
 02AB           ;                       TmrFlag = 0;
 02AB 550000            mov [_TmrFlag],0
 02AE                   .dbline 85
 02AE           ;                       ADCINCVR_pot_GetSamples(1);    // Start ADC to read 1 sample
 02AE 10                push X
 02AF 5001              mov A,1
 02B1 7C0000            xcall _ADCINCVR_pot_GetSamples
 02B4 20                pop X
 02B5                   .dbline 86
 02B5           ;               }
 02B5           L21:
 02B5                   .dbline 88
 02B5           ;               
 02B5           ;               if (Tmr1 > 9) // every 100ms
 02B5 62D000            mov REG[0xd0],>_Tmr1
 02B8 5009              mov A,9
 02BA 1201              sub A,[_Tmr1+1]
 02BC 5000              mov A,0
 02BE 1A00              sbb A,[_Tmr1]
 02C0 D017              jnc L23
 02C2           X13:
 02C2                   .dbline 89
 02C2           ;               {
 02C2                   .dbline 90
 02C2           ;                       Tmr1 = 0;
 02C2 62D000            mov REG[0xd0],>_Tmr1
 02C5 550100            mov [_Tmr1+1],0
 02C8 550000            mov [_Tmr1],0
 02CB                   .dbline 91
 02CB           ;                       Tmr2 = 0;
 02CB 62D000            mov REG[0xd0],>_Tmr2
 02CE 550100            mov [_Tmr2+1],0
 02D1 550000            mov [_Tmr2],0
 02D4                   .dbline 92
 02D4           ;                       UartTxValues(); // debug
 02D4 943E              xcall _UartTxValues
 02D6                   .dbline 93
 02D6           ;                       DigitalOut();
 02D6 936A              xcall _DigitalOut
 02D8                   .dbline 94
 02D8           ;               }
 02D8           L23:
 02D8                   .dbline 95
 02D8           ;       }// ========================================================== Main loop 
 02D8           L5:
 02D8                   .dbline 53
 02D8 8D43              xjmp L4
 02DA           X0:
 02DA                   .dbline -2
 02DA           L1:
 02DA 38FD              add SP,-3
 02DC 20                pop X
 02DD                   .dbline 0 ; func end
 02DD 8FFF              jmp .
 02DF                   .dbsym l PortNum 0 A[3:3]c
 02DF                   .dbend
 02DF                   .dbfunc e AGC _AGC fV
 02DF           _AGC::
 02DF                   .dbline -1
 02DF                   .dbline 101
 02DF           ; }
 02DF           ; 
 02DF           ; // Functions ***************************************************************
 02DF           ; 
 02DF           ; void AGC(void)
 02DF           ; {// [5]
 02DF                   .dbline 102
 02DF           ;            if((MesValue[PortIndx][2] > V_MAX) && (GainIndx[PortIndx][1] > I_MIN))// PGA_out
 02DF 62D000            mov REG[0xd0],>_PortIndx
 02E2 5100              mov A,[_PortIndx]
 02E4 62D000            mov REG[0xd0],>__r0
 02E7 5300              mov [__r1],A
 02E9 5000              mov A,0
 02EB 08                push A
 02EC 5100              mov A,[__r1]
 02EE 08                push A
 02EF 5000              mov A,0
 02F1 08                push A
 02F2 500C              mov A,12
 02F4 08                push A
 02F5 7C0000            xcall __mul16
 02F8 38FC              add SP,-4
 02FA 5100              mov A,[__rX]
 02FC 5300              mov [__r1],A
 02FE 5100              mov A,[__rY]
 0300 5300              mov [__r0],A
 0302 060008            add [__r1],<_MesValue+8
 0305 0E0008            adc [__r0],>_MesValue+8
 0308 5100              mov A,[__r0]
 030A 60D4              mov REG[0xd4],A
 030C 3E00              mvi A,[__r1]
 030E 5300              mov [__r4],A
 0310 3E00              mvi A,[__r1]
 0312 5300              mov [__r5],A
 0314 3E00              mvi A,[__r1]
 0316 5300              mov [__r6],A
 0318 3E00              mvi A,[__r1]
 031A 5300              mov [__r7],A
 031C 5040              mov A,64
 031E 1200              sub A,[__r7]
 0320 500D              mov A,13
 0322 1A00              sbb A,[__r6]
 0324 5003              mov A,3
 0326 1A00              sbb A,[__r5]
 0328 5100              mov A,[__r4]
 032A 3180              xor A,-128
 032C 5300              mov [__rX],A
 032E 5080              mov A,(0 ^ 0x80)
 0330 1A00              sbb A,[__rX]
 0332 D08B              jnc L26
 0334           X14:
 0334 62D000            mov REG[0xd0],>_PortIndx
 0337 5100              mov A,[_PortIndx]
 0339 62D000            mov REG[0xd0],>__r0
 033C 5300              mov [__r1],A
 033E 550000            mov [__r0],0
 0341 6500              asl [__r1]
 0343 6B00              rlc [__r0]
 0345 060001            add [__r1],<_GainIndx+1
 0348 0E0001            adc [__r0],>_GainIndx+1
 034B 5100              mov A,[__r0]
 034D 60D4              mov REG[0xd4],A
 034F 3E00              mvi A,[__r1]
 0351 5300              mov [__r0],A
 0353 5000              mov A,0
 0355 3A00              cmp A,[__r0]
 0357 D066              jnc L26
 0359           X15:
 0359                   .dbline 103
 0359           ;       {
 0359                   .dbline 104
 0359           ;               GainIndx[PortIndx][1]--;
 0359 62D000            mov REG[0xd0],>_PortIndx
 035C 5100              mov A,[_PortIndx]
 035E 62D000            mov REG[0xd0],>__r0
 0361 5300              mov [__r1],A
 0363 550000            mov [__r0],0
 0366 6500              asl [__r1]
 0368 6B00              rlc [__r0]
 036A 060001            add [__r1],<_GainIndx+1
 036D 0E0001            adc [__r0],>_GainIndx+1
 0370 5100              mov A,[__r0]
 0372 60D4              mov REG[0xd4],A
 0374 3E00              mvi A,[__r1]
 0376 7A00              dec [__r1]
 0378 5300              mov [__r2],A
 037A 160001            sub [__r2],1
 037D 5100              mov A,[__r0]
 037F 60D5              mov REG[0xd5],A
 0381 5100              mov A,[__r2]
 0383 3F00              mvi [__r1],A
 0385                   .dbline 105
 0385           ;               PGA_out_SetGain(GF[GainIndx[PortIndx][1]][0]); // set gain on PGA
 0385 62D000            mov REG[0xd0],>_PortIndx
 0388 5100              mov A,[_PortIndx]
 038A 62D000            mov REG[0xd0],>__r0
 038D 5300              mov [__r1],A
 038F 550000            mov [__r0],0
 0392 6500              asl [__r1]
 0394 6B00              rlc [__r0]
 0396 060001            add [__r1],<_GainIndx+1
 0399 0E0001            adc [__r0],>_GainIndx+1
 039C 5100              mov A,[__r0]
 039E 60D4              mov REG[0xd4],A
 03A0 3E00              mvi A,[__r1]
 03A2 5300              mov [__r1],A
 03A4 550000            mov [__r0],0
 03A7 6500              asl [__r1]
 03A9 6B00              rlc [__r0]
 03AB 060000            add [__r1],<_GF
 03AE 0E0000            adc [__r0],>_GF
 03B1 5100              mov A,[__r0]
 03B3 60D4              mov REG[0xd4],A
 03B5 3E00              mvi A,[__r1]
 03B7 10                push X
 03B8 7C0000            xcall _PGA_out_SetGain
 03BB 20                pop X
 03BC                   .dbline 106
 03BC           ;       }
 03BC 8284              xjmp L27
 03BE           L26:
 03BE                   .dbline 107
 03BE           ;       else if((MesValue[PortIndx][1] > V_MAX) && (GainIndx[PortIndx][0] > I_MIN))// PGA_pre
 03BE 62D000            mov REG[0xd0],>_PortIndx
 03C1 5100              mov A,[_PortIndx]
 03C3 62D000            mov REG[0xd0],>__r0
 03C6 5300              mov [__r1],A
 03C8 5000              mov A,0
 03CA 08                push A
 03CB 5100              mov A,[__r1]
 03CD 08                push A
 03CE 5000              mov A,0
 03D0 08                push A
 03D1 500C              mov A,12
 03D3 08                push A
 03D4 7C0000            xcall __mul16
 03D7 38FC              add SP,-4
 03D9 5100              mov A,[__rX]
 03DB 5300              mov [__r1],A
 03DD 5100              mov A,[__rY]
 03DF 5300              mov [__r0],A
 03E1 060004            add [__r1],<_MesValue+4
 03E4 0E0004            adc [__r0],>_MesValue+4
 03E7 5100              mov A,[__r0]
 03E9 60D4              mov REG[0xd4],A
 03EB 3E00              mvi A,[__r1]
 03ED 5300              mov [__r4],A
 03EF 3E00              mvi A,[__r1]
 03F1 5300              mov [__r5],A
 03F3 3E00              mvi A,[__r1]
 03F5 5300              mov [__r6],A
 03F7 3E00              mvi A,[__r1]
 03F9 5300              mov [__r7],A
 03FB 5040              mov A,64
 03FD 1200              sub A,[__r7]
 03FF 500D              mov A,13
 0401 1A00              sbb A,[__r6]
 0403 5003              mov A,3
 0405 1A00              sbb A,[__r5]
 0407 5100              mov A,[__r4]
 0409 3180              xor A,-128
 040B 5300              mov [__rX],A
 040D 5080              mov A,(0 ^ 0x80)
 040F 1A00              sbb A,[__rX]
 0411 D08B              jnc L32
 0413           X16:
 0413 62D000            mov REG[0xd0],>_PortIndx
 0416 5100              mov A,[_PortIndx]
 0418 62D000            mov REG[0xd0],>__r0
 041B 5300              mov [__r1],A
 041D 550000            mov [__r0],0
 0420 6500              asl [__r1]
 0422 6B00              rlc [__r0]
 0424 060000            add [__r1],<_GainIndx
 0427 0E0000            adc [__r0],>_GainIndx
 042A 5100              mov A,[__r0]
 042C 60D4              mov REG[0xd4],A
 042E 3E00              mvi A,[__r1]
 0430 5300              mov [__r0],A
 0432 5000              mov A,0
 0434 3A00              cmp A,[__r0]
 0436 D066              jnc L32
 0438           X17:
 0438                   .dbline 108
 0438           ;       {
 0438                   .dbline 109
 0438           ;               GainIndx[PortIndx][0]--;
 0438 62D000            mov REG[0xd0],>_PortIndx
 043B 5100              mov A,[_PortIndx]
 043D 62D000            mov REG[0xd0],>__r0
 0440 5300              mov [__r1],A
 0442 550000            mov [__r0],0
 0445 6500              asl [__r1]
 0447 6B00              rlc [__r0]
 0449 060000            add [__r1],<_GainIndx
 044C 0E0000            adc [__r0],>_GainIndx
 044F 5100              mov A,[__r0]
 0451 60D4              mov REG[0xd4],A
 0453 3E00              mvi A,[__r1]
 0455 7A00              dec [__r1]
 0457 5300              mov [__r2],A
 0459 160001            sub [__r2],1
 045C 5100              mov A,[__r0]
 045E 60D5              mov REG[0xd5],A
 0460 5100              mov A,[__r2]
 0462 3F00              mvi [__r1],A
 0464                   .dbline 110
 0464           ;               PGA_pre_SetGain(GF[GainIndx[PortIndx][0]][0]); // set gain on PGA
 0464 62D000            mov REG[0xd0],>_PortIndx
 0467 5100              mov A,[_PortIndx]
 0469 62D000            mov REG[0xd0],>__r0
 046C 5300              mov [__r1],A
 046E 550000            mov [__r0],0
 0471 6500              asl [__r1]
 0473 6B00              rlc [__r0]
 0475 060000            add [__r1],<_GainIndx
 0478 0E0000            adc [__r0],>_GainIndx
 047B 5100              mov A,[__r0]
 047D 60D4              mov REG[0xd4],A
 047F 3E00              mvi A,[__r1]
 0481 5300              mov [__r1],A
 0483 550000            mov [__r0],0
 0486 6500              asl [__r1]
 0488 6B00              rlc [__r0]
 048A 060000            add [__r1],<_GF
 048D 0E0000            adc [__r0],>_GF
 0490 5100              mov A,[__r0]
 0492 60D4              mov REG[0xd4],A
 0494 3E00              mvi A,[__r1]
 0496 10                push X
 0497 7C0000            xcall _PGA_pre_SetGain
 049A 20                pop X
 049B                   .dbline 111
 049B           ;       }
 049B 81A5              xjmp L33
 049D           L32:
 049D                   .dbline 112
 049D           ;       else if((MesValue[PortIndx][2] < V_MIN) && (GainIndx[PortIndx][1] < I_MAX))// PGA_out
 049D 62D000            mov REG[0xd0],>_PortIndx
 04A0 5100              mov A,[_PortIndx]
 04A2 62D000            mov REG[0xd0],>__r0
 04A5 5300              mov [__r1],A
 04A7 5000              mov A,0
 04A9 08                push A
 04AA 5100              mov A,[__r1]
 04AC 08                push A
 04AD 5000              mov A,0
 04AF 08                push A
 04B0 500C              mov A,12
 04B2 08                push A
 04B3 7C0000            xcall __mul16
 04B6 38FC              add SP,-4
 04B8 5100              mov A,[__rX]
 04BA 5300              mov [__r1],A
 04BC 5100              mov A,[__rY]
 04BE 5300              mov [__r0],A
 04C0 060008            add [__r1],<_MesValue+8
 04C3 0E0008            adc [__r0],>_MesValue+8
 04C6 5100              mov A,[__r0]
 04C8 60D4              mov REG[0xd4],A
 04CA 3E00              mvi A,[__r1]
 04CC 5300              mov [__r4],A
 04CE 3E00              mvi A,[__r1]
 04D0 5300              mov [__r5],A
 04D2 3E00              mvi A,[__r1]
 04D4 5300              mov [__r6],A
 04D6 3E00              mvi A,[__r1]
 04D8 1150              sub A,80
 04DA 5100              mov A,[__r6]
 04DC 19C3              sbb A,-61
 04DE 5100              mov A,[__r5]
 04E0 1900              sbb A,0
 04E2 5100              mov A,[__r4]
 04E4 3180              xor A,-128
 04E6 1980              sbb A,(0 ^ 0x80)
 04E8 D087              jnc L35
 04EA           X18:
 04EA 62D000            mov REG[0xd0],>_PortIndx
 04ED 5100              mov A,[_PortIndx]
 04EF 62D000            mov REG[0xd0],>__r0
 04F2 5300              mov [__r1],A
 04F4 550000            mov [__r0],0
 04F7 6500              asl [__r1]
 04F9 6B00              rlc [__r0]
 04FB 060001            add [__r1],<_GainIndx+1
 04FE 0E0001            adc [__r0],>_GainIndx+1
 0501 5100              mov A,[__r0]
 0503 60D4              mov REG[0xd4],A
 0505 3E00              mvi A,[__r1]
 0507 3904              cmp A,4
 0509 D066              jnc L35
 050B           X19:
 050B                   .dbline 113
 050B           ;       {
 050B                   .dbline 114
 050B           ;               GainIndx[PortIndx][1]++;
 050B 62D000            mov REG[0xd0],>_PortIndx
 050E 5100              mov A,[_PortIndx]
 0510 62D000            mov REG[0xd0],>__r0
 0513 5300              mov [__r1],A
 0515 550000            mov [__r0],0
 0518 6500              asl [__r1]
 051A 6B00              rlc [__r0]
 051C 060001            add [__r1],<_GainIndx+1
 051F 0E0001            adc [__r0],>_GainIndx+1
 0522 5100              mov A,[__r0]
 0524 60D4              mov REG[0xd4],A
 0526 3E00              mvi A,[__r1]
 0528 7A00              dec [__r1]
 052A 5300              mov [__r2],A
 052C 060001            add [__r2],1
 052F 5100              mov A,[__r0]
 0531 60D5              mov REG[0xd5],A
 0533 5100              mov A,[__r2]
 0535 3F00              mvi [__r1],A
 0537                   .dbline 115
 0537           ;               PGA_out_SetGain(GF[GainIndx[PortIndx][1]][0]); // set gain on PGA
 0537 62D000            mov REG[0xd0],>_PortIndx
 053A 5100              mov A,[_PortIndx]
 053C 62D000            mov REG[0xd0],>__r0
 053F 5300              mov [__r1],A
 0541 550000            mov [__r0],0
 0544 6500              asl [__r1]
 0546 6B00              rlc [__r0]
 0548 060001            add [__r1],<_GainIndx+1
 054B 0E0001            adc [__r0],>_GainIndx+1
 054E 5100              mov A,[__r0]
 0550 60D4              mov REG[0xd4],A
 0552 3E00              mvi A,[__r1]
 0554 5300              mov [__r1],A
 0556 550000            mov [__r0],0
 0559 6500              asl [__r1]
 055B 6B00              rlc [__r0]
 055D 060000            add [__r1],<_GF
 0560 0E0000            adc [__r0],>_GF
 0563 5100              mov A,[__r0]
 0565 60D4              mov REG[0xd4],A
 0567 3E00              mvi A,[__r1]
 0569 10                push X
 056A 7C0000            xcall _PGA_out_SetGain
 056D 20                pop X
 056E                   .dbline 116
 056E           ;       }
 056E 80D2              xjmp L36
 0570           L35:
 0570                   .dbline 117
 0570           ;       else if((MesValue[PortIndx][1] < V_MIN) && (GainIndx[PortIndx][0] < I_MAX))// PGA_pre
 0570 62D000            mov REG[0xd0],>_PortIndx
 0573 5100              mov A,[_PortIndx]
 0575 62D000            mov REG[0xd0],>__r0
 0578 5300              mov [__r1],A
 057A 5000              mov A,0
 057C 08                push A
 057D 5100              mov A,[__r1]
 057F 08                push A
 0580 5000              mov A,0
 0582 08                push A
 0583 500C              mov A,12
 0585 08                push A
 0586 7C0000            xcall __mul16
 0589 38FC              add SP,-4
 058B 5100              mov A,[__rX]
 058D 5300              mov [__r1],A
 058F 5100              mov A,[__rY]
 0591 5300              mov [__r0],A
 0593 060004            add [__r1],<_MesValue+4
 0596 0E0004            adc [__r0],>_MesValue+4
 0599 5100              mov A,[__r0]
 059B 60D4              mov REG[0xd4],A
 059D 3E00              mvi A,[__r1]
 059F 5300              mov [__r4],A
 05A1 3E00              mvi A,[__r1]
 05A3 5300              mov [__r5],A
 05A5 3E00              mvi A,[__r1]
 05A7 5300              mov [__r6],A
 05A9 3E00              mvi A,[__r1]
 05AB 1150              sub A,80
 05AD 5100              mov A,[__r6]
 05AF 19C3              sbb A,-61
 05B1 5100              mov A,[__r5]
 05B3 1900              sbb A,0
 05B5 5100              mov A,[__r4]
 05B7 3180              xor A,-128
 05B9 1980              sbb A,(0 ^ 0x80)
 05BB D085              jnc L41
 05BD           X20:
 05BD 62D000            mov REG[0xd0],>_PortIndx
 05C0 5100              mov A,[_PortIndx]
 05C2 62D000            mov REG[0xd0],>__r0
 05C5 5300              mov [__r1],A
 05C7 550000            mov [__r0],0
 05CA 6500              asl [__r1]
 05CC 6B00              rlc [__r0]
 05CE 060000            add [__r1],<_GainIndx
 05D1 0E0000            adc [__r0],>_GainIndx
 05D4 5100              mov A,[__r0]
 05D6 60D4              mov REG[0xd4],A
 05D8 3E00              mvi A,[__r1]
 05DA 3904              cmp A,4
 05DC D064              jnc L41
 05DE           X21:
 05DE                   .dbline 118
 05DE           ;       {
 05DE                   .dbline 119
 05DE           ;               GainIndx[PortIndx][0]++;
 05DE 62D000            mov REG[0xd0],>_PortIndx
 05E1 5100              mov A,[_PortIndx]
 05E3 62D000            mov REG[0xd0],>__r0
 05E6 5300              mov [__r1],A
 05E8 550000            mov [__r0],0
 05EB 6500              asl [__r1]
 05ED 6B00              rlc [__r0]
 05EF 060000            add [__r1],<_GainIndx
 05F2 0E0000            adc [__r0],>_GainIndx
 05F5 5100              mov A,[__r0]
 05F7 60D4              mov REG[0xd4],A
 05F9 3E00              mvi A,[__r1]
 05FB 7A00              dec [__r1]
 05FD 5300              mov [__r2],A
 05FF 060001            add [__r2],1
 0602 5100              mov A,[__r0]
 0604 60D5              mov REG[0xd5],A
 0606 5100              mov A,[__r2]
 0608 3F00              mvi [__r1],A
 060A                   .dbline 120
 060A           ;               PGA_pre_SetGain(GF[GainIndx[PortIndx][0]][0]); // set gain on PGA
 060A 62D000            mov REG[0xd0],>_PortIndx
 060D 5100              mov A,[_PortIndx]
 060F 62D000            mov REG[0xd0],>__r0
 0612 5300              mov [__r1],A
 0614 550000            mov [__r0],0
 0617 6500              asl [__r1]
 0619 6B00              rlc [__r0]
 061B 060000            add [__r1],<_GainIndx
 061E 0E0000            adc [__r0],>_GainIndx
 0621 5100              mov A,[__r0]
 0623 60D4              mov REG[0xd4],A
 0625 3E00              mvi A,[__r1]
 0627 5300              mov [__r1],A
 0629 550000            mov [__r0],0
 062C 6500              asl [__r1]
 062E 6B00              rlc [__r0]
 0630 060000            add [__r1],<_GF
 0633 0E0000            adc [__r0],>_GF
 0636 5100              mov A,[__r0]
 0638 60D4              mov REG[0xd4],A
 063A 3E00              mvi A,[__r1]
 063C 10                push X
 063D 7C0000            xcall _PGA_pre_SetGain
 0640 20                pop X
 0641                   .dbline 121
 0641           ;       }       
 0641           L41:
 0641           L36:
 0641           L33:
 0641           L27:
 0641                   .dbline -2
 0641           L25:
 0641                   .dbline 0 ; func end
 0641 7F                ret
 0642                   .dbend
 0642                   .dbfunc e DigitalOut _DigitalOut fV
 0642           _DigitalOut::
 0642                   .dbline -1
 0642                   .dbline 125
 0642           ; }
 0642           ; 
 0642           ; void DigitalOut(void)
 0642           ; {// Controls the outputs according to pot setting point
 0642                   .dbline 126
 0642           ;       DIGITAL_OUT_Off();
 0642 10                push X
 0643 7C0000            xcall _DIGITAL_OUT_Off
 0646 20                pop X
 0647                   .dbline 127
 0647           ;       if (MesValue[0][0]>PotValue)
 0647 62D000            mov REG[0xd0],>_PotValue
 064A 5103              mov A,[_PotValue+3]
 064C 62D000            mov REG[0xd0],>_MesValue
 064F 1203              sub A,[_MesValue+3]
 0651 62D000            mov REG[0xd0],>_PotValue
 0654 5102              mov A,[_PotValue+2]
 0656 62D000            mov REG[0xd0],>_MesValue
 0659 1A02              sbb A,[_MesValue+2]
 065B 62D000            mov REG[0xd0],>_PotValue
 065E 5101              mov A,[_PotValue+1]
 0660 62D000            mov REG[0xd0],>_MesValue
 0663 1A01              sbb A,[_MesValue+1]
 0665 5100              mov A,[_MesValue]
 0667 3180              xor A,-128
 0669 62D000            mov REG[0xd0],>__r0
 066C 5300              mov [__rX],A
 066E 62D000            mov REG[0xd0],>_PotValue
 0671 5100              mov A,[_PotValue]
 0673 3180              xor A,-128
 0675 62D000            mov REG[0xd0],>__r0
 0678 1A00              sbb A,[__rX]
 067A D00B              jnc L45
 067C           X22:
 067C                   .dbline 128
 067C           ;       {
 067C                   .dbline 129
 067C           ;               DIGITAL_OUT_On();
 067C 10                push X
 067D 7C0000            xcall _DIGITAL_OUT_On
 0680                   .dbline 130
 0680           ;               LED_1_On();
 0680 7C0000            xcall _LED_1_On
 0683 20                pop X
 0684                   .dbline 131
 0684           ;       }
 0684 8006              xjmp L46
 0686           L45:
 0686                   .dbline 133
 0686           ;       else
 0686           ;       {
 0686                   .dbline 134
 0686           ;               LED_1_Off();
 0686 10                push X
 0687 7C0000            xcall _LED_1_Off
 068A 20                pop X
 068B                   .dbline 135
 068B           ;       }
 068B           L46:
 068B                   .dbline 137
 068B           ;               
 068B           ;       if (MesValue[1][0]>PotValue)
 068B 62D000            mov REG[0xd0],>_PotValue
 068E 5103              mov A,[_PotValue+3]
 0690 62D000            mov REG[0xd0],>_MesValue
 0693 120F              sub A,[_MesValue+12+3]
 0695 62D000            mov REG[0xd0],>_PotValue
 0698 5102              mov A,[_PotValue+2]
 069A 62D000            mov REG[0xd0],>_MesValue
 069D 1A0E              sbb A,[_MesValue+12+2]
 069F 62D000            mov REG[0xd0],>_PotValue
 06A2 5101              mov A,[_PotValue+1]
 06A4 62D000            mov REG[0xd0],>_MesValue
 06A7 1A0D              sbb A,[_MesValue+12+1]
 06A9 510C              mov A,[_MesValue+12]
 06AB 3180              xor A,-128
 06AD 62D000            mov REG[0xd0],>__r0
 06B0 5300              mov [__rX],A
 06B2 62D000            mov REG[0xd0],>_PotValue
 06B5 5100              mov A,[_PotValue]
 06B7 3180              xor A,-128
 06B9 62D000            mov REG[0xd0],>__r0
 06BC 1A00              sbb A,[__rX]
 06BE D00B              jnc L47
 06C0           X23:
 06C0                   .dbline 138
 06C0           ;       {
 06C0                   .dbline 139
 06C0           ;               DIGITAL_OUT_On();
 06C0 10                push X
 06C1 7C0000            xcall _DIGITAL_OUT_On
 06C4                   .dbline 140
 06C4           ;               LED_2_On();
 06C4 7C0000            xcall _LED_2_On
 06C7 20                pop X
 06C8                   .dbline 141
 06C8           ;       }
 06C8 8006              xjmp L48
 06CA           L47:
 06CA                   .dbline 143
 06CA           ;       else
 06CA           ;       {
 06CA                   .dbline 144
 06CA           ;               LED_2_Off();
 06CA 10                push X
 06CB 7C0000            xcall _LED_2_Off
 06CE 20                pop X
 06CF                   .dbline 145
 06CF           ;       }
 06CF           L48:
 06CF                   .dbline 147
 06CF           ;       
 06CF           ;       if (MesValue[2][0]>PotValue)
 06CF 62D000            mov REG[0xd0],>_PotValue
 06D2 5103              mov A,[_PotValue+3]
 06D4 62D000            mov REG[0xd0],>_MesValue
 06D7 121B              sub A,[_MesValue+24+3]
 06D9 62D000            mov REG[0xd0],>_PotValue
 06DC 5102              mov A,[_PotValue+2]
 06DE 62D000            mov REG[0xd0],>_MesValue
 06E1 1A1A              sbb A,[_MesValue+24+2]
 06E3 62D000            mov REG[0xd0],>_PotValue
 06E6 5101              mov A,[_PotValue+1]
 06E8 62D000            mov REG[0xd0],>_MesValue
 06EB 1A19              sbb A,[_MesValue+24+1]
 06ED 5118              mov A,[_MesValue+24]
 06EF 3180              xor A,-128
 06F1 62D000            mov REG[0xd0],>__r0
 06F4 5300              mov [__rX],A
 06F6 62D000            mov REG[0xd0],>_PotValue
 06F9 5100              mov A,[_PotValue]
 06FB 3180              xor A,-128
 06FD 62D000            mov REG[0xd0],>__r0
 0700 1A00              sbb A,[__rX]
 0702 D00B              jnc L50
 0704           X24:
 0704                   .dbline 148
 0704           ;       {
 0704                   .dbline 149
 0704           ;               DIGITAL_OUT_On();
 0704 10                push X
 0705 7C0000            xcall _DIGITAL_OUT_On
 0708                   .dbline 150
 0708           ;               LED_3_On();
 0708 7C0000            xcall _LED_3_On
 070B 20                pop X
 070C                   .dbline 151
 070C           ;       }
 070C 8006              xjmp L51
 070E           L50:
 070E                   .dbline 153
 070E           ;       else
 070E           ;       {
 070E                   .dbline 154
 070E           ;               LED_3_Off();
 070E 10                push X
 070F 7C0000            xcall _LED_3_Off
 0712 20                pop X
 0713                   .dbline 155
 0713           ;       }
 0713           L51:
 0713                   .dbline -2
 0713           L44:
 0713                   .dbline 0 ; func end
 0713 7F                ret
 0714                   .dbend
 0714                   .dbfunc e UartTxValues _UartTxValues fV
 0714           _UartTxValues::
 0714                   .dbline -1
 0714                   .dbline 159
 0714           ; }
 0714           ; 
 0714           ; void UartTxValues(void)
 0714           ; {/* Transmit via UART the analog values read from various inputs.
 0714                   .dbline 164
 0714           ;       Usefull for debugging purposes, it could be converted in a
 0714           ;       command string using the same protocol used for dsNav if
 0714           ;       needed to output sound level values via serial comm
 0714           ; */
 0714           ;       TX8_CPutString("\n\r");
 0714 10                push X
 0715 504A              mov A,>L54
 0717 08                push A
 0718 504A              mov A,<L54
 071A 5C                mov X,A
 071B 18                pop A
 071C 7C0000            xcall _TX8_CPutString
 071F 20                pop X
 0720                   .dbline 171
 0720           ;       
 0720           ; /*    TX8_CPutString("Pot Value = ");
 0720           ;       itoa(str, PotValue,10);
 0720           ;       TX8_PutString(str);
 0720           ; */
 0720           ; 
 0720           ;       TX8_CPutString("    Mes Value: 1 = ");
 0720 10                push X
 0721 5036              mov A,>L55
 0723 08                push A
 0724 5036              mov A,<L55
 0726 5C                mov X,A
 0727 18                pop A
 0728 7C0000            xcall _TX8_CPutString
 072B 20                pop X
 072C                   .dbline 172
 072C           ;       ltoa(str, MesValue[0][0],10);
 072C 5000              mov A,0
 072E 08                push A
 072F 500A              mov A,10
 0731 08                push A
 0732 62D000            mov REG[0xd0],>_MesValue
 0735 5100              mov A,[_MesValue]
 0737 08                push A
 0738 5101              mov A,[_MesValue+1]
 073A 08                push A
 073B 5102              mov A,[_MesValue+2]
 073D 08                push A
 073E 5103              mov A,[_MesValue+3]
 0740 08                push A
 0741 5000              mov A,>_str
 0743 08                push A
 0744 5000              mov A,<_str
 0746 08                push A
 0747 7C0000            xcall _ltoa
 074A 38F8              add SP,-8
 074C                   .dbline 173
 074C           ;       TX8_PutString(str);
 074C 10                push X
 074D 5000              mov A,>_str
 074F 08                push A
 0750 5000              mov A,<_str
 0752 5C                mov X,A
 0753 18                pop A
 0754 7C0000            xcall _TX8_PutString
 0757 20                pop X
 0758                   .dbline 174
 0758           ;       TX8_CPutString("  -  2 = ");
 0758 10                push X
 0759 502C              mov A,>L56
 075B 08                push A
 075C 502C              mov A,<L56
 075E 5C                mov X,A
 075F 18                pop A
 0760 7C0000            xcall _TX8_CPutString
 0763 20                pop X
 0764                   .dbline 175
 0764           ;       ltoa(str, MesValue[1][0],10);
 0764 5000              mov A,0
 0766 08                push A
 0767 500A              mov A,10
 0769 08                push A
 076A 62D000            mov REG[0xd0],>_MesValue
 076D 510C              mov A,[_MesValue+12]
 076F 08                push A
 0770 510D              mov A,[_MesValue+12+1]
 0772 08                push A
 0773 510E              mov A,[_MesValue+12+2]
 0775 08                push A
 0776 510F              mov A,[_MesValue+12+3]
 0778 08                push A
 0779 5000              mov A,>_str
 077B 08                push A
 077C 5000              mov A,<_str
 077E 08                push A
 077F 7C0000            xcall _ltoa
 0782 38F8              add SP,-8
 0784                   .dbline 176
 0784           ;       TX8_PutString(str);
 0784 10                push X
 0785 5000              mov A,>_str
 0787 08                push A
 0788 5000              mov A,<_str
 078A 5C                mov X,A
 078B 18                pop A
 078C 7C0000            xcall _TX8_PutString
 078F 20                pop X
 0790                   .dbline 177
 0790           ;       TX8_CPutString("  -  3 = ");
 0790 10                push X
 0791 5022              mov A,>L58
 0793 08                push A
 0794 5022              mov A,<L58
 0796 5C                mov X,A
 0797 18                pop A
 0798 7C0000            xcall _TX8_CPutString
 079B 20                pop X
 079C                   .dbline 178
 079C           ;       ltoa(str, MesValue[2][0],10);
 079C 5000              mov A,0
 079E 08                push A
 079F 500A              mov A,10
 07A1 08                push A
 07A2 62D000            mov REG[0xd0],>_MesValue
 07A5 5118              mov A,[_MesValue+24]
 07A7 08                push A
 07A8 5119              mov A,[_MesValue+24+1]
 07AA 08                push A
 07AB 511A              mov A,[_MesValue+24+2]
 07AD 08                push A
 07AE 511B              mov A,[_MesValue+24+3]
 07B0 08                push A
 07B1 5000              mov A,>_str
 07B3 08                push A
 07B4 5000              mov A,<_str
 07B6 08                push A
 07B7 7C0000            xcall _ltoa
 07BA 38F8              add SP,-8
 07BC                   .dbline 179
 07BC           ;       TX8_PutString(str);
 07BC 10                push X
 07BD 5000              mov A,>_str
 07BF 08                push A
 07C0 5000              mov A,<_str
 07C2 5C                mov X,A
 07C3 18                pop A
 07C4 7C0000            xcall _TX8_PutString
 07C7 20                pop X
 07C8                   .dbline 180
 07C8           ;       TX8_CPutString("  Gain Pre: 1 = ");
 07C8 10                push X
 07C9 5011              mov A,>L60
 07CB 08                push A
 07CC 5011              mov A,<L60
 07CE 5C                mov X,A
 07CF 18                pop A
 07D0 7C0000            xcall _TX8_CPutString
 07D3 20                pop X
 07D4                   .dbline 181
 07D4           ;       itoa(str, GF[GainIndx[0][0]][1], 10);
 07D4 5000              mov A,0
 07D6 08                push A
 07D7 500A              mov A,10
 07D9 08                push A
 07DA 62D000            mov REG[0xd0],>_GainIndx
 07DD 5100              mov A,[_GainIndx]
 07DF 62D000            mov REG[0xd0],>__r0
 07E2 5300              mov [__r1],A
 07E4 550000            mov [__r0],0
 07E7 6500              asl [__r1]
 07E9 6B00              rlc [__r0]
 07EB 060001            add [__r1],<_GF+1
 07EE 0E0001            adc [__r0],>_GF+1
 07F1 5100              mov A,[__r0]
 07F3 60D4              mov REG[0xd4],A
 07F5 3E00              mvi A,[__r1]
 07F7 5300              mov [__r1],A
 07F9 5000              mov A,0
 07FB 08                push A
 07FC 5100              mov A,[__r1]
 07FE 08                push A
 07FF 5000              mov A,>_str
 0801 08                push A
 0802 5000              mov A,<_str
 0804 08                push A
 0805 7C0000            xcall _itoa
 0808 38FA              add SP,-6
 080A                   .dbline 182
 080A           ;       TX8_PutString(str);
 080A 10                push X
 080B 5000              mov A,>_str
 080D 08                push A
 080E 5000              mov A,<_str
 0810 5C                mov X,A
 0811 18                pop A
 0812 7C0000            xcall _TX8_PutString
 0815 20                pop X
 0816                   .dbline 183
 0816           ;       TX8_CPutString("  -  2 = ");
 0816 10                push X
 0817 502C              mov A,>L56
 0819 08                push A
 081A 502C              mov A,<L56
 081C 5C                mov X,A
 081D 18                pop A
 081E 7C0000            xcall _TX8_CPutString
 0821 20                pop X
 0822                   .dbline 184
 0822           ;       itoa(str, GF[GainIndx[1][0]][1], 10);
 0822 5000              mov A,0
 0824 08                push A
 0825 500A              mov A,10
 0827 08                push A
 0828 62D000            mov REG[0xd0],>_GainIndx
 082B 5102              mov A,[_GainIndx+2]
 082D 62D000            mov REG[0xd0],>__r0
 0830 5300              mov [__r1],A
 0832 550000            mov [__r0],0
 0835 6500              asl [__r1]
 0837 6B00              rlc [__r0]
 0839 060001            add [__r1],<_GF+1
 083C 0E0001            adc [__r0],>_GF+1
 083F 5100              mov A,[__r0]
 0841 60D4              mov REG[0xd4],A
 0843 3E00              mvi A,[__r1]
 0845 5300              mov [__r1],A
 0847 5000              mov A,0
 0849 08                push A
 084A 5100              mov A,[__r1]
 084C 08                push A
 084D 5000              mov A,>_str
 084F 08                push A
 0850 5000              mov A,<_str
 0852 08                push A
 0853 7C0000            xcall _itoa
 0856 38FA              add SP,-6
 0858                   .dbline 185
 0858           ;       TX8_PutString(str);     
 0858 10                push X
 0859 5000              mov A,>_str
 085B 08                push A
 085C 5000              mov A,<_str
 085E 5C                mov X,A
 085F 18                pop A
 0860 7C0000            xcall _TX8_PutString
 0863 20                pop X
 0864                   .dbline 186
 0864           ;       TX8_CPutString("  -  3 = ");
 0864 10                push X
 0865 5022              mov A,>L58
 0867 08                push A
 0868 5022              mov A,<L58
 086A 5C                mov X,A
 086B 18                pop A
 086C 7C0000            xcall _TX8_CPutString
 086F 20                pop X
 0870                   .dbline 187
 0870           ;       itoa(str, GF[GainIndx[2][0]][1], 10);
 0870 5000              mov A,0
 0872 08                push A
 0873 500A              mov A,10
 0875 08                push A
 0876 62D000            mov REG[0xd0],>_GainIndx
 0879 5104              mov A,[_GainIndx+4]
 087B 62D000            mov REG[0xd0],>__r0
 087E 5300              mov [__r1],A
 0880 550000            mov [__r0],0
 0883 6500              asl [__r1]
 0885 6B00              rlc [__r0]
 0887 060001            add [__r1],<_GF+1
 088A 0E0001            adc [__r0],>_GF+1
 088D 5100              mov A,[__r0]
 088F 60D4              mov REG[0xd4],A
 0891 3E00              mvi A,[__r1]
 0893 5300              mov [__r1],A
 0895 5000              mov A,0
 0897 08                push A
 0898 5100              mov A,[__r1]
 089A 08                push A
 089B 5000              mov A,>_str
 089D 08                push A
 089E 5000              mov A,<_str
 08A0 08                push A
 08A1 7C0000            xcall _itoa
 08A4 38FA              add SP,-6
 08A6                   .dbline 188
 08A6           ;       TX8_PutString(str);     
 08A6 10                push X
 08A7 5000              mov A,>_str
 08A9 08                push A
 08AA 5000              mov A,<_str
 08AC 5C                mov X,A
 08AD 18                pop A
 08AE 7C0000            xcall _TX8_PutString
 08B1 20                pop X
 08B2                   .dbline 189
 08B2           ;       TX8_CPutString("  Gain Out: 1 = ");
 08B2 10                push X
 08B3 5000              mov A,>L66
 08B5 08                push A
 08B6 5000              mov A,<L66
 08B8 5C                mov X,A
 08B9 18                pop A
 08BA 7C0000            xcall _TX8_CPutString
 08BD 20                pop X
 08BE                   .dbline 190
 08BE           ;       itoa(str, GF[GainIndx[0][1]][1], 10);
 08BE 5000              mov A,0
 08C0 08                push A
 08C1 500A              mov A,10
 08C3 08                push A
 08C4 62D000            mov REG[0xd0],>_GainIndx
 08C7 5101              mov A,[_GainIndx+1]
 08C9 62D000            mov REG[0xd0],>__r0
 08CC 5300              mov [__r1],A
 08CE 550000            mov [__r0],0
 08D1 6500              asl [__r1]
 08D3 6B00              rlc [__r0]
 08D5 060001            add [__r1],<_GF+1
 08D8 0E0001            adc [__r0],>_GF+1
 08DB 5100              mov A,[__r0]
 08DD 60D4              mov REG[0xd4],A
 08DF 3E00              mvi A,[__r1]
 08E1 5300              mov [__r1],A
 08E3 5000              mov A,0
 08E5 08                push A
 08E6 5100              mov A,[__r1]
 08E8 08                push A
 08E9 5000              mov A,>_str
 08EB 08                push A
 08EC 5000              mov A,<_str
 08EE 08                push A
 08EF 7C0000            xcall _itoa
 08F2 38FA              add SP,-6
 08F4                   .dbline 191
 08F4           ;       TX8_PutString(str);
 08F4 10                push X
 08F5 5000              mov A,>_str
 08F7 08                push A
 08F8 5000              mov A,<_str
 08FA 5C                mov X,A
 08FB 18                pop A
 08FC 7C0000            xcall _TX8_PutString
 08FF 20                pop X
 0900                   .dbline 192
 0900           ;       TX8_CPutString("  -  2 = ");
 0900 10                push X
 0901 502C              mov A,>L56
 0903 08                push A
 0904 502C              mov A,<L56
 0906 5C                mov X,A
 0907 18                pop A
 0908 7C0000            xcall _TX8_CPutString
 090B 20                pop X
 090C                   .dbline 193
 090C           ;       itoa(str, GF[GainIndx[1][1]][1], 10);
 090C 5000              mov A,0
 090E 08                push A
 090F 500A              mov A,10
 0911 08                push A
 0912 62D000            mov REG[0xd0],>_GainIndx
 0915 5103              mov A,[_GainIndx+2+1]
 0917 62D000            mov REG[0xd0],>__r0
 091A 5300              mov [__r1],A
 091C 550000            mov [__r0],0
 091F 6500              asl [__r1]
 0921 6B00              rlc [__r0]
 0923 060001            add [__r1],<_GF+1
 0926 0E0001            adc [__r0],>_GF+1
 0929 5100              mov A,[__r0]
 092B 60D4              mov REG[0xd4],A
 092D 3E00              mvi A,[__r1]
 092F 5300              mov [__r1],A
 0931 5000              mov A,0
 0933 08                push A
 0934 5100              mov A,[__r1]
 0936 08                push A
 0937 5000              mov A,>_str
 0939 08                push A
 093A 5000              mov A,<_str
 093C 08                push A
 093D 7C0000            xcall _itoa
 0940 38FA              add SP,-6
 0942                   .dbline 194
 0942           ;       TX8_PutString(str);     
 0942 10                push X
 0943 5000              mov A,>_str
 0945 08                push A
 0946 5000              mov A,<_str
 0948 5C                mov X,A
 0949 18                pop A
 094A 7C0000            xcall _TX8_PutString
 094D 20                pop X
 094E                   .dbline 195
 094E           ;       TX8_CPutString("  -  3 = ");
 094E 10                push X
 094F 5022              mov A,>L58
 0951 08                push A
 0952 5022              mov A,<L58
 0954 5C                mov X,A
 0955 18                pop A
 0956 7C0000            xcall _TX8_CPutString
 0959 20                pop X
 095A                   .dbline 196
 095A           ;       itoa(str, GF[GainIndx[2][1]][1], 10);
 095A 5000              mov A,0
 095C 08                push A
 095D 500A              mov A,10
 095F 08                push A
 0960 62D000            mov REG[0xd0],>_GainIndx
 0963 5105              mov A,[_GainIndx+4+1]
 0965 62D000            mov REG[0xd0],>__r0
 0968 5300              mov [__r1],A
 096A 550000            mov [__r0],0
 096D 6500              asl [__r1]
 096F 6B00              rlc [__r0]
 0971 060001            add [__r1],<_GF+1
 0974 0E0001            adc [__r0],>_GF+1
 0977 5100              mov A,[__r0]
 0979 60D4              mov REG[0xd4],A
 097B 3E00              mvi A,[__r1]
 097D 5300              mov [__r1],A
 097F 5000              mov A,0
 0981 08                push A
 0982 5100              mov A,[__r1]
 0984 08                push A
 0985 5000              mov A,>_str
 0987 08                push A
 0988 5000              mov A,<_str
 098A 08                push A
 098B 7C0000            xcall _itoa
 098E 38FA              add SP,-6
 0990                   .dbline 197
 0990           ;       TX8_PutString(str);     
 0990 10                push X
 0991 5000              mov A,>_str
 0993 08                push A
 0994 5000              mov A,<_str
 0996 5C                mov X,A
 0997 18                pop A
 0998 7C0000            xcall _TX8_PutString
 099B 20                pop X
 099C                   .dbline -2
 099C           L53:
 099C                   .dbline 0 ; func end
 099C 7F                ret
 099D                   .dbend
 099D                   .dbfunc e BlocksInit _BlocksInit fV
 099D           _BlocksInit::
 099D                   .dbline -1
 099D                   .dbline 219
 099D           ;                               
 099D           ; /*
 099D           ;       TX8_CPutString("  --Pre = ");
 099D           ;       itoa(str, MesValue[0][0], 10);
 099D           ;       TX8_PutString(str);
 099D           ;       
 099D           ;       TX8_CPutString("  --Out = ");
 099D           ;       itoa(str, MesValue[0][1], 10);
 099D           ;       TX8_PutString(str);
 099D           ;       
 099D           ;       TX8_CPutString("  --Sum = ");
 099D           ;       itoa(str, MesValueSum[0][0], 10);
 099D           ;       TX8_PutString(str);
 099D           ;       
 099D           ;       TX8_CPutString("  --Count = ");
 099D           ;       itoa(str, MesValueSum[0][1], 10);
 099D           ;       TX8_PutString(str);
 099D           ; */
 099D           ; }
 099D           ;       
 099D           ; void BlocksInit(void)
 099D           ; {// Analog and digital blocks inizialization
 099D                   .dbline 220
 099D           ;       ADCINCVR_pot_Start(ADCINCVR_pot_HIGHPOWER);     
 099D 10                push X
 099E 5003              mov A,3
 09A0 7C0000            xcall _ADCINCVR_pot_Start
 09A3 20                pop X
 09A4                   .dbline 221
 09A4           ;       ADCINCVR_mes_Start(ADCINCVR_mes_HIGHPOWER);
 09A4 10                push X
 09A5 5003              mov A,3
 09A7 7C0000            xcall _ADCINCVR_mes_Start
 09AA                   .dbline 222
 09AA           ;       AMUX4_mic_Start();
 09AA 7C0000            xcall _AMUX4_mic_Start
 09AD 20                pop X
 09AE                   .dbline 223
 09AE           ;       BPF4_4KHz_Start(BPF4_4KHz_HIGHPOWER);
 09AE 10                push X
 09AF 5003              mov A,3
 09B1 7C0000            xcall _BPF4_4KHz_Start
 09B4                   .dbline 224
 09B4           ;       I2CHW_Start();
 09B4 7C0000            xcall _I2CHW_Start
 09B7 20                pop X
 09B8                   .dbline 225
 09B8           ;       PGA_out_Start(PGA_out_HIGHPOWER);
 09B8 10                push X
 09B9 5003              mov A,3
 09BB 7C0000            xcall _PGA_out_Start
 09BE 20                pop X
 09BF                   .dbline 226
 09BF           ;       PGA_pre_Start(PGA_pre_HIGHPOWER); 
 09BF 10                push X
 09C0 5003              mov A,3
 09C2 7C0000            xcall _PGA_pre_Start
 09C5 20                pop X
 09C6                   .dbline 227
 09C6           ;       RefMux_1_Start(RefMux_1_HIGHPOWER);
 09C6 10                push X
 09C7 5003              mov A,3
 09C9 7C0000            xcall _RefMux_1_Start
 09CC 20                pop X
 09CD                   .dbline 228
 09CD           ;     SCBLOCK_inbuff_Start(SCBLOCK_inbuff_HIGHPOWER);
 09CD 10                push X
 09CE 5003              mov A,3
 09D0 7C0000            xcall _SCBLOCK_inbuff_Start
 09D3                   .dbline 229
 09D3           ;       LED_1_Start();
 09D3 7C0000            xcall _LED_1_Start
 09D6                   .dbline 230
 09D6           ;       LED_2_Start();
 09D6 7C0000            xcall _LED_2_Start
 09D9                   .dbline 231
 09D9           ;       LED_3_Start();
 09D9 7C0000            xcall _LED_3_Start
 09DC                   .dbline 232
 09DC           ;       DIGITAL_OUT_Start();  
 09DC 7C0000            xcall _DIGITAL_OUT_Start
 09DF                   .dbline 234
 09DF           ;       
 09DF           ;       TX8_EnableInt();
 09DF 7C0000            xcall _TX8_EnableInt
 09E2 20                pop X
 09E3                   .dbline 235
 09E3           ;       TX8_Start(TX8_PARITY_NONE);
 09E3 10                push X
 09E4 5000              mov A,0
 09E6 7C0000            xcall _TX8_Start
 09E9 20                pop X
 09EA                   .dbline 237
 09EA           ;       
 09EA           ;       AMUX4_mic_InputSelect(AMUX4_mic_PORT0_1);
 09EA 10                push X
 09EB 5000              mov A,0
 09ED 7C0000            xcall _AMUX4_mic_InputSelect
 09F0 20                pop X
 09F1                   .dbline 239
 09F1           ; 
 09F1           ;       PGA_pre_SetGain(GF[GainIndx[0][0]][0]);
 09F1 62D000            mov REG[0xd0],>_GainIndx
 09F4 5100              mov A,[_GainIndx]
 09F6 62D000            mov REG[0xd0],>__r0
 09F9 5300              mov [__r1],A
 09FB 550000            mov [__r0],0
 09FE 6500              asl [__r1]
 0A00 6B00              rlc [__r0]
 0A02 060000            add [__r1],<_GF
 0A05 0E0000            adc [__r0],>_GF
 0A08 5100              mov A,[__r0]
 0A0A 60D4              mov REG[0xd4],A
 0A0C 3E00              mvi A,[__r1]
 0A0E 10                push X
 0A0F 7C0000            xcall _PGA_pre_SetGain
 0A12 20                pop X
 0A13                   .dbline 240
 0A13           ;       PGA_out_SetGain(GF[GainIndx[0][1]][0]);
 0A13 62D000            mov REG[0xd0],>_GainIndx
 0A16 5101              mov A,[_GainIndx+1]
 0A18 62D000            mov REG[0xd0],>__r0
 0A1B 5300              mov [__r1],A
 0A1D 550000            mov [__r0],0
 0A20 6500              asl [__r1]
 0A22 6B00              rlc [__r0]
 0A24 060000            add [__r1],<_GF
 0A27 0E0000            adc [__r0],>_GF
 0A2A 5100              mov A,[__r0]
 0A2C 60D4              mov REG[0xd4],A
 0A2E 3E00              mvi A,[__r1]
 0A30 10                push X
 0A31 7C0000            xcall _PGA_out_SetGain
 0A34                   .dbline 242
 0A34           ;       
 0A34           ;     HB_Tmr_EnableInt();  
 0A34 7C0000            xcall _HB_Tmr_EnableInt
 0A37                   .dbline 243
 0A37           ;       HB_Tmr_Start();         
 0A37 7C0000            xcall _HB_Tmr_Start
 0A3A 20                pop X
 0A3B                   .dbline -2
 0A3B           L75:
 0A3B                   .dbline 0 ; func end
 0A3B 7F                ret
 0A3C                   .dbend
 0A3C                   .dbfunc e HB_Tmr_ISR_C _HB_Tmr_ISR_C fV
 0A3C           _HB_Tmr_ISR_C::
 0A3C                   .dbline -1
 0A3C 71C0              or F,-64
 0A3E 08                push A
 0A3F 5DD0              mov A,REG[0xd0]
 0A41 08                push A
 0A42                   .dbline 247
 0A42           ; }
 0A42           ;       
 0A42           ; void HB_Tmr_ISR_C(void)
 0A42           ; {// Base clock for all of the timings in the program
 0A42                   .dbline 248
 0A42           ;       TmrFlag = 1;
 0A42 62D000            mov REG[0xd0],>_TmrFlag
 0A45 550001            mov [_TmrFlag],1
 0A48                   .dbline 249
 0A48           ;       Tmr1++;
 0A48 62D000            mov REG[0xd0],>_Tmr1
 0A4B 7601              inc [_Tmr1+1]
 0A4D 0E0000            adc [_Tmr1],0
 0A50                   .dbline 250
 0A50           ;       Tmr2++;
 0A50 62D000            mov REG[0xd0],>_Tmr2
 0A53 7601              inc [_Tmr2+1]
 0A55 0E0000            adc [_Tmr2],0
 0A58                   .dbline 251
 0A58           ;       Time10ms++;     
 0A58 62D000            mov REG[0xd0],>_Time10ms
 0A5B 060301            add [_Time10ms+3],1
 0A5E 0E0200            adc [_Time10ms+2],0
 0A61 0E0100            adc [_Time10ms+1],0
 0A64 0E0000            adc [_Time10ms],0
 0A67                   .dbline -2
 0A67           L77:
 0A67 18                pop A
 0A68 60D0              mov REG[208],A
 0A6A 18                pop A
 0A6B                   .dbline 0 ; func end
 0A6B 7E                reti
 0A6C                   .dbend
 0A6C                   .dbfunc e DelayMs _DelayMs fV
 0A6C           ;              i -> X+0
 0A6C           ;             Ms -> X-5
 0A6C           _DelayMs::
 0A6C                   .dbline -1
 0A6C 10                push X
 0A6D 4F                mov X,SP
 0A6E 3802              add SP,2
 0A70                   .dbline 255
 0A70           ; }
 0A70           ; 
 0A70           ; void DelayMs(int Ms)
 0A70           ; {
 0A70                   .dbline 257
 0A70           ;       int i;
 0A70           ;       for (i=0; i<Ms; i++)
 0A70 560100            mov [X+1],0
 0A73 560000            mov [X+0],0
 0A76 800D              xjmp L82
 0A78           L79:
 0A78                   .dbline 258
 0A78           ;       {
 0A78                   .dbline 259
 0A78           ;               Delay50uTimes(20);
 0A78 10                push X
 0A79 5014              mov A,20
 0A7B 7C0000            xcall _Delay50uTimes
 0A7E 20                pop X
 0A7F                   .dbline 260
 0A7F           ;       }
 0A7F           L80:
 0A7F                   .dbline 257
 0A7F 7701              inc [X+1]
 0A81 0F0000            adc [X+0],0
 0A84           L82:
 0A84                   .dbline 257
 0A84 5201              mov A,[X+1]
 0A86 13FC              sub A,[X-4]
 0A88 52FB              mov A,[X-5]
 0A8A 3180              xor A,-128
 0A8C 62D000            mov REG[0xd0],>__r0
 0A8F 5300              mov [__rX],A
 0A91 5200              mov A,[X+0]
 0A93 3180              xor A,-128
 0A95 1A00              sbb A,[__rX]
 0A97 CFE0              jc L79
 0A99           X25:
 0A99                   .dbline -2
 0A99           L78:
 0A99 38FE              add SP,-2
 0A9B 20                pop X
 0A9C                   .dbline 0 ; func end
 0A9C 7F                ret
 0A9D                   .dbsym l i 0 I
 0A9D                   .dbsym l Ms -5 I
 0A9D                   .dbend
 0A9D                   .dbfunc e LedTest _LedTest fV
 0A9D           ;              i -> X+0
 0A9D           _LedTest::
 0A9D                   .dbline -1
 0A9D 10                push X
 0A9E 4F                mov X,SP
 0A9F 3802              add SP,2
 0AA1                   .dbline 264
 0AA1           ; }
 0AA1           ; 
 0AA1           ; void LedTest(void)
 0AA1           ; {
 0AA1                   .dbline 266
 0AA1           ;       int i;
 0AA1           ;       LED_1_Off();
 0AA1 10                push X
 0AA2 7C0000            xcall _LED_1_Off
 0AA5                   .dbline 267
 0AA5           ;       LED_2_Off();
 0AA5 7C0000            xcall _LED_2_Off
 0AA8                   .dbline 268
 0AA8           ;       LED_3_Off();
 0AA8 7C0000            xcall _LED_3_Off
 0AAB 20                pop X
 0AAC                   .dbline 270
 0AAC           ;       
 0AAC           ;       for (i=0; i<3; i++)
 0AAC 560100            mov [X+1],0
 0AAF 560000            mov [X+0],0
 0AB2           L84:
 0AB2                   .dbline 271
 0AB2           ;       {
 0AB2                   .dbline 272
 0AB2           ;               LED_1_On();
 0AB2 10                push X
 0AB3 7C0000            xcall _LED_1_On
 0AB6 20                pop X
 0AB7                   .dbline 273
 0AB7           ;               DelayMs(500);
 0AB7 5001              mov A,1
 0AB9 08                push A
 0ABA 50F4              mov A,-12
 0ABC 08                push A
 0ABD 9FAD              xcall _DelayMs
 0ABF 38FE              add SP,-2
 0AC1                   .dbline 274
 0AC1           ;               LED_1_Off();
 0AC1 10                push X
 0AC2 7C0000            xcall _LED_1_Off
 0AC5                   .dbline 275
 0AC5           ;               LED_2_On();
 0AC5 7C0000            xcall _LED_2_On
 0AC8 20                pop X
 0AC9                   .dbline 276
 0AC9           ;               DelayMs(500);
 0AC9 5001              mov A,1
 0ACB 08                push A
 0ACC 50F4              mov A,-12
 0ACE 08                push A
 0ACF 9F9B              xcall _DelayMs
 0AD1 38FE              add SP,-2
 0AD3                   .dbline 277
 0AD3           ;               LED_2_Off();
 0AD3 10                push X
 0AD4 7C0000            xcall _LED_2_Off
 0AD7                   .dbline 278
 0AD7           ;               LED_3_On();
 0AD7 7C0000            xcall _LED_3_On
 0ADA 20                pop X
 0ADB                   .dbline 279
 0ADB           ;               DelayMs(500);
 0ADB 5001              mov A,1
 0ADD 08                push A
 0ADE 50F4              mov A,-12
 0AE0 08                push A
 0AE1 9F89              xcall _DelayMs
 0AE3 38FE              add SP,-2
 0AE5                   .dbline 280
 0AE5           ;               LED_3_Off();
 0AE5 10                push X
 0AE6 7C0000            xcall _LED_3_Off
 0AE9 20                pop X
 0AEA                   .dbline 281
 0AEA           ;       }
 0AEA           L85:
 0AEA                   .dbline 270
 0AEA 7701              inc [X+1]
 0AEC 0F0000            adc [X+0],0
 0AEF                   .dbline 270
 0AEF 5201              mov A,[X+1]
 0AF1 1103              sub A,3
 0AF3 5200              mov A,[X+0]
 0AF5 3180              xor A,-128
 0AF7 1980              sbb A,(0 ^ 0x80)
 0AF9 CFB8              jc L84
 0AFB           X26:
 0AFB                   .dbline -2
 0AFB           L83:
 0AFB 38FE              add SP,-2
 0AFD 20                pop X
 0AFE                   .dbline 0 ; func end
 0AFE 7F                ret
 0AFF                   .dbsym l i 0 I
 0AFF                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\main.c
 0000           _str::
 0000 00000000000000    .byte 0,0,0,0,0,0,0
 0007                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0007                   .dbsym e str _str A[7:7]c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _i::
 0000 0000              .byte 0,0
 0002                   .dbsym e i _i i
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _MesValue::
 0000 00000000000000000000      .word 0,0,0,0,0
 000A 00000000000000000000      .word 0,0,0,0,0
 0014 00000000000000000000      .word 0,0,0,0,0
 001E 000000000000      .byte 0,0,0,0,0,0
 0024                   .dbsym e MesValue _MesValue A[36:3:3]L
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _PotValue::
 0000 00000000          .byte 0,0,0,0
 0004                   .dbsym e PotValue _PotValue L
                        .area lit(rom, con, rel)
 0000           L66:
 0000 20204761696E204F75743A2031203D20  .byte 32,32,'G,'a,'i,'n,32,'O,'u,'t,58,32,49,32,61,32
 0010 00                .byte 0
 0011           L60:
 0011 20204761696E205072653A2031203D20  .byte 32,32,'G,'a,'i,'n,32,'P,'r,'e,58,32,49,32,61,32
 0021 00                .byte 0
 0022           L58:
 0022 20202D202033203D2000      .byte 32,32,45,32,32,51,32,61,32,0
 002C           L56:
 002C 20202D202032203D2000      .byte 32,32,45,32,32,50,32,61,32,0
 0036           L55:
 0036 202020204D65732056616C75653A2031  .byte 32,32,32,32,'M,'e,'s,32,'V,'a,'l,'u,'e,58,32,49
 0046 203D2000          .byte 32,61,32,0
 004A           L54:
 004A 0A0D00            .byte 10,13,0
