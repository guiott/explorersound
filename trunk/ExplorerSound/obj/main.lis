 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _PortIndx::
 0000 00                .byte 0
 0001                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0001                   .dbsym e PortIndx _PortIndx c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _Tmr1::
 0000 0000              .word 0
 0002                   .dbsym e Tmr1 _Tmr1 i
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _Tmr2::
 0000 0000              .word 0
 0002                   .dbsym e Tmr2 _Tmr2 i
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _Time10ms::
 0000 00000000          .word 0,0
 0004                   .dbsym e Time10ms _Time10ms L
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _TmrFlag::
 0000 00                .byte 0
 0001                   .dbsym e TmrFlag _TmrFlag c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _GF::
 0000 F801              .byte 248,1
 0002 7802              .byte 'x,2
 0004 3804              .byte 56,4
 0006 1808              .byte 24,8
 0008 0810              .byte 8,16
 000A 1C18              .byte 28,24
 000C 0C30              .byte 12,48
 000E                   .dbsym e GF _GF A[14:7:2]c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _GainIndx::
 0000 0202              .byte 2,2
 0002 0202              .byte 2,2
 0004 0202              .byte 2,2
 0006                   .dbsym e GainIndx _GainIndx A[6:3:2]c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area text(rom, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;        PortNum -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3805              add SP,5
 0004                   .dbline 39
 0004           ; /* ////////////////////////////////////////////////////////////////////////////
 0004           ; ** Project:      ExplorerSound
 0004           ; ** Author:    Guido Ottaviani-->guido@guiott.com<--
 0004           ; ** Description: 
 0004           ; ** version 1.1   12-12-2010
 0004           ; **
 0004           ; ** Detailed descriptions are on file "Notes.txt" 
 0004           ; **
 0004           ; -------------------------------------------------------------------------------
 0004           ; Copyright 2010 Guido Ottaviani
 0004           ; guido@guiott.com
 0004           ; 
 0004           ;       ExplorerSound is free software: you can redistribute it and/or modify
 0004           ;     it under the terms of the GNU General Public License as published by
 0004           ;     the Free Software Foundation, either version 3 of the License, or
 0004           ;     (at your option) any later version.
 0004           ; 
 0004           ;     ExplorerSound is distributed in the hope that it will be useful,
 0004           ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
 0004           ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 0004           ;     GNU General Public License for more details.
 0004           ; 
 0004           ;     You should have received a copy of the GNU General Public License
 0004           ;     along with ExplorerSound.  If not, see <http://www.gnu.org/licenses/>.
 0004           ; -------------------------------------------------------------------------------      
 0004           ; /////////////////////////////////////////////////////////////////////////////*/
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include <stdlib.h>
 0004           ; #include <math.h>
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include "prototypes.h"
 0004           ; #include "definitions.h"
 0004           ; #include "delay.h"
 0004           ; 
 0004           ; #pragma interrupt_handler HB_Tmr_ISR_C // int handler for program clock
 0004           ; 
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 42
 0004           ;       BYTE PortNum[3];
 0004           ;       
 0004           ;       BlocksInit();
 0004 7C0B99            xcall _BlocksInit
 0007                   .dbline 44
 0007           ;       
 0007           ;       M8C_EnableGInt ;               // Turn on interrupts 
 0007 7101                      or  F, 01h
 0009           
 0009                   .dbline 46
 0009           ;       
 0009           ;       LED_2_On();
 0009 10                push X
 000A 7C0000            xcall _LED_2_On
 000D 20                pop X
 000E                   .dbline 47
 000E           ;       PortNum[0] = AMUX4_mic_PORT0_1;
 000E 560000            mov [X+0],0
 0011                   .dbline 48
 0011           ;       PortNum[1] = AMUX4_mic_PORT0_3;
 0011 560101            mov [X+1],1
 0014                   .dbline 49
 0014           ;       PortNum[2] = AMUX4_mic_PORT0_7;
 0014 560203            mov [X+2],3
 0017                   .dbline 51
 0017           ;       
 0017           ;       LedTest();
 0017 7C0CAF            xcall _LedTest
 001A                   .dbline 52
 001A           ;       I2C_Regs.I2cCheck = 0;
 001A 62D000            mov REG[0xd0],>_I2C_Regs
 001D 550C00            mov [_I2C_Regs+12],0
 0020 84AA              xjmp L6
 0022           L5:
 0022                   .dbline 56
 0022           ;       
 0022           ;       // Main loop=============================================================
 0022           ;       while (1)
 0022           ;       {
 0022                   .dbline 57
 0022           ;               if(ADCINCVR_pot_fIsDataAvailable() != 0)// Wait for data to be ready
 0022 10                push X
 0023 7C0000            xcall _ADCINCVR_pot_fIsDataAvailable
 0026 62D000            mov REG[0xd0],>__r0
 0029 20                pop X
 002A 3900              cmp A,0
 002C A05F              jz L8
 002E                   .dbline 58
 002E           ;         {   
 002E                   .dbline 61
 002E           ;                       // Get Data, Clear data ready flag, in the range 0-1800
 002E           ;                       // multiplying by 256 is to have the same order of ADC_mes values
 002E           ;                       PotValue = (((long)ADCINCVR_pot_iGetDataClearFlag())+900) << 8;  
 002E 10                push X
 002F 7C0000            xcall _ADCINCVR_pot_iGetDataClearFlag
 0032 62D000            mov REG[0xd0],>__r0
 0035 5A00              mov [__r0],X
 0037 20                pop X
 0038 5300              mov [__r3],A
 003A 5100              mov A,[__r0]
 003C 5300              mov [__r2],A
 003E 470080            tst [__r2],-128
 0041 A009              jz X1
 0043 5500FF            mov [__r1],-1
 0046 5500FF            mov [__r0],-1
 0049 800A              jmp X2
 004B           X1:
 004B 62D000            mov REG[0xd0],>__r0
 004E 550000            mov [__r1],0
 0051 550000            mov [__r0],0
 0054           X2:
 0054 62D000            mov REG[0xd0],>__r0
 0057 060084            add [__r3],-124
 005A 0E0003            adc [__r2],3
 005D 0E0000            adc [__r1],0
 0060 0E0000            adc [__r0],0
 0063 5008              mov A,8
 0065           X3:
 0065 62D000            mov REG[0xd0],>__r0
 0068 6500              asl [__r3]
 006A 6B00              rlc [__r2]
 006C 6B00              rlc [__r1]
 006E 6B00              rlc [__r0]
 0070 78                dec A
 0071 BFF3              jnz X3
 0073 5100              mov A,[__r0]
 0075 08                push A
 0076 5100              mov A,[__r1]
 0078 08                push A
 0079 5100              mov A,[__r2]
 007B 08                push A
 007C 5100              mov A,[__r3]
 007E 62D000            mov REG[0xd0],>_PotValue
 0081 5303              mov [_PotValue+3],A
 0083 18                pop A
 0084 5302              mov [_PotValue+2],A
 0086 18                pop A
 0087 5301              mov [_PotValue+1],A
 0089 18                pop A
 008A 5300              mov [_PotValue],A
 008C                   .dbline 62
 008C           ;               }
 008C           L8:
 008C                   .dbline 64
 008C           ;         
 008C           ;               if (Tmr2>2) // every 30ms
 008C 62D000            mov REG[0xd0],>_Tmr2
 008F 5002              mov A,2
 0091 1201              sub A,[_Tmr2+1]
 0093 5000              mov A,0
 0095 1A00              sbb A,[_Tmr2]
 0097 D400              jnc L10
 0099           X4:
 0099                   .dbline 65
 0099           ;               {
 0099                   .dbline 66
 0099           ;                       Tmr2=0;
 0099 62D000            mov REG[0xd0],>_Tmr2
 009C 550100            mov [_Tmr2+1],0
 009F 550000            mov [_Tmr2],0
 00A2                   .dbline 67
 00A2           ;                       ADCINCVR_mes_GetSamples(1); // Start ADC to read once more
 00A2 10                push X
 00A3 5001              mov A,1
 00A5 7C0000            xcall _ADCINCVR_mes_GetSamples
 00A8 20                pop X
 00A9           L12:
 00A9                   .dbline 68
 00A9           ;                       while(! ADCINCVR_mes_fIsDataAvailable());// Wait for data to be ready 
 00A9           L13:
 00A9                   .dbline 68
 00A9 10                push X
 00AA 7C0000            xcall _ADCINCVR_mes_fIsDataAvailable
 00AD 62D000            mov REG[0xd0],>__r0
 00B0 20                pop X
 00B1 3900              cmp A,0
 00B3 AFF5              jz L12
 00B5                   .dbline 70
 00B5           ;                       // Get Data, Clear data ready flag
 00B5           ;                       MesValue[PortIndx][2]=((long)ADCINCVR_mes_iGetDataClearFlag()) << 8; // [1]
 00B5 10                push X
 00B6 7C0000            xcall _ADCINCVR_mes_iGetDataClearFlag
 00B9 62D000            mov REG[0xd0],>__r0
 00BC 5A00              mov [__r0],X
 00BE 20                pop X
 00BF 5300              mov [__r3],A
 00C1 5100              mov A,[__r0]
 00C3 5300              mov [__r2],A
 00C5 470080            tst [__r2],-128
 00C8 A009              jz X5
 00CA 5500FF            mov [__r1],-1
 00CD 5500FF            mov [__r0],-1
 00D0 800A              jmp X6
 00D2           X5:
 00D2 62D000            mov REG[0xd0],>__r0
 00D5 550000            mov [__r1],0
 00D8 550000            mov [__r0],0
 00DB           X6:
 00DB 62D000            mov REG[0xd0],>__r0
 00DE 5008              mov A,8
 00E0           X7:
 00E0 62D000            mov REG[0xd0],>__r0
 00E3 6500              asl [__r3]
 00E5 6B00              rlc [__r2]
 00E7 6B00              rlc [__r1]
 00E9 6B00              rlc [__r0]
 00EB 78                dec A
 00EC BFF3              jnz X7
 00EE 62D000            mov REG[0xd0],>_PortIndx
 00F1 5100              mov A,[_PortIndx]
 00F3 62D000            mov REG[0xd0],>__r0
 00F6 5300              mov [__r5],A
 00F8 5000              mov A,0
 00FA 08                push A
 00FB 5100              mov A,[__r5]
 00FD 08                push A
 00FE 5000              mov A,0
 0100 08                push A
 0101 500C              mov A,12
 0103 08                push A
 0104 7C0000            xcall __mul16
 0107 38FC              add SP,-4
 0109 5100              mov A,[__rX]
 010B 5300              mov [__r5],A
 010D 5100              mov A,[__rY]
 010F 5300              mov [__r4],A
 0111 060008            add [__r5],<_MesValue+8
 0114 0E0008            adc [__r4],>_MesValue+8
 0117 5100              mov A,[__r4]
 0119 60D5              mov REG[0xd5],A
 011B 5100              mov A,[__r0]
 011D 3F00              mvi [__r5],A
 011F 5100              mov A,[__r1]
 0121 3F00              mvi [__r5],A
 0123 5100              mov A,[__r2]
 0125 3F00              mvi [__r5],A
 0127 5100              mov A,[__r3]
 0129 3F00              mvi [__r5],A
 012B                   .dbline 71
 012B           ;                       MesValue[PortIndx][1]=(MesValue[PortIndx][2])/GF[GainIndx[PortIndx][1]][1]; // [2]
 012B 62D000            mov REG[0xd0],>_PortIndx
 012E 5100              mov A,[_PortIndx]
 0130 62D000            mov REG[0xd0],>__r0
 0133 5300              mov [__r1],A
 0135 5000              mov A,0
 0137 08                push A
 0138 5100              mov A,[__r1]
 013A 08                push A
 013B 5000              mov A,0
 013D 08                push A
 013E 500C              mov A,12
 0140 08                push A
 0141 7C0000            xcall __mul16
 0144 38FC              add SP,-4
 0146 5100              mov A,[__rX]
 0148 5300              mov [__r1],A
 014A 5100              mov A,[__rY]
 014C 5300              mov [__r0],A
 014E 62D000            mov REG[0xd0],>_PortIndx
 0151 5100              mov A,[_PortIndx]
 0153 62D000            mov REG[0xd0],>__r0
 0156 5300              mov [__r3],A
 0158 550000            mov [__r2],0
 015B 6500              asl [__r3]
 015D 6B00              rlc [__r2]
 015F 060001            add [__r3],<_GainIndx+1
 0162 0E0001            adc [__r2],>_GainIndx+1
 0165 5100              mov A,[__r2]
 0167 60D4              mov REG[0xd4],A
 0169 3E00              mvi A,[__r3]
 016B 5300              mov [__r3],A
 016D 550000            mov [__r2],0
 0170 6500              asl [__r3]
 0172 6B00              rlc [__r2]
 0174 060001            add [__r3],<_GF+1
 0177 0E0001            adc [__r2],>_GF+1
 017A 5100              mov A,[__r2]
 017C 60D4              mov REG[0xd4],A
 017E 3E00              mvi A,[__r3]
 0180 5300              mov [__r7],A
 0182 5100              mov A,[__r1]
 0184 0108              add A,<_MesValue+8
 0186 5300              mov [__r3],A
 0188 5100              mov A,[__r0]
 018A 0908              adc A,>_MesValue+8
 018C 60D4              mov REG[0xd4],A
 018E 3E00              mvi A,[__r3]
 0190 5300              mov [__r8],A
 0192 3E00              mvi A,[__r3]
 0194 5300              mov [__r9],A
 0196 3E00              mvi A,[__r3]
 0198 5300              mov [__r10],A
 019A 3E00              mvi A,[__r3]
 019C 5300              mov [__r11],A
 019E 5000              mov A,0
 01A0 08                push A
 01A1 08                push A
 01A2 08                push A
 01A3 5100              mov A,[__r7]
 01A5 08                push A
 01A6 5100              mov A,[__r8]
 01A8 08                push A
 01A9 5100              mov A,[__r9]
 01AB 08                push A
 01AC 5100              mov A,[__r10]
 01AE 08                push A
 01AF 5100              mov A,[__r11]
 01B1 08                push A
 01B2 7C0000            xcall __divmod_32X32_32
 01B5 18                pop A
 01B6 5300              mov [__r7],A
 01B8 18                pop A
 01B9 5300              mov [__r6],A
 01BB 18                pop A
 01BC 5300              mov [__r5],A
 01BE 18                pop A
 01BF 5300              mov [__r4],A
 01C1 38FC              add SP,-4
 01C3 060004            add [__r1],<_MesValue+4
 01C6 0E0004            adc [__r0],>_MesValue+4
 01C9 5100              mov A,[__r0]
 01CB 60D5              mov REG[0xd5],A
 01CD 5100              mov A,[__r4]
 01CF 3F00              mvi [__r1],A
 01D1 5100              mov A,[__r5]
 01D3 3F00              mvi [__r1],A
 01D5 5100              mov A,[__r6]
 01D7 3F00              mvi [__r1],A
 01D9 5100              mov A,[__r7]
 01DB 3F00              mvi [__r1],A
 01DD                   .dbline 72
 01DD           ;                       MesValue[PortIndx][0]=(MesValue[PortIndx][1])/GF[GainIndx[PortIndx][0]][1]; // [3]      
 01DD 62D000            mov REG[0xd0],>_PortIndx
 01E0 5100              mov A,[_PortIndx]
 01E2 62D000            mov REG[0xd0],>__r0
 01E5 5300              mov [__r1],A
 01E7 5000              mov A,0
 01E9 08                push A
 01EA 5100              mov A,[__r1]
 01EC 08                push A
 01ED 5000              mov A,0
 01EF 08                push A
 01F0 500C              mov A,12
 01F2 08                push A
 01F3 7C0000            xcall __mul16
 01F6 38FC              add SP,-4
 01F8 5100              mov A,[__rX]
 01FA 5300              mov [__r1],A
 01FC 5100              mov A,[__rY]
 01FE 5300              mov [__r0],A
 0200 62D000            mov REG[0xd0],>_PortIndx
 0203 5100              mov A,[_PortIndx]
 0205 62D000            mov REG[0xd0],>__r0
 0208 5300              mov [__r3],A
 020A 550000            mov [__r2],0
 020D 6500              asl [__r3]
 020F 6B00              rlc [__r2]
 0211 060000            add [__r3],<_GainIndx
 0214 0E0000            adc [__r2],>_GainIndx
 0217 5100              mov A,[__r2]
 0219 60D4              mov REG[0xd4],A
 021B 3E00              mvi A,[__r3]
 021D 5300              mov [__r3],A
 021F 550000            mov [__r2],0
 0222 6500              asl [__r3]
 0224 6B00              rlc [__r2]
 0226 060001            add [__r3],<_GF+1
 0229 0E0001            adc [__r2],>_GF+1
 022C 5100              mov A,[__r2]
 022E 60D4              mov REG[0xd4],A
 0230 3E00              mvi A,[__r3]
 0232 5300              mov [__r7],A
 0234 5100              mov A,[__r1]
 0236 0104              add A,<_MesValue+4
 0238 5300              mov [__r3],A
 023A 5100              mov A,[__r0]
 023C 0904              adc A,>_MesValue+4
 023E 60D4              mov REG[0xd4],A
 0240 3E00              mvi A,[__r3]
 0242 5300              mov [__r8],A
 0244 3E00              mvi A,[__r3]
 0246 5300              mov [__r9],A
 0248 3E00              mvi A,[__r3]
 024A 5300              mov [__r10],A
 024C 3E00              mvi A,[__r3]
 024E 5300              mov [__r11],A
 0250 5000              mov A,0
 0252 08                push A
 0253 08                push A
 0254 08                push A
 0255 5100              mov A,[__r7]
 0257 08                push A
 0258 5100              mov A,[__r8]
 025A 08                push A
 025B 5100              mov A,[__r9]
 025D 08                push A
 025E 5100              mov A,[__r10]
 0260 08                push A
 0261 5100              mov A,[__r11]
 0263 08                push A
 0264 7C0000            xcall __divmod_32X32_32
 0267 18                pop A
 0268 5300              mov [__r7],A
 026A 18                pop A
 026B 5300              mov [__r6],A
 026D 18                pop A
 026E 5300              mov [__r5],A
 0270 18                pop A
 0271 5300              mov [__r4],A
 0273 38FC              add SP,-4
 0275 060000            add [__r1],<_MesValue
 0278 0E0000            adc [__r0],>_MesValue
 027B 5100              mov A,[__r0]
 027D 60D5              mov REG[0xd5],A
 027F 5100              mov A,[__r4]
 0281 3F00              mvi [__r1],A
 0283 5100              mov A,[__r5]
 0285 3F00              mvi [__r1],A
 0287 5100              mov A,[__r6]
 0289 3F00              mvi [__r1],A
 028B 5100              mov A,[__r7]
 028D 3F00              mvi [__r1],A
 028F                   .dbline 74
 028F           ;                       // Expose data to I2C master
 028F           ;                       I2C_Regs.I2C_MesValue[PortIndx]=MesValue[PortIndx][0]; // linear
 028F 62D000            mov REG[0xd0],>_PortIndx
 0292 5100              mov A,[_PortIndx]
 0294 62D000            mov REG[0xd0],>__r0
 0297 5300              mov [__r1],A
 0299 5000              mov A,0
 029B 08                push A
 029C 5100              mov A,[__r1]
 029E 08                push A
 029F 5000              mov A,0
 02A1 08                push A
 02A2 500C              mov A,12
 02A4 08                push A
 02A5 7C0000            xcall __mul16
 02A8 38FC              add SP,-4
 02AA 5100              mov A,[__rX]
 02AC 5300              mov [__r1],A
 02AE 5100              mov A,[__rY]
 02B0 5300              mov [__r0],A
 02B2 060000            add [__r1],<_MesValue
 02B5 0E0000            adc [__r0],>_MesValue
 02B8 5100              mov A,[__r0]
 02BA 60D4              mov REG[0xd4],A
 02BC 3E00              mvi A,[__r1]
 02BE 5300              mov [__r4],A
 02C0 3E00              mvi A,[__r1]
 02C2 5300              mov [__r5],A
 02C4 3E00              mvi A,[__r1]
 02C6 5300              mov [__r6],A
 02C8 3E00              mvi A,[__r1]
 02CA 5300              mov [__r7],A
 02CC 62D000            mov REG[0xd0],>_PortIndx
 02CF 5100              mov A,[_PortIndx]
 02D1 62D000            mov REG[0xd0],>__r0
 02D4 5300              mov [__r1],A
 02D6 550000            mov [__r0],0
 02D9 6500              asl [__r1]
 02DB 6B00              rlc [__r0]
 02DD 6500              asl [__r1]
 02DF 6B00              rlc [__r0]
 02E1 060000            add [__r1],<_I2C_Regs
 02E4 0E0000            adc [__r0],>_I2C_Regs
 02E7 5100              mov A,[__r0]
 02E9 60D5              mov REG[0xd5],A
 02EB 5100              mov A,[__r4]
 02ED 3F00              mvi [__r1],A
 02EF 5100              mov A,[__r5]
 02F1 3F00              mvi [__r1],A
 02F3 5100              mov A,[__r6]
 02F5 3F00              mvi [__r1],A
 02F7 5100              mov A,[__r7]
 02F9 3F00              mvi [__r1],A
 02FB                   .dbline 75
 02FB           ;                       I2C_Regs.DbMesValue[PortIndx]=(10*log10(MesValue[PortIndx][0]))+0.5; // logarithmic (dB rounded to next)
 02FB 62D000            mov REG[0xd0],>_PortIndx
 02FE 5100              mov A,[_PortIndx]
 0300 62D000            mov REG[0xd0],>__r0
 0303 5300              mov [__r1],A
 0305 5000              mov A,0
 0307 08                push A
 0308 5100              mov A,[__r1]
 030A 08                push A
 030B 5000              mov A,0
 030D 08                push A
 030E 500C              mov A,12
 0310 08                push A
 0311 7C0000            xcall __mul16
 0314 38FC              add SP,-4
 0316 5100              mov A,[__rX]
 0318 5300              mov [__r1],A
 031A 5100              mov A,[__rY]
 031C 5300              mov [__r0],A
 031E 060000            add [__r1],<_MesValue
 0321 0E0000            adc [__r0],>_MesValue
 0324 5100              mov A,[__r0]
 0326 60D4              mov REG[0xd4],A
 0328 3E00              mvi A,[__r1]
 032A 5300              mov [__r4],A
 032C 3E00              mvi A,[__r1]
 032E 5300              mov [__r5],A
 0330 3E00              mvi A,[__r1]
 0332 5300              mov [__r6],A
 0334 3E00              mvi A,[__r1]
 0336 5300              mov [__r7],A
 0338 5100              mov A,[__r4]
 033A 08                push A
 033B 5100              mov A,[__r5]
 033D 08                push A
 033E 5100              mov A,[__r6]
 0340 08                push A
 0341 5100              mov A,[__r7]
 0343 08                push A
 0344 7C0000            xcall __long2fp
 0347 18                pop A
 0348 5300              mov [__r3],A
 034A 18                pop A
 034B 5300              mov [__r2],A
 034D 18                pop A
 034E 5300              mov [__r1],A
 0350 18                pop A
 0351 08                push A
 0352 5100              mov A,[__r1]
 0354 08                push A
 0355 5100              mov A,[__r2]
 0357 08                push A
 0358 5100              mov A,[__r3]
 035A 08                push A
 035B 7C0000            xcall _log10f
 035E 38FC              add SP,-4
 0360 62D000            mov REG[0xd0],>__r0
 0363 5100              mov A,[__r0]
 0365 08                push A
 0366 5100              mov A,[__r1]
 0368 08                push A
 0369 5100              mov A,[__r2]
 036B 08                push A
 036C 5100              mov A,[__r3]
 036E 08                push A
 036F 5041              mov A,65
 0371 08                push A
 0372 5020              mov A,32
 0374 08                push A
 0375 5000              mov A,0
 0377 08                push A
 0378 08                push A
 0379 7C0000            xcall __fpmul
 037C 18                pop A
 037D 5300              mov [__r3],A
 037F 18                pop A
 0380 5300              mov [__r2],A
 0382 18                pop A
 0383 5300              mov [__r1],A
 0385 18                pop A
 0386 5300              mov [__r0],A
 0388 38FC              add SP,-4
 038A 503F              mov A,63
 038C 08                push A
 038D 5000              mov A,0
 038F 08                push A
 0390 08                push A
 0391 08                push A
 0392 5100              mov A,[__r0]
 0394 08                push A
 0395 5100              mov A,[__r1]
 0397 08                push A
 0398 5100              mov A,[__r2]
 039A 08                push A
 039B 5100              mov A,[__r3]
 039D 08                push A
 039E 7C0000            xcall __fpadd
 03A1 18                pop A
 03A2 5300              mov [__r3],A
 03A4 18                pop A
 03A5 5300              mov [__r2],A
 03A7 18                pop A
 03A8 5300              mov [__r1],A
 03AA 18                pop A
 03AB 5300              mov [__r0],A
 03AD 38FC              add SP,-4
 03AF 5047              mov A,71
 03B1 08                push A
 03B2 5000              mov A,0
 03B4 08                push A
 03B5 08                push A
 03B6 08                push A
 03B7 5100              mov A,[__r0]
 03B9 08                push A
 03BA 5100              mov A,[__r1]
 03BC 08                push A
 03BD 5100              mov A,[__r2]
 03BF 08                push A
 03C0 5100              mov A,[__r3]
 03C2 08                push A
 03C3 7C0000            xcall __fpcmp
 03C6 38F8              add SP,-8
 03C8 39FF              cmp A,-1
 03CA A047              jz L24
 03CC 5047              mov A,71
 03CE 08                push A
 03CF 5000              mov A,0
 03D1 08                push A
 03D2 08                push A
 03D3 08                push A
 03D4 5100              mov A,[__r0]
 03D6 08                push A
 03D7 5100              mov A,[__r1]
 03D9 08                push A
 03DA 5100              mov A,[__r2]
 03DC 08                push A
 03DD 5100              mov A,[__r3]
 03DF 08                push A
 03E0 7C0000            xcall __fpsub
 03E3 18                pop A
 03E4 5300              mov [__r7],A
 03E6 18                pop A
 03E7 5300              mov [__r6],A
 03E9 18                pop A
 03EA 5300              mov [__r5],A
 03EC 18                pop A
 03ED 38FC              add SP,-4
 03EF 08                push A
 03F0 5100              mov A,[__r5]
 03F2 08                push A
 03F3 5100              mov A,[__r6]
 03F5 08                push A
 03F6 5100              mov A,[__r7]
 03F8 08                push A
 03F9 7C0000            xcall __fp2long
 03FC 18                pop A
 03FD 5300              mov [__r5],A
 03FF 18                pop A
 0400 5300              mov [__r4],A
 0402 38FE              add SP,-2
 0404 5100              mov A,[__r5]
 0406 0100              add A,0
 0408 5404              mov [X+4],A
 040A 5100              mov A,[__r4]
 040C 0980              adc A,-128
 040E 5403              mov [X+3],A
 0410 8023              xjmp L25
 0412           L24:
 0412 62D000            mov REG[0xd0],>__r0
 0415 5100              mov A,[__r0]
 0417 08                push A
 0418 5100              mov A,[__r1]
 041A 08                push A
 041B 5100              mov A,[__r2]
 041D 08                push A
 041E 5100              mov A,[__r3]
 0420 08                push A
 0421 7C0000            xcall __fp2long
 0424 18                pop A
 0425 5300              mov [__r1],A
 0427 18                pop A
 0428 5300              mov [__r0],A
 042A 38FE              add SP,-2
 042C 5100              mov A,[__r1]
 042E 5404              mov [X+4],A
 0430 5100              mov A,[__r0]
 0432 5403              mov [X+3],A
 0434           L25:
 0434 62D000            mov REG[0xd0],>__r0
 0437 5204              mov A,[X+4]
 0439 5300              mov [__r0],A
 043B 62D000            mov REG[0xd0],>_PortIndx
 043E 5100              mov A,[_PortIndx]
 0440 62D000            mov REG[0xd0],>__r0
 0443 5300              mov [__r3],A
 0445 550000            mov [__r2],0
 0448 06000D            add [__r3],<_I2C_Regs+13
 044B 0E000D            adc [__r2],>_I2C_Regs+13
 044E 5100              mov A,[__r2]
 0450 60D5              mov REG[0xd5],A
 0452 5100              mov A,[__r0]
 0454 3F00              mvi [__r3],A
 0456                   .dbline 77
 0456           ; 
 0456           ;                       AGC(); 
 0456 907A              xcall _AGC
 0458                   .dbline 79
 0458           ;                       
 0458           ;                       PortIndx++;
 0458 62D000            mov REG[0xd0],>_PortIndx
 045B 7600              inc [_PortIndx]
 045D                   .dbline 80
 045D           ;                       if(PortIndx > 2) 
 045D 5002              mov A,2
 045F 3A00              cmp A,[_PortIndx]
 0461 D007              jnc L26
 0463           X9:
 0463                   .dbline 81
 0463           ;                       {
 0463                   .dbline 82
 0463           ;                               PortIndx=0; // next mux port
 0463 62D000            mov REG[0xd0],>_PortIndx
 0466 550000            mov [_PortIndx],0
 0469                   .dbline 83
 0469           ;                       }
 0469           L26:
 0469                   .dbline 84
 0469           ;                       AMUX4_mic_InputSelect(PortNum[PortIndx]);
 0469 62D000            mov REG[0xd0],>__r0
 046C 550007            mov [__r0],7
 046F 5A00              mov [__r1],X
 0471 62D000            mov REG[0xd0],>_PortIndx
 0474 5100              mov A,[_PortIndx]
 0476 62D000            mov REG[0xd0],>__r0
 0479 0200              add A,[__r1]
 047B 5300              mov [__r1],A
 047D 5000              mov A,0
 047F 0A00              adc A,[__r0]
 0481 60D4              mov REG[0xd4],A
 0483 3E00              mvi A,[__r1]
 0485 10                push X
 0486 7C0000            xcall _AMUX4_mic_InputSelect
 0489 20                pop X
 048A                   .dbline 88
 048A           ;                       
 048A           ;                       // I2C comm test. If master is able to change I2cCheck the comm is working
 048A           ;                       // otherwise the CPU will be reset by the watchdog timer
 048A           ;                       if (I2C_Regs.I2cCheck)   
 048A 62D000            mov REG[0xd0],>_I2C_Regs
 048D 3C0C00            cmp [_I2C_Regs+12],0
 0490 A007              jz L28
 0492                   .dbline 89
 0492           ;                       {
 0492                   .dbline 90
 0492           ;                               I2C_Regs.I2cCheck = 0;
 0492 550C00            mov [_I2C_Regs+12],0
 0495                   .dbline 91
 0495           ;                               M8C_ClearWDT;
 0495 62E300            mov REG[0xe3],0
 0498                   .dbline 92
 0498           ;                       }
 0498           L28:
 0498                   .dbline 93
 0498           ;               }
 0498           L10:
 0498                   .dbline 95
 0498           ;               
 0498           ;               if (TmrFlag) // every 10ms
 0498 62D000            mov REG[0xd0],>_TmrFlag
 049B 3C0000            cmp [_TmrFlag],0
 049E A00B              jz L32
 04A0                   .dbline 96
 04A0           ;               {       
 04A0                   .dbline 97
 04A0           ;                       TmrFlag = 0;
 04A0 550000            mov [_TmrFlag],0
 04A3                   .dbline 98
 04A3           ;                       ADCINCVR_pot_GetSamples(1);    // Start ADC to read 1 sample
 04A3 10                push X
 04A4 5001              mov A,1
 04A6 7C0000            xcall _ADCINCVR_pot_GetSamples
 04A9 20                pop X
 04AA                   .dbline 99
 04AA           ;               }
 04AA           L32:
 04AA                   .dbline 101
 04AA           ;               
 04AA           ;               if (Tmr1 > 9) // every 100ms
 04AA 62D000            mov REG[0xd0],>_Tmr1
 04AD 5009              mov A,9
 04AF 1201              sub A,[_Tmr1+1]
 04B1 5000              mov A,0
 04B3 1A00              sbb A,[_Tmr1]
 04B5 D015              jnc L34
 04B7           X10:
 04B7                   .dbline 102
 04B7           ;               {
 04B7                   .dbline 103
 04B7           ;                       Tmr1 = 0;
 04B7 62D000            mov REG[0xd0],>_Tmr1
 04BA 550100            mov [_Tmr1+1],0
 04BD 550000            mov [_Tmr1],0
 04C0                   .dbline 104
 04C0           ;                       Tmr2 = 0;
 04C0 62D000            mov REG[0xd0],>_Tmr2
 04C3 550100            mov [_Tmr2+1],0
 04C6 550000            mov [_Tmr2],0
 04C9                   .dbline 107
 04C9           ;                       // UartTxValues(); // uncomment this line for debug
 04C9           ;                       // M8C_ClearWDT;   // uncomment this line for debug without I2C master
 04C9           ;                       DigitalOut();
 04C9 936A              xcall _DigitalOut
 04CB                   .dbline 108
 04CB           ;               }
 04CB           L34:
 04CB                   .dbline 109
 04CB           ;       }// ========================================================== Main loop 
 04CB           L6:
 04CB                   .dbline 55
 04CB 8B56              xjmp L5
 04CD           X0:
 04CD                   .dbline -2
 04CD           L1:
 04CD 38FB              add SP,-5
 04CF 20                pop X
 04D0                   .dbline 0 ; func end
 04D0 8FFF              jmp .
 04D2                   .dbsym l PortNum 0 A[3:3]c
 04D2                   .dbend
 04D2                   .dbfunc e AGC _AGC fV
 04D2           _AGC::
 04D2                   .dbline -1
 04D2                   .dbline 115
 04D2           ; }
 04D2           ; 
 04D2           ; // Functions ***************************************************************
 04D2           ; 
 04D2           ; void AGC(void)
 04D2           ; {// [5]
 04D2                   .dbline 116
 04D2           ;            if((MesValue[PortIndx][2] > V_MAX) && (GainIndx[PortIndx][1] > I_MIN))// PGA_out
 04D2 62D000            mov REG[0xd0],>_PortIndx
 04D5 5100              mov A,[_PortIndx]
 04D7 62D000            mov REG[0xd0],>__r0
 04DA 5300              mov [__r1],A
 04DC 5000              mov A,0
 04DE 08                push A
 04DF 5100              mov A,[__r1]
 04E1 08                push A
 04E2 5000              mov A,0
 04E4 08                push A
 04E5 500C              mov A,12
 04E7 08                push A
 04E8 7C0000            xcall __mul16
 04EB 38FC              add SP,-4
 04ED 5100              mov A,[__rX]
 04EF 5300              mov [__r1],A
 04F1 5100              mov A,[__rY]
 04F3 5300              mov [__r0],A
 04F5 060008            add [__r1],<_MesValue+8
 04F8 0E0008            adc [__r0],>_MesValue+8
 04FB 5100              mov A,[__r0]
 04FD 60D4              mov REG[0xd4],A
 04FF 3E00              mvi A,[__r1]
 0501 5300              mov [__r4],A
 0503 3E00              mvi A,[__r1]
 0505 5300              mov [__r5],A
 0507 3E00              mvi A,[__r1]
 0509 5300              mov [__r6],A
 050B 3E00              mvi A,[__r1]
 050D 5300              mov [__r7],A
 050F 5040              mov A,64
 0511 1200              sub A,[__r7]
 0513 500D              mov A,13
 0515 1A00              sbb A,[__r6]
 0517 5003              mov A,3
 0519 1A00              sbb A,[__r5]
 051B 5100              mov A,[__r4]
 051D 3180              xor A,-128
 051F 5300              mov [__rX],A
 0521 5080              mov A,(0 ^ 0x80)
 0523 1A00              sbb A,[__rX]
 0525 D08B              jnc L37
 0527           X11:
 0527 62D000            mov REG[0xd0],>_PortIndx
 052A 5100              mov A,[_PortIndx]
 052C 62D000            mov REG[0xd0],>__r0
 052F 5300              mov [__r1],A
 0531 550000            mov [__r0],0
 0534 6500              asl [__r1]
 0536 6B00              rlc [__r0]
 0538 060001            add [__r1],<_GainIndx+1
 053B 0E0001            adc [__r0],>_GainIndx+1
 053E 5100              mov A,[__r0]
 0540 60D4              mov REG[0xd4],A
 0542 3E00              mvi A,[__r1]
 0544 5300              mov [__r0],A
 0546 5000              mov A,0
 0548 3A00              cmp A,[__r0]
 054A D066              jnc L37
 054C           X12:
 054C                   .dbline 117
 054C           ;       {
 054C                   .dbline 118
 054C           ;               GainIndx[PortIndx][1]--;
 054C 62D000            mov REG[0xd0],>_PortIndx
 054F 5100              mov A,[_PortIndx]
 0551 62D000            mov REG[0xd0],>__r0
 0554 5300              mov [__r1],A
 0556 550000            mov [__r0],0
 0559 6500              asl [__r1]
 055B 6B00              rlc [__r0]
 055D 060001            add [__r1],<_GainIndx+1
 0560 0E0001            adc [__r0],>_GainIndx+1
 0563 5100              mov A,[__r0]
 0565 60D4              mov REG[0xd4],A
 0567 3E00              mvi A,[__r1]
 0569 7A00              dec [__r1]
 056B 5300              mov [__r2],A
 056D 160001            sub [__r2],1
 0570 5100              mov A,[__r0]
 0572 60D5              mov REG[0xd5],A
 0574 5100              mov A,[__r2]
 0576 3F00              mvi [__r1],A
 0578                   .dbline 119
 0578           ;               PGA_out_SetGain(GF[GainIndx[PortIndx][1]][0]); // set gain on PGA
 0578 62D000            mov REG[0xd0],>_PortIndx
 057B 5100              mov A,[_PortIndx]
 057D 62D000            mov REG[0xd0],>__r0
 0580 5300              mov [__r1],A
 0582 550000            mov [__r0],0
 0585 6500              asl [__r1]
 0587 6B00              rlc [__r0]
 0589 060001            add [__r1],<_GainIndx+1
 058C 0E0001            adc [__r0],>_GainIndx+1
 058F 5100              mov A,[__r0]
 0591 60D4              mov REG[0xd4],A
 0593 3E00              mvi A,[__r1]
 0595 5300              mov [__r1],A
 0597 550000            mov [__r0],0
 059A 6500              asl [__r1]
 059C 6B00              rlc [__r0]
 059E 060000            add [__r1],<_GF
 05A1 0E0000            adc [__r0],>_GF
 05A4 5100              mov A,[__r0]
 05A6 60D4              mov REG[0xd4],A
 05A8 3E00              mvi A,[__r1]
 05AA 10                push X
 05AB 7C0000            xcall _PGA_out_SetGain
 05AE 20                pop X
 05AF                   .dbline 120
 05AF           ;       }
 05AF 8284              xjmp L38
 05B1           L37:
 05B1                   .dbline 121
 05B1           ;       else if((MesValue[PortIndx][1] > V_MAX) && (GainIndx[PortIndx][0] > I_MIN))// PGA_pre
 05B1 62D000            mov REG[0xd0],>_PortIndx
 05B4 5100              mov A,[_PortIndx]
 05B6 62D000            mov REG[0xd0],>__r0
 05B9 5300              mov [__r1],A
 05BB 5000              mov A,0
 05BD 08                push A
 05BE 5100              mov A,[__r1]
 05C0 08                push A
 05C1 5000              mov A,0
 05C3 08                push A
 05C4 500C              mov A,12
 05C6 08                push A
 05C7 7C0000            xcall __mul16
 05CA 38FC              add SP,-4
 05CC 5100              mov A,[__rX]
 05CE 5300              mov [__r1],A
 05D0 5100              mov A,[__rY]
 05D2 5300              mov [__r0],A
 05D4 060004            add [__r1],<_MesValue+4
 05D7 0E0004            adc [__r0],>_MesValue+4
 05DA 5100              mov A,[__r0]
 05DC 60D4              mov REG[0xd4],A
 05DE 3E00              mvi A,[__r1]
 05E0 5300              mov [__r4],A
 05E2 3E00              mvi A,[__r1]
 05E4 5300              mov [__r5],A
 05E6 3E00              mvi A,[__r1]
 05E8 5300              mov [__r6],A
 05EA 3E00              mvi A,[__r1]
 05EC 5300              mov [__r7],A
 05EE 5040              mov A,64
 05F0 1200              sub A,[__r7]
 05F2 500D              mov A,13
 05F4 1A00              sbb A,[__r6]
 05F6 5003              mov A,3
 05F8 1A00              sbb A,[__r5]
 05FA 5100              mov A,[__r4]
 05FC 3180              xor A,-128
 05FE 5300              mov [__rX],A
 0600 5080              mov A,(0 ^ 0x80)
 0602 1A00              sbb A,[__rX]
 0604 D08B              jnc L43
 0606           X13:
 0606 62D000            mov REG[0xd0],>_PortIndx
 0609 5100              mov A,[_PortIndx]
 060B 62D000            mov REG[0xd0],>__r0
 060E 5300              mov [__r1],A
 0610 550000            mov [__r0],0
 0613 6500              asl [__r1]
 0615 6B00              rlc [__r0]
 0617 060000            add [__r1],<_GainIndx
 061A 0E0000            adc [__r0],>_GainIndx
 061D 5100              mov A,[__r0]
 061F 60D4              mov REG[0xd4],A
 0621 3E00              mvi A,[__r1]
 0623 5300              mov [__r0],A
 0625 5000              mov A,0
 0627 3A00              cmp A,[__r0]
 0629 D066              jnc L43
 062B           X14:
 062B                   .dbline 122
 062B           ;       {
 062B                   .dbline 123
 062B           ;               GainIndx[PortIndx][0]--;
 062B 62D000            mov REG[0xd0],>_PortIndx
 062E 5100              mov A,[_PortIndx]
 0630 62D000            mov REG[0xd0],>__r0
 0633 5300              mov [__r1],A
 0635 550000            mov [__r0],0
 0638 6500              asl [__r1]
 063A 6B00              rlc [__r0]
 063C 060000            add [__r1],<_GainIndx
 063F 0E0000            adc [__r0],>_GainIndx
 0642 5100              mov A,[__r0]
 0644 60D4              mov REG[0xd4],A
 0646 3E00              mvi A,[__r1]
 0648 7A00              dec [__r1]
 064A 5300              mov [__r2],A
 064C 160001            sub [__r2],1
 064F 5100              mov A,[__r0]
 0651 60D5              mov REG[0xd5],A
 0653 5100              mov A,[__r2]
 0655 3F00              mvi [__r1],A
 0657                   .dbline 124
 0657           ;               PGA_pre_SetGain(GF[GainIndx[PortIndx][0]][0]); // set gain on PGA
 0657 62D000            mov REG[0xd0],>_PortIndx
 065A 5100              mov A,[_PortIndx]
 065C 62D000            mov REG[0xd0],>__r0
 065F 5300              mov [__r1],A
 0661 550000            mov [__r0],0
 0664 6500              asl [__r1]
 0666 6B00              rlc [__r0]
 0668 060000            add [__r1],<_GainIndx
 066B 0E0000            adc [__r0],>_GainIndx
 066E 5100              mov A,[__r0]
 0670 60D4              mov REG[0xd4],A
 0672 3E00              mvi A,[__r1]
 0674 5300              mov [__r1],A
 0676 550000            mov [__r0],0
 0679 6500              asl [__r1]
 067B 6B00              rlc [__r0]
 067D 060000            add [__r1],<_GF
 0680 0E0000            adc [__r0],>_GF
 0683 5100              mov A,[__r0]
 0685 60D4              mov REG[0xd4],A
 0687 3E00              mvi A,[__r1]
 0689 10                push X
 068A 7C0000            xcall _PGA_pre_SetGain
 068D 20                pop X
 068E                   .dbline 125
 068E           ;       }
 068E 81A5              xjmp L44
 0690           L43:
 0690                   .dbline 126
 0690           ;       else if((MesValue[PortIndx][2] < V_MIN) && (GainIndx[PortIndx][1] < I_MAX))// PGA_out
 0690 62D000            mov REG[0xd0],>_PortIndx
 0693 5100              mov A,[_PortIndx]
 0695 62D000            mov REG[0xd0],>__r0
 0698 5300              mov [__r1],A
 069A 5000              mov A,0
 069C 08                push A
 069D 5100              mov A,[__r1]
 069F 08                push A
 06A0 5000              mov A,0
 06A2 08                push A
 06A3 500C              mov A,12
 06A5 08                push A
 06A6 7C0000            xcall __mul16
 06A9 38FC              add SP,-4
 06AB 5100              mov A,[__rX]
 06AD 5300              mov [__r1],A
 06AF 5100              mov A,[__rY]
 06B1 5300              mov [__r0],A
 06B3 060008            add [__r1],<_MesValue+8
 06B6 0E0008            adc [__r0],>_MesValue+8
 06B9 5100              mov A,[__r0]
 06BB 60D4              mov REG[0xd4],A
 06BD 3E00              mvi A,[__r1]
 06BF 5300              mov [__r4],A
 06C1 3E00              mvi A,[__r1]
 06C3 5300              mov [__r5],A
 06C5 3E00              mvi A,[__r1]
 06C7 5300              mov [__r6],A
 06C9 3E00              mvi A,[__r1]
 06CB 1150              sub A,80
 06CD 5100              mov A,[__r6]
 06CF 19C3              sbb A,-61
 06D1 5100              mov A,[__r5]
 06D3 1900              sbb A,0
 06D5 5100              mov A,[__r4]
 06D7 3180              xor A,-128
 06D9 1980              sbb A,(0 ^ 0x80)
 06DB D087              jnc L46
 06DD           X15:
 06DD 62D000            mov REG[0xd0],>_PortIndx
 06E0 5100              mov A,[_PortIndx]
 06E2 62D000            mov REG[0xd0],>__r0
 06E5 5300              mov [__r1],A
 06E7 550000            mov [__r0],0
 06EA 6500              asl [__r1]
 06EC 6B00              rlc [__r0]
 06EE 060001            add [__r1],<_GainIndx+1
 06F1 0E0001            adc [__r0],>_GainIndx+1
 06F4 5100              mov A,[__r0]
 06F6 60D4              mov REG[0xd4],A
 06F8 3E00              mvi A,[__r1]
 06FA 3906              cmp A,6
 06FC D066              jnc L46
 06FE           X16:
 06FE                   .dbline 127
 06FE           ;       {
 06FE                   .dbline 128
 06FE           ;               GainIndx[PortIndx][1]++;
 06FE 62D000            mov REG[0xd0],>_PortIndx
 0701 5100              mov A,[_PortIndx]
 0703 62D000            mov REG[0xd0],>__r0
 0706 5300              mov [__r1],A
 0708 550000            mov [__r0],0
 070B 6500              asl [__r1]
 070D 6B00              rlc [__r0]
 070F 060001            add [__r1],<_GainIndx+1
 0712 0E0001            adc [__r0],>_GainIndx+1
 0715 5100              mov A,[__r0]
 0717 60D4              mov REG[0xd4],A
 0719 3E00              mvi A,[__r1]
 071B 7A00              dec [__r1]
 071D 5300              mov [__r2],A
 071F 060001            add [__r2],1
 0722 5100              mov A,[__r0]
 0724 60D5              mov REG[0xd5],A
 0726 5100              mov A,[__r2]
 0728 3F00              mvi [__r1],A
 072A                   .dbline 129
 072A           ;               PGA_out_SetGain(GF[GainIndx[PortIndx][1]][0]); // set gain on PGA
 072A 62D000            mov REG[0xd0],>_PortIndx
 072D 5100              mov A,[_PortIndx]
 072F 62D000            mov REG[0xd0],>__r0
 0732 5300              mov [__r1],A
 0734 550000            mov [__r0],0
 0737 6500              asl [__r1]
 0739 6B00              rlc [__r0]
 073B 060001            add [__r1],<_GainIndx+1
 073E 0E0001            adc [__r0],>_GainIndx+1
 0741 5100              mov A,[__r0]
 0743 60D4              mov REG[0xd4],A
 0745 3E00              mvi A,[__r1]
 0747 5300              mov [__r1],A
 0749 550000            mov [__r0],0
 074C 6500              asl [__r1]
 074E 6B00              rlc [__r0]
 0750 060000            add [__r1],<_GF
 0753 0E0000            adc [__r0],>_GF
 0756 5100              mov A,[__r0]
 0758 60D4              mov REG[0xd4],A
 075A 3E00              mvi A,[__r1]
 075C 10                push X
 075D 7C0000            xcall _PGA_out_SetGain
 0760 20                pop X
 0761                   .dbline 130
 0761           ;       }
 0761 80D2              xjmp L47
 0763           L46:
 0763                   .dbline 131
 0763           ;       else if((MesValue[PortIndx][1] < V_MIN) && (GainIndx[PortIndx][0] < I_MAX))// PGA_pre
 0763 62D000            mov REG[0xd0],>_PortIndx
 0766 5100              mov A,[_PortIndx]
 0768 62D000            mov REG[0xd0],>__r0
 076B 5300              mov [__r1],A
 076D 5000              mov A,0
 076F 08                push A
 0770 5100              mov A,[__r1]
 0772 08                push A
 0773 5000              mov A,0
 0775 08                push A
 0776 500C              mov A,12
 0778 08                push A
 0779 7C0000            xcall __mul16
 077C 38FC              add SP,-4
 077E 5100              mov A,[__rX]
 0780 5300              mov [__r1],A
 0782 5100              mov A,[__rY]
 0784 5300              mov [__r0],A
 0786 060004            add [__r1],<_MesValue+4
 0789 0E0004            adc [__r0],>_MesValue+4
 078C 5100              mov A,[__r0]
 078E 60D4              mov REG[0xd4],A
 0790 3E00              mvi A,[__r1]
 0792 5300              mov [__r4],A
 0794 3E00              mvi A,[__r1]
 0796 5300              mov [__r5],A
 0798 3E00              mvi A,[__r1]
 079A 5300              mov [__r6],A
 079C 3E00              mvi A,[__r1]
 079E 1150              sub A,80
 07A0 5100              mov A,[__r6]
 07A2 19C3              sbb A,-61
 07A4 5100              mov A,[__r5]
 07A6 1900              sbb A,0
 07A8 5100              mov A,[__r4]
 07AA 3180              xor A,-128
 07AC 1980              sbb A,(0 ^ 0x80)
 07AE D085              jnc L52
 07B0           X17:
 07B0 62D000            mov REG[0xd0],>_PortIndx
 07B3 5100              mov A,[_PortIndx]
 07B5 62D000            mov REG[0xd0],>__r0
 07B8 5300              mov [__r1],A
 07BA 550000            mov [__r0],0
 07BD 6500              asl [__r1]
 07BF 6B00              rlc [__r0]
 07C1 060000            add [__r1],<_GainIndx
 07C4 0E0000            adc [__r0],>_GainIndx
 07C7 5100              mov A,[__r0]
 07C9 60D4              mov REG[0xd4],A
 07CB 3E00              mvi A,[__r1]
 07CD 3906              cmp A,6
 07CF D064              jnc L52
 07D1           X18:
 07D1                   .dbline 132
 07D1           ;       {
 07D1                   .dbline 133
 07D1           ;               GainIndx[PortIndx][0]++;
 07D1 62D000            mov REG[0xd0],>_PortIndx
 07D4 5100              mov A,[_PortIndx]
 07D6 62D000            mov REG[0xd0],>__r0
 07D9 5300              mov [__r1],A
 07DB 550000            mov [__r0],0
 07DE 6500              asl [__r1]
 07E0 6B00              rlc [__r0]
 07E2 060000            add [__r1],<_GainIndx
 07E5 0E0000            adc [__r0],>_GainIndx
 07E8 5100              mov A,[__r0]
 07EA 60D4              mov REG[0xd4],A
 07EC 3E00              mvi A,[__r1]
 07EE 7A00              dec [__r1]
 07F0 5300              mov [__r2],A
 07F2 060001            add [__r2],1
 07F5 5100              mov A,[__r0]
 07F7 60D5              mov REG[0xd5],A
 07F9 5100              mov A,[__r2]
 07FB 3F00              mvi [__r1],A
 07FD                   .dbline 134
 07FD           ;               PGA_pre_SetGain(GF[GainIndx[PortIndx][0]][0]); // set gain on PGA
 07FD 62D000            mov REG[0xd0],>_PortIndx
 0800 5100              mov A,[_PortIndx]
 0802 62D000            mov REG[0xd0],>__r0
 0805 5300              mov [__r1],A
 0807 550000            mov [__r0],0
 080A 6500              asl [__r1]
 080C 6B00              rlc [__r0]
 080E 060000            add [__r1],<_GainIndx
 0811 0E0000            adc [__r0],>_GainIndx
 0814 5100              mov A,[__r0]
 0816 60D4              mov REG[0xd4],A
 0818 3E00              mvi A,[__r1]
 081A 5300              mov [__r1],A
 081C 550000            mov [__r0],0
 081F 6500              asl [__r1]
 0821 6B00              rlc [__r0]
 0823 060000            add [__r1],<_GF
 0826 0E0000            adc [__r0],>_GF
 0829 5100              mov A,[__r0]
 082B 60D4              mov REG[0xd4],A
 082D 3E00              mvi A,[__r1]
 082F 10                push X
 0830 7C0000            xcall _PGA_pre_SetGain
 0833 20                pop X
 0834                   .dbline 135
 0834           ;       }       
 0834           L52:
 0834           L47:
 0834           L44:
 0834           L38:
 0834                   .dbline -2
 0834           L36:
 0834                   .dbline 0 ; func end
 0834 7F                ret
 0835                   .dbend
 0835                   .dbfunc e DigitalOut _DigitalOut fV
 0835           _DigitalOut::
 0835                   .dbline -1
 0835                   .dbline 139
 0835           ; }
 0835           ; 
 0835           ; void DigitalOut(void)
 0835           ; {// Controls the outputs according to pot setting point
 0835                   .dbline 140
 0835           ;       DIGITAL_OUT_Off();
 0835 10                push X
 0836 7C0000            xcall _DIGITAL_OUT_Off
 0839 20                pop X
 083A                   .dbline 141
 083A           ;       if (MesValue[0][0]>PotValue)
 083A 62D000            mov REG[0xd0],>_PotValue
 083D 5103              mov A,[_PotValue+3]
 083F 62D000            mov REG[0xd0],>_MesValue
 0842 1203              sub A,[_MesValue+3]
 0844 62D000            mov REG[0xd0],>_PotValue
 0847 5102              mov A,[_PotValue+2]
 0849 62D000            mov REG[0xd0],>_MesValue
 084C 1A02              sbb A,[_MesValue+2]
 084E 62D000            mov REG[0xd0],>_PotValue
 0851 5101              mov A,[_PotValue+1]
 0853 62D000            mov REG[0xd0],>_MesValue
 0856 1A01              sbb A,[_MesValue+1]
 0858 5100              mov A,[_MesValue]
 085A 3180              xor A,-128
 085C 62D000            mov REG[0xd0],>__r0
 085F 5300              mov [__rX],A
 0861 62D000            mov REG[0xd0],>_PotValue
 0864 5100              mov A,[_PotValue]
 0866 3180              xor A,-128
 0868 62D000            mov REG[0xd0],>__r0
 086B 1A00              sbb A,[__rX]
 086D D00B              jnc L56
 086F           X19:
 086F                   .dbline 142
 086F           ;       {
 086F                   .dbline 143
 086F           ;               DIGITAL_OUT_On();
 086F 10                push X
 0870 7C0000            xcall _DIGITAL_OUT_On
 0873                   .dbline 144
 0873           ;               LED_3_On();
 0873 7C0000            xcall _LED_3_On
 0876 20                pop X
 0877                   .dbline 145
 0877           ;       }
 0877 8006              xjmp L57
 0879           L56:
 0879                   .dbline 147
 0879           ;       else
 0879           ;       {
 0879                   .dbline 148
 0879           ;               LED_3_Off();
 0879 10                push X
 087A 7C0000            xcall _LED_3_Off
 087D 20                pop X
 087E                   .dbline 149
 087E           ;       }
 087E           L57:
 087E                   .dbline 151
 087E           ;               
 087E           ;       if (MesValue[1][0]>PotValue)
 087E 62D000            mov REG[0xd0],>_PotValue
 0881 5103              mov A,[_PotValue+3]
 0883 62D000            mov REG[0xd0],>_MesValue
 0886 120F              sub A,[_MesValue+12+3]
 0888 62D000            mov REG[0xd0],>_PotValue
 088B 5102              mov A,[_PotValue+2]
 088D 62D000            mov REG[0xd0],>_MesValue
 0890 1A0E              sbb A,[_MesValue+12+2]
 0892 62D000            mov REG[0xd0],>_PotValue
 0895 5101              mov A,[_PotValue+1]
 0897 62D000            mov REG[0xd0],>_MesValue
 089A 1A0D              sbb A,[_MesValue+12+1]
 089C 510C              mov A,[_MesValue+12]
 089E 3180              xor A,-128
 08A0 62D000            mov REG[0xd0],>__r0
 08A3 5300              mov [__rX],A
 08A5 62D000            mov REG[0xd0],>_PotValue
 08A8 5100              mov A,[_PotValue]
 08AA 3180              xor A,-128
 08AC 62D000            mov REG[0xd0],>__r0
 08AF 1A00              sbb A,[__rX]
 08B1 D00B              jnc L58
 08B3           X20:
 08B3                   .dbline 152
 08B3           ;       {
 08B3                   .dbline 153
 08B3           ;               DIGITAL_OUT_On();
 08B3 10                push X
 08B4 7C0000            xcall _DIGITAL_OUT_On
 08B7                   .dbline 154
 08B7           ;               LED_2_On();
 08B7 7C0000            xcall _LED_2_On
 08BA 20                pop X
 08BB                   .dbline 155
 08BB           ;       }
 08BB 8006              xjmp L59
 08BD           L58:
 08BD                   .dbline 157
 08BD           ;       else
 08BD           ;       {
 08BD                   .dbline 158
 08BD           ;               LED_2_Off();
 08BD 10                push X
 08BE 7C0000            xcall _LED_2_Off
 08C1 20                pop X
 08C2                   .dbline 159
 08C2           ;       }
 08C2           L59:
 08C2                   .dbline 161
 08C2           ;       
 08C2           ;       if (MesValue[2][0]>PotValue)
 08C2 62D000            mov REG[0xd0],>_PotValue
 08C5 5103              mov A,[_PotValue+3]
 08C7 62D000            mov REG[0xd0],>_MesValue
 08CA 121B              sub A,[_MesValue+24+3]
 08CC 62D000            mov REG[0xd0],>_PotValue
 08CF 5102              mov A,[_PotValue+2]
 08D1 62D000            mov REG[0xd0],>_MesValue
 08D4 1A1A              sbb A,[_MesValue+24+2]
 08D6 62D000            mov REG[0xd0],>_PotValue
 08D9 5101              mov A,[_PotValue+1]
 08DB 62D000            mov REG[0xd0],>_MesValue
 08DE 1A19              sbb A,[_MesValue+24+1]
 08E0 5118              mov A,[_MesValue+24]
 08E2 3180              xor A,-128
 08E4 62D000            mov REG[0xd0],>__r0
 08E7 5300              mov [__rX],A
 08E9 62D000            mov REG[0xd0],>_PotValue
 08EC 5100              mov A,[_PotValue]
 08EE 3180              xor A,-128
 08F0 62D000            mov REG[0xd0],>__r0
 08F3 1A00              sbb A,[__rX]
 08F5 D00B              jnc L61
 08F7           X21:
 08F7                   .dbline 162
 08F7           ;       {
 08F7                   .dbline 163
 08F7           ;               DIGITAL_OUT_On();
 08F7 10                push X
 08F8 7C0000            xcall _DIGITAL_OUT_On
 08FB                   .dbline 164
 08FB           ;               LED_1_On();
 08FB 7C0000            xcall _LED_1_On
 08FE 20                pop X
 08FF                   .dbline 165
 08FF           ;       }
 08FF 8006              xjmp L62
 0901           L61:
 0901                   .dbline 167
 0901           ;       else
 0901           ;       {
 0901                   .dbline 168
 0901           ;               LED_1_Off();
 0901 10                push X
 0902 7C0000            xcall _LED_1_Off
 0905 20                pop X
 0906                   .dbline 169
 0906           ;       }
 0906           L62:
 0906                   .dbline -2
 0906           L55:
 0906                   .dbline 0 ; func end
 0906 7F                ret
 0907                   .dbend
 0907                   .dbfunc e UartTxValues _UartTxValues fV
 0907           _UartTxValues::
 0907                   .dbline -1
 0907                   .dbline 173
 0907           ; }
 0907           ; 
 0907           ; void UartTxValues(void)
 0907           ; {/* Transmit via UART the analog values read from various inputs.
 0907                   .dbline 178
 0907           ;       Usefull for debugging purposes, it could be converted in a
 0907           ;       command string using the same protocol used for dsNav if
 0907           ;       needed to output sound level values via serial comm
 0907           ; */
 0907           ;       TX8_CPutString("\n\r");
 0907 10                push X
 0908 5034              mov A,>L65
 090A 08                push A
 090B 5034              mov A,<L65
 090D 5C                mov X,A
 090E 18                pop A
 090F 7C0000            xcall _TX8_CPutString
 0912 20                pop X
 0913                   .dbline 185
 0913           ;       
 0913           ; /*    TX8_CPutString("Pot Value = ");
 0913           ;       itoa(str, PotValue,10);
 0913           ;       TX8_PutString(str);
 0913           ; */
 0913           ; 
 0913           ;       TX8_CPutString("Mes: 1 = ");
 0913 10                push X
 0914 502A              mov A,>L66
 0916 08                push A
 0917 502A              mov A,<L66
 0919 5C                mov X,A
 091A 18                pop A
 091B 7C0000            xcall _TX8_CPutString
 091E 20                pop X
 091F                   .dbline 186
 091F           ;       ltoa(str, I2C_Regs.DbMesValue[0],10);
 091F 5000              mov A,0
 0921 08                push A
 0922 500A              mov A,10
 0924 08                push A
 0925 62D000            mov REG[0xd0],>_I2C_Regs
 0928 510D              mov A,[_I2C_Regs+13]
 092A 62D000            mov REG[0xd0],>__r0
 092D 5300              mov [__r3],A
 092F 5000              mov A,0
 0931 08                push A
 0932 08                push A
 0933 08                push A
 0934 5100              mov A,[__r3]
 0936 08                push A
 0937 5000              mov A,>_str
 0939 08                push A
 093A 5000              mov A,<_str
 093C 08                push A
 093D 7C0000            xcall _ltoa
 0940 38F8              add SP,-8
 0942                   .dbline 187
 0942           ;       TX8_PutString(str);
 0942 10                push X
 0943 5000              mov A,>_str
 0945 08                push A
 0946 5000              mov A,<_str
 0948 5C                mov X,A
 0949 18                pop A
 094A 7C0000            xcall _TX8_PutString
 094D 20                pop X
 094E                   .dbline 188
 094E           ;       TX8_CPutString("  -  2 = ");
 094E 10                push X
 094F 5020              mov A,>L68
 0951 08                push A
 0952 5020              mov A,<L68
 0954 5C                mov X,A
 0955 18                pop A
 0956 7C0000            xcall _TX8_CPutString
 0959 20                pop X
 095A                   .dbline 189
 095A           ;       ltoa(str, I2C_Regs.DbMesValue[1],10);
 095A 5000              mov A,0
 095C 08                push A
 095D 500A              mov A,10
 095F 08                push A
 0960 62D000            mov REG[0xd0],>_I2C_Regs
 0963 510E              mov A,[_I2C_Regs+13+1]
 0965 62D000            mov REG[0xd0],>__r0
 0968 5300              mov [__r3],A
 096A 5000              mov A,0
 096C 08                push A
 096D 08                push A
 096E 08                push A
 096F 5100              mov A,[__r3]
 0971 08                push A
 0972 5000              mov A,>_str
 0974 08                push A
 0975 5000              mov A,<_str
 0977 08                push A
 0978 7C0000            xcall _ltoa
 097B 38F8              add SP,-8
 097D                   .dbline 190
 097D           ;       TX8_PutString(str);
 097D 10                push X
 097E 5000              mov A,>_str
 0980 08                push A
 0981 5000              mov A,<_str
 0983 5C                mov X,A
 0984 18                pop A
 0985 7C0000            xcall _TX8_PutString
 0988 20                pop X
 0989                   .dbline 191
 0989           ;       TX8_CPutString("  -  3 = ");
 0989 10                push X
 098A 5016              mov A,>L71
 098C 08                push A
 098D 5016              mov A,<L71
 098F 5C                mov X,A
 0990 18                pop A
 0991 7C0000            xcall _TX8_CPutString
 0994 20                pop X
 0995                   .dbline 192
 0995           ;       ltoa(str, I2C_Regs.DbMesValue[2],10);
 0995 5000              mov A,0
 0997 08                push A
 0998 500A              mov A,10
 099A 08                push A
 099B 62D000            mov REG[0xd0],>_I2C_Regs
 099E 510F              mov A,[_I2C_Regs+13+2]
 09A0 62D000            mov REG[0xd0],>__r0
 09A3 5300              mov [__r3],A
 09A5 5000              mov A,0
 09A7 08                push A
 09A8 08                push A
 09A9 08                push A
 09AA 5100              mov A,[__r3]
 09AC 08                push A
 09AD 5000              mov A,>_str
 09AF 08                push A
 09B0 5000              mov A,<_str
 09B2 08                push A
 09B3 7C0000            xcall _ltoa
 09B6 38F8              add SP,-8
 09B8                   .dbline 193
 09B8           ;       TX8_PutString(str);
 09B8 10                push X
 09B9 5000              mov A,>_str
 09BB 08                push A
 09BC 5000              mov A,<_str
 09BE 5C                mov X,A
 09BF 18                pop A
 09C0 7C0000            xcall _TX8_PutString
 09C3 20                pop X
 09C4                   .dbline 194
 09C4           ;       TX8_CPutString(" Pre: 1 = ");
 09C4 10                push X
 09C5 500B              mov A,>L74
 09C7 08                push A
 09C8 500B              mov A,<L74
 09CA 5C                mov X,A
 09CB 18                pop A
 09CC 7C0000            xcall _TX8_CPutString
 09CF 20                pop X
 09D0                   .dbline 195
 09D0           ;       itoa(str, GF[GainIndx[0][0]][1], 10);
 09D0 5000              mov A,0
 09D2 08                push A
 09D3 500A              mov A,10
 09D5 08                push A
 09D6 62D000            mov REG[0xd0],>_GainIndx
 09D9 5100              mov A,[_GainIndx]
 09DB 62D000            mov REG[0xd0],>__r0
 09DE 5300              mov [__r1],A
 09E0 550000            mov [__r0],0
 09E3 6500              asl [__r1]
 09E5 6B00              rlc [__r0]
 09E7 060001            add [__r1],<_GF+1
 09EA 0E0001            adc [__r0],>_GF+1
 09ED 5100              mov A,[__r0]
 09EF 60D4              mov REG[0xd4],A
 09F1 3E00              mvi A,[__r1]
 09F3 5300              mov [__r1],A
 09F5 5000              mov A,0
 09F7 08                push A
 09F8 5100              mov A,[__r1]
 09FA 08                push A
 09FB 5000              mov A,>_str
 09FD 08                push A
 09FE 5000              mov A,<_str
 0A00 08                push A
 0A01 7C0000            xcall _itoa
 0A04 38FA              add SP,-6
 0A06                   .dbline 196
 0A06           ;       TX8_PutString(str);
 0A06 10                push X
 0A07 5000              mov A,>_str
 0A09 08                push A
 0A0A 5000              mov A,<_str
 0A0C 5C                mov X,A
 0A0D 18                pop A
 0A0E 7C0000            xcall _TX8_PutString
 0A11 20                pop X
 0A12                   .dbline 197
 0A12           ;       TX8_CPutString("  -  2 = ");
 0A12 10                push X
 0A13 5020              mov A,>L68
 0A15 08                push A
 0A16 5020              mov A,<L68
 0A18 5C                mov X,A
 0A19 18                pop A
 0A1A 7C0000            xcall _TX8_CPutString
 0A1D 20                pop X
 0A1E                   .dbline 198
 0A1E           ;       itoa(str, GF[GainIndx[1][0]][1], 10);
 0A1E 5000              mov A,0
 0A20 08                push A
 0A21 500A              mov A,10
 0A23 08                push A
 0A24 62D000            mov REG[0xd0],>_GainIndx
 0A27 5102              mov A,[_GainIndx+2]
 0A29 62D000            mov REG[0xd0],>__r0
 0A2C 5300              mov [__r1],A
 0A2E 550000            mov [__r0],0
 0A31 6500              asl [__r1]
 0A33 6B00              rlc [__r0]
 0A35 060001            add [__r1],<_GF+1
 0A38 0E0001            adc [__r0],>_GF+1
 0A3B 5100              mov A,[__r0]
 0A3D 60D4              mov REG[0xd4],A
 0A3F 3E00              mvi A,[__r1]
 0A41 5300              mov [__r1],A
 0A43 5000              mov A,0
 0A45 08                push A
 0A46 5100              mov A,[__r1]
 0A48 08                push A
 0A49 5000              mov A,>_str
 0A4B 08                push A
 0A4C 5000              mov A,<_str
 0A4E 08                push A
 0A4F 7C0000            xcall _itoa
 0A52 38FA              add SP,-6
 0A54                   .dbline 199
 0A54           ;       TX8_PutString(str);     
 0A54 10                push X
 0A55 5000              mov A,>_str
 0A57 08                push A
 0A58 5000              mov A,<_str
 0A5A 5C                mov X,A
 0A5B 18                pop A
 0A5C 7C0000            xcall _TX8_PutString
 0A5F 20                pop X
 0A60                   .dbline 200
 0A60           ;       TX8_CPutString("  -  3 = ");
 0A60 10                push X
 0A61 5016              mov A,>L71
 0A63 08                push A
 0A64 5016              mov A,<L71
 0A66 5C                mov X,A
 0A67 18                pop A
 0A68 7C0000            xcall _TX8_CPutString
 0A6B 20                pop X
 0A6C                   .dbline 201
 0A6C           ;       itoa(str, GF[GainIndx[2][0]][1], 10);
 0A6C 5000              mov A,0
 0A6E 08                push A
 0A6F 500A              mov A,10
 0A71 08                push A
 0A72 62D000            mov REG[0xd0],>_GainIndx
 0A75 5104              mov A,[_GainIndx+4]
 0A77 62D000            mov REG[0xd0],>__r0
 0A7A 5300              mov [__r1],A
 0A7C 550000            mov [__r0],0
 0A7F 6500              asl [__r1]
 0A81 6B00              rlc [__r0]
 0A83 060001            add [__r1],<_GF+1
 0A86 0E0001            adc [__r0],>_GF+1
 0A89 5100              mov A,[__r0]
 0A8B 60D4              mov REG[0xd4],A
 0A8D 3E00              mvi A,[__r1]
 0A8F 5300              mov [__r1],A
 0A91 5000              mov A,0
 0A93 08                push A
 0A94 5100              mov A,[__r1]
 0A96 08                push A
 0A97 5000              mov A,>_str
 0A99 08                push A
 0A9A 5000              mov A,<_str
 0A9C 08                push A
 0A9D 7C0000            xcall _itoa
 0AA0 38FA              add SP,-6
 0AA2                   .dbline 202
 0AA2           ;       TX8_PutString(str);     
 0AA2 10                push X
 0AA3 5000              mov A,>_str
 0AA5 08                push A
 0AA6 5000              mov A,<_str
 0AA8 5C                mov X,A
 0AA9 18                pop A
 0AAA 7C0000            xcall _TX8_PutString
 0AAD 20                pop X
 0AAE                   .dbline 203
 0AAE           ;       TX8_CPutString(" Out: 1 = ");
 0AAE 10                push X
 0AAF 5000              mov A,>L80
 0AB1 08                push A
 0AB2 5000              mov A,<L80
 0AB4 5C                mov X,A
 0AB5 18                pop A
 0AB6 7C0000            xcall _TX8_CPutString
 0AB9 20                pop X
 0ABA                   .dbline 204
 0ABA           ;       itoa(str, GF[GainIndx[0][1]][1], 10);
 0ABA 5000              mov A,0
 0ABC 08                push A
 0ABD 500A              mov A,10
 0ABF 08                push A
 0AC0 62D000            mov REG[0xd0],>_GainIndx
 0AC3 5101              mov A,[_GainIndx+1]
 0AC5 62D000            mov REG[0xd0],>__r0
 0AC8 5300              mov [__r1],A
 0ACA 550000            mov [__r0],0
 0ACD 6500              asl [__r1]
 0ACF 6B00              rlc [__r0]
 0AD1 060001            add [__r1],<_GF+1
 0AD4 0E0001            adc [__r0],>_GF+1
 0AD7 5100              mov A,[__r0]
 0AD9 60D4              mov REG[0xd4],A
 0ADB 3E00              mvi A,[__r1]
 0ADD 5300              mov [__r1],A
 0ADF 5000              mov A,0
 0AE1 08                push A
 0AE2 5100              mov A,[__r1]
 0AE4 08                push A
 0AE5 5000              mov A,>_str
 0AE7 08                push A
 0AE8 5000              mov A,<_str
 0AEA 08                push A
 0AEB 7C0000            xcall _itoa
 0AEE 38FA              add SP,-6
 0AF0                   .dbline 205
 0AF0           ;       TX8_PutString(str);
 0AF0 10                push X
 0AF1 5000              mov A,>_str
 0AF3 08                push A
 0AF4 5000              mov A,<_str
 0AF6 5C                mov X,A
 0AF7 18                pop A
 0AF8 7C0000            xcall _TX8_PutString
 0AFB 20                pop X
 0AFC                   .dbline 206
 0AFC           ;       TX8_CPutString("  -  2 = ");
 0AFC 10                push X
 0AFD 5020              mov A,>L68
 0AFF 08                push A
 0B00 5020              mov A,<L68
 0B02 5C                mov X,A
 0B03 18                pop A
 0B04 7C0000            xcall _TX8_CPutString
 0B07 20                pop X
 0B08                   .dbline 207
 0B08           ;       itoa(str, GF[GainIndx[1][1]][1], 10);
 0B08 5000              mov A,0
 0B0A 08                push A
 0B0B 500A              mov A,10
 0B0D 08                push A
 0B0E 62D000            mov REG[0xd0],>_GainIndx
 0B11 5103              mov A,[_GainIndx+2+1]
 0B13 62D000            mov REG[0xd0],>__r0
 0B16 5300              mov [__r1],A
 0B18 550000            mov [__r0],0
 0B1B 6500              asl [__r1]
 0B1D 6B00              rlc [__r0]
 0B1F 060001            add [__r1],<_GF+1
 0B22 0E0001            adc [__r0],>_GF+1
 0B25 5100              mov A,[__r0]
 0B27 60D4              mov REG[0xd4],A
 0B29 3E00              mvi A,[__r1]
 0B2B 5300              mov [__r1],A
 0B2D 5000              mov A,0
 0B2F 08                push A
 0B30 5100              mov A,[__r1]
 0B32 08                push A
 0B33 5000              mov A,>_str
 0B35 08                push A
 0B36 5000              mov A,<_str
 0B38 08                push A
 0B39 7C0000            xcall _itoa
 0B3C 38FA              add SP,-6
 0B3E                   .dbline 208
 0B3E           ;       TX8_PutString(str);     
 0B3E 10                push X
 0B3F 5000              mov A,>_str
 0B41 08                push A
 0B42 5000              mov A,<_str
 0B44 5C                mov X,A
 0B45 18                pop A
 0B46 7C0000            xcall _TX8_PutString
 0B49 20                pop X
 0B4A                   .dbline 209
 0B4A           ;       TX8_CPutString("  -  3 = ");
 0B4A 10                push X
 0B4B 5016              mov A,>L71
 0B4D 08                push A
 0B4E 5016              mov A,<L71
 0B50 5C                mov X,A
 0B51 18                pop A
 0B52 7C0000            xcall _TX8_CPutString
 0B55 20                pop X
 0B56                   .dbline 210
 0B56           ;       itoa(str, GF[GainIndx[2][1]][1], 10);
 0B56 5000              mov A,0
 0B58 08                push A
 0B59 500A              mov A,10
 0B5B 08                push A
 0B5C 62D000            mov REG[0xd0],>_GainIndx
 0B5F 5105              mov A,[_GainIndx+4+1]
 0B61 62D000            mov REG[0xd0],>__r0
 0B64 5300              mov [__r1],A
 0B66 550000            mov [__r0],0
 0B69 6500              asl [__r1]
 0B6B 6B00              rlc [__r0]
 0B6D 060001            add [__r1],<_GF+1
 0B70 0E0001            adc [__r0],>_GF+1
 0B73 5100              mov A,[__r0]
 0B75 60D4              mov REG[0xd4],A
 0B77 3E00              mvi A,[__r1]
 0B79 5300              mov [__r1],A
 0B7B 5000              mov A,0
 0B7D 08                push A
 0B7E 5100              mov A,[__r1]
 0B80 08                push A
 0B81 5000              mov A,>_str
 0B83 08                push A
 0B84 5000              mov A,<_str
 0B86 08                push A
 0B87 7C0000            xcall _itoa
 0B8A 38FA              add SP,-6
 0B8C                   .dbline 211
 0B8C           ;       TX8_PutString(str);     
 0B8C 10                push X
 0B8D 5000              mov A,>_str
 0B8F 08                push A
 0B90 5000              mov A,<_str
 0B92 5C                mov X,A
 0B93 18                pop A
 0B94 7C0000            xcall _TX8_PutString
 0B97 20                pop X
 0B98                   .dbline -2
 0B98           L64:
 0B98                   .dbline 0 ; func end
 0B98 7F                ret
 0B99                   .dbend
 0B99                   .dbfunc e BlocksInit _BlocksInit fV
 0B99           _BlocksInit::
 0B99                   .dbline -1
 0B99                   .dbline 233
 0B99           ;                               
 0B99           ; /*
 0B99           ;       TX8_CPutString("  --Pre = ");
 0B99           ;       itoa(str, MesValue[0][0], 10);
 0B99           ;       TX8_PutString(str);
 0B99           ;       
 0B99           ;       TX8_CPutString("  --Out = ");
 0B99           ;       itoa(str, MesValue[0][1], 10);
 0B99           ;       TX8_PutString(str);
 0B99           ;       
 0B99           ;       TX8_CPutString("  --Sum = ");
 0B99           ;       itoa(str, MesValueSum[0][0], 10);
 0B99           ;       TX8_PutString(str);
 0B99           ;       
 0B99           ;       TX8_CPutString("  --Count = ");
 0B99           ;       itoa(str, MesValueSum[0][1], 10);
 0B99           ;       TX8_PutString(str);
 0B99           ; */
 0B99           ; }
 0B99           ;       
 0B99           ; void BlocksInit(void)
 0B99           ; {// Analog and digital blocks inizialization
 0B99                   .dbline 234
 0B99           ;       ADCINCVR_pot_Start(ADCINCVR_pot_HIGHPOWER);     
 0B99 10                push X
 0B9A 5003              mov A,3
 0B9C 7C0000            xcall _ADCINCVR_pot_Start
 0B9F 20                pop X
 0BA0                   .dbline 235
 0BA0           ;       ADCINCVR_mes_Start(ADCINCVR_mes_HIGHPOWER);
 0BA0 10                push X
 0BA1 5003              mov A,3
 0BA3 7C0000            xcall _ADCINCVR_mes_Start
 0BA6                   .dbline 236
 0BA6           ;       AMUX4_mic_Start();
 0BA6 7C0000            xcall _AMUX4_mic_Start
 0BA9 20                pop X
 0BAA                   .dbline 237
 0BAA           ;       BPF4_4KHz_Start(BPF4_4KHz_HIGHPOWER);
 0BAA 10                push X
 0BAB 5003              mov A,3
 0BAD 7C0000            xcall _BPF4_4KHz_Start
 0BB0 20                pop X
 0BB1                   .dbline 240
 0BB1           ;       
 0BB1           ;        // Set up I2C RAM buffer  
 0BB1           ;       EzI2Cs_1_SetRamBuffer(sizeof(I2C_Regs), 13, (BYTE *) &I2C_Regs);
 0BB1 10                push X
 0BB2 5000              mov A,>_I2C_Regs
 0BB4 08                push A
 0BB5 5000              mov A,<_I2C_Regs
 0BB7 08                push A
 0BB8 500D              mov A,13
 0BBA 08                push A
 0BBB 5010              mov A,16
 0BBD 08                push A
 0BBE 7C0000            xcall _EzI2Cs_1_SetRamBuffer
 0BC1 38FC              add SP,-4
 0BC3                   .dbline 241
 0BC3           ;       EzI2Cs_1_Start(); // Turn on EzI2C 
 0BC3 7C0000            xcall _EzI2Cs_1_Start
 0BC6 20                pop X
 0BC7                   .dbline 243
 0BC7           ;       
 0BC7           ;       PGA_out_Start(PGA_out_HIGHPOWER);
 0BC7 10                push X
 0BC8 5003              mov A,3
 0BCA 7C0000            xcall _PGA_out_Start
 0BCD 20                pop X
 0BCE                   .dbline 244
 0BCE           ;       PGA_pre_Start(PGA_pre_HIGHPOWER); 
 0BCE 10                push X
 0BCF 5003              mov A,3
 0BD1 7C0000            xcall _PGA_pre_Start
 0BD4 20                pop X
 0BD5                   .dbline 245
 0BD5           ;       RefMux_1_Start(RefMux_1_HIGHPOWER);
 0BD5 10                push X
 0BD6 5003              mov A,3
 0BD8 7C0000            xcall _RefMux_1_Start
 0BDB 20                pop X
 0BDC                   .dbline 246
 0BDC           ;     SCBLOCK_inbuff_Start(SCBLOCK_inbuff_HIGHPOWER);
 0BDC 10                push X
 0BDD 5003              mov A,3
 0BDF 7C0000            xcall _SCBLOCK_inbuff_Start
 0BE2                   .dbline 247
 0BE2           ;       LED_1_Start();
 0BE2 7C0000            xcall _LED_1_Start
 0BE5                   .dbline 248
 0BE5           ;       LED_2_Start();
 0BE5 7C0000            xcall _LED_2_Start
 0BE8                   .dbline 249
 0BE8           ;       LED_3_Start();
 0BE8 7C0000            xcall _LED_3_Start
 0BEB                   .dbline 250
 0BEB           ;       DIGITAL_OUT_Start();  
 0BEB 7C0000            xcall _DIGITAL_OUT_Start
 0BEE                   .dbline 252
 0BEE           ;       
 0BEE           ;       TX8_EnableInt();
 0BEE 7C0000            xcall _TX8_EnableInt
 0BF1 20                pop X
 0BF2                   .dbline 253
 0BF2           ;       TX8_Start(TX8_PARITY_NONE);
 0BF2 10                push X
 0BF3 5000              mov A,0
 0BF5 7C0000            xcall _TX8_Start
 0BF8 20                pop X
 0BF9                   .dbline 255
 0BF9           ;       
 0BF9           ;       AMUX4_mic_InputSelect(AMUX4_mic_PORT0_1);
 0BF9 10                push X
 0BFA 5000              mov A,0
 0BFC 7C0000            xcall _AMUX4_mic_InputSelect
 0BFF 20                pop X
 0C00                   .dbline 257
 0C00           ; 
 0C00           ;       PGA_pre_SetGain(GF[GainIndx[0][0]][0]);
 0C00 62D000            mov REG[0xd0],>_GainIndx
 0C03 5100              mov A,[_GainIndx]
 0C05 62D000            mov REG[0xd0],>__r0
 0C08 5300              mov [__r1],A
 0C0A 550000            mov [__r0],0
 0C0D 6500              asl [__r1]
 0C0F 6B00              rlc [__r0]
 0C11 060000            add [__r1],<_GF
 0C14 0E0000            adc [__r0],>_GF
 0C17 5100              mov A,[__r0]
 0C19 60D4              mov REG[0xd4],A
 0C1B 3E00              mvi A,[__r1]
 0C1D 10                push X
 0C1E 7C0000            xcall _PGA_pre_SetGain
 0C21 20                pop X
 0C22                   .dbline 258
 0C22           ;       PGA_out_SetGain(GF[GainIndx[0][1]][0]);
 0C22 62D000            mov REG[0xd0],>_GainIndx
 0C25 5101              mov A,[_GainIndx+1]
 0C27 62D000            mov REG[0xd0],>__r0
 0C2A 5300              mov [__r1],A
 0C2C 550000            mov [__r0],0
 0C2F 6500              asl [__r1]
 0C31 6B00              rlc [__r0]
 0C33 060000            add [__r1],<_GF
 0C36 0E0000            adc [__r0],>_GF
 0C39 5100              mov A,[__r0]
 0C3B 60D4              mov REG[0xd4],A
 0C3D 3E00              mvi A,[__r1]
 0C3F 10                push X
 0C40 7C0000            xcall _PGA_out_SetGain
 0C43                   .dbline 260
 0C43           ;       
 0C43           ;     HB_Tmr_EnableInt();  
 0C43 7C0000            xcall _HB_Tmr_EnableInt
 0C46                   .dbline 261
 0C46           ;       HB_Tmr_Start();         
 0C46 7C0000            xcall _HB_Tmr_Start
 0C49 20                pop X
 0C4A                   .dbline -2
 0C4A           L89:
 0C4A                   .dbline 0 ; func end
 0C4A 7F                ret
 0C4B                   .dbend
 0C4B                   .dbfunc e HB_Tmr_ISR_C _HB_Tmr_ISR_C fV
 0C4B           _HB_Tmr_ISR_C::
 0C4B                   .dbline -1
 0C4B 71C0              or F,-64
 0C4D 08                push A
 0C4E 5DD0              mov A,REG[0xd0]
 0C50 08                push A
 0C51                   .dbline 265
 0C51           ; }
 0C51           ;       
 0C51           ; void HB_Tmr_ISR_C(void)
 0C51           ; {// Base clock for all of the timings in the program
 0C51                   .dbline 266
 0C51           ;       TmrFlag = 1;
 0C51 62D000            mov REG[0xd0],>_TmrFlag
 0C54 550001            mov [_TmrFlag],1
 0C57                   .dbline 267
 0C57           ;       Tmr1++;
 0C57 62D000            mov REG[0xd0],>_Tmr1
 0C5A 7601              inc [_Tmr1+1]
 0C5C 0E0000            adc [_Tmr1],0
 0C5F                   .dbline 268
 0C5F           ;       Tmr2++;
 0C5F 62D000            mov REG[0xd0],>_Tmr2
 0C62 7601              inc [_Tmr2+1]
 0C64 0E0000            adc [_Tmr2],0
 0C67                   .dbline 269
 0C67           ;       Time10ms++;     
 0C67 62D000            mov REG[0xd0],>_Time10ms
 0C6A 060301            add [_Time10ms+3],1
 0C6D 0E0200            adc [_Time10ms+2],0
 0C70 0E0100            adc [_Time10ms+1],0
 0C73 0E0000            adc [_Time10ms],0
 0C76                   .dbline -2
 0C76           L91:
 0C76 18                pop A
 0C77 60D0              mov REG[208],A
 0C79 18                pop A
 0C7A                   .dbline 0 ; func end
 0C7A 7E                reti
 0C7B                   .dbend
 0C7B                   .dbfunc e DelayMs _DelayMs fV
 0C7B           ;              i -> X+0
 0C7B           ;             Ms -> X-5
 0C7B           _DelayMs::
 0C7B                   .dbline -1
 0C7B 10                push X
 0C7C 4F                mov X,SP
 0C7D 3802              add SP,2
 0C7F                   .dbline 273
 0C7F           ; }
 0C7F           ; 
 0C7F           ; void DelayMs(int Ms)
 0C7F           ; {
 0C7F                   .dbline 275
 0C7F           ;       int i;
 0C7F           ;       M8C_ClearWDT; //WDT is every 1/8*3=375ms
 0C7F 62E300            mov REG[0xe3],0
 0C82                   .dbline 276
 0C82           ;       for (i=0; i<Ms; i++)
 0C82 560100            mov [X+1],0
 0C85 560000            mov [X+0],0
 0C88 800D              xjmp L96
 0C8A           L93:
 0C8A                   .dbline 277
 0C8A           ;       {
 0C8A                   .dbline 278
 0C8A           ;               Delay50uTimes(20);
 0C8A 10                push X
 0C8B 5014              mov A,20
 0C8D 7C0000            xcall _Delay50uTimes
 0C90 20                pop X
 0C91                   .dbline 279
 0C91           ;       }
 0C91           L94:
 0C91                   .dbline 276
 0C91 7701              inc [X+1]
 0C93 0F0000            adc [X+0],0
 0C96           L96:
 0C96                   .dbline 276
 0C96 5201              mov A,[X+1]
 0C98 13FC              sub A,[X-4]
 0C9A 52FB              mov A,[X-5]
 0C9C 3180              xor A,-128
 0C9E 62D000            mov REG[0xd0],>__r0
 0CA1 5300              mov [__rX],A
 0CA3 5200              mov A,[X+0]
 0CA5 3180              xor A,-128
 0CA7 1A00              sbb A,[__rX]
 0CA9 CFE0              jc L93
 0CAB           X22:
 0CAB                   .dbline -2
 0CAB           L92:
 0CAB 38FE              add SP,-2
 0CAD 20                pop X
 0CAE                   .dbline 0 ; func end
 0CAE 7F                ret
 0CAF                   .dbsym l i 0 I
 0CAF                   .dbsym l Ms -5 I
 0CAF                   .dbend
 0CAF                   .dbfunc e LedTest _LedTest fV
 0CAF           ;              i -> X+0
 0CAF           _LedTest::
 0CAF                   .dbline -1
 0CAF 10                push X
 0CB0 4F                mov X,SP
 0CB1 3802              add SP,2
 0CB3                   .dbline 283
 0CB3           ; }
 0CB3           ; 
 0CB3           ; void LedTest(void)
 0CB3           ; {
 0CB3                   .dbline 285
 0CB3           ;       int i;
 0CB3           ;       LED_1_Off();
 0CB3 10                push X
 0CB4 7C0000            xcall _LED_1_Off
 0CB7                   .dbline 286
 0CB7           ;       LED_2_Off();
 0CB7 7C0000            xcall _LED_2_Off
 0CBA                   .dbline 287
 0CBA           ;       LED_3_Off();
 0CBA 7C0000            xcall _LED_3_Off
 0CBD 20                pop X
 0CBE                   .dbline 289
 0CBE           ;       
 0CBE           ;       for (i=0; i<2; i++)
 0CBE 560100            mov [X+1],0
 0CC1 560000            mov [X+0],0
 0CC4           L98:
 0CC4                   .dbline 290
 0CC4           ;       {
 0CC4                   .dbline 291
 0CC4           ;               LED_1_On();
 0CC4 10                push X
 0CC5 7C0000            xcall _LED_1_On
 0CC8 20                pop X
 0CC9                   .dbline 292
 0CC9           ;               DelayMs(150);
 0CC9 5000              mov A,0
 0CCB 08                push A
 0CCC 5096              mov A,-106
 0CCE 08                push A
 0CCF 9FAA              xcall _DelayMs
 0CD1 38FE              add SP,-2
 0CD3                   .dbline 293
 0CD3           ;               LED_1_Off();
 0CD3 10                push X
 0CD4 7C0000            xcall _LED_1_Off
 0CD7                   .dbline 294
 0CD7           ;               LED_2_On();
 0CD7 7C0000            xcall _LED_2_On
 0CDA 20                pop X
 0CDB                   .dbline 295
 0CDB           ;               DelayMs(150);
 0CDB 5000              mov A,0
 0CDD 08                push A
 0CDE 5096              mov A,-106
 0CE0 08                push A
 0CE1 9F98              xcall _DelayMs
 0CE3 38FE              add SP,-2
 0CE5                   .dbline 296
 0CE5           ;               LED_2_Off();
 0CE5 10                push X
 0CE6 7C0000            xcall _LED_2_Off
 0CE9                   .dbline 297
 0CE9           ;               LED_3_On();
 0CE9 7C0000            xcall _LED_3_On
 0CEC 20                pop X
 0CED                   .dbline 298
 0CED           ;               DelayMs(150);
 0CED 5000              mov A,0
 0CEF 08                push A
 0CF0 5096              mov A,-106
 0CF2 08                push A
 0CF3 9F86              xcall _DelayMs
 0CF5 38FE              add SP,-2
 0CF7                   .dbline 299
 0CF7           ;               LED_3_Off();
 0CF7 10                push X
 0CF8 7C0000            xcall _LED_3_Off
 0CFB 20                pop X
 0CFC                   .dbline 300
 0CFC           ;       }
 0CFC           L99:
 0CFC                   .dbline 289
 0CFC 7701              inc [X+1]
 0CFE 0F0000            adc [X+0],0
 0D01                   .dbline 289
 0D01 5201              mov A,[X+1]
 0D03 1102              sub A,2
 0D05 5200              mov A,[X+0]
 0D07 3180              xor A,-128
 0D09 1980              sbb A,(0 ^ 0x80)
 0D0B CFB8              jc L98
 0D0D           X23:
 0D0D                   .dbline -2
 0D0D           L97:
 0D0D 38FE              add SP,-2
 0D0F 20                pop X
 0D10                   .dbline 0 ; func end
 0D10 7F                ret
 0D11                   .dbsym l i 0 I
 0D11                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\main.c
 0000           _str::
 0000 00000000000000    .byte 0,0,0,0,0,0,0
 0007                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0007                   .dbsym e str _str A[7:7]c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _i::
 0000 0000              .byte 0,0
 0002                   .dbsym e i _i i
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _I2C_Regs::
 0000 00000000000000000000      .word 0,0,0,0,0
 000A 000000000000      .byte 0,0,0,0,0,0
 0010                   .dbstruct 0 16 I2C_Struct
 0010                   .dbfield 0 I2C_MesValue A[12:3]L
 0010                   .dbfield 12 I2cCheck c
 0010                   .dbfield 13 DbMesValue A[3:3]c
 0010                   .dbend
 0010                   .dbsym e I2C_Regs _I2C_Regs S[I2C_Struct]
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _MesValue::
 0000 00000000000000000000      .word 0,0,0,0,0
 000A 00000000000000000000      .word 0,0,0,0,0
 0014 00000000000000000000      .word 0,0,0,0,0
 001E 000000000000      .byte 0,0,0,0,0,0
 0024                   .dbsym e MesValue _MesValue A[36:3:3]L
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _PotValue::
 0000 00000000          .byte 0,0,0,0
 0004                   .dbsym e PotValue _PotValue L
                        .area lit(rom, con, rel)
 0000           L80:
 0000 204F75743A2031203D2000    .byte 32,'O,'u,'t,58,32,49,32,61,32,0
 000B           L74:
 000B 205072653A2031203D2000    .byte 32,'P,'r,'e,58,32,49,32,61,32,0
 0016           L71:
 0016 20202D202033203D2000      .byte 32,32,45,32,32,51,32,61,32,0
 0020           L68:
 0020 20202D202032203D2000      .byte 32,32,45,32,32,50,32,61,32,0
 002A           L66:
 002A 4D65733A2031203D2000      .byte 'M,'e,'s,58,32,49,32,61,32,0
 0034           L65:
 0034 0A0D00            .byte 10,13,0
