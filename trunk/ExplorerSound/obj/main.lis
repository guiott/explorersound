 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _MesValueSum::
 0000 00000000          .word 0,0
 0004 00000000          .word 0,0
 0008 00000000          .word 0,0
 000C 00000000          .word 0,0
 0010 00000000          .word 0,0
 0014 00000000          .word 0,0
 0018                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0018                   .dbsym e MesValueSum _MesValueSum A[24:3:2]L
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0000           _TmrFlag::
 0000 00                .byte 0
 0001                   .dbsym e TmrFlag _TmrFlag c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0000           _GF::
 0000 F801              .byte 248,1
 0002 7802              .byte 'x,2
 0004 3804              .byte 56,4
 0006 1808              .byte 24,8
 0008 0810              .byte 8,16
 000A                   .dbsym e GF _GF A[10:5:2]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0000           _GainIndx::
 0000 0303              .byte 3,3
 0002 0303              .byte 3,3
 0004 0303              .byte 3,3
 0006                   .dbsym e GainIndx _GainIndx A[6:3:2]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
                        .area text(rom, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;        PortNum -> X+1
 0000           ;       PortIndx -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3804              add SP,4
 0004                   .dbline 38
 0004           ; /* ////////////////////////////////////////////////////////////////////////////
 0004           ; ** Project:      ExplorerSound
 0004           ; ** Author:    Guido Ottaviani-->guido@guiott.com<--
 0004           ; ** Description: 
 0004           ; ** version 0.3   15-10-2010
 0004           ; **
 0004           ; ** Detailed descriptions are on file "Notes.txt" 
 0004           ; **
 0004           ; -------------------------------------------------------------------------------
 0004           ; Copyright 2010 Guido Ottaviani
 0004           ; guido@guiott.com
 0004           ; 
 0004           ;       ExplorerSound is free software: you can redistribute it and/or modify
 0004           ;     it under the terms of the GNU General Public License as published by
 0004           ;     the Free Software Foundation, either version 3 of the License, or
 0004           ;     (at your option) any later version.
 0004           ; 
 0004           ;     ExplorerSound is distributed in the hope that it will be useful,
 0004           ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
 0004           ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 0004           ;     GNU General Public License for more details.
 0004           ; 
 0004           ;     You should have received a copy of the GNU General Public License
 0004           ;     along with ExplorerSound.  If not, see <http://www.gnu.org/licenses/>.
 0004           ; -------------------------------------------------------------------------------      
 0004           ; /////////////////////////////////////////////////////////////////////////////*/
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include <stdlib.h>
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include "prototypes.h"
 0004           ; #include "definitions.h"
 0004           ; #include "delay.h"
 0004           ; 
 0004           ; #pragma interrupt_handler HB_Tmr_ISR_C // int handler for program clock
 0004           ; 
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 40
 0004           ;       BYTE PortNum[3];
 0004           ;       BYTE PortIndx = 0;
 0004 560000            mov [X+0],0
 0007                   .dbline 42
 0007           ;       
 0007           ;       BlocksInit();
 0007 7C097D            xcall _BlocksInit
 000A                   .dbline 44
 000A           ;       
 000A           ;       M8C_EnableGInt ;               // Turn on interrupts 
 000A 7101                      or  F, 01h
 000C           
 000C                   .dbline 46
 000C           ;       
 000C           ;       LED_2_On();
 000C 10                push X
 000D 7C0000            xcall _LED_2_On
 0010 20                pop X
 0011                   .dbline 47
 0011           ;       PortNum[0] = AMUX4_mic_PORT0_1;
 0011 560100            mov [X+1],0
 0014                   .dbline 48
 0014           ;       PortNum[1] = AMUX4_mic_PORT0_3;
 0014 560201            mov [X+2],1
 0017                   .dbline 49
 0017           ;       PortNum[2] = AMUX4_mic_PORT0_7;
 0017 560303            mov [X+3],3
 001A                   .dbline 51
 001A           ;       
 001A           ;       LedTest();
 001A 7C0A66            xcall _LedTest
 001D 8373              xjmp L5
 001F           L4:
 001F                   .dbline 55
 001F           ;       
 001F           ;       // Main loop=============================================================
 001F           ;       while (1)
 001F           ;       {
 001F                   .dbline 56
 001F           ;               if(ADCINCVR_pot_fIsDataAvailable() != 0)// Wait for data to be ready
 001F 10                push X
 0020 7C0000            xcall _ADCINCVR_pot_fIsDataAvailable
 0023 62D000            mov REG[0xd0],>__r0
 0026 20                pop X
 0027 3900              cmp A,0
 0029 A01E              jz L7
 002B                   .dbline 57
 002B           ;         {   
 002B                   .dbline 59
 002B           ;                       // Get Data, Clear data ready flag, in the range 0-1800
 002B           ;                       PotValue = ADCINCVR_pot_iGetDataClearFlag()+900;
 002B 10                push X
 002C 7C0000            xcall _ADCINCVR_pot_iGetDataClearFlag
 002F 62D000            mov REG[0xd0],>__r0
 0032 5A00              mov [__r0],X
 0034 20                pop X
 0035 0184              add A,-124
 0037 62D000            mov REG[0xd0],>_PotValue
 003A 5301              mov [_PotValue+1],A
 003C 62D000            mov REG[0xd0],>__r0
 003F 5100              mov A,[__r0]
 0041 0903              adc A,3
 0043 62D000            mov REG[0xd0],>_PotValue
 0046 5300              mov [_PotValue],A
 0048                   .dbline 60
 0048           ;               }
 0048           L7:
 0048                   .dbline 62
 0048           ;         
 0048           ;               if(ADCINCVR_mes_fIsDataAvailable() != 0)// Wait for data to be ready
 0048 10                push X
 0049 7C0000            xcall _ADCINCVR_mes_fIsDataAvailable
 004C 62D000            mov REG[0xd0],>__r0
 004F 20                pop X
 0050 3900              cmp A,0
 0052 A1DC              jz L9
 0054                   .dbline 63
 0054           ;         {   
 0054                   .dbline 66
 0054           ;                       // Get Data, Clear data ready flag
 0054           ;                       
 0054           ;                       MesValueOut = ADCINCVR_mes_iGetDataClearFlag(); // [1]
 0054 10                push X
 0055 7C0000            xcall _ADCINCVR_mes_iGetDataClearFlag
 0058 62D000            mov REG[0xd0],>__r0
 005B 5A00              mov [__r0],X
 005D 20                pop X
 005E 08                push A
 005F 5100              mov A,[__r0]
 0061 62D000            mov REG[0xd0],>_MesValueOut
 0064 5300              mov [_MesValueOut],A
 0066 18                pop A
 0067 5301              mov [_MesValueOut+1],A
 0069                   .dbline 67
 0069           ;                       MesValue[PortIndx][1] = MesValueOut >> GainIndx[PortIndx][1];                   // [2][4]
 0069 62D000            mov REG[0xd0],>__r0
 006C 5200              mov A,[X+0]
 006E 5300              mov [__r1],A
 0070 550000            mov [__r0],0
 0073 6500              asl [__r1]
 0075 6B00              rlc [__r0]
 0077 060001            add [__r1],<_GainIndx+1
 007A 0E0001            adc [__r0],>_GainIndx+1
 007D 5100              mov A,[__r0]
 007F 60D4              mov REG[0xd4],A
 0081 3E00              mvi A,[__r1]
 0083 5300              mov [__r1],A
 0085 62D000            mov REG[0xd0],>_MesValueOut
 0088 5101              mov A,[_MesValueOut+1]
 008A 08                push A
 008B 5100              mov A,[_MesValueOut]
 008D 62D000            mov REG[0xd0],>__r0
 0090 5300              mov [__r2],A
 0092 18                pop A
 0093 5300              mov [__r3],A
 0095 5100              mov A,[__r1]
 0097 210F              and A,15
 0099 A00B              jz X1
 009B           X2:
 009B 62D000            mov REG[0xd0],>__r0
 009E 6800              asr [__r2]
 00A0 6E00              rrc [__r3]
 00A2 78                dec A
 00A3 BFF7              jnz X2
 00A5           X1:
 00A5 62D000            mov REG[0xd0],>__r0
 00A8 5200              mov A,[X+0]
 00AA 5300              mov [__r1],A
 00AC 550000            mov [__r0],0
 00AF 6500              asl [__r1]
 00B1 6B00              rlc [__r0]
 00B3 6500              asl [__r1]
 00B5 6B00              rlc [__r0]
 00B7 060002            add [__r1],<_MesValue+2
 00BA 0E0002            adc [__r0],>_MesValue+2
 00BD 5100              mov A,[__r0]
 00BF 60D5              mov REG[0xd5],A
 00C1 5100              mov A,[__r2]
 00C3 3F00              mvi [__r1],A
 00C5 5100              mov A,[__r3]
 00C7 3F00              mvi [__r1],A
 00C9                   .dbline 68
 00C9           ;                       MesValue[PortIndx][0] = MesValue[PortIndx][1] >> GainIndx[PortIndx][0]; // [3][4]                       
 00C9 5200              mov A,[X+0]
 00CB 5300              mov [__r1],A
 00CD 550000            mov [__r0],0
 00D0 6500              asl [__r1]
 00D2 6B00              rlc [__r0]
 00D4 6500              asl [__r1]
 00D6 6B00              rlc [__r0]
 00D8 5200              mov A,[X+0]
 00DA 5300              mov [__r3],A
 00DC 550000            mov [__r2],0
 00DF 6500              asl [__r3]
 00E1 6B00              rlc [__r2]
 00E3 060000            add [__r3],<_GainIndx
 00E6 0E0000            adc [__r2],>_GainIndx
 00E9 5100              mov A,[__r2]
 00EB 60D4              mov REG[0xd4],A
 00ED 3E00              mvi A,[__r3]
 00EF 5300              mov [__r3],A
 00F1 5100              mov A,[__r1]
 00F3 0102              add A,<_MesValue+2
 00F5 5300              mov [__r5],A
 00F7 5100              mov A,[__r0]
 00F9 0902              adc A,>_MesValue+2
 00FB 60D4              mov REG[0xd4],A
 00FD 3E00              mvi A,[__r5]
 00FF 5300              mov [__r4],A
 0101 3E00              mvi A,[__r5]
 0103 5300              mov [__r5],A
 0105 5100              mov A,[__r3]
 0107 210F              and A,15
 0109 A00B              jz X3
 010B           X4:
 010B 62D000            mov REG[0xd0],>__r0
 010E 6800              asr [__r4]
 0110 6E00              rrc [__r5]
 0112 78                dec A
 0113 BFF7              jnz X4
 0115           X3:
 0115 62D000            mov REG[0xd0],>__r0
 0118 060000            add [__r1],<_MesValue
 011B 0E0000            adc [__r0],>_MesValue
 011E 5100              mov A,[__r0]
 0120 60D5              mov REG[0xd5],A
 0122 5100              mov A,[__r4]
 0124 3F00              mvi [__r1],A
 0126 5100              mov A,[__r5]
 0128 3F00              mvi [__r1],A
 012A                   .dbline 70
 012A           ;                       
 012A           ;                       AGC(PortIndx);
 012A 5200              mov A,[X+0]
 012C 08                push A
 012D 9269              xcall _AGC
 012F 38FF              add SP,-1
 0131                   .dbline 72
 0131           ;                                               
 0131           ;                       MesValueSum[PortIndx][0]+= MesValue[PortIndx][0]; // Cumulate readings
 0131 62D000            mov REG[0xd0],>__r0
 0134 5200              mov A,[X+0]
 0136 5300              mov [__r1],A
 0138 550000            mov [__r0],0
 013B 6500              asl [__r1]
 013D 6B00              rlc [__r0]
 013F 6500              asl [__r1]
 0141 6B00              rlc [__r0]
 0143 6500              asl [__r1]
 0145 6B00              rlc [__r0]
 0147 060000            add [__r1],<_MesValueSum
 014A 0E0000            adc [__r0],>_MesValueSum
 014D 5200              mov A,[X+0]
 014F 5300              mov [__r3],A
 0151 550000            mov [__r2],0
 0154 6500              asl [__r3]
 0156 6B00              rlc [__r2]
 0158 6500              asl [__r3]
 015A 6B00              rlc [__r2]
 015C 060000            add [__r3],<_MesValue
 015F 0E0000            adc [__r2],>_MesValue
 0162 5100              mov A,[__r2]
 0164 60D4              mov REG[0xd4],A
 0166 3E00              mvi A,[__r3]
 0168 5300              mov [__r2],A
 016A 3E00              mvi A,[__r3]
 016C 5300              mov [__r7],A
 016E 5100              mov A,[__r2]
 0170 5300              mov [__r6],A
 0172 470080            tst [__r6],-128
 0175 A009              jz X5
 0177 5500FF            mov [__r5],-1
 017A 5500FF            mov [__r4],-1
 017D 800A              jmp X6
 017F           X5:
 017F 62D000            mov REG[0xd0],>__r0
 0182 550000            mov [__r5],0
 0185 550000            mov [__r4],0
 0188           X6:
 0188 62D000            mov REG[0xd0],>__r0
 018B 5100              mov A,[__r0]
 018D 60D4              mov REG[0xd4],A
 018F 3E00              mvi A,[__r1]
 0191 5300              mov [__r8],A
 0193 3E00              mvi A,[__r1]
 0195 5300              mov [__r9],A
 0197 3E00              mvi A,[__r1]
 0199 5300              mov [__r10],A
 019B 3E00              mvi A,[__r1]
 019D 160004            sub [__r1],4
 01A0 0200              add A,[__r7]
 01A2 5300              mov [__r7],A
 01A4 5100              mov A,[__r10]
 01A6 0A00              adc A,[__r6]
 01A8 5300              mov [__r6],A
 01AA 5100              mov A,[__r9]
 01AC 0A00              adc A,[__r5]
 01AE 5300              mov [__r5],A
 01B0 5100              mov A,[__r8]
 01B2 0A00              adc A,[__r4]
 01B4 5300              mov [__r4],A
 01B6 5100              mov A,[__r0]
 01B8 60D5              mov REG[0xd5],A
 01BA 5100              mov A,[__r4]
 01BC 3F00              mvi [__r1],A
 01BE 5100              mov A,[__r5]
 01C0 3F00              mvi [__r1],A
 01C2 5100              mov A,[__r6]
 01C4 3F00              mvi [__r1],A
 01C6 5100              mov A,[__r7]
 01C8 3F00              mvi [__r1],A
 01CA                   .dbline 73
 01CA           ;                       MesValueSum[PortIndx][1]++; // count how many readings occurred
 01CA 5200              mov A,[X+0]
 01CC 5300              mov [__r1],A
 01CE 550000            mov [__r0],0
 01D1 6500              asl [__r1]
 01D3 6B00              rlc [__r0]
 01D5 6500              asl [__r1]
 01D7 6B00              rlc [__r0]
 01D9 6500              asl [__r1]
 01DB 6B00              rlc [__r0]
 01DD 060004            add [__r1],<_MesValueSum+4
 01E0 0E0004            adc [__r0],>_MesValueSum+4
 01E3 5100              mov A,[__r0]
 01E5 60D4              mov REG[0xd4],A
 01E7 3E00              mvi A,[__r1]
 01E9 5300              mov [__r4],A
 01EB 3E00              mvi A,[__r1]
 01ED 5300              mov [__r5],A
 01EF 3E00              mvi A,[__r1]
 01F1 5300              mov [__r6],A
 01F3 3E00              mvi A,[__r1]
 01F5 160004            sub [__r1],4
 01F8 5300              mov [__r7],A
 01FA 060001            add [__r7],1
 01FD 0E0000            adc [__r6],0
 0200 0E0000            adc [__r5],0
 0203 0E0000            adc [__r4],0
 0206 5100              mov A,[__r0]
 0208 60D5              mov REG[0xd5],A
 020A 5100              mov A,[__r4]
 020C 3F00              mvi [__r1],A
 020E 5100              mov A,[__r5]
 0210 3F00              mvi [__r1],A
 0212 5100              mov A,[__r6]
 0214 3F00              mvi [__r1],A
 0216 5100              mov A,[__r7]
 0218 3F00              mvi [__r1],A
 021A                   .dbline 75
 021A           ;                                                                                                                 
 021A           ;                       PortIndx++; // next mux port
 021A 7700              inc [X+0]
 021C                   .dbline 76
 021C           ;                       if (PortIndx <3)
 021C 3D0003            cmp [X+0],3
 021F D00F              jnc L15
 0221           X7:
 0221                   .dbline 77
 0221           ;                       {
 0221                   .dbline 78
 0221           ;                               AMUX4_mic_InputSelect(PortIndx);
 0221 10                push X
 0222 5200              mov A,[X+0]
 0224 7C0000            xcall _AMUX4_mic_InputSelect
 0227 20                pop X
 0228                   .dbline 79
 0228           ;                               ADCINCVR_mes_GetSamples(1); // Start ADC to read once more
 0228 10                push X
 0229 5001              mov A,1
 022B 7C0000            xcall _ADCINCVR_mes_GetSamples
 022E 20                pop X
 022F                   .dbline 80
 022F           ;                       }
 022F           L15:
 022F                   .dbline 81
 022F           ;               }
 022F           L9:
 022F                   .dbline 83
 022F           ;               
 022F           ;               if (TmrFlag) // every 10ms
 022F 62D000            mov REG[0xd0],>_TmrFlag
 0232 3C0000            cmp [_TmrFlag],0
 0235 A01C              jz L17
 0237                   .dbline 84
 0237           ;               {
 0237                   .dbline 85
 0237           ;                       TmrFlag = 0;
 0237 550000            mov [_TmrFlag],0
 023A                   .dbline 86
 023A           ;                       PortIndx= 0;
 023A 560000            mov [X+0],0
 023D                   .dbline 88
 023D           ;                               
 023D           ;                       AMUX4_mic_InputSelect(PortIndx);
 023D 10                push X
 023E 5200              mov A,[X+0]
 0240 7C0000            xcall _AMUX4_mic_InputSelect
 0243 20                pop X
 0244                   .dbline 89
 0244           ;                       ADCINCVR_mes_GetSamples(1);    // Start ADC to read 1 sample
 0244 10                push X
 0245 5001              mov A,1
 0247 7C0000            xcall _ADCINCVR_mes_GetSamples
 024A 20                pop X
 024B                   .dbline 90
 024B           ;                       ADCINCVR_pot_GetSamples(1);    // Start ADC to read 1 sample 
 024B 10                push X
 024C 5001              mov A,1
 024E 7C0000            xcall _ADCINCVR_pot_GetSamples
 0251 20                pop X
 0252                   .dbline 91
 0252           ;               }
 0252           L17:
 0252                   .dbline 93
 0252           ;               
 0252           ;               if (Tmr1) // every 100ms
 0252 62D000            mov REG[0xd0],>_Tmr1
 0255 3C0000            cmp [_Tmr1],0
 0258 B006              jnz X8
 025A 3C0100            cmp [_Tmr1+1],0
 025D A133              jz L19
 025F           X8:
 025F                   .dbline 94
 025F           ;               {
 025F                   .dbline 95
 025F           ;                       Tmr1 = 0;
 025F 62D000            mov REG[0xd0],>_Tmr1
 0262 550100            mov [_Tmr1+1],0
 0265 550000            mov [_Tmr1],0
 0268                   .dbline 97
 0268           ;                       // compute average value
 0268           ;                       for (i=0; i<3; i++)
 0268 62D000            mov REG[0xd0],>_i
 026B 550100            mov [_i+1],0
 026E 550000            mov [_i],0
 0271 810E              xjmp L24
 0273           L21:
 0273                   .dbline 98
 0273           ;                       {
 0273                   .dbline 99
 0273           ;                               MesValueM[i]=MesValueSum[i][0]/MesValueSum[i][1];
 0273 62D000            mov REG[0xd0],>_i
 0276 5101              mov A,[_i+1]
 0278 08                push A
 0279 5100              mov A,[_i]
 027B 62D000            mov REG[0xd0],>__r0
 027E 5300              mov [__r0],A
 0280 18                pop A
 0281 5300              mov [__r1],A
 0283 6500              asl [__r1]
 0285 6B00              rlc [__r0]
 0287 6500              asl [__r1]
 0289 6B00              rlc [__r0]
 028B 6500              asl [__r1]
 028D 6B00              rlc [__r0]
 028F 5100              mov A,[__r1]
 0291 0104              add A,<_MesValueSum+4
 0293 5300              mov [__r3],A
 0295 5100              mov A,[__r0]
 0297 0904              adc A,>_MesValueSum+4
 0299 60D4              mov REG[0xd4],A
 029B 3E00              mvi A,[__r3]
 029D 5300              mov [__r4],A
 029F 3E00              mvi A,[__r3]
 02A1 5300              mov [__r5],A
 02A3 3E00              mvi A,[__r3]
 02A5 5300              mov [__r6],A
 02A7 3E00              mvi A,[__r3]
 02A9 5300              mov [__r7],A
 02AB 060000            add [__r1],<_MesValueSum
 02AE 0E0000            adc [__r0],>_MesValueSum
 02B1 5100              mov A,[__r0]
 02B3 60D4              mov REG[0xd4],A
 02B5 3E00              mvi A,[__r1]
 02B7 5300              mov [__r8],A
 02B9 3E00              mvi A,[__r1]
 02BB 5300              mov [__r9],A
 02BD 3E00              mvi A,[__r1]
 02BF 5300              mov [__r10],A
 02C1 3E00              mvi A,[__r1]
 02C3 5300              mov [__r11],A
 02C5 5100              mov A,[__r4]
 02C7 08                push A
 02C8 5100              mov A,[__r5]
 02CA 08                push A
 02CB 5100              mov A,[__r6]
 02CD 08                push A
 02CE 5100              mov A,[__r7]
 02D0 08                push A
 02D1 5100              mov A,[__r8]
 02D3 08                push A
 02D4 5100              mov A,[__r9]
 02D6 08                push A
 02D7 5100              mov A,[__r10]
 02D9 08                push A
 02DA 5100              mov A,[__r11]
 02DC 08                push A
 02DD 7C0000            xcall __divmod_32X32_32
 02E0 18                pop A
 02E1 5300              mov [__r3],A
 02E3 18                pop A
 02E4 5300              mov [__r2],A
 02E6 18                pop A
 02E7 18                pop A
 02E8 38FC              add SP,-4
 02EA 5100              mov A,[__r3]
 02EC 5300              mov [__r1],A
 02EE 5100              mov A,[__r2]
 02F0 5300              mov [__r0],A
 02F2 62D000            mov REG[0xd0],>_i
 02F5 5101              mov A,[_i+1]
 02F7 08                push A
 02F8 5100              mov A,[_i]
 02FA 62D000            mov REG[0xd0],>__r0
 02FD 5300              mov [__r2],A
 02FF 18                pop A
 0300 5300              mov [__r3],A
 0302 6500              asl [__r3]
 0304 6B00              rlc [__r2]
 0306 060000            add [__r3],<_MesValueM
 0309 0E0000            adc [__r2],>_MesValueM
 030C 5100              mov A,[__r2]
 030E 60D5              mov REG[0xd5],A
 0310 5100              mov A,[__r0]
 0312 3F00              mvi [__r3],A
 0314 5100              mov A,[__r1]
 0316 3F00              mvi [__r3],A
 0318                   .dbline 100
 0318           ;                               MesValueSum[i][0]=0;
 0318 62D000            mov REG[0xd0],>_i
 031B 5101              mov A,[_i+1]
 031D 08                push A
 031E 5100              mov A,[_i]
 0320 62D000            mov REG[0xd0],>__r0
 0323 5300              mov [__r0],A
 0325 18                pop A
 0326 5300              mov [__r1],A
 0328 6500              asl [__r1]
 032A 6B00              rlc [__r0]
 032C 6500              asl [__r1]
 032E 6B00              rlc [__r0]
 0330 6500              asl [__r1]
 0332 6B00              rlc [__r0]
 0334 060000            add [__r1],<_MesValueSum
 0337 0E0000            adc [__r0],>_MesValueSum
 033A 5100              mov A,[__r0]
 033C 60D5              mov REG[0xd5],A
 033E 5000              mov A,0
 0340 3F00              mvi [__r1],A
 0342 3F00              mvi [__r1],A
 0344 3F00              mvi [__r1],A
 0346 3F00              mvi [__r1],A
 0348                   .dbline 101
 0348           ;                               MesValueSum[i][1]=0;
 0348 62D000            mov REG[0xd0],>_i
 034B 5101              mov A,[_i+1]
 034D 08                push A
 034E 5100              mov A,[_i]
 0350 62D000            mov REG[0xd0],>__r0
 0353 5300              mov [__r0],A
 0355 18                pop A
 0356 5300              mov [__r1],A
 0358 6500              asl [__r1]
 035A 6B00              rlc [__r0]
 035C 6500              asl [__r1]
 035E 6B00              rlc [__r0]
 0360 6500              asl [__r1]
 0362 6B00              rlc [__r0]
 0364 060004            add [__r1],<_MesValueSum+4
 0367 0E0004            adc [__r0],>_MesValueSum+4
 036A 5100              mov A,[__r0]
 036C 60D5              mov REG[0xd5],A
 036E 5000              mov A,0
 0370 3F00              mvi [__r1],A
 0372 3F00              mvi [__r1],A
 0374 3F00              mvi [__r1],A
 0376 3F00              mvi [__r1],A
 0378                   .dbline 102
 0378           ;                       }
 0378           L22:
 0378                   .dbline 97
 0378 62D000            mov REG[0xd0],>_i
 037B 7601              inc [_i+1]
 037D 0E0000            adc [_i],0
 0380           L24:
 0380                   .dbline 97
 0380 62D000            mov REG[0xd0],>_i
 0383 5101              mov A,[_i+1]
 0385 1103              sub A,3
 0387 5100              mov A,[_i]
 0389 1900              sbb A,0
 038B CEE7              jc L21
 038D           X9:
 038D                   .dbline 103
 038D           ;                       DigitalOut();
 038D 92BB              xcall _DigitalOut
 038F                   .dbline 104
 038F           ;                       UartTxValues();
 038F 934F              xcall _UartTxValues
 0391                   .dbline 105
 0391           ;               }
 0391           L19:
 0391                   .dbline 106
 0391           ;       }// ========================================================== Main loop 
 0391           L5:
 0391                   .dbline 54
 0391 8C8D              xjmp L4
 0393           X0:
 0393                   .dbline -2
 0393           L1:
 0393 38FC              add SP,-4
 0395 20                pop X
 0396                   .dbline 0 ; func end
 0396 8FFF              jmp .
 0398                   .dbsym l PortNum 1 A[3:3]c
 0398                   .dbsym l PortIndx 0 c
 0398                   .dbend
 0398                   .dbfunc e AGC _AGC fV
 0398           ;       PortIndx -> X-4
 0398           _AGC::
 0398                   .dbline -1
 0398 10                push X
 0399 4F                mov X,SP
 039A                   .dbline 112
 039A           ; }
 039A           ; 
 039A           ; // Functions ***************************************************************
 039A           ; 
 039A           ; void AGC(BYTE PortIndx)
 039A           ; {// [5]
 039A                   .dbline 113
 039A           ;            if((MesValue[PortIndx][1] > V_MAX) && (GainIndx[PortIndx][1] > I_MIN))// PGA_out
 039A 62D000            mov REG[0xd0],>__r0
 039D 52FC              mov A,[X-4]
 039F 5300              mov [__r1],A
 03A1 550000            mov [__r0],0
 03A4 6500              asl [__r1]
 03A6 6B00              rlc [__r0]
 03A8 6500              asl [__r1]
 03AA 6B00              rlc [__r0]
 03AC 060002            add [__r1],<_MesValue+2
 03AF 0E0002            adc [__r0],>_MesValue+2
 03B2 5100              mov A,[__r0]
 03B4 60D4              mov REG[0xd4],A
 03B6 3E00              mvi A,[__r1]
 03B8 5300              mov [__r0],A
 03BA 3E00              mvi A,[__r1]
 03BC 5300              mov [__r1],A
 03BE 50BC              mov A,-68
 03C0 1200              sub A,[__r1]
 03C2 5100              mov A,[__r0]
 03C4 3180              xor A,-128
 03C6 5300              mov [__rX],A
 03C8 5082              mov A,(2 ^ 0x80)
 03CA 1A00              sbb A,[__rX]
 03CC D07F              jnc L28
 03CE           X10:
 03CE 62D000            mov REG[0xd0],>__r0
 03D1 52FC              mov A,[X-4]
 03D3 5300              mov [__r1],A
 03D5 550000            mov [__r0],0
 03D8 6500              asl [__r1]
 03DA 6B00              rlc [__r0]
 03DC 060001            add [__r1],<_GainIndx+1
 03DF 0E0001            adc [__r0],>_GainIndx+1
 03E2 5100              mov A,[__r0]
 03E4 60D4              mov REG[0xd4],A
 03E6 3E00              mvi A,[__r1]
 03E8 5300              mov [__r0],A
 03EA 5000              mov A,0
 03EC 3A00              cmp A,[__r0]
 03EE D05D              jnc L28
 03F0           X11:
 03F0                   .dbline 114
 03F0           ;       {
 03F0                   .dbline 115
 03F0           ;               GainIndx[PortIndx][1]--;
 03F0 62D000            mov REG[0xd0],>__r0
 03F3 52FC              mov A,[X-4]
 03F5 5300              mov [__r1],A
 03F7 550000            mov [__r0],0
 03FA 6500              asl [__r1]
 03FC 6B00              rlc [__r0]
 03FE 060001            add [__r1],<_GainIndx+1
 0401 0E0001            adc [__r0],>_GainIndx+1
 0404 5100              mov A,[__r0]
 0406 60D4              mov REG[0xd4],A
 0408 3E00              mvi A,[__r1]
 040A 7A00              dec [__r1]
 040C 5300              mov [__r2],A
 040E 160001            sub [__r2],1
 0411 5100              mov A,[__r0]
 0413 60D5              mov REG[0xd5],A
 0415 5100              mov A,[__r2]
 0417 3F00              mvi [__r1],A
 0419                   .dbline 116
 0419           ;               PGA_out_SetGain(GF[GainIndx[PortIndx][1]][0]); // set gain on PGA
 0419 52FC              mov A,[X-4]
 041B 5300              mov [__r1],A
 041D 550000            mov [__r0],0
 0420 6500              asl [__r1]
 0422 6B00              rlc [__r0]
 0424 060001            add [__r1],<_GainIndx+1
 0427 0E0001            adc [__r0],>_GainIndx+1
 042A 5100              mov A,[__r0]
 042C 60D4              mov REG[0xd4],A
 042E 3E00              mvi A,[__r1]
 0430 5300              mov [__r1],A
 0432 550000            mov [__r0],0
 0435 6500              asl [__r1]
 0437 6B00              rlc [__r0]
 0439 060000            add [__r1],<_GF
 043C 0E0000            adc [__r0],>_GF
 043F 5100              mov A,[__r0]
 0441 60D4              mov REG[0xd4],A
 0443 3E00              mvi A,[__r1]
 0445 10                push X
 0446 7C0000            xcall _PGA_out_SetGain
 0449 20                pop X
 044A                   .dbline 117
 044A           ;       }
 044A 81FD              xjmp L29
 044C           L28:
 044C                   .dbline 118
 044C           ;       else if((MesValue[PortIndx][0] > V_MAX) && (GainIndx[PortIndx][0] > I_MIN))// PGA_pre
 044C 62D000            mov REG[0xd0],>__r0
 044F 52FC              mov A,[X-4]
 0451 5300              mov [__r1],A
 0453 550000            mov [__r0],0
 0456 6500              asl [__r1]
 0458 6B00              rlc [__r0]
 045A 6500              asl [__r1]
 045C 6B00              rlc [__r0]
 045E 060000            add [__r1],<_MesValue
 0461 0E0000            adc [__r0],>_MesValue
 0464 5100              mov A,[__r0]
 0466 60D4              mov REG[0xd4],A
 0468 3E00              mvi A,[__r1]
 046A 5300              mov [__r0],A
 046C 3E00              mvi A,[__r1]
 046E 5300              mov [__r1],A
 0470 50BC              mov A,-68
 0472 1200              sub A,[__r1]
 0474 5100              mov A,[__r0]
 0476 3180              xor A,-128
 0478 5300              mov [__rX],A
 047A 5082              mov A,(2 ^ 0x80)
 047C 1A00              sbb A,[__rX]
 047E D07F              jnc L34
 0480           X12:
 0480 62D000            mov REG[0xd0],>__r0
 0483 52FC              mov A,[X-4]
 0485 5300              mov [__r1],A
 0487 550000            mov [__r0],0
 048A 6500              asl [__r1]
 048C 6B00              rlc [__r0]
 048E 060000            add [__r1],<_GainIndx
 0491 0E0000            adc [__r0],>_GainIndx
 0494 5100              mov A,[__r0]
 0496 60D4              mov REG[0xd4],A
 0498 3E00              mvi A,[__r1]
 049A 5300              mov [__r0],A
 049C 5000              mov A,0
 049E 3A00              cmp A,[__r0]
 04A0 D05D              jnc L34
 04A2           X13:
 04A2                   .dbline 119
 04A2           ;       {
 04A2                   .dbline 120
 04A2           ;               GainIndx[PortIndx][0]--;
 04A2 62D000            mov REG[0xd0],>__r0
 04A5 52FC              mov A,[X-4]
 04A7 5300              mov [__r1],A
 04A9 550000            mov [__r0],0
 04AC 6500              asl [__r1]
 04AE 6B00              rlc [__r0]
 04B0 060000            add [__r1],<_GainIndx
 04B3 0E0000            adc [__r0],>_GainIndx
 04B6 5100              mov A,[__r0]
 04B8 60D4              mov REG[0xd4],A
 04BA 3E00              mvi A,[__r1]
 04BC 7A00              dec [__r1]
 04BE 5300              mov [__r2],A
 04C0 160001            sub [__r2],1
 04C3 5100              mov A,[__r0]
 04C5 60D5              mov REG[0xd5],A
 04C7 5100              mov A,[__r2]
 04C9 3F00              mvi [__r1],A
 04CB                   .dbline 121
 04CB           ;               PGA_pre_SetGain(GF[GainIndx[PortIndx][0]][0]); // set gain on PGA
 04CB 52FC              mov A,[X-4]
 04CD 5300              mov [__r1],A
 04CF 550000            mov [__r0],0
 04D2 6500              asl [__r1]
 04D4 6B00              rlc [__r0]
 04D6 060000            add [__r1],<_GainIndx
 04D9 0E0000            adc [__r0],>_GainIndx
 04DC 5100              mov A,[__r0]
 04DE 60D4              mov REG[0xd4],A
 04E0 3E00              mvi A,[__r1]
 04E2 5300              mov [__r1],A
 04E4 550000            mov [__r0],0
 04E7 6500              asl [__r1]
 04E9 6B00              rlc [__r0]
 04EB 060000            add [__r1],<_GF
 04EE 0E0000            adc [__r0],>_GF
 04F1 5100              mov A,[__r0]
 04F3 60D4              mov REG[0xd4],A
 04F5 3E00              mvi A,[__r1]
 04F7 10                push X
 04F8 7C0000            xcall _PGA_pre_SetGain
 04FB 20                pop X
 04FC                   .dbline 122
 04FC           ;       }
 04FC 814B              xjmp L35
 04FE           L34:
 04FE                   .dbline 123
 04FE           ;       else if((MesValue[PortIndx][1] < V_MIN) && (GainIndx[PortIndx][1] < I_MAX))// PGA_out
 04FE 62D000            mov REG[0xd0],>__r0
 0501 52FC              mov A,[X-4]
 0503 5300              mov [__r1],A
 0505 550000            mov [__r0],0
 0508 6500              asl [__r1]
 050A 6B00              rlc [__r0]
 050C 6500              asl [__r1]
 050E 6B00              rlc [__r0]
 0510 060002            add [__r1],<_MesValue+2
 0513 0E0002            adc [__r0],>_MesValue+2
 0516 5100              mov A,[__r0]
 0518 60D4              mov REG[0xd4],A
 051A 3E00              mvi A,[__r1]
 051C 5300              mov [__r0],A
 051E 3E00              mvi A,[__r1]
 0520 1164              sub A,100
 0522 5100              mov A,[__r0]
 0524 3180              xor A,-128
 0526 1980              sbb A,(0 ^ 0x80)
 0528 D07B              jnc L36
 052A           X14:
 052A 62D000            mov REG[0xd0],>__r0
 052D 52FC              mov A,[X-4]
 052F 5300              mov [__r1],A
 0531 550000            mov [__r0],0
 0534 6500              asl [__r1]
 0536 6B00              rlc [__r0]
 0538 060001            add [__r1],<_GainIndx+1
 053B 0E0001            adc [__r0],>_GainIndx+1
 053E 5100              mov A,[__r0]
 0540 60D4              mov REG[0xd4],A
 0542 3E00              mvi A,[__r1]
 0544 3904              cmp A,4
 0546 D05D              jnc L36
 0548           X15:
 0548                   .dbline 124
 0548           ;       {
 0548                   .dbline 125
 0548           ;               GainIndx[PortIndx][1]++;
 0548 62D000            mov REG[0xd0],>__r0
 054B 52FC              mov A,[X-4]
 054D 5300              mov [__r1],A
 054F 550000            mov [__r0],0
 0552 6500              asl [__r1]
 0554 6B00              rlc [__r0]
 0556 060001            add [__r1],<_GainIndx+1
 0559 0E0001            adc [__r0],>_GainIndx+1
 055C 5100              mov A,[__r0]
 055E 60D4              mov REG[0xd4],A
 0560 3E00              mvi A,[__r1]
 0562 7A00              dec [__r1]
 0564 5300              mov [__r2],A
 0566 060001            add [__r2],1
 0569 5100              mov A,[__r0]
 056B 60D5              mov REG[0xd5],A
 056D 5100              mov A,[__r2]
 056F 3F00              mvi [__r1],A
 0571                   .dbline 126
 0571           ;               PGA_out_SetGain(GF[GainIndx[PortIndx][1]][0]); // set gain on PGA
 0571 52FC              mov A,[X-4]
 0573 5300              mov [__r1],A
 0575 550000            mov [__r0],0
 0578 6500              asl [__r1]
 057A 6B00              rlc [__r0]
 057C 060001            add [__r1],<_GainIndx+1
 057F 0E0001            adc [__r0],>_GainIndx+1
 0582 5100              mov A,[__r0]
 0584 60D4              mov REG[0xd4],A
 0586 3E00              mvi A,[__r1]
 0588 5300              mov [__r1],A
 058A 550000            mov [__r0],0
 058D 6500              asl [__r1]
 058F 6B00              rlc [__r0]
 0591 060000            add [__r1],<_GF
 0594 0E0000            adc [__r0],>_GF
 0597 5100              mov A,[__r0]
 0599 60D4              mov REG[0xd4],A
 059B 3E00              mvi A,[__r1]
 059D 10                push X
 059E 7C0000            xcall _PGA_out_SetGain
 05A1 20                pop X
 05A2                   .dbline 127
 05A2           ;       }
 05A2 80A5              xjmp L37
 05A4           L36:
 05A4                   .dbline 128
 05A4           ;       else if((MesValue[PortIndx][0] < V_MIN) && (GainIndx[PortIndx][0] < I_MAX))// PGA_pre
 05A4 62D000            mov REG[0xd0],>__r0
 05A7 52FC              mov A,[X-4]
 05A9 5300              mov [__r1],A
 05AB 550000            mov [__r0],0
 05AE 6500              asl [__r1]
 05B0 6B00              rlc [__r0]
 05B2 6500              asl [__r1]
 05B4 6B00              rlc [__r0]
 05B6 060000            add [__r1],<_MesValue
 05B9 0E0000            adc [__r0],>_MesValue
 05BC 5100              mov A,[__r0]
 05BE 60D4              mov REG[0xd4],A
 05C0 3E00              mvi A,[__r1]
 05C2 5300              mov [__r0],A
 05C4 3E00              mvi A,[__r1]
 05C6 1164              sub A,100
 05C8 5100              mov A,[__r0]
 05CA 3180              xor A,-128
 05CC 1980              sbb A,(0 ^ 0x80)
 05CE D079              jnc L42
 05D0           X16:
 05D0 62D000            mov REG[0xd0],>__r0
 05D3 52FC              mov A,[X-4]
 05D5 5300              mov [__r1],A
 05D7 550000            mov [__r0],0
 05DA 6500              asl [__r1]
 05DC 6B00              rlc [__r0]
 05DE 060000            add [__r1],<_GainIndx
 05E1 0E0000            adc [__r0],>_GainIndx
 05E4 5100              mov A,[__r0]
 05E6 60D4              mov REG[0xd4],A
 05E8 3E00              mvi A,[__r1]
 05EA 3904              cmp A,4
 05EC D05B              jnc L42
 05EE           X17:
 05EE                   .dbline 129
 05EE           ;       {
 05EE                   .dbline 130
 05EE           ;               GainIndx[PortIndx][0]++;
 05EE 62D000            mov REG[0xd0],>__r0
 05F1 52FC              mov A,[X-4]
 05F3 5300              mov [__r1],A
 05F5 550000            mov [__r0],0
 05F8 6500              asl [__r1]
 05FA 6B00              rlc [__r0]
 05FC 060000            add [__r1],<_GainIndx
 05FF 0E0000            adc [__r0],>_GainIndx
 0602 5100              mov A,[__r0]
 0604 60D4              mov REG[0xd4],A
 0606 3E00              mvi A,[__r1]
 0608 7A00              dec [__r1]
 060A 5300              mov [__r2],A
 060C 060001            add [__r2],1
 060F 5100              mov A,[__r0]
 0611 60D5              mov REG[0xd5],A
 0613 5100              mov A,[__r2]
 0615 3F00              mvi [__r1],A
 0617                   .dbline 131
 0617           ;               PGA_pre_SetGain(GF[GainIndx[PortIndx][0]][0]); // set gain on PGA
 0617 52FC              mov A,[X-4]
 0619 5300              mov [__r1],A
 061B 550000            mov [__r0],0
 061E 6500              asl [__r1]
 0620 6B00              rlc [__r0]
 0622 060000            add [__r1],<_GainIndx
 0625 0E0000            adc [__r0],>_GainIndx
 0628 5100              mov A,[__r0]
 062A 60D4              mov REG[0xd4],A
 062C 3E00              mvi A,[__r1]
 062E 5300              mov [__r1],A
 0630 550000            mov [__r0],0
 0633 6500              asl [__r1]
 0635 6B00              rlc [__r0]
 0637 060000            add [__r1],<_GF
 063A 0E0000            adc [__r0],>_GF
 063D 5100              mov A,[__r0]
 063F 60D4              mov REG[0xd4],A
 0641 3E00              mvi A,[__r1]
 0643 10                push X
 0644 7C0000            xcall _PGA_pre_SetGain
 0647 20                pop X
 0648                   .dbline 132
 0648           ;       }       
 0648           L42:
 0648           L37:
 0648           L35:
 0648           L29:
 0648                   .dbline -2
 0648           L27:
 0648 20                pop X
 0649                   .dbline 0 ; func end
 0649 7F                ret
 064A                   .dbsym l PortIndx -4 c
 064A                   .dbend
 064A                   .dbfunc e DigitalOut _DigitalOut fV
 064A           _DigitalOut::
 064A                   .dbline -1
 064A                   .dbline 136
 064A           ; }
 064A           ; 
 064A           ; void DigitalOut(void)
 064A           ; {// Controls the outputs according to pot setting point
 064A                   .dbline 137
 064A           ;       DIGITAL_OUT_Off();
 064A 10                push X
 064B 7C0000            xcall _DIGITAL_OUT_Off
 064E 20                pop X
 064F                   .dbline 138
 064F           ;       if (MesValueM[0]>PotValue)
 064F 62D000            mov REG[0xd0],>_PotValue
 0652 5101              mov A,[_PotValue+1]
 0654 62D000            mov REG[0xd0],>_MesValueM
 0657 1201              sub A,[_MesValueM+1]
 0659 5100              mov A,[_MesValueM]
 065B 3180              xor A,-128
 065D 62D000            mov REG[0xd0],>__r0
 0660 5300              mov [__rX],A
 0662 62D000            mov REG[0xd0],>_PotValue
 0665 5100              mov A,[_PotValue]
 0667 3180              xor A,-128
 0669 62D000            mov REG[0xd0],>__r0
 066C 1A00              sbb A,[__rX]
 066E D00B              jnc L45
 0670           X18:
 0670                   .dbline 139
 0670           ;       {
 0670                   .dbline 140
 0670           ;               DIGITAL_OUT_On();
 0670 10                push X
 0671 7C0000            xcall _DIGITAL_OUT_On
 0674                   .dbline 141
 0674           ;               LED_1_On();
 0674 7C0000            xcall _LED_1_On
 0677 20                pop X
 0678                   .dbline 142
 0678           ;       }
 0678 8006              xjmp L46
 067A           L45:
 067A                   .dbline 144
 067A           ;       else
 067A           ;       {
 067A                   .dbline 145
 067A           ;               LED_1_Off();
 067A 10                push X
 067B 7C0000            xcall _LED_1_Off
 067E 20                pop X
 067F                   .dbline 146
 067F           ;       }
 067F           L46:
 067F                   .dbline 148
 067F           ;               
 067F           ;       if (MesValueM[1]>PotValue)
 067F 62D000            mov REG[0xd0],>_PotValue
 0682 5101              mov A,[_PotValue+1]
 0684 62D000            mov REG[0xd0],>_MesValueM
 0687 1203              sub A,[_MesValueM+2+1]
 0689 5102              mov A,[_MesValueM+2]
 068B 3180              xor A,-128
 068D 62D000            mov REG[0xd0],>__r0
 0690 5300              mov [__rX],A
 0692 62D000            mov REG[0xd0],>_PotValue
 0695 5100              mov A,[_PotValue]
 0697 3180              xor A,-128
 0699 62D000            mov REG[0xd0],>__r0
 069C 1A00              sbb A,[__rX]
 069E D00B              jnc L47
 06A0           X19:
 06A0                   .dbline 149
 06A0           ;       {
 06A0                   .dbline 150
 06A0           ;               DIGITAL_OUT_On();
 06A0 10                push X
 06A1 7C0000            xcall _DIGITAL_OUT_On
 06A4                   .dbline 151
 06A4           ;               LED_2_On();
 06A4 7C0000            xcall _LED_2_On
 06A7 20                pop X
 06A8                   .dbline 152
 06A8           ;       }
 06A8 8006              xjmp L48
 06AA           L47:
 06AA                   .dbline 154
 06AA           ;       else
 06AA           ;       {
 06AA                   .dbline 155
 06AA           ;               LED_2_Off();
 06AA 10                push X
 06AB 7C0000            xcall _LED_2_Off
 06AE 20                pop X
 06AF                   .dbline 156
 06AF           ;       }
 06AF           L48:
 06AF                   .dbline 158
 06AF           ;       
 06AF           ;       if (MesValueM[2]>PotValue)
 06AF 62D000            mov REG[0xd0],>_PotValue
 06B2 5101              mov A,[_PotValue+1]
 06B4 62D000            mov REG[0xd0],>_MesValueM
 06B7 1205              sub A,[_MesValueM+4+1]
 06B9 5104              mov A,[_MesValueM+4]
 06BB 3180              xor A,-128
 06BD 62D000            mov REG[0xd0],>__r0
 06C0 5300              mov [__rX],A
 06C2 62D000            mov REG[0xd0],>_PotValue
 06C5 5100              mov A,[_PotValue]
 06C7 3180              xor A,-128
 06C9 62D000            mov REG[0xd0],>__r0
 06CC 1A00              sbb A,[__rX]
 06CE D00B              jnc L50
 06D0           X20:
 06D0                   .dbline 159
 06D0           ;       {
 06D0                   .dbline 160
 06D0           ;               DIGITAL_OUT_On();
 06D0 10                push X
 06D1 7C0000            xcall _DIGITAL_OUT_On
 06D4                   .dbline 161
 06D4           ;               LED_3_On();
 06D4 7C0000            xcall _LED_3_On
 06D7 20                pop X
 06D8                   .dbline 162
 06D8           ;       }
 06D8 8006              xjmp L51
 06DA           L50:
 06DA                   .dbline 164
 06DA           ;       else
 06DA           ;       {
 06DA                   .dbline 165
 06DA           ;               LED_3_Off();
 06DA 10                push X
 06DB 7C0000            xcall _LED_3_Off
 06DE 20                pop X
 06DF                   .dbline 166
 06DF           ;       }
 06DF           L51:
 06DF                   .dbline -2
 06DF           L44:
 06DF                   .dbline 0 ; func end
 06DF 7F                ret
 06E0                   .dbend
 06E0                   .dbfunc e UartTxValues _UartTxValues fV
 06E0           _UartTxValues::
 06E0                   .dbline -1
 06E0                   .dbline 170
 06E0           ; }
 06E0           ; 
 06E0           ; void UartTxValues(void)
 06E0           ; {/* Transmit via UART the analog values read from various inputs.
 06E0                   .dbline 175
 06E0           ;       Usefull for debugging purposes, it could be converted in a
 06E0           ;       command string using the same protocol used for dsNav if
 06E0           ;       needed to output sound level values via serial comm
 06E0           ; */
 06E0           ;       TX8_CPutString("\n\rPot Value = ");
 06E0 10                push X
 06E1 504A              mov A,>L54
 06E3 08                push A
 06E4 504A              mov A,<L54
 06E6 5C                mov X,A
 06E7 18                pop A
 06E8 7C0000            xcall _TX8_CPutString
 06EB 20                pop X
 06EC                   .dbline 176
 06EC           ;       itoa(str, PotValue,10);
 06EC 5000              mov A,0
 06EE 08                push A
 06EF 500A              mov A,10
 06F1 08                push A
 06F2 62D000            mov REG[0xd0],>_PotValue
 06F5 5100              mov A,[_PotValue]
 06F7 08                push A
 06F8 5101              mov A,[_PotValue+1]
 06FA 08                push A
 06FB 5000              mov A,>_str
 06FD 08                push A
 06FE 5000              mov A,<_str
 0700 08                push A
 0701 7C0000            xcall _itoa
 0704 38FA              add SP,-6
 0706                   .dbline 177
 0706           ;       TX8_PutString(str);
 0706 10                push X
 0707 5000              mov A,>_str
 0709 08                push A
 070A 5000              mov A,<_str
 070C 5C                mov X,A
 070D 18                pop A
 070E 7C0000            xcall _TX8_PutString
 0711 20                pop X
 0712                   .dbline 178
 0712           ;       TX8_CPutString("    Mes Value: 1 = ");
 0712 10                push X
 0713 5036              mov A,>L55
 0715 08                push A
 0716 5036              mov A,<L55
 0718 5C                mov X,A
 0719 18                pop A
 071A 7C0000            xcall _TX8_CPutString
 071D 20                pop X
 071E                   .dbline 179
 071E           ;       itoa(str, MesValueM[0],10);
 071E 5000              mov A,0
 0720 08                push A
 0721 500A              mov A,10
 0723 08                push A
 0724 62D000            mov REG[0xd0],>_MesValueM
 0727 5100              mov A,[_MesValueM]
 0729 08                push A
 072A 5101              mov A,[_MesValueM+1]
 072C 08                push A
 072D 5000              mov A,>_str
 072F 08                push A
 0730 5000              mov A,<_str
 0732 08                push A
 0733 7C0000            xcall _itoa
 0736 38FA              add SP,-6
 0738                   .dbline 180
 0738           ;       TX8_PutString(str);
 0738 10                push X
 0739 5000              mov A,>_str
 073B 08                push A
 073C 5000              mov A,<_str
 073E 5C                mov X,A
 073F 18                pop A
 0740 7C0000            xcall _TX8_PutString
 0743 20                pop X
 0744                   .dbline 181
 0744           ;       TX8_CPutString("  -  2 = ");
 0744 10                push X
 0745 502C              mov A,>L56
 0747 08                push A
 0748 502C              mov A,<L56
 074A 5C                mov X,A
 074B 18                pop A
 074C 7C0000            xcall _TX8_CPutString
 074F 20                pop X
 0750                   .dbline 182
 0750           ;       itoa(str, MesValueM[1],10);
 0750 5000              mov A,0
 0752 08                push A
 0753 500A              mov A,10
 0755 08                push A
 0756 62D000            mov REG[0xd0],>_MesValueM
 0759 5102              mov A,[_MesValueM+2]
 075B 08                push A
 075C 5103              mov A,[_MesValueM+2+1]
 075E 08                push A
 075F 5000              mov A,>_str
 0761 08                push A
 0762 5000              mov A,<_str
 0764 08                push A
 0765 7C0000            xcall _itoa
 0768 38FA              add SP,-6
 076A                   .dbline 183
 076A           ;       TX8_PutString(str);
 076A 10                push X
 076B 5000              mov A,>_str
 076D 08                push A
 076E 5000              mov A,<_str
 0770 5C                mov X,A
 0771 18                pop A
 0772 7C0000            xcall _TX8_PutString
 0775 20                pop X
 0776                   .dbline 184
 0776           ;       TX8_CPutString("  -  3 = ");
 0776 10                push X
 0777 5022              mov A,>L58
 0779 08                push A
 077A 5022              mov A,<L58
 077C 5C                mov X,A
 077D 18                pop A
 077E 7C0000            xcall _TX8_CPutString
 0781 20                pop X
 0782                   .dbline 185
 0782           ;       itoa(str, MesValueM[2],10);
 0782 5000              mov A,0
 0784 08                push A
 0785 500A              mov A,10
 0787 08                push A
 0788 62D000            mov REG[0xd0],>_MesValueM
 078B 5104              mov A,[_MesValueM+4]
 078D 08                push A
 078E 5105              mov A,[_MesValueM+4+1]
 0790 08                push A
 0791 5000              mov A,>_str
 0793 08                push A
 0794 5000              mov A,<_str
 0796 08                push A
 0797 7C0000            xcall _itoa
 079A 38FA              add SP,-6
 079C                   .dbline 186
 079C           ;       TX8_PutString(str);
 079C 10                push X
 079D 5000              mov A,>_str
 079F 08                push A
 07A0 5000              mov A,<_str
 07A2 5C                mov X,A
 07A3 18                pop A
 07A4 7C0000            xcall _TX8_PutString
 07A7 20                pop X
 07A8                   .dbline 187
 07A8           ;       TX8_CPutString("  Gain Pre: 1 = ");
 07A8 10                push X
 07A9 5011              mov A,>L60
 07AB 08                push A
 07AC 5011              mov A,<L60
 07AE 5C                mov X,A
 07AF 18                pop A
 07B0 7C0000            xcall _TX8_CPutString
 07B3 20                pop X
 07B4                   .dbline 188
 07B4           ;       itoa(str, GF[GainIndx[0][0]][1], 10);
 07B4 5000              mov A,0
 07B6 08                push A
 07B7 500A              mov A,10
 07B9 08                push A
 07BA 62D000            mov REG[0xd0],>_GainIndx
 07BD 5100              mov A,[_GainIndx]
 07BF 62D000            mov REG[0xd0],>__r0
 07C2 5300              mov [__r1],A
 07C4 550000            mov [__r0],0
 07C7 6500              asl [__r1]
 07C9 6B00              rlc [__r0]
 07CB 060001            add [__r1],<_GF+1
 07CE 0E0001            adc [__r0],>_GF+1
 07D1 5100              mov A,[__r0]
 07D3 60D4              mov REG[0xd4],A
 07D5 3E00              mvi A,[__r1]
 07D7 5300              mov [__r1],A
 07D9 5000              mov A,0
 07DB 08                push A
 07DC 5100              mov A,[__r1]
 07DE 08                push A
 07DF 5000              mov A,>_str
 07E1 08                push A
 07E2 5000              mov A,<_str
 07E4 08                push A
 07E5 7C0000            xcall _itoa
 07E8 38FA              add SP,-6
 07EA                   .dbline 189
 07EA           ;       TX8_PutString(str);
 07EA 10                push X
 07EB 5000              mov A,>_str
 07ED 08                push A
 07EE 5000              mov A,<_str
 07F0 5C                mov X,A
 07F1 18                pop A
 07F2 7C0000            xcall _TX8_PutString
 07F5 20                pop X
 07F6                   .dbline 190
 07F6           ;       TX8_CPutString("  -  2 = ");
 07F6 10                push X
 07F7 502C              mov A,>L56
 07F9 08                push A
 07FA 502C              mov A,<L56
 07FC 5C                mov X,A
 07FD 18                pop A
 07FE 7C0000            xcall _TX8_CPutString
 0801 20                pop X
 0802                   .dbline 191
 0802           ;       itoa(str, GF[GainIndx[1][0]][1], 10);
 0802 5000              mov A,0
 0804 08                push A
 0805 500A              mov A,10
 0807 08                push A
 0808 62D000            mov REG[0xd0],>_GainIndx
 080B 5102              mov A,[_GainIndx+2]
 080D 62D000            mov REG[0xd0],>__r0
 0810 5300              mov [__r1],A
 0812 550000            mov [__r0],0
 0815 6500              asl [__r1]
 0817 6B00              rlc [__r0]
 0819 060001            add [__r1],<_GF+1
 081C 0E0001            adc [__r0],>_GF+1
 081F 5100              mov A,[__r0]
 0821 60D4              mov REG[0xd4],A
 0823 3E00              mvi A,[__r1]
 0825 5300              mov [__r1],A
 0827 5000              mov A,0
 0829 08                push A
 082A 5100              mov A,[__r1]
 082C 08                push A
 082D 5000              mov A,>_str
 082F 08                push A
 0830 5000              mov A,<_str
 0832 08                push A
 0833 7C0000            xcall _itoa
 0836 38FA              add SP,-6
 0838                   .dbline 192
 0838           ;       TX8_PutString(str);     
 0838 10                push X
 0839 5000              mov A,>_str
 083B 08                push A
 083C 5000              mov A,<_str
 083E 5C                mov X,A
 083F 18                pop A
 0840 7C0000            xcall _TX8_PutString
 0843 20                pop X
 0844                   .dbline 193
 0844           ;       TX8_CPutString("  -  3 = ");
 0844 10                push X
 0845 5022              mov A,>L58
 0847 08                push A
 0848 5022              mov A,<L58
 084A 5C                mov X,A
 084B 18                pop A
 084C 7C0000            xcall _TX8_CPutString
 084F 20                pop X
 0850                   .dbline 194
 0850           ;       itoa(str, GF[GainIndx[2][0]][1], 10);
 0850 5000              mov A,0
 0852 08                push A
 0853 500A              mov A,10
 0855 08                push A
 0856 62D000            mov REG[0xd0],>_GainIndx
 0859 5104              mov A,[_GainIndx+4]
 085B 62D000            mov REG[0xd0],>__r0
 085E 5300              mov [__r1],A
 0860 550000            mov [__r0],0
 0863 6500              asl [__r1]
 0865 6B00              rlc [__r0]
 0867 060001            add [__r1],<_GF+1
 086A 0E0001            adc [__r0],>_GF+1
 086D 5100              mov A,[__r0]
 086F 60D4              mov REG[0xd4],A
 0871 3E00              mvi A,[__r1]
 0873 5300              mov [__r1],A
 0875 5000              mov A,0
 0877 08                push A
 0878 5100              mov A,[__r1]
 087A 08                push A
 087B 5000              mov A,>_str
 087D 08                push A
 087E 5000              mov A,<_str
 0880 08                push A
 0881 7C0000            xcall _itoa
 0884 38FA              add SP,-6
 0886                   .dbline 195
 0886           ;       TX8_PutString(str);     
 0886 10                push X
 0887 5000              mov A,>_str
 0889 08                push A
 088A 5000              mov A,<_str
 088C 5C                mov X,A
 088D 18                pop A
 088E 7C0000            xcall _TX8_PutString
 0891 20                pop X
 0892                   .dbline 196
 0892           ;       TX8_CPutString("  Gain Out: 1 = ");
 0892 10                push X
 0893 5000              mov A,>L66
 0895 08                push A
 0896 5000              mov A,<L66
 0898 5C                mov X,A
 0899 18                pop A
 089A 7C0000            xcall _TX8_CPutString
 089D 20                pop X
 089E                   .dbline 197
 089E           ;       itoa(str, GF[GainIndx[0][1]][1], 10);
 089E 5000              mov A,0
 08A0 08                push A
 08A1 500A              mov A,10
 08A3 08                push A
 08A4 62D000            mov REG[0xd0],>_GainIndx
 08A7 5101              mov A,[_GainIndx+1]
 08A9 62D000            mov REG[0xd0],>__r0
 08AC 5300              mov [__r1],A
 08AE 550000            mov [__r0],0
 08B1 6500              asl [__r1]
 08B3 6B00              rlc [__r0]
 08B5 060001            add [__r1],<_GF+1
 08B8 0E0001            adc [__r0],>_GF+1
 08BB 5100              mov A,[__r0]
 08BD 60D4              mov REG[0xd4],A
 08BF 3E00              mvi A,[__r1]
 08C1 5300              mov [__r1],A
 08C3 5000              mov A,0
 08C5 08                push A
 08C6 5100              mov A,[__r1]
 08C8 08                push A
 08C9 5000              mov A,>_str
 08CB 08                push A
 08CC 5000              mov A,<_str
 08CE 08                push A
 08CF 7C0000            xcall _itoa
 08D2 38FA              add SP,-6
 08D4                   .dbline 198
 08D4           ;       TX8_PutString(str);
 08D4 10                push X
 08D5 5000              mov A,>_str
 08D7 08                push A
 08D8 5000              mov A,<_str
 08DA 5C                mov X,A
 08DB 18                pop A
 08DC 7C0000            xcall _TX8_PutString
 08DF 20                pop X
 08E0                   .dbline 199
 08E0           ;       TX8_CPutString("  -  2 = ");
 08E0 10                push X
 08E1 502C              mov A,>L56
 08E3 08                push A
 08E4 502C              mov A,<L56
 08E6 5C                mov X,A
 08E7 18                pop A
 08E8 7C0000            xcall _TX8_CPutString
 08EB 20                pop X
 08EC                   .dbline 200
 08EC           ;       itoa(str, GF[GainIndx[1][1]][1], 10);
 08EC 5000              mov A,0
 08EE 08                push A
 08EF 500A              mov A,10
 08F1 08                push A
 08F2 62D000            mov REG[0xd0],>_GainIndx
 08F5 5103              mov A,[_GainIndx+2+1]
 08F7 62D000            mov REG[0xd0],>__r0
 08FA 5300              mov [__r1],A
 08FC 550000            mov [__r0],0
 08FF 6500              asl [__r1]
 0901 6B00              rlc [__r0]
 0903 060001            add [__r1],<_GF+1
 0906 0E0001            adc [__r0],>_GF+1
 0909 5100              mov A,[__r0]
 090B 60D4              mov REG[0xd4],A
 090D 3E00              mvi A,[__r1]
 090F 5300              mov [__r1],A
 0911 5000              mov A,0
 0913 08                push A
 0914 5100              mov A,[__r1]
 0916 08                push A
 0917 5000              mov A,>_str
 0919 08                push A
 091A 5000              mov A,<_str
 091C 08                push A
 091D 7C0000            xcall _itoa
 0920 38FA              add SP,-6
 0922                   .dbline 201
 0922           ;       TX8_PutString(str);     
 0922 10                push X
 0923 5000              mov A,>_str
 0925 08                push A
 0926 5000              mov A,<_str
 0928 5C                mov X,A
 0929 18                pop A
 092A 7C0000            xcall _TX8_PutString
 092D 20                pop X
 092E                   .dbline 202
 092E           ;       TX8_CPutString("  -  3 = ");
 092E 10                push X
 092F 5022              mov A,>L58
 0931 08                push A
 0932 5022              mov A,<L58
 0934 5C                mov X,A
 0935 18                pop A
 0936 7C0000            xcall _TX8_CPutString
 0939 20                pop X
 093A                   .dbline 203
 093A           ;       itoa(str, GF[GainIndx[2][1]][1], 10);
 093A 5000              mov A,0
 093C 08                push A
 093D 500A              mov A,10
 093F 08                push A
 0940 62D000            mov REG[0xd0],>_GainIndx
 0943 5105              mov A,[_GainIndx+4+1]
 0945 62D000            mov REG[0xd0],>__r0
 0948 5300              mov [__r1],A
 094A 550000            mov [__r0],0
 094D 6500              asl [__r1]
 094F 6B00              rlc [__r0]
 0951 060001            add [__r1],<_GF+1
 0954 0E0001            adc [__r0],>_GF+1
 0957 5100              mov A,[__r0]
 0959 60D4              mov REG[0xd4],A
 095B 3E00              mvi A,[__r1]
 095D 5300              mov [__r1],A
 095F 5000              mov A,0
 0961 08                push A
 0962 5100              mov A,[__r1]
 0964 08                push A
 0965 5000              mov A,>_str
 0967 08                push A
 0968 5000              mov A,<_str
 096A 08                push A
 096B 7C0000            xcall _itoa
 096E 38FA              add SP,-6
 0970                   .dbline 204
 0970           ;       TX8_PutString(str);     
 0970 10                push X
 0971 5000              mov A,>_str
 0973 08                push A
 0974 5000              mov A,<_str
 0976 5C                mov X,A
 0977 18                pop A
 0978 7C0000            xcall _TX8_PutString
 097B 20                pop X
 097C                   .dbline -2
 097C           L53:
 097C                   .dbline 0 ; func end
 097C 7F                ret
 097D                   .dbend
 097D                   .dbfunc e BlocksInit _BlocksInit fV
 097D           _BlocksInit::
 097D                   .dbline -1
 097D                   .dbline 208
 097D           ; }
 097D           ;       
 097D           ; void BlocksInit(void)
 097D           ; {// Analog and digital blocks inizialization
 097D                   .dbline 209
 097D           ;       ADCINCVR_pot_Start(ADCINCVR_pot_HIGHPOWER);     
 097D 10                push X
 097E 5003              mov A,3
 0980 7C0000            xcall _ADCINCVR_pot_Start
 0983 20                pop X
 0984                   .dbline 210
 0984           ;       ADCINCVR_mes_Start(ADCINCVR_mes_HIGHPOWER);
 0984 10                push X
 0985 5003              mov A,3
 0987 7C0000            xcall _ADCINCVR_mes_Start
 098A                   .dbline 211
 098A           ;       AMUX4_mic_Start();
 098A 7C0000            xcall _AMUX4_mic_Start
 098D 20                pop X
 098E                   .dbline 212
 098E           ;       BPF4_4KHz_Start(BPF4_4KHz_HIGHPOWER);
 098E 10                push X
 098F 5003              mov A,3
 0991 7C0000            xcall _BPF4_4KHz_Start
 0994                   .dbline 213
 0994           ;       I2CHW_Start();
 0994 7C0000            xcall _I2CHW_Start
 0997 20                pop X
 0998                   .dbline 214
 0998           ;       PGA_out_Start(PGA_out_HIGHPOWER);
 0998 10                push X
 0999 5003              mov A,3
 099B 7C0000            xcall _PGA_out_Start
 099E 20                pop X
 099F                   .dbline 215
 099F           ;       PGA_pre_Start(PGA_pre_HIGHPOWER); 
 099F 10                push X
 09A0 5003              mov A,3
 09A2 7C0000            xcall _PGA_pre_Start
 09A5 20                pop X
 09A6                   .dbline 216
 09A6           ;       RefMux_1_Start(RefMux_1_HIGHPOWER);
 09A6 10                push X
 09A7 5003              mov A,3
 09A9 7C0000            xcall _RefMux_1_Start
 09AC 20                pop X
 09AD                   .dbline 217
 09AD           ;     SCBLOCK_inbuff_Start(SCBLOCK_inbuff_HIGHPOWER);
 09AD 10                push X
 09AE 5003              mov A,3
 09B0 7C0000            xcall _SCBLOCK_inbuff_Start
 09B3                   .dbline 218
 09B3           ;       LED_1_Start();
 09B3 7C0000            xcall _LED_1_Start
 09B6                   .dbline 219
 09B6           ;       LED_2_Start();
 09B6 7C0000            xcall _LED_2_Start
 09B9                   .dbline 220
 09B9           ;       LED_3_Start();
 09B9 7C0000            xcall _LED_3_Start
 09BC                   .dbline 221
 09BC           ;       DIGITAL_OUT_Start();  
 09BC 7C0000            xcall _DIGITAL_OUT_Start
 09BF                   .dbline 223
 09BF           ;       
 09BF           ;       TX8_EnableInt();
 09BF 7C0000            xcall _TX8_EnableInt
 09C2 20                pop X
 09C3                   .dbline 224
 09C3           ;       TX8_Start(TX8_PARITY_NONE);
 09C3 10                push X
 09C4 5000              mov A,0
 09C6 7C0000            xcall _TX8_Start
 09C9 20                pop X
 09CA                   .dbline 226
 09CA           ;       
 09CA           ;       AMUX4_mic_InputSelect(AMUX4_mic_PORT0_1);
 09CA 10                push X
 09CB 5000              mov A,0
 09CD 7C0000            xcall _AMUX4_mic_InputSelect
 09D0 20                pop X
 09D1                   .dbline 228
 09D1           ; 
 09D1           ;       PGA_pre_SetGain(GF[GainIndx[0][0]][0]);
 09D1 62D000            mov REG[0xd0],>_GainIndx
 09D4 5100              mov A,[_GainIndx]
 09D6 62D000            mov REG[0xd0],>__r0
 09D9 5300              mov [__r1],A
 09DB 550000            mov [__r0],0
 09DE 6500              asl [__r1]
 09E0 6B00              rlc [__r0]
 09E2 060000            add [__r1],<_GF
 09E5 0E0000            adc [__r0],>_GF
 09E8 5100              mov A,[__r0]
 09EA 60D4              mov REG[0xd4],A
 09EC 3E00              mvi A,[__r1]
 09EE 10                push X
 09EF 7C0000            xcall _PGA_pre_SetGain
 09F2 20                pop X
 09F3                   .dbline 229
 09F3           ;       PGA_out_SetGain(GF[GainIndx[0][1]][0]);
 09F3 62D000            mov REG[0xd0],>_GainIndx
 09F6 5101              mov A,[_GainIndx+1]
 09F8 62D000            mov REG[0xd0],>__r0
 09FB 5300              mov [__r1],A
 09FD 550000            mov [__r0],0
 0A00 6500              asl [__r1]
 0A02 6B00              rlc [__r0]
 0A04 060000            add [__r1],<_GF
 0A07 0E0000            adc [__r0],>_GF
 0A0A 5100              mov A,[__r0]
 0A0C 60D4              mov REG[0xd4],A
 0A0E 3E00              mvi A,[__r1]
 0A10 10                push X
 0A11 7C0000            xcall _PGA_out_SetGain
 0A14                   .dbline 231
 0A14           ;       
 0A14           ;     HB_Tmr_EnableInt();  
 0A14 7C0000            xcall _HB_Tmr_EnableInt
 0A17                   .dbline 232
 0A17           ;       HB_Tmr_Start();         
 0A17 7C0000            xcall _HB_Tmr_Start
 0A1A 20                pop X
 0A1B                   .dbline -2
 0A1B           L75:
 0A1B                   .dbline 0 ; func end
 0A1B 7F                ret
 0A1C                   .dbend
 0A1C                   .dbfunc e HB_Tmr_ISR_C _HB_Tmr_ISR_C fV
 0A1C           _HB_Tmr_ISR_C::
 0A1C                   .dbline -1
 0A1C 71C0              or F,-64
 0A1E 08                push A
 0A1F 5DD0              mov A,REG[0xd0]
 0A21 08                push A
 0A22                   .dbline 236
 0A22           ; }
 0A22           ;       
 0A22           ; void HB_Tmr_ISR_C(void)
 0A22           ; {// Base clock for all of the timings in the program
 0A22                   .dbline 237
 0A22           ;       TmrFlag = 1;
 0A22 62D000            mov REG[0xd0],>_TmrFlag
 0A25 550001            mov [_TmrFlag],1
 0A28                   .dbline 238
 0A28           ;       Tmr1++;
 0A28 62D000            mov REG[0xd0],>_Tmr1
 0A2B 7601              inc [_Tmr1+1]
 0A2D 0E0000            adc [_Tmr1],0
 0A30                   .dbline -2
 0A30           L77:
 0A30 18                pop A
 0A31 60D0              mov REG[208],A
 0A33 18                pop A
 0A34                   .dbline 0 ; func end
 0A34 7E                reti
 0A35                   .dbend
 0A35                   .dbfunc e DelayMs _DelayMs fV
 0A35           ;              i -> X+0
 0A35           ;             Ms -> X-5
 0A35           _DelayMs::
 0A35                   .dbline -1
 0A35 10                push X
 0A36 4F                mov X,SP
 0A37 3802              add SP,2
 0A39                   .dbline 242
 0A39           ; }
 0A39           ; 
 0A39           ; void DelayMs(int Ms)
 0A39           ; {
 0A39                   .dbline 244
 0A39           ;       int i;
 0A39           ;       for (i=0; i<Ms; i++)
 0A39 560100            mov [X+1],0
 0A3C 560000            mov [X+0],0
 0A3F 800D              xjmp L82
 0A41           L79:
 0A41                   .dbline 245
 0A41           ;       {
 0A41                   .dbline 246
 0A41           ;               Delay50uTimes(20);
 0A41 10                push X
 0A42 5014              mov A,20
 0A44 7C0000            xcall _Delay50uTimes
 0A47 20                pop X
 0A48                   .dbline 247
 0A48           ;       }
 0A48           L80:
 0A48                   .dbline 244
 0A48 7701              inc [X+1]
 0A4A 0F0000            adc [X+0],0
 0A4D           L82:
 0A4D                   .dbline 244
 0A4D 5201              mov A,[X+1]
 0A4F 13FC              sub A,[X-4]
 0A51 52FB              mov A,[X-5]
 0A53 3180              xor A,-128
 0A55 62D000            mov REG[0xd0],>__r0
 0A58 5300              mov [__rX],A
 0A5A 5200              mov A,[X+0]
 0A5C 3180              xor A,-128
 0A5E 1A00              sbb A,[__rX]
 0A60 CFE0              jc L79
 0A62           X21:
 0A62                   .dbline -2
 0A62           L78:
 0A62 38FE              add SP,-2
 0A64 20                pop X
 0A65                   .dbline 0 ; func end
 0A65 7F                ret
 0A66                   .dbsym l i 0 I
 0A66                   .dbsym l Ms -5 I
 0A66                   .dbend
 0A66                   .dbfunc e LedTest _LedTest fV
 0A66           ;              i -> X+0
 0A66           _LedTest::
 0A66                   .dbline -1
 0A66 10                push X
 0A67 4F                mov X,SP
 0A68 3802              add SP,2
 0A6A                   .dbline 251
 0A6A           ; }
 0A6A           ; 
 0A6A           ; void LedTest(void)
 0A6A           ; {
 0A6A                   .dbline 253
 0A6A           ;       int i;
 0A6A           ;       LED_1_Off();
 0A6A 10                push X
 0A6B 7C0000            xcall _LED_1_Off
 0A6E                   .dbline 254
 0A6E           ;       LED_2_Off();
 0A6E 7C0000            xcall _LED_2_Off
 0A71                   .dbline 255
 0A71           ;       LED_3_Off();
 0A71 7C0000            xcall _LED_3_Off
 0A74 20                pop X
 0A75                   .dbline 257
 0A75           ;       
 0A75           ;       for (i=0; i<3; i++)
 0A75 560100            mov [X+1],0
 0A78 560000            mov [X+0],0
 0A7B           L84:
 0A7B                   .dbline 258
 0A7B           ;       {
 0A7B                   .dbline 259
 0A7B           ;               LED_1_On();
 0A7B 10                push X
 0A7C 7C0000            xcall _LED_1_On
 0A7F 20                pop X
 0A80                   .dbline 260
 0A80           ;               DelayMs(500);
 0A80 5001              mov A,1
 0A82 08                push A
 0A83 50F4              mov A,-12
 0A85 08                push A
 0A86 9FAD              xcall _DelayMs
 0A88 38FE              add SP,-2
 0A8A                   .dbline 261
 0A8A           ;               LED_1_Off();
 0A8A 10                push X
 0A8B 7C0000            xcall _LED_1_Off
 0A8E                   .dbline 262
 0A8E           ;               LED_2_On();
 0A8E 7C0000            xcall _LED_2_On
 0A91 20                pop X
 0A92                   .dbline 263
 0A92           ;               DelayMs(500);
 0A92 5001              mov A,1
 0A94 08                push A
 0A95 50F4              mov A,-12
 0A97 08                push A
 0A98 9F9B              xcall _DelayMs
 0A9A 38FE              add SP,-2
 0A9C                   .dbline 264
 0A9C           ;               LED_2_Off();
 0A9C 10                push X
 0A9D 7C0000            xcall _LED_2_Off
 0AA0                   .dbline 265
 0AA0           ;               LED_3_On();
 0AA0 7C0000            xcall _LED_3_On
 0AA3 20                pop X
 0AA4                   .dbline 266
 0AA4           ;               DelayMs(500);
 0AA4 5001              mov A,1
 0AA6 08                push A
 0AA7 50F4              mov A,-12
 0AA9 08                push A
 0AAA 9F89              xcall _DelayMs
 0AAC 38FE              add SP,-2
 0AAE                   .dbline 267
 0AAE           ;               LED_3_Off();
 0AAE 10                push X
 0AAF 7C0000            xcall _LED_3_Off
 0AB2 20                pop X
 0AB3                   .dbline 268
 0AB3           ;       }
 0AB3           L85:
 0AB3                   .dbline 257
 0AB3 7701              inc [X+1]
 0AB5 0F0000            adc [X+0],0
 0AB8                   .dbline 257
 0AB8 5201              mov A,[X+1]
 0ABA 1103              sub A,3
 0ABC 5200              mov A,[X+0]
 0ABE 3180              xor A,-128
 0AC0 1980              sbb A,(0 ^ 0x80)
 0AC2 CFB8              jc L84
 0AC4           X22:
 0AC4                   .dbline -2
 0AC4           L83:
 0AC4 38FE              add SP,-2
 0AC6 20                pop X
 0AC7                   .dbline 0 ; func end
 0AC7 7F                ret
 0AC8                   .dbsym l i 0 I
 0AC8                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\main.c
 0000           _str::
 0000 00000000000000    .byte 0,0,0,0,0,0,0
 0007                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0007                   .dbsym e str _str A[7:7]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0000           _Tmr1::
 0000 0000              .byte 0,0
 0002                   .dbsym e Tmr1 _Tmr1 i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0000           _i::
 0000 0000              .byte 0,0
 0002                   .dbsym e i _i i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0000           _MesValueM::
 0000 000000000000      .byte 0,0,0,0,0,0
 0006                   .dbsym e MesValueM _MesValueM A[6:3]I
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0000           _MesValue::
 0000 00000000000000000000      .word 0,0,0,0,0
 000A 0000              .byte 0,0
 000C                   .dbsym e MesValue _MesValue A[12:3:2]I
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0000           _MesValueOut::
 0000 0000              .byte 0,0
 0002                   .dbsym e MesValueOut _MesValueOut I
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0000           _PotValue::
 0000 0000              .byte 0,0
 0002                   .dbsym e PotValue _PotValue I
                        .area lit(rom, con, rel)
 0000           L66:
 0000 20204761696E204F75743A2031203D20  .byte 32,32,'G,'a,'i,'n,32,'O,'u,'t,58,32,49,32,61,32
 0010 00                .byte 0
 0011           L60:
 0011 20204761696E205072653A2031203D20  .byte 32,32,'G,'a,'i,'n,32,'P,'r,'e,58,32,49,32,61,32
 0021 00                .byte 0
 0022           L58:
 0022 20202D202033203D2000      .byte 32,32,45,32,32,51,32,61,32,0
 002C           L56:
 002C 20202D202032203D2000      .byte 32,32,45,32,32,50,32,61,32,0
 0036           L55:
 0036 202020204D65732056616C75653A2031  .byte 32,32,32,32,'M,'e,'s,32,'V,'a,'l,'u,'e,58,32,49
 0046 203D2000          .byte 32,61,32,0
 004A           L54:
 004A 0A0D506F742056616C7565203D2000    .byte 10,13,'P,'o,'t,32,'V,'a,'l,'u,'e,32,61,32,0
