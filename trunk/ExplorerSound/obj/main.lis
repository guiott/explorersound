 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _MesValueSum::
 0000 00000000          .word 0,0
 0004 00000000          .word 0,0
 0008 00000000          .word 0,0
 000C 00000000          .word 0,0
 0010 00000000          .word 0,0
 0014 00000000          .word 0,0
 0018                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0018                   .dbsym e MesValueSum _MesValueSum A[24:3:2]L
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _TmrFlag::
 0000 00                .byte 0
 0001                   .dbsym e TmrFlag _TmrFlag c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _GF::
 0000 F801              .byte 248,1
 0002 7802              .byte 'x,2
 0004 3804              .byte 56,4
 0006 1808              .byte 24,8
 0008 0810              .byte 8,16
 000A                   .dbsym e GF _GF A[10:5:2]c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _GainIndx::
 0000 0202              .byte 2,2
 0002 0202              .byte 2,2
 0004 0202              .byte 2,2
 0006                   .dbsym e GainIndx _GainIndx A[6:3:2]c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area text(rom, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;        PortNum -> X+1
 0000           ;       PortIndx -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3804              add SP,4
 0004                   .dbline 38
 0004           ; /* ////////////////////////////////////////////////////////////////////////////
 0004           ; ** Project:      ExplorerSound
 0004           ; ** Author:    Guido Ottaviani-->guido@guiott.com<--
 0004           ; ** Description: 
 0004           ; ** version 0.3   15-10-2010
 0004           ; **
 0004           ; ** Detailed descriptions are on file "Notes.txt" 
 0004           ; **
 0004           ; -------------------------------------------------------------------------------
 0004           ; Copyright 2010 Guido Ottaviani
 0004           ; guido@guiott.com
 0004           ; 
 0004           ;       ExplorerSound is free software: you can redistribute it and/or modify
 0004           ;     it under the terms of the GNU General Public License as published by
 0004           ;     the Free Software Foundation, either version 3 of the License, or
 0004           ;     (at your option) any later version.
 0004           ; 
 0004           ;     ExplorerSound is distributed in the hope that it will be useful,
 0004           ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
 0004           ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 0004           ;     GNU General Public License for more details.
 0004           ; 
 0004           ;     You should have received a copy of the GNU General Public License
 0004           ;     along with ExplorerSound.  If not, see <http://www.gnu.org/licenses/>.
 0004           ; -------------------------------------------------------------------------------      
 0004           ; /////////////////////////////////////////////////////////////////////////////*/
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include <stdlib.h>
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include "prototypes.h"
 0004           ; #include "definitions.h"
 0004           ; #include "delay.h"
 0004           ; 
 0004           ; #pragma interrupt_handler HB_Tmr_ISR_C // int handler for program clock
 0004           ; 
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 40
 0004           ;       BYTE PortNum[3];
 0004           ;       BYTE PortIndx = 0;
 0004 560000            mov [X+0],0
 0007                   .dbline 42
 0007           ;       
 0007           ;       BlocksInit();
 0007 7C0940            xcall _BlocksInit
 000A                   .dbline 44
 000A           ;       
 000A           ;       M8C_EnableGInt ;               // Turn on interrupts 
 000A 7101                      or  F, 01h
 000C           
 000C                   .dbline 46
 000C           ;       
 000C           ;       LED_2_On();
 000C 10                push X
 000D 7C0000            xcall _LED_2_On
 0010 20                pop X
 0011                   .dbline 47
 0011           ;       PortNum[0] = AMUX4_mic_PORT0_1;
 0011 560100            mov [X+1],0
 0014                   .dbline 48
 0014           ;       PortNum[1] = AMUX4_mic_PORT0_3;
 0014 560201            mov [X+2],1
 0017                   .dbline 49
 0017           ;       PortNum[2] = AMUX4_mic_PORT0_7;
 0017 560303            mov [X+3],3
 001A                   .dbline 51
 001A           ;       
 001A           ;       LedTest();
 001A 7C0A29            xcall _LedTest
 001D 8365              xjmp L5
 001F           L4:
 001F                   .dbline 55
 001F           ;       
 001F           ;       // Main loop=============================================================
 001F           ;       while (1)
 001F           ;       {
 001F                   .dbline 56
 001F           ;               if(ADCINCVR_pot_fIsDataAvailable() != 0)// Wait for data to be ready
 001F 10                push X
 0020 7C0000            xcall _ADCINCVR_pot_fIsDataAvailable
 0023 62D000            mov REG[0xd0],>__r0
 0026 20                pop X
 0027 3900              cmp A,0
 0029 A01E              jz L7
 002B                   .dbline 57
 002B           ;         {   
 002B                   .dbline 59
 002B           ;                       // Get Data, Clear data ready flag, in the range 0-1800
 002B           ;                       PotValue = ADCINCVR_pot_iGetDataClearFlag()+900;
 002B 10                push X
 002C 7C0000            xcall _ADCINCVR_pot_iGetDataClearFlag
 002F 62D000            mov REG[0xd0],>__r0
 0032 5A00              mov [__r0],X
 0034 20                pop X
 0035 0184              add A,-124
 0037 62D000            mov REG[0xd0],>_PotValue
 003A 5301              mov [_PotValue+1],A
 003C 62D000            mov REG[0xd0],>__r0
 003F 5100              mov A,[__r0]
 0041 0903              adc A,3
 0043 62D000            mov REG[0xd0],>_PotValue
 0046 5300              mov [_PotValue],A
 0048                   .dbline 60
 0048           ;               }
 0048           L7:
 0048                   .dbline 62
 0048           ;         
 0048           ;               if(ADCINCVR_mes_fIsDataAvailable() != 0)// Wait for data to be ready
 0048 10                push X
 0049 7C0000            xcall _ADCINCVR_mes_fIsDataAvailable
 004C 62D000            mov REG[0xd0],>__r0
 004F 20                pop X
 0050 3900              cmp A,0
 0052 A1D5              jz L9
 0054                   .dbline 63
 0054           ;         {   
 0054                   .dbline 66
 0054           ;                       // Get Data, Clear data ready flag
 0054           ;                       
 0054           ;                       MesValueOut = ADCINCVR_mes_iGetDataClearFlag(); // [1]
 0054 10                push X
 0055 7C0000            xcall _ADCINCVR_mes_iGetDataClearFlag
 0058 62D000            mov REG[0xd0],>__r0
 005B 5A00              mov [__r0],X
 005D 20                pop X
 005E 08                push A
 005F 5100              mov A,[__r0]
 0061 62D000            mov REG[0xd0],>_MesValueOut
 0064 5300              mov [_MesValueOut],A
 0066 18                pop A
 0067 5301              mov [_MesValueOut+1],A
 0069                   .dbline 67
 0069           ;                       MesValue[PortIndx][1] = (MesValueOut) >> (GainIndx[PortIndx][1]);                       // [2][4]
 0069 62D000            mov REG[0xd0],>__r0
 006C 5200              mov A,[X+0]
 006E 5300              mov [__r1],A
 0070 550000            mov [__r0],0
 0073 6500              asl [__r1]
 0075 6B00              rlc [__r0]
 0077 060001            add [__r1],<_GainIndx+1
 007A 0E0001            adc [__r0],>_GainIndx+1
 007D 5100              mov A,[__r0]
 007F 60D4              mov REG[0xd4],A
 0081 3E00              mvi A,[__r1]
 0083 5300              mov [__r1],A
 0085 62D000            mov REG[0xd0],>_MesValueOut
 0088 5101              mov A,[_MesValueOut+1]
 008A 08                push A
 008B 5100              mov A,[_MesValueOut]
 008D 62D000            mov REG[0xd0],>__r0
 0090 5300              mov [__r2],A
 0092 18                pop A
 0093 5300              mov [__r3],A
 0095 5100              mov A,[__r1]
 0097 210F              and A,15
 0099 A00B              jz X1
 009B           X2:
 009B 62D000            mov REG[0xd0],>__r0
 009E 6800              asr [__r2]
 00A0 6E00              rrc [__r3]
 00A2 78                dec A
 00A3 BFF7              jnz X2
 00A5           X1:
 00A5 62D000            mov REG[0xd0],>__r0
 00A8 5200              mov A,[X+0]
 00AA 5300              mov [__r1],A
 00AC 550000            mov [__r0],0
 00AF 6500              asl [__r1]
 00B1 6B00              rlc [__r0]
 00B3 6500              asl [__r1]
 00B5 6B00              rlc [__r0]
 00B7 060002            add [__r1],<_MesValue+2
 00BA 0E0002            adc [__r0],>_MesValue+2
 00BD 5100              mov A,[__r0]
 00BF 60D5              mov REG[0xd5],A
 00C1 5100              mov A,[__r2]
 00C3 3F00              mvi [__r1],A
 00C5 5100              mov A,[__r3]
 00C7 3F00              mvi [__r1],A
 00C9                   .dbline 68
 00C9           ;                       MesValue[PortIndx][0] = (MesValue[PortIndx][1]) >> (GainIndx[PortIndx][0]); // [3][4]                   
 00C9 5200              mov A,[X+0]
 00CB 5300              mov [__r1],A
 00CD 550000            mov [__r0],0
 00D0 6500              asl [__r1]
 00D2 6B00              rlc [__r0]
 00D4 6500              asl [__r1]
 00D6 6B00              rlc [__r0]
 00D8 5200              mov A,[X+0]
 00DA 5300              mov [__r3],A
 00DC 550000            mov [__r2],0
 00DF 6500              asl [__r3]
 00E1 6B00              rlc [__r2]
 00E3 060000            add [__r3],<_GainIndx
 00E6 0E0000            adc [__r2],>_GainIndx
 00E9 5100              mov A,[__r2]
 00EB 60D4              mov REG[0xd4],A
 00ED 3E00              mvi A,[__r3]
 00EF 5300              mov [__r3],A
 00F1 5100              mov A,[__r1]
 00F3 0102              add A,<_MesValue+2
 00F5 5300              mov [__r5],A
 00F7 5100              mov A,[__r0]
 00F9 0902              adc A,>_MesValue+2
 00FB 60D4              mov REG[0xd4],A
 00FD 3E00              mvi A,[__r5]
 00FF 5300              mov [__r4],A
 0101 3E00              mvi A,[__r5]
 0103 5300              mov [__r5],A
 0105 5100              mov A,[__r3]
 0107 210F              and A,15
 0109 A00B              jz X3
 010B           X4:
 010B 62D000            mov REG[0xd0],>__r0
 010E 6800              asr [__r4]
 0110 6E00              rrc [__r5]
 0112 78                dec A
 0113 BFF7              jnz X4
 0115           X3:
 0115 62D000            mov REG[0xd0],>__r0
 0118 060000            add [__r1],<_MesValue
 011B 0E0000            adc [__r0],>_MesValue
 011E 5100              mov A,[__r0]
 0120 60D5              mov REG[0xd5],A
 0122 5100              mov A,[__r4]
 0124 3F00              mvi [__r1],A
 0126 5100              mov A,[__r5]
 0128 3F00              mvi [__r1],A
 012A                   .dbline 70
 012A           ;                       
 012A           ;                       AGC(PortIndx);
 012A 5200              mov A,[X+0]
 012C 08                push A
 012D 925B              xcall _AGC
 012F 38FF              add SP,-1
 0131                   .dbline 72
 0131           ;                                               
 0131           ;                       MesValueSum[PortIndx][0]+= MesValue[PortIndx][0]; // Cumulate readings
 0131 62D000            mov REG[0xd0],>__r0
 0134 5200              mov A,[X+0]
 0136 5300              mov [__r1],A
 0138 550000            mov [__r0],0
 013B 6500              asl [__r1]
 013D 6B00              rlc [__r0]
 013F 6500              asl [__r1]
 0141 6B00              rlc [__r0]
 0143 6500              asl [__r1]
 0145 6B00              rlc [__r0]
 0147 060000            add [__r1],<_MesValueSum
 014A 0E0000            adc [__r0],>_MesValueSum
 014D 5200              mov A,[X+0]
 014F 5300              mov [__r3],A
 0151 550000            mov [__r2],0
 0154 6500              asl [__r3]
 0156 6B00              rlc [__r2]
 0158 6500              asl [__r3]
 015A 6B00              rlc [__r2]
 015C 060000            add [__r3],<_MesValue
 015F 0E0000            adc [__r2],>_MesValue
 0162 5100              mov A,[__r2]
 0164 60D4              mov REG[0xd4],A
 0166 3E00              mvi A,[__r3]
 0168 5300              mov [__r2],A
 016A 3E00              mvi A,[__r3]
 016C 5300              mov [__r7],A
 016E 5100              mov A,[__r2]
 0170 5300              mov [__r6],A
 0172 470080            tst [__r6],-128
 0175 A009              jz X5
 0177 5500FF            mov [__r5],-1
 017A 5500FF            mov [__r4],-1
 017D 800A              jmp X6
 017F           X5:
 017F 62D000            mov REG[0xd0],>__r0
 0182 550000            mov [__r5],0
 0185 550000            mov [__r4],0
 0188           X6:
 0188 62D000            mov REG[0xd0],>__r0
 018B 5100              mov A,[__r0]
 018D 60D4              mov REG[0xd4],A
 018F 3E00              mvi A,[__r1]
 0191 5300              mov [__r8],A
 0193 3E00              mvi A,[__r1]
 0195 5300              mov [__r9],A
 0197 3E00              mvi A,[__r1]
 0199 5300              mov [__r10],A
 019B 3E00              mvi A,[__r1]
 019D 160004            sub [__r1],4
 01A0 0200              add A,[__r7]
 01A2 5300              mov [__r7],A
 01A4 5100              mov A,[__r10]
 01A6 0A00              adc A,[__r6]
 01A8 5300              mov [__r6],A
 01AA 5100              mov A,[__r9]
 01AC 0A00              adc A,[__r5]
 01AE 5300              mov [__r5],A
 01B0 5100              mov A,[__r8]
 01B2 0A00              adc A,[__r4]
 01B4 5300              mov [__r4],A
 01B6 5100              mov A,[__r0]
 01B8 60D5              mov REG[0xd5],A
 01BA 5100              mov A,[__r4]
 01BC 3F00              mvi [__r1],A
 01BE 5100              mov A,[__r5]
 01C0 3F00              mvi [__r1],A
 01C2 5100              mov A,[__r6]
 01C4 3F00              mvi [__r1],A
 01C6 5100              mov A,[__r7]
 01C8 3F00              mvi [__r1],A
 01CA                   .dbline 73
 01CA           ;                       MesValueSum[PortIndx][1]++; // count how many readings occurred
 01CA 5200              mov A,[X+0]
 01CC 5300              mov [__r1],A
 01CE 550000            mov [__r0],0
 01D1 6500              asl [__r1]
 01D3 6B00              rlc [__r0]
 01D5 6500              asl [__r1]
 01D7 6B00              rlc [__r0]
 01D9 6500              asl [__r1]
 01DB 6B00              rlc [__r0]
 01DD 060004            add [__r1],<_MesValueSum+4
 01E0 0E0004            adc [__r0],>_MesValueSum+4
 01E3 5100              mov A,[__r0]
 01E5 60D4              mov REG[0xd4],A
 01E7 3E00              mvi A,[__r1]
 01E9 5300              mov [__r4],A
 01EB 3E00              mvi A,[__r1]
 01ED 5300              mov [__r5],A
 01EF 3E00              mvi A,[__r1]
 01F1 5300              mov [__r6],A
 01F3 3E00              mvi A,[__r1]
 01F5 160004            sub [__r1],4
 01F8 5300              mov [__r7],A
 01FA 060001            add [__r7],1
 01FD 0E0000            adc [__r6],0
 0200 0E0000            adc [__r5],0
 0203 0E0000            adc [__r4],0
 0206 5100              mov A,[__r0]
 0208 60D5              mov REG[0xd5],A
 020A 5100              mov A,[__r4]
 020C 3F00              mvi [__r1],A
 020E 5100              mov A,[__r5]
 0210 3F00              mvi [__r1],A
 0212 5100              mov A,[__r6]
 0214 3F00              mvi [__r1],A
 0216 5100              mov A,[__r7]
 0218 3F00              mvi [__r1],A
 021A                   .dbline 75
 021A           ;                                                                                                                 
 021A           ;                       PortIndx++; // next mux port
 021A 7700              inc [X+0]
 021C                   .dbline 76
 021C           ;                       if (PortIndx <3)
 021C 3D0003            cmp [X+0],3
 021F D008              jnc L15
 0221           X7:
 0221                   .dbline 77
 0221           ;                       {
 0221                   .dbline 79
 0221           ;               //              AMUX4_mic_InputSelect(PortNum[PortIndx]);
 0221           ;                               ADCINCVR_mes_GetSamples(1); // Start ADC to read once more
 0221 10                push X
 0222 5001              mov A,1
 0224 7C0000            xcall _ADCINCVR_mes_GetSamples
 0227 20                pop X
 0228                   .dbline 80
 0228           ;                       }
 0228           L15:
 0228                   .dbline 81
 0228           ;               }
 0228           L9:
 0228                   .dbline 83
 0228           ;               
 0228           ;               if (TmrFlag) // every 10ms
 0228 62D000            mov REG[0xd0],>_TmrFlag
 022B 3C0000            cmp [_TmrFlag],0
 022E A015              jz L17
 0230                   .dbline 84
 0230           ;               {
 0230                   .dbline 85
 0230           ;                       TmrFlag = 0;
 0230 550000            mov [_TmrFlag],0
 0233                   .dbline 86
 0233           ;                       PortIndx= 0;
 0233 560000            mov [X+0],0
 0236                   .dbline 89
 0236           ;                               
 0236           ;               //      AMUX4_mic_InputSelect(PortNum[PortIndx]);
 0236           ;                       ADCINCVR_mes_GetSamples(1);    // Start ADC to read 1 sample
 0236 10                push X
 0237 5001              mov A,1
 0239 7C0000            xcall _ADCINCVR_mes_GetSamples
 023C 20                pop X
 023D                   .dbline 90
 023D           ;                       ADCINCVR_pot_GetSamples(1);    // Start ADC to read 1 sample 
 023D 10                push X
 023E 5001              mov A,1
 0240 7C0000            xcall _ADCINCVR_pot_GetSamples
 0243 20                pop X
 0244                   .dbline 91
 0244           ;               }
 0244           L17:
 0244                   .dbline 93
 0244           ;               
 0244           ;               if (Tmr1 > 10) // every 100ms
 0244 62D000            mov REG[0xd0],>_Tmr1
 0247 500A              mov A,10
 0249 1201              sub A,[_Tmr1+1]
 024B 5000              mov A,0
 024D 1A00              sbb A,[_Tmr1]
 024F D133              jnc L19
 0251           X8:
 0251                   .dbline 94
 0251           ;               {
 0251                   .dbline 95
 0251           ;                       Tmr1 = 0;
 0251 62D000            mov REG[0xd0],>_Tmr1
 0254 550100            mov [_Tmr1+1],0
 0257 550000            mov [_Tmr1],0
 025A                   .dbline 96
 025A           ;                       UartTxValues();
 025A 943B              xcall _UartTxValues
 025C                   .dbline 98
 025C           ;                       // compute average value
 025C           ;                       for (i=0; i<3; i++)
 025C 62D000            mov REG[0xd0],>_i
 025F 550100            mov [_i+1],0
 0262 550000            mov [_i],0
 0265 810E              xjmp L24
 0267           L21:
 0267                   .dbline 99
 0267           ;                       {
 0267                   .dbline 100
 0267           ;                               MesValueM[i]=MesValueSum[i][0]/MesValueSum[i][1];
 0267 62D000            mov REG[0xd0],>_i
 026A 5101              mov A,[_i+1]
 026C 08                push A
 026D 5100              mov A,[_i]
 026F 62D000            mov REG[0xd0],>__r0
 0272 5300              mov [__r0],A
 0274 18                pop A
 0275 5300              mov [__r1],A
 0277 6500              asl [__r1]
 0279 6B00              rlc [__r0]
 027B 6500              asl [__r1]
 027D 6B00              rlc [__r0]
 027F 6500              asl [__r1]
 0281 6B00              rlc [__r0]
 0283 5100              mov A,[__r1]
 0285 0104              add A,<_MesValueSum+4
 0287 5300              mov [__r3],A
 0289 5100              mov A,[__r0]
 028B 0904              adc A,>_MesValueSum+4
 028D 60D4              mov REG[0xd4],A
 028F 3E00              mvi A,[__r3]
 0291 5300              mov [__r4],A
 0293 3E00              mvi A,[__r3]
 0295 5300              mov [__r5],A
 0297 3E00              mvi A,[__r3]
 0299 5300              mov [__r6],A
 029B 3E00              mvi A,[__r3]
 029D 5300              mov [__r7],A
 029F 060000            add [__r1],<_MesValueSum
 02A2 0E0000            adc [__r0],>_MesValueSum
 02A5 5100              mov A,[__r0]
 02A7 60D4              mov REG[0xd4],A
 02A9 3E00              mvi A,[__r1]
 02AB 5300              mov [__r8],A
 02AD 3E00              mvi A,[__r1]
 02AF 5300              mov [__r9],A
 02B1 3E00              mvi A,[__r1]
 02B3 5300              mov [__r10],A
 02B5 3E00              mvi A,[__r1]
 02B7 5300              mov [__r11],A
 02B9 5100              mov A,[__r4]
 02BB 08                push A
 02BC 5100              mov A,[__r5]
 02BE 08                push A
 02BF 5100              mov A,[__r6]
 02C1 08                push A
 02C2 5100              mov A,[__r7]
 02C4 08                push A
 02C5 5100              mov A,[__r8]
 02C7 08                push A
 02C8 5100              mov A,[__r9]
 02CA 08                push A
 02CB 5100              mov A,[__r10]
 02CD 08                push A
 02CE 5100              mov A,[__r11]
 02D0 08                push A
 02D1 7C0000            xcall __divmod_32X32_32
 02D4 18                pop A
 02D5 5300              mov [__r3],A
 02D7 18                pop A
 02D8 5300              mov [__r2],A
 02DA 18                pop A
 02DB 18                pop A
 02DC 38FC              add SP,-4
 02DE 5100              mov A,[__r3]
 02E0 5300              mov [__r1],A
 02E2 5100              mov A,[__r2]
 02E4 5300              mov [__r0],A
 02E6 62D000            mov REG[0xd0],>_i
 02E9 5101              mov A,[_i+1]
 02EB 08                push A
 02EC 5100              mov A,[_i]
 02EE 62D000            mov REG[0xd0],>__r0
 02F1 5300              mov [__r2],A
 02F3 18                pop A
 02F4 5300              mov [__r3],A
 02F6 6500              asl [__r3]
 02F8 6B00              rlc [__r2]
 02FA 060000            add [__r3],<_MesValueM
 02FD 0E0000            adc [__r2],>_MesValueM
 0300 5100              mov A,[__r2]
 0302 60D5              mov REG[0xd5],A
 0304 5100              mov A,[__r0]
 0306 3F00              mvi [__r3],A
 0308 5100              mov A,[__r1]
 030A 3F00              mvi [__r3],A
 030C                   .dbline 101
 030C           ;                               MesValueSum[i][0]=0;
 030C 62D000            mov REG[0xd0],>_i
 030F 5101              mov A,[_i+1]
 0311 08                push A
 0312 5100              mov A,[_i]
 0314 62D000            mov REG[0xd0],>__r0
 0317 5300              mov [__r0],A
 0319 18                pop A
 031A 5300              mov [__r1],A
 031C 6500              asl [__r1]
 031E 6B00              rlc [__r0]
 0320 6500              asl [__r1]
 0322 6B00              rlc [__r0]
 0324 6500              asl [__r1]
 0326 6B00              rlc [__r0]
 0328 060000            add [__r1],<_MesValueSum
 032B 0E0000            adc [__r0],>_MesValueSum
 032E 5100              mov A,[__r0]
 0330 60D5              mov REG[0xd5],A
 0332 5000              mov A,0
 0334 3F00              mvi [__r1],A
 0336 3F00              mvi [__r1],A
 0338 3F00              mvi [__r1],A
 033A 3F00              mvi [__r1],A
 033C                   .dbline 102
 033C           ;                               MesValueSum[i][1]=0;
 033C 62D000            mov REG[0xd0],>_i
 033F 5101              mov A,[_i+1]
 0341 08                push A
 0342 5100              mov A,[_i]
 0344 62D000            mov REG[0xd0],>__r0
 0347 5300              mov [__r0],A
 0349 18                pop A
 034A 5300              mov [__r1],A
 034C 6500              asl [__r1]
 034E 6B00              rlc [__r0]
 0350 6500              asl [__r1]
 0352 6B00              rlc [__r0]
 0354 6500              asl [__r1]
 0356 6B00              rlc [__r0]
 0358 060004            add [__r1],<_MesValueSum+4
 035B 0E0004            adc [__r0],>_MesValueSum+4
 035E 5100              mov A,[__r0]
 0360 60D5              mov REG[0xd5],A
 0362 5000              mov A,0
 0364 3F00              mvi [__r1],A
 0366 3F00              mvi [__r1],A
 0368 3F00              mvi [__r1],A
 036A 3F00              mvi [__r1],A
 036C                   .dbline 103
 036C           ;                       }
 036C           L22:
 036C                   .dbline 98
 036C 62D000            mov REG[0xd0],>_i
 036F 7601              inc [_i+1]
 0371 0E0000            adc [_i],0
 0374           L24:
 0374                   .dbline 98
 0374 62D000            mov REG[0xd0],>_i
 0377 5101              mov A,[_i+1]
 0379 1103              sub A,3
 037B 5100              mov A,[_i]
 037D 1900              sbb A,0
 037F CEE7              jc L21
 0381           X9:
 0381                   .dbline 104
 0381           ;                       DigitalOut();
 0381 927E              xcall _DigitalOut
 0383                   .dbline 105
 0383           ;               }
 0383           L19:
 0383                   .dbline 106
 0383           ;       }// ========================================================== Main loop 
 0383           L5:
 0383                   .dbline 54
 0383 8C9B              xjmp L4
 0385           X0:
 0385                   .dbline -2
 0385           L1:
 0385 38FC              add SP,-4
 0387 20                pop X
 0388                   .dbline 0 ; func end
 0388 8FFF              jmp .
 038A                   .dbsym l PortNum 1 A[3:3]c
 038A                   .dbsym l PortIndx 0 c
 038A                   .dbend
 038A                   .dbfunc e AGC _AGC fV
 038A           ;           Port -> X-4
 038A           _AGC::
 038A                   .dbline -1
 038A 10                push X
 038B 4F                mov X,SP
 038C                   .dbline 112
 038C           ; }
 038C           ; 
 038C           ; // Functions ***************************************************************
 038C           ; 
 038C           ; void AGC(BYTE Port)
 038C           ; {// [5]
 038C                   .dbline 113
 038C           ;            if((MesValueOut > V_MAX) && (GainIndx[Port][1] > I_MIN))// PGA_out
 038C 62D000            mov REG[0xd0],>_MesValueOut
 038F 508A              mov A,-118
 0391 1201              sub A,[_MesValueOut+1]
 0393 5100              mov A,[_MesValueOut]
 0395 3180              xor A,-128
 0397 62D000            mov REG[0xd0],>__r0
 039A 5300              mov [__rX],A
 039C 5082              mov A,(2 ^ 0x80)
 039E 1A00              sbb A,[__rX]
 03A0 D07F              jnc L28
 03A2           X10:
 03A2 62D000            mov REG[0xd0],>__r0
 03A5 52FC              mov A,[X-4]
 03A7 5300              mov [__r1],A
 03A9 550000            mov [__r0],0
 03AC 6500              asl [__r1]
 03AE 6B00              rlc [__r0]
 03B0 060001            add [__r1],<_GainIndx+1
 03B3 0E0001            adc [__r0],>_GainIndx+1
 03B6 5100              mov A,[__r0]
 03B8 60D4              mov REG[0xd4],A
 03BA 3E00              mvi A,[__r1]
 03BC 5300              mov [__r0],A
 03BE 5000              mov A,0
 03C0 3A00              cmp A,[__r0]
 03C2 D05D              jnc L28
 03C4           X11:
 03C4                   .dbline 114
 03C4           ;       {
 03C4                   .dbline 115
 03C4           ;               GainIndx[Port][1]--;
 03C4 62D000            mov REG[0xd0],>__r0
 03C7 52FC              mov A,[X-4]
 03C9 5300              mov [__r1],A
 03CB 550000            mov [__r0],0
 03CE 6500              asl [__r1]
 03D0 6B00              rlc [__r0]
 03D2 060001            add [__r1],<_GainIndx+1
 03D5 0E0001            adc [__r0],>_GainIndx+1
 03D8 5100              mov A,[__r0]
 03DA 60D4              mov REG[0xd4],A
 03DC 3E00              mvi A,[__r1]
 03DE 7A00              dec [__r1]
 03E0 5300              mov [__r2],A
 03E2 160001            sub [__r2],1
 03E5 5100              mov A,[__r0]
 03E7 60D5              mov REG[0xd5],A
 03E9 5100              mov A,[__r2]
 03EB 3F00              mvi [__r1],A
 03ED                   .dbline 116
 03ED           ;               PGA_out_SetGain(GF[GainIndx[Port][1]][0]); // set gain on PGA
 03ED 52FC              mov A,[X-4]
 03EF 5300              mov [__r1],A
 03F1 550000            mov [__r0],0
 03F4 6500              asl [__r1]
 03F6 6B00              rlc [__r0]
 03F8 060001            add [__r1],<_GainIndx+1
 03FB 0E0001            adc [__r0],>_GainIndx+1
 03FE 5100              mov A,[__r0]
 0400 60D4              mov REG[0xd4],A
 0402 3E00              mvi A,[__r1]
 0404 5300              mov [__r1],A
 0406 550000            mov [__r0],0
 0409 6500              asl [__r1]
 040B 6B00              rlc [__r0]
 040D 060000            add [__r1],<_GF
 0410 0E0000            adc [__r0],>_GF
 0413 5100              mov A,[__r0]
 0415 60D4              mov REG[0xd4],A
 0417 3E00              mvi A,[__r1]
 0419 10                push X
 041A 7C0000            xcall _PGA_out_SetGain
 041D 20                pop X
 041E                   .dbline 117
 041E           ;       }
 041E 81E0              xjmp L29
 0420           L28:
 0420                   .dbline 118
 0420           ;       else if((MesValue[Port][1] > V_MAX) && (GainIndx[Port][0] > I_MIN))// PGA_pre
 0420 62D000            mov REG[0xd0],>__r0
 0423 52FC              mov A,[X-4]
 0425 5300              mov [__r1],A
 0427 550000            mov [__r0],0
 042A 6500              asl [__r1]
 042C 6B00              rlc [__r0]
 042E 6500              asl [__r1]
 0430 6B00              rlc [__r0]
 0432 060002            add [__r1],<_MesValue+2
 0435 0E0002            adc [__r0],>_MesValue+2
 0438 5100              mov A,[__r0]
 043A 60D4              mov REG[0xd4],A
 043C 3E00              mvi A,[__r1]
 043E 5300              mov [__r0],A
 0440 3E00              mvi A,[__r1]
 0442 5300              mov [__r1],A
 0444 508A              mov A,-118
 0446 1200              sub A,[__r1]
 0448 5100              mov A,[__r0]
 044A 3180              xor A,-128
 044C 5300              mov [__rX],A
 044E 5082              mov A,(2 ^ 0x80)
 0450 1A00              sbb A,[__rX]
 0452 D07F              jnc L33
 0454           X12:
 0454 62D000            mov REG[0xd0],>__r0
 0457 52FC              mov A,[X-4]
 0459 5300              mov [__r1],A
 045B 550000            mov [__r0],0
 045E 6500              asl [__r1]
 0460 6B00              rlc [__r0]
 0462 060000            add [__r1],<_GainIndx
 0465 0E0000            adc [__r0],>_GainIndx
 0468 5100              mov A,[__r0]
 046A 60D4              mov REG[0xd4],A
 046C 3E00              mvi A,[__r1]
 046E 5300              mov [__r0],A
 0470 5000              mov A,0
 0472 3A00              cmp A,[__r0]
 0474 D05D              jnc L33
 0476           X13:
 0476                   .dbline 119
 0476           ;       {
 0476                   .dbline 120
 0476           ;               GainIndx[Port][0]--;
 0476 62D000            mov REG[0xd0],>__r0
 0479 52FC              mov A,[X-4]
 047B 5300              mov [__r1],A
 047D 550000            mov [__r0],0
 0480 6500              asl [__r1]
 0482 6B00              rlc [__r0]
 0484 060000            add [__r1],<_GainIndx
 0487 0E0000            adc [__r0],>_GainIndx
 048A 5100              mov A,[__r0]
 048C 60D4              mov REG[0xd4],A
 048E 3E00              mvi A,[__r1]
 0490 7A00              dec [__r1]
 0492 5300              mov [__r2],A
 0494 160001            sub [__r2],1
 0497 5100              mov A,[__r0]
 0499 60D5              mov REG[0xd5],A
 049B 5100              mov A,[__r2]
 049D 3F00              mvi [__r1],A
 049F                   .dbline 121
 049F           ;               PGA_pre_SetGain(GF[GainIndx[Port][0]][0]); // set gain on PGA
 049F 52FC              mov A,[X-4]
 04A1 5300              mov [__r1],A
 04A3 550000            mov [__r0],0
 04A6 6500              asl [__r1]
 04A8 6B00              rlc [__r0]
 04AA 060000            add [__r1],<_GainIndx
 04AD 0E0000            adc [__r0],>_GainIndx
 04B0 5100              mov A,[__r0]
 04B2 60D4              mov REG[0xd4],A
 04B4 3E00              mvi A,[__r1]
 04B6 5300              mov [__r1],A
 04B8 550000            mov [__r0],0
 04BB 6500              asl [__r1]
 04BD 6B00              rlc [__r0]
 04BF 060000            add [__r1],<_GF
 04C2 0E0000            adc [__r0],>_GF
 04C5 5100              mov A,[__r0]
 04C7 60D4              mov REG[0xd4],A
 04C9 3E00              mvi A,[__r1]
 04CB 10                push X
 04CC 7C0000            xcall _PGA_pre_SetGain
 04CF 20                pop X
 04D0                   .dbline 122
 04D0           ;       }
 04D0 812E              xjmp L34
 04D2           L33:
 04D2                   .dbline 123
 04D2           ;       else if((MesValueOut < V_MIN) && (GainIndx[Port][1] < I_MAX))// PGA_out
 04D2 62D000            mov REG[0xd0],>_MesValueOut
 04D5 5101              mov A,[_MesValueOut+1]
 04D7 1164              sub A,100
 04D9 5100              mov A,[_MesValueOut]
 04DB 3180              xor A,-128
 04DD 1980              sbb A,(0 ^ 0x80)
 04DF D07B              jnc L36
 04E1           X14:
 04E1 62D000            mov REG[0xd0],>__r0
 04E4 52FC              mov A,[X-4]
 04E6 5300              mov [__r1],A
 04E8 550000            mov [__r0],0
 04EB 6500              asl [__r1]
 04ED 6B00              rlc [__r0]
 04EF 060001            add [__r1],<_GainIndx+1
 04F2 0E0001            adc [__r0],>_GainIndx+1
 04F5 5100              mov A,[__r0]
 04F7 60D4              mov REG[0xd4],A
 04F9 3E00              mvi A,[__r1]
 04FB 3904              cmp A,4
 04FD D05D              jnc L36
 04FF           X15:
 04FF                   .dbline 124
 04FF           ;       {
 04FF                   .dbline 125
 04FF           ;               GainIndx[Port][1]++;
 04FF 62D000            mov REG[0xd0],>__r0
 0502 52FC              mov A,[X-4]
 0504 5300              mov [__r1],A
 0506 550000            mov [__r0],0
 0509 6500              asl [__r1]
 050B 6B00              rlc [__r0]
 050D 060001            add [__r1],<_GainIndx+1
 0510 0E0001            adc [__r0],>_GainIndx+1
 0513 5100              mov A,[__r0]
 0515 60D4              mov REG[0xd4],A
 0517 3E00              mvi A,[__r1]
 0519 7A00              dec [__r1]
 051B 5300              mov [__r2],A
 051D 060001            add [__r2],1
 0520 5100              mov A,[__r0]
 0522 60D5              mov REG[0xd5],A
 0524 5100              mov A,[__r2]
 0526 3F00              mvi [__r1],A
 0528                   .dbline 126
 0528           ;               PGA_out_SetGain(GF[GainIndx[Port][1]][0]); // set gain on PGA
 0528 52FC              mov A,[X-4]
 052A 5300              mov [__r1],A
 052C 550000            mov [__r0],0
 052F 6500              asl [__r1]
 0531 6B00              rlc [__r0]
 0533 060001            add [__r1],<_GainIndx+1
 0536 0E0001            adc [__r0],>_GainIndx+1
 0539 5100              mov A,[__r0]
 053B 60D4              mov REG[0xd4],A
 053D 3E00              mvi A,[__r1]
 053F 5300              mov [__r1],A
 0541 550000            mov [__r0],0
 0544 6500              asl [__r1]
 0546 6B00              rlc [__r0]
 0548 060000            add [__r1],<_GF
 054B 0E0000            adc [__r0],>_GF
 054E 5100              mov A,[__r0]
 0550 60D4              mov REG[0xd4],A
 0552 3E00              mvi A,[__r1]
 0554 10                push X
 0555 7C0000            xcall _PGA_out_SetGain
 0558 20                pop X
 0559                   .dbline 127
 0559           ;       }
 0559 80A5              xjmp L37
 055B           L36:
 055B                   .dbline 128
 055B           ;       else if((MesValue[Port][1] < V_MIN) && (GainIndx[Port][0] < I_MAX))// PGA_pre
 055B 62D000            mov REG[0xd0],>__r0
 055E 52FC              mov A,[X-4]
 0560 5300              mov [__r1],A
 0562 550000            mov [__r0],0
 0565 6500              asl [__r1]
 0567 6B00              rlc [__r0]
 0569 6500              asl [__r1]
 056B 6B00              rlc [__r0]
 056D 060002            add [__r1],<_MesValue+2
 0570 0E0002            adc [__r0],>_MesValue+2
 0573 5100              mov A,[__r0]
 0575 60D4              mov REG[0xd4],A
 0577 3E00              mvi A,[__r1]
 0579 5300              mov [__r0],A
 057B 3E00              mvi A,[__r1]
 057D 1164              sub A,100
 057F 5100              mov A,[__r0]
 0581 3180              xor A,-128
 0583 1980              sbb A,(0 ^ 0x80)
 0585 D079              jnc L41
 0587           X16:
 0587 62D000            mov REG[0xd0],>__r0
 058A 52FC              mov A,[X-4]
 058C 5300              mov [__r1],A
 058E 550000            mov [__r0],0
 0591 6500              asl [__r1]
 0593 6B00              rlc [__r0]
 0595 060000            add [__r1],<_GainIndx
 0598 0E0000            adc [__r0],>_GainIndx
 059B 5100              mov A,[__r0]
 059D 60D4              mov REG[0xd4],A
 059F 3E00              mvi A,[__r1]
 05A1 3904              cmp A,4
 05A3 D05B              jnc L41
 05A5           X17:
 05A5                   .dbline 129
 05A5           ;       {
 05A5                   .dbline 130
 05A5           ;               GainIndx[Port][0]++;
 05A5 62D000            mov REG[0xd0],>__r0
 05A8 52FC              mov A,[X-4]
 05AA 5300              mov [__r1],A
 05AC 550000            mov [__r0],0
 05AF 6500              asl [__r1]
 05B1 6B00              rlc [__r0]
 05B3 060000            add [__r1],<_GainIndx
 05B6 0E0000            adc [__r0],>_GainIndx
 05B9 5100              mov A,[__r0]
 05BB 60D4              mov REG[0xd4],A
 05BD 3E00              mvi A,[__r1]
 05BF 7A00              dec [__r1]
 05C1 5300              mov [__r2],A
 05C3 060001            add [__r2],1
 05C6 5100              mov A,[__r0]
 05C8 60D5              mov REG[0xd5],A
 05CA 5100              mov A,[__r2]
 05CC 3F00              mvi [__r1],A
 05CE                   .dbline 131
 05CE           ;               PGA_pre_SetGain(GF[GainIndx[Port][0]][0]); // set gain on PGA
 05CE 52FC              mov A,[X-4]
 05D0 5300              mov [__r1],A
 05D2 550000            mov [__r0],0
 05D5 6500              asl [__r1]
 05D7 6B00              rlc [__r0]
 05D9 060000            add [__r1],<_GainIndx
 05DC 0E0000            adc [__r0],>_GainIndx
 05DF 5100              mov A,[__r0]
 05E1 60D4              mov REG[0xd4],A
 05E3 3E00              mvi A,[__r1]
 05E5 5300              mov [__r1],A
 05E7 550000            mov [__r0],0
 05EA 6500              asl [__r1]
 05EC 6B00              rlc [__r0]
 05EE 060000            add [__r1],<_GF
 05F1 0E0000            adc [__r0],>_GF
 05F4 5100              mov A,[__r0]
 05F6 60D4              mov REG[0xd4],A
 05F8 3E00              mvi A,[__r1]
 05FA 10                push X
 05FB 7C0000            xcall _PGA_pre_SetGain
 05FE 20                pop X
 05FF                   .dbline 132
 05FF           ;       }       
 05FF           L41:
 05FF           L37:
 05FF           L34:
 05FF           L29:
 05FF                   .dbline -2
 05FF           L27:
 05FF 20                pop X
 0600                   .dbline 0 ; func end
 0600 7F                ret
 0601                   .dbsym l Port -4 c
 0601                   .dbend
 0601                   .dbfunc e DigitalOut _DigitalOut fV
 0601           _DigitalOut::
 0601                   .dbline -1
 0601                   .dbline 136
 0601           ; }
 0601           ; 
 0601           ; void DigitalOut(void)
 0601           ; {// Controls the outputs according to pot setting point
 0601                   .dbline 137
 0601           ;       DIGITAL_OUT_Off();
 0601 10                push X
 0602 7C0000            xcall _DIGITAL_OUT_Off
 0605 20                pop X
 0606                   .dbline 138
 0606           ;       if (MesValueM[0]>PotValue)
 0606 62D000            mov REG[0xd0],>_PotValue
 0609 5101              mov A,[_PotValue+1]
 060B 62D000            mov REG[0xd0],>_MesValueM
 060E 1201              sub A,[_MesValueM+1]
 0610 5100              mov A,[_MesValueM]
 0612 3180              xor A,-128
 0614 62D000            mov REG[0xd0],>__r0
 0617 5300              mov [__rX],A
 0619 62D000            mov REG[0xd0],>_PotValue
 061C 5100              mov A,[_PotValue]
 061E 3180              xor A,-128
 0620 62D000            mov REG[0xd0],>__r0
 0623 1A00              sbb A,[__rX]
 0625 D00B              jnc L45
 0627           X18:
 0627                   .dbline 139
 0627           ;       {
 0627                   .dbline 140
 0627           ;               DIGITAL_OUT_On();
 0627 10                push X
 0628 7C0000            xcall _DIGITAL_OUT_On
 062B                   .dbline 141
 062B           ;               LED_1_On();
 062B 7C0000            xcall _LED_1_On
 062E 20                pop X
 062F                   .dbline 142
 062F           ;       }
 062F 8006              xjmp L46
 0631           L45:
 0631                   .dbline 144
 0631           ;       else
 0631           ;       {
 0631                   .dbline 145
 0631           ;               LED_1_Off();
 0631 10                push X
 0632 7C0000            xcall _LED_1_Off
 0635 20                pop X
 0636                   .dbline 146
 0636           ;       }
 0636           L46:
 0636                   .dbline 148
 0636           ;               
 0636           ;       if (MesValueM[1]>PotValue)
 0636 62D000            mov REG[0xd0],>_PotValue
 0639 5101              mov A,[_PotValue+1]
 063B 62D000            mov REG[0xd0],>_MesValueM
 063E 1203              sub A,[_MesValueM+2+1]
 0640 5102              mov A,[_MesValueM+2]
 0642 3180              xor A,-128
 0644 62D000            mov REG[0xd0],>__r0
 0647 5300              mov [__rX],A
 0649 62D000            mov REG[0xd0],>_PotValue
 064C 5100              mov A,[_PotValue]
 064E 3180              xor A,-128
 0650 62D000            mov REG[0xd0],>__r0
 0653 1A00              sbb A,[__rX]
 0655 D00B              jnc L47
 0657           X19:
 0657                   .dbline 149
 0657           ;       {
 0657                   .dbline 150
 0657           ;               DIGITAL_OUT_On();
 0657 10                push X
 0658 7C0000            xcall _DIGITAL_OUT_On
 065B                   .dbline 151
 065B           ;               LED_2_On();
 065B 7C0000            xcall _LED_2_On
 065E 20                pop X
 065F                   .dbline 152
 065F           ;       }
 065F 8006              xjmp L48
 0661           L47:
 0661                   .dbline 154
 0661           ;       else
 0661           ;       {
 0661                   .dbline 155
 0661           ;               LED_2_Off();
 0661 10                push X
 0662 7C0000            xcall _LED_2_Off
 0665 20                pop X
 0666                   .dbline 156
 0666           ;       }
 0666           L48:
 0666                   .dbline 158
 0666           ;       
 0666           ;       if (MesValueM[2]>PotValue)
 0666 62D000            mov REG[0xd0],>_PotValue
 0669 5101              mov A,[_PotValue+1]
 066B 62D000            mov REG[0xd0],>_MesValueM
 066E 1205              sub A,[_MesValueM+4+1]
 0670 5104              mov A,[_MesValueM+4]
 0672 3180              xor A,-128
 0674 62D000            mov REG[0xd0],>__r0
 0677 5300              mov [__rX],A
 0679 62D000            mov REG[0xd0],>_PotValue
 067C 5100              mov A,[_PotValue]
 067E 3180              xor A,-128
 0680 62D000            mov REG[0xd0],>__r0
 0683 1A00              sbb A,[__rX]
 0685 D00B              jnc L50
 0687           X20:
 0687                   .dbline 159
 0687           ;       {
 0687                   .dbline 160
 0687           ;               DIGITAL_OUT_On();
 0687 10                push X
 0688 7C0000            xcall _DIGITAL_OUT_On
 068B                   .dbline 161
 068B           ;               LED_3_On();
 068B 7C0000            xcall _LED_3_On
 068E 20                pop X
 068F                   .dbline 162
 068F           ;       }
 068F 8006              xjmp L51
 0691           L50:
 0691                   .dbline 164
 0691           ;       else
 0691           ;       {
 0691                   .dbline 165
 0691           ;               LED_3_Off();
 0691 10                push X
 0692 7C0000            xcall _LED_3_Off
 0695 20                pop X
 0696                   .dbline 166
 0696           ;       }
 0696           L51:
 0696                   .dbline -2
 0696           L44:
 0696                   .dbline 0 ; func end
 0696 7F                ret
 0697                   .dbend
 0697                   .dbfunc e UartTxValues _UartTxValues fV
 0697           _UartTxValues::
 0697                   .dbline -1
 0697                   .dbline 170
 0697           ; }
 0697           ; 
 0697           ; void UartTxValues(void)
 0697           ; {/* Transmit via UART the analog values read from various inputs.
 0697                   .dbline 175
 0697           ;       Usefull for debugging purposes, it could be converted in a
 0697           ;       command string using the same protocol used for dsNav if
 0697           ;       needed to output sound level values via serial comm
 0697           ; */
 0697           ;       TX8_CPutString("\n\r");
 0697 10                push X
 0698 505D              mov A,>L54
 069A 08                push A
 069B 505D              mov A,<L54
 069D 5C                mov X,A
 069E 18                pop A
 069F 7C0000            xcall _TX8_CPutString
 06A2 20                pop X
 06A3                   .dbline 182
 06A3           ;       
 06A3           ; /*    TX8_CPutString("Pot Value = ");
 06A3           ;       itoa(str, PotValue,10);
 06A3           ;       TX8_PutString(str);
 06A3           ; */
 06A3           ; 
 06A3           ;       TX8_CPutString("    Mes Value: 1 = ");
 06A3 10                push X
 06A4 5049              mov A,>L55
 06A6 08                push A
 06A7 5049              mov A,<L55
 06A9 5C                mov X,A
 06AA 18                pop A
 06AB 7C0000            xcall _TX8_CPutString
 06AE 20                pop X
 06AF                   .dbline 183
 06AF           ;       itoa(str, MesValueM[0],10);
 06AF 5000              mov A,0
 06B1 08                push A
 06B2 500A              mov A,10
 06B4 08                push A
 06B5 62D000            mov REG[0xd0],>_MesValueM
 06B8 5100              mov A,[_MesValueM]
 06BA 08                push A
 06BB 5101              mov A,[_MesValueM+1]
 06BD 08                push A
 06BE 5000              mov A,>_str
 06C0 08                push A
 06C1 5000              mov A,<_str
 06C3 08                push A
 06C4 7C0000            xcall _itoa
 06C7 38FA              add SP,-6
 06C9                   .dbline 184
 06C9           ;       TX8_PutString(str);
 06C9 10                push X
 06CA 5000              mov A,>_str
 06CC 08                push A
 06CD 5000              mov A,<_str
 06CF 5C                mov X,A
 06D0 18                pop A
 06D1 7C0000            xcall _TX8_PutString
 06D4 20                pop X
 06D5                   .dbline 185
 06D5           ;       TX8_CPutString("  -  2 = ");
 06D5 10                push X
 06D6 503F              mov A,>L56
 06D8 08                push A
 06D9 503F              mov A,<L56
 06DB 5C                mov X,A
 06DC 18                pop A
 06DD 7C0000            xcall _TX8_CPutString
 06E0 20                pop X
 06E1                   .dbline 186
 06E1           ;       itoa(str, MesValueM[1],10);
 06E1 5000              mov A,0
 06E3 08                push A
 06E4 500A              mov A,10
 06E6 08                push A
 06E7 62D000            mov REG[0xd0],>_MesValueM
 06EA 5102              mov A,[_MesValueM+2]
 06EC 08                push A
 06ED 5103              mov A,[_MesValueM+2+1]
 06EF 08                push A
 06F0 5000              mov A,>_str
 06F2 08                push A
 06F3 5000              mov A,<_str
 06F5 08                push A
 06F6 7C0000            xcall _itoa
 06F9 38FA              add SP,-6
 06FB                   .dbline 187
 06FB           ;       TX8_PutString(str);
 06FB 10                push X
 06FC 5000              mov A,>_str
 06FE 08                push A
 06FF 5000              mov A,<_str
 0701 5C                mov X,A
 0702 18                pop A
 0703 7C0000            xcall _TX8_PutString
 0706 20                pop X
 0707                   .dbline 188
 0707           ;       TX8_CPutString("  -  3 = ");
 0707 10                push X
 0708 5035              mov A,>L58
 070A 08                push A
 070B 5035              mov A,<L58
 070D 5C                mov X,A
 070E 18                pop A
 070F 7C0000            xcall _TX8_CPutString
 0712 20                pop X
 0713                   .dbline 189
 0713           ;       itoa(str, MesValueM[2],10);
 0713 5000              mov A,0
 0715 08                push A
 0716 500A              mov A,10
 0718 08                push A
 0719 62D000            mov REG[0xd0],>_MesValueM
 071C 5104              mov A,[_MesValueM+4]
 071E 08                push A
 071F 5105              mov A,[_MesValueM+4+1]
 0721 08                push A
 0722 5000              mov A,>_str
 0724 08                push A
 0725 5000              mov A,<_str
 0727 08                push A
 0728 7C0000            xcall _itoa
 072B 38FA              add SP,-6
 072D                   .dbline 190
 072D           ;       TX8_PutString(str);
 072D 10                push X
 072E 5000              mov A,>_str
 0730 08                push A
 0731 5000              mov A,<_str
 0733 5C                mov X,A
 0734 18                pop A
 0735 7C0000            xcall _TX8_PutString
 0738 20                pop X
 0739                   .dbline 191
 0739           ;       TX8_CPutString("  Gain Pre: 1 = ");
 0739 10                push X
 073A 5024              mov A,>L60
 073C 08                push A
 073D 5024              mov A,<L60
 073F 5C                mov X,A
 0740 18                pop A
 0741 7C0000            xcall _TX8_CPutString
 0744 20                pop X
 0745                   .dbline 192
 0745           ;       itoa(str, GF[GainIndx[0][0]][1], 10);
 0745 5000              mov A,0
 0747 08                push A
 0748 500A              mov A,10
 074A 08                push A
 074B 62D000            mov REG[0xd0],>_GainIndx
 074E 5100              mov A,[_GainIndx]
 0750 62D000            mov REG[0xd0],>__r0
 0753 5300              mov [__r1],A
 0755 550000            mov [__r0],0
 0758 6500              asl [__r1]
 075A 6B00              rlc [__r0]
 075C 060001            add [__r1],<_GF+1
 075F 0E0001            adc [__r0],>_GF+1
 0762 5100              mov A,[__r0]
 0764 60D4              mov REG[0xd4],A
 0766 3E00              mvi A,[__r1]
 0768 5300              mov [__r1],A
 076A 5000              mov A,0
 076C 08                push A
 076D 5100              mov A,[__r1]
 076F 08                push A
 0770 5000              mov A,>_str
 0772 08                push A
 0773 5000              mov A,<_str
 0775 08                push A
 0776 7C0000            xcall _itoa
 0779 38FA              add SP,-6
 077B                   .dbline 193
 077B           ;       TX8_PutString(str);
 077B 10                push X
 077C 5000              mov A,>_str
 077E 08                push A
 077F 5000              mov A,<_str
 0781 5C                mov X,A
 0782 18                pop A
 0783 7C0000            xcall _TX8_PutString
 0786 20                pop X
 0787                   .dbline 194
 0787           ;       TX8_CPutString("  -  2 = ");
 0787 10                push X
 0788 503F              mov A,>L56
 078A 08                push A
 078B 503F              mov A,<L56
 078D 5C                mov X,A
 078E 18                pop A
 078F 7C0000            xcall _TX8_CPutString
 0792 20                pop X
 0793                   .dbline 195
 0793           ;       itoa(str, GF[GainIndx[1][0]][1], 10);
 0793 5000              mov A,0
 0795 08                push A
 0796 500A              mov A,10
 0798 08                push A
 0799 62D000            mov REG[0xd0],>_GainIndx
 079C 5102              mov A,[_GainIndx+2]
 079E 62D000            mov REG[0xd0],>__r0
 07A1 5300              mov [__r1],A
 07A3 550000            mov [__r0],0
 07A6 6500              asl [__r1]
 07A8 6B00              rlc [__r0]
 07AA 060001            add [__r1],<_GF+1
 07AD 0E0001            adc [__r0],>_GF+1
 07B0 5100              mov A,[__r0]
 07B2 60D4              mov REG[0xd4],A
 07B4 3E00              mvi A,[__r1]
 07B6 5300              mov [__r1],A
 07B8 5000              mov A,0
 07BA 08                push A
 07BB 5100              mov A,[__r1]
 07BD 08                push A
 07BE 5000              mov A,>_str
 07C0 08                push A
 07C1 5000              mov A,<_str
 07C3 08                push A
 07C4 7C0000            xcall _itoa
 07C7 38FA              add SP,-6
 07C9                   .dbline 196
 07C9           ;       TX8_PutString(str);     
 07C9 10                push X
 07CA 5000              mov A,>_str
 07CC 08                push A
 07CD 5000              mov A,<_str
 07CF 5C                mov X,A
 07D0 18                pop A
 07D1 7C0000            xcall _TX8_PutString
 07D4 20                pop X
 07D5                   .dbline 197
 07D5           ;       TX8_CPutString("  -  3 = ");
 07D5 10                push X
 07D6 5035              mov A,>L58
 07D8 08                push A
 07D9 5035              mov A,<L58
 07DB 5C                mov X,A
 07DC 18                pop A
 07DD 7C0000            xcall _TX8_CPutString
 07E0 20                pop X
 07E1                   .dbline 198
 07E1           ;       itoa(str, GF[GainIndx[2][0]][1], 10);
 07E1 5000              mov A,0
 07E3 08                push A
 07E4 500A              mov A,10
 07E6 08                push A
 07E7 62D000            mov REG[0xd0],>_GainIndx
 07EA 5104              mov A,[_GainIndx+4]
 07EC 62D000            mov REG[0xd0],>__r0
 07EF 5300              mov [__r1],A
 07F1 550000            mov [__r0],0
 07F4 6500              asl [__r1]
 07F6 6B00              rlc [__r0]
 07F8 060001            add [__r1],<_GF+1
 07FB 0E0001            adc [__r0],>_GF+1
 07FE 5100              mov A,[__r0]
 0800 60D4              mov REG[0xd4],A
 0802 3E00              mvi A,[__r1]
 0804 5300              mov [__r1],A
 0806 5000              mov A,0
 0808 08                push A
 0809 5100              mov A,[__r1]
 080B 08                push A
 080C 5000              mov A,>_str
 080E 08                push A
 080F 5000              mov A,<_str
 0811 08                push A
 0812 7C0000            xcall _itoa
 0815 38FA              add SP,-6
 0817                   .dbline 199
 0817           ;       TX8_PutString(str);     
 0817 10                push X
 0818 5000              mov A,>_str
 081A 08                push A
 081B 5000              mov A,<_str
 081D 5C                mov X,A
 081E 18                pop A
 081F 7C0000            xcall _TX8_PutString
 0822 20                pop X
 0823                   .dbline 200
 0823           ;       TX8_CPutString("  Gain Out: 1 = ");
 0823 10                push X
 0824 5013              mov A,>L66
 0826 08                push A
 0827 5013              mov A,<L66
 0829 5C                mov X,A
 082A 18                pop A
 082B 7C0000            xcall _TX8_CPutString
 082E 20                pop X
 082F                   .dbline 201
 082F           ;       itoa(str, GF[GainIndx[0][1]][1], 10);
 082F 5000              mov A,0
 0831 08                push A
 0832 500A              mov A,10
 0834 08                push A
 0835 62D000            mov REG[0xd0],>_GainIndx
 0838 5101              mov A,[_GainIndx+1]
 083A 62D000            mov REG[0xd0],>__r0
 083D 5300              mov [__r1],A
 083F 550000            mov [__r0],0
 0842 6500              asl [__r1]
 0844 6B00              rlc [__r0]
 0846 060001            add [__r1],<_GF+1
 0849 0E0001            adc [__r0],>_GF+1
 084C 5100              mov A,[__r0]
 084E 60D4              mov REG[0xd4],A
 0850 3E00              mvi A,[__r1]
 0852 5300              mov [__r1],A
 0854 5000              mov A,0
 0856 08                push A
 0857 5100              mov A,[__r1]
 0859 08                push A
 085A 5000              mov A,>_str
 085C 08                push A
 085D 5000              mov A,<_str
 085F 08                push A
 0860 7C0000            xcall _itoa
 0863 38FA              add SP,-6
 0865                   .dbline 202
 0865           ;       TX8_PutString(str);
 0865 10                push X
 0866 5000              mov A,>_str
 0868 08                push A
 0869 5000              mov A,<_str
 086B 5C                mov X,A
 086C 18                pop A
 086D 7C0000            xcall _TX8_PutString
 0870 20                pop X
 0871                   .dbline 203
 0871           ;       TX8_CPutString("  -  2 = ");
 0871 10                push X
 0872 503F              mov A,>L56
 0874 08                push A
 0875 503F              mov A,<L56
 0877 5C                mov X,A
 0878 18                pop A
 0879 7C0000            xcall _TX8_CPutString
 087C 20                pop X
 087D                   .dbline 204
 087D           ;       itoa(str, GF[GainIndx[1][1]][1], 10);
 087D 5000              mov A,0
 087F 08                push A
 0880 500A              mov A,10
 0882 08                push A
 0883 62D000            mov REG[0xd0],>_GainIndx
 0886 5103              mov A,[_GainIndx+2+1]
 0888 62D000            mov REG[0xd0],>__r0
 088B 5300              mov [__r1],A
 088D 550000            mov [__r0],0
 0890 6500              asl [__r1]
 0892 6B00              rlc [__r0]
 0894 060001            add [__r1],<_GF+1
 0897 0E0001            adc [__r0],>_GF+1
 089A 5100              mov A,[__r0]
 089C 60D4              mov REG[0xd4],A
 089E 3E00              mvi A,[__r1]
 08A0 5300              mov [__r1],A
 08A2 5000              mov A,0
 08A4 08                push A
 08A5 5100              mov A,[__r1]
 08A7 08                push A
 08A8 5000              mov A,>_str
 08AA 08                push A
 08AB 5000              mov A,<_str
 08AD 08                push A
 08AE 7C0000            xcall _itoa
 08B1 38FA              add SP,-6
 08B3                   .dbline 205
 08B3           ;       TX8_PutString(str);     
 08B3 10                push X
 08B4 5000              mov A,>_str
 08B6 08                push A
 08B7 5000              mov A,<_str
 08B9 5C                mov X,A
 08BA 18                pop A
 08BB 7C0000            xcall _TX8_PutString
 08BE 20                pop X
 08BF                   .dbline 206
 08BF           ;       TX8_CPutString("  -  3 = ");
 08BF 10                push X
 08C0 5035              mov A,>L58
 08C2 08                push A
 08C3 5035              mov A,<L58
 08C5 5C                mov X,A
 08C6 18                pop A
 08C7 7C0000            xcall _TX8_CPutString
 08CA 20                pop X
 08CB                   .dbline 207
 08CB           ;       itoa(str, GF[GainIndx[2][1]][1], 10);
 08CB 5000              mov A,0
 08CD 08                push A
 08CE 500A              mov A,10
 08D0 08                push A
 08D1 62D000            mov REG[0xd0],>_GainIndx
 08D4 5105              mov A,[_GainIndx+4+1]
 08D6 62D000            mov REG[0xd0],>__r0
 08D9 5300              mov [__r1],A
 08DB 550000            mov [__r0],0
 08DE 6500              asl [__r1]
 08E0 6B00              rlc [__r0]
 08E2 060001            add [__r1],<_GF+1
 08E5 0E0001            adc [__r0],>_GF+1
 08E8 5100              mov A,[__r0]
 08EA 60D4              mov REG[0xd4],A
 08EC 3E00              mvi A,[__r1]
 08EE 5300              mov [__r1],A
 08F0 5000              mov A,0
 08F2 08                push A
 08F3 5100              mov A,[__r1]
 08F5 08                push A
 08F6 5000              mov A,>_str
 08F8 08                push A
 08F9 5000              mov A,<_str
 08FB 08                push A
 08FC 7C0000            xcall _itoa
 08FF 38FA              add SP,-6
 0901                   .dbline 208
 0901           ;       TX8_PutString(str);     
 0901 10                push X
 0902 5000              mov A,>_str
 0904 08                push A
 0905 5000              mov A,<_str
 0907 5C                mov X,A
 0908 18                pop A
 0909 7C0000            xcall _TX8_PutString
 090C 20                pop X
 090D                   .dbline 211
 090D           ;       
 090D           ;       
 090D           ;       TX8_CPutString("  --MesValueOut = ");
 090D 10                push X
 090E 5000              mov A,>L75
 0910 08                push A
 0911 5000              mov A,<L75
 0913 5C                mov X,A
 0914 18                pop A
 0915 7C0000            xcall _TX8_CPutString
 0918 20                pop X
 0919                   .dbline 212
 0919           ;       itoa(str, MesValueOut, 10);
 0919 5000              mov A,0
 091B 08                push A
 091C 500A              mov A,10
 091E 08                push A
 091F 62D000            mov REG[0xd0],>_MesValueOut
 0922 5100              mov A,[_MesValueOut]
 0924 08                push A
 0925 5101              mov A,[_MesValueOut+1]
 0927 08                push A
 0928 5000              mov A,>_str
 092A 08                push A
 092B 5000              mov A,<_str
 092D 08                push A
 092E 7C0000            xcall _itoa
 0931 38FA              add SP,-6
 0933                   .dbline 213
 0933           ;       TX8_PutString(str);     
 0933 10                push X
 0934 5000              mov A,>_str
 0936 08                push A
 0937 5000              mov A,<_str
 0939 5C                mov X,A
 093A 18                pop A
 093B 7C0000            xcall _TX8_PutString
 093E 20                pop X
 093F                   .dbline -2
 093F           L53:
 093F                   .dbline 0 ; func end
 093F 7F                ret
 0940                   .dbend
 0940                   .dbfunc e BlocksInit _BlocksInit fV
 0940           _BlocksInit::
 0940                   .dbline -1
 0940                   .dbline 235
 0940           ; 
 0940           ; /*
 0940           ;       TX8_CPutString("  --Pre = ");
 0940           ;       itoa(str, MesValue[0][0], 10);
 0940           ;       TX8_PutString(str);
 0940           ;       
 0940           ;       TX8_CPutString("  --Out = ");
 0940           ;       itoa(str, MesValue[0][1], 10);
 0940           ;       TX8_PutString(str);
 0940           ;       
 0940           ;       TX8_CPutString("  --Sum = ");
 0940           ;       itoa(str, MesValueSum[0][0], 10);
 0940           ;       TX8_PutString(str);
 0940           ;       
 0940           ;       TX8_CPutString("  --Count = ");
 0940           ;       itoa(str, MesValueSum[0][1], 10);
 0940           ;       TX8_PutString(str);
 0940           ; */
 0940           ; }
 0940           ;       
 0940           ; void BlocksInit(void)
 0940           ; {// Analog and digital blocks inizialization
 0940                   .dbline 236
 0940           ;       ADCINCVR_pot_Start(ADCINCVR_pot_HIGHPOWER);     
 0940 10                push X
 0941 5003              mov A,3
 0943 7C0000            xcall _ADCINCVR_pot_Start
 0946 20                pop X
 0947                   .dbline 237
 0947           ;       ADCINCVR_mes_Start(ADCINCVR_mes_HIGHPOWER);
 0947 10                push X
 0948 5003              mov A,3
 094A 7C0000            xcall _ADCINCVR_mes_Start
 094D                   .dbline 238
 094D           ;       AMUX4_mic_Start();
 094D 7C0000            xcall _AMUX4_mic_Start
 0950 20                pop X
 0951                   .dbline 239
 0951           ;       BPF4_4KHz_Start(BPF4_4KHz_HIGHPOWER);
 0951 10                push X
 0952 5003              mov A,3
 0954 7C0000            xcall _BPF4_4KHz_Start
 0957                   .dbline 240
 0957           ;       I2CHW_Start();
 0957 7C0000            xcall _I2CHW_Start
 095A 20                pop X
 095B                   .dbline 241
 095B           ;       PGA_out_Start(PGA_out_HIGHPOWER);
 095B 10                push X
 095C 5003              mov A,3
 095E 7C0000            xcall _PGA_out_Start
 0961 20                pop X
 0962                   .dbline 242
 0962           ;       PGA_pre_Start(PGA_pre_HIGHPOWER); 
 0962 10                push X
 0963 5003              mov A,3
 0965 7C0000            xcall _PGA_pre_Start
 0968 20                pop X
 0969                   .dbline 243
 0969           ;       RefMux_1_Start(RefMux_1_HIGHPOWER);
 0969 10                push X
 096A 5003              mov A,3
 096C 7C0000            xcall _RefMux_1_Start
 096F 20                pop X
 0970                   .dbline 244
 0970           ;     SCBLOCK_inbuff_Start(SCBLOCK_inbuff_HIGHPOWER);
 0970 10                push X
 0971 5003              mov A,3
 0973 7C0000            xcall _SCBLOCK_inbuff_Start
 0976                   .dbline 245
 0976           ;       LED_1_Start();
 0976 7C0000            xcall _LED_1_Start
 0979                   .dbline 246
 0979           ;       LED_2_Start();
 0979 7C0000            xcall _LED_2_Start
 097C                   .dbline 247
 097C           ;       LED_3_Start();
 097C 7C0000            xcall _LED_3_Start
 097F                   .dbline 248
 097F           ;       DIGITAL_OUT_Start();  
 097F 7C0000            xcall _DIGITAL_OUT_Start
 0982                   .dbline 250
 0982           ;       
 0982           ;       TX8_EnableInt();
 0982 7C0000            xcall _TX8_EnableInt
 0985 20                pop X
 0986                   .dbline 251
 0986           ;       TX8_Start(TX8_PARITY_NONE);
 0986 10                push X
 0987 5000              mov A,0
 0989 7C0000            xcall _TX8_Start
 098C 20                pop X
 098D                   .dbline 253
 098D           ;       
 098D           ;       AMUX4_mic_InputSelect(AMUX4_mic_PORT0_1);
 098D 10                push X
 098E 5000              mov A,0
 0990 7C0000            xcall _AMUX4_mic_InputSelect
 0993 20                pop X
 0994                   .dbline 255
 0994           ; 
 0994           ;       PGA_pre_SetGain(GF[GainIndx[0][0]][0]);
 0994 62D000            mov REG[0xd0],>_GainIndx
 0997 5100              mov A,[_GainIndx]
 0999 62D000            mov REG[0xd0],>__r0
 099C 5300              mov [__r1],A
 099E 550000            mov [__r0],0
 09A1 6500              asl [__r1]
 09A3 6B00              rlc [__r0]
 09A5 060000            add [__r1],<_GF
 09A8 0E0000            adc [__r0],>_GF
 09AB 5100              mov A,[__r0]
 09AD 60D4              mov REG[0xd4],A
 09AF 3E00              mvi A,[__r1]
 09B1 10                push X
 09B2 7C0000            xcall _PGA_pre_SetGain
 09B5 20                pop X
 09B6                   .dbline 256
 09B6           ;       PGA_out_SetGain(GF[GainIndx[0][1]][0]);
 09B6 62D000            mov REG[0xd0],>_GainIndx
 09B9 5101              mov A,[_GainIndx+1]
 09BB 62D000            mov REG[0xd0],>__r0
 09BE 5300              mov [__r1],A
 09C0 550000            mov [__r0],0
 09C3 6500              asl [__r1]
 09C5 6B00              rlc [__r0]
 09C7 060000            add [__r1],<_GF
 09CA 0E0000            adc [__r0],>_GF
 09CD 5100              mov A,[__r0]
 09CF 60D4              mov REG[0xd4],A
 09D1 3E00              mvi A,[__r1]
 09D3 10                push X
 09D4 7C0000            xcall _PGA_out_SetGain
 09D7                   .dbline 258
 09D7           ;       
 09D7           ;     HB_Tmr_EnableInt();  
 09D7 7C0000            xcall _HB_Tmr_EnableInt
 09DA                   .dbline 259
 09DA           ;       HB_Tmr_Start();         
 09DA 7C0000            xcall _HB_Tmr_Start
 09DD 20                pop X
 09DE                   .dbline -2
 09DE           L76:
 09DE                   .dbline 0 ; func end
 09DE 7F                ret
 09DF                   .dbend
 09DF                   .dbfunc e HB_Tmr_ISR_C _HB_Tmr_ISR_C fV
 09DF           _HB_Tmr_ISR_C::
 09DF                   .dbline -1
 09DF 71C0              or F,-64
 09E1 08                push A
 09E2 5DD0              mov A,REG[0xd0]
 09E4 08                push A
 09E5                   .dbline 263
 09E5           ; }
 09E5           ;       
 09E5           ; void HB_Tmr_ISR_C(void)
 09E5           ; {// Base clock for all of the timings in the program
 09E5                   .dbline 264
 09E5           ;       TmrFlag = 1;
 09E5 62D000            mov REG[0xd0],>_TmrFlag
 09E8 550001            mov [_TmrFlag],1
 09EB                   .dbline 265
 09EB           ;       Tmr1++;
 09EB 62D000            mov REG[0xd0],>_Tmr1
 09EE 7601              inc [_Tmr1+1]
 09F0 0E0000            adc [_Tmr1],0
 09F3                   .dbline -2
 09F3           L78:
 09F3 18                pop A
 09F4 60D0              mov REG[208],A
 09F6 18                pop A
 09F7                   .dbline 0 ; func end
 09F7 7E                reti
 09F8                   .dbend
 09F8                   .dbfunc e DelayMs _DelayMs fV
 09F8           ;              i -> X+0
 09F8           ;             Ms -> X-5
 09F8           _DelayMs::
 09F8                   .dbline -1
 09F8 10                push X
 09F9 4F                mov X,SP
 09FA 3802              add SP,2
 09FC                   .dbline 269
 09FC           ; }
 09FC           ; 
 09FC           ; void DelayMs(int Ms)
 09FC           ; {
 09FC                   .dbline 271
 09FC           ;       int i;
 09FC           ;       for (i=0; i<Ms; i++)
 09FC 560100            mov [X+1],0
 09FF 560000            mov [X+0],0
 0A02 800D              xjmp L83
 0A04           L80:
 0A04                   .dbline 272
 0A04           ;       {
 0A04                   .dbline 273
 0A04           ;               Delay50uTimes(20);
 0A04 10                push X
 0A05 5014              mov A,20
 0A07 7C0000            xcall _Delay50uTimes
 0A0A 20                pop X
 0A0B                   .dbline 274
 0A0B           ;       }
 0A0B           L81:
 0A0B                   .dbline 271
 0A0B 7701              inc [X+1]
 0A0D 0F0000            adc [X+0],0
 0A10           L83:
 0A10                   .dbline 271
 0A10 5201              mov A,[X+1]
 0A12 13FC              sub A,[X-4]
 0A14 52FB              mov A,[X-5]
 0A16 3180              xor A,-128
 0A18 62D000            mov REG[0xd0],>__r0
 0A1B 5300              mov [__rX],A
 0A1D 5200              mov A,[X+0]
 0A1F 3180              xor A,-128
 0A21 1A00              sbb A,[__rX]
 0A23 CFE0              jc L80
 0A25           X21:
 0A25                   .dbline -2
 0A25           L79:
 0A25 38FE              add SP,-2
 0A27 20                pop X
 0A28                   .dbline 0 ; func end
 0A28 7F                ret
 0A29                   .dbsym l i 0 I
 0A29                   .dbsym l Ms -5 I
 0A29                   .dbend
 0A29                   .dbfunc e LedTest _LedTest fV
 0A29           ;              i -> X+0
 0A29           _LedTest::
 0A29                   .dbline -1
 0A29 10                push X
 0A2A 4F                mov X,SP
 0A2B 3802              add SP,2
 0A2D                   .dbline 278
 0A2D           ; }
 0A2D           ; 
 0A2D           ; void LedTest(void)
 0A2D           ; {
 0A2D                   .dbline 280
 0A2D           ;       int i;
 0A2D           ;       LED_1_Off();
 0A2D 10                push X
 0A2E 7C0000            xcall _LED_1_Off
 0A31                   .dbline 281
 0A31           ;       LED_2_Off();
 0A31 7C0000            xcall _LED_2_Off
 0A34                   .dbline 282
 0A34           ;       LED_3_Off();
 0A34 7C0000            xcall _LED_3_Off
 0A37 20                pop X
 0A38                   .dbline 284
 0A38           ;       
 0A38           ;       for (i=0; i<3; i++)
 0A38 560100            mov [X+1],0
 0A3B 560000            mov [X+0],0
 0A3E           L85:
 0A3E                   .dbline 285
 0A3E           ;       {
 0A3E                   .dbline 286
 0A3E           ;               LED_1_On();
 0A3E 10                push X
 0A3F 7C0000            xcall _LED_1_On
 0A42 20                pop X
 0A43                   .dbline 287
 0A43           ;               DelayMs(500);
 0A43 5001              mov A,1
 0A45 08                push A
 0A46 50F4              mov A,-12
 0A48 08                push A
 0A49 9FAD              xcall _DelayMs
 0A4B 38FE              add SP,-2
 0A4D                   .dbline 288
 0A4D           ;               LED_1_Off();
 0A4D 10                push X
 0A4E 7C0000            xcall _LED_1_Off
 0A51                   .dbline 289
 0A51           ;               LED_2_On();
 0A51 7C0000            xcall _LED_2_On
 0A54 20                pop X
 0A55                   .dbline 290
 0A55           ;               DelayMs(500);
 0A55 5001              mov A,1
 0A57 08                push A
 0A58 50F4              mov A,-12
 0A5A 08                push A
 0A5B 9F9B              xcall _DelayMs
 0A5D 38FE              add SP,-2
 0A5F                   .dbline 291
 0A5F           ;               LED_2_Off();
 0A5F 10                push X
 0A60 7C0000            xcall _LED_2_Off
 0A63                   .dbline 292
 0A63           ;               LED_3_On();
 0A63 7C0000            xcall _LED_3_On
 0A66 20                pop X
 0A67                   .dbline 293
 0A67           ;               DelayMs(500);
 0A67 5001              mov A,1
 0A69 08                push A
 0A6A 50F4              mov A,-12
 0A6C 08                push A
 0A6D 9F89              xcall _DelayMs
 0A6F 38FE              add SP,-2
 0A71                   .dbline 294
 0A71           ;               LED_3_Off();
 0A71 10                push X
 0A72 7C0000            xcall _LED_3_Off
 0A75 20                pop X
 0A76                   .dbline 295
 0A76           ;       }
 0A76           L86:
 0A76                   .dbline 284
 0A76 7701              inc [X+1]
 0A78 0F0000            adc [X+0],0
 0A7B                   .dbline 284
 0A7B 5201              mov A,[X+1]
 0A7D 1103              sub A,3
 0A7F 5200              mov A,[X+0]
 0A81 3180              xor A,-128
 0A83 1980              sbb A,(0 ^ 0x80)
 0A85 CFB8              jc L85
 0A87           X22:
 0A87                   .dbline -2
 0A87           L84:
 0A87 38FE              add SP,-2
 0A89 20                pop X
 0A8A                   .dbline 0 ; func end
 0A8A 7F                ret
 0A8B                   .dbsym l i 0 I
 0A8B                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\main.c
 0000           _str::
 0000 00000000000000    .byte 0,0,0,0,0,0,0
 0007                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0007                   .dbsym e str _str A[7:7]c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _Tmr1::
 0000 0000              .byte 0,0
 0002                   .dbsym e Tmr1 _Tmr1 i
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _i::
 0000 0000              .byte 0,0
 0002                   .dbsym e i _i i
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _MesValueM::
 0000 000000000000      .byte 0,0,0,0,0,0
 0006                   .dbsym e MesValueM _MesValueM A[6:3]I
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _MesValue::
 0000 00000000000000000000      .word 0,0,0,0,0
 000A 0000              .byte 0,0
 000C                   .dbsym e MesValue _MesValue A[12:3:2]I
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _MesValueOut::
 0000 0000              .byte 0,0
 0002                   .dbsym e MesValueOut _MesValueOut I
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _PotValue::
 0000 0000              .byte 0,0
 0002                   .dbsym e PotValue _PotValue I
                        .area lit(rom, con, rel)
 0000           L75:
 0000 20202D2D4D657356616C75654F757420  .byte 32,32,45,45,'M,'e,'s,'V,'a,'l,'u,'e,'O,'u,'t,32
 0010 3D2000            .byte 61,32,0
 0013           L66:
 0013 20204761696E204F75743A2031203D20  .byte 32,32,'G,'a,'i,'n,32,'O,'u,'t,58,32,49,32,61,32
 0023 00                .byte 0
 0024           L60:
 0024 20204761696E205072653A2031203D20  .byte 32,32,'G,'a,'i,'n,32,'P,'r,'e,58,32,49,32,61,32
 0034 00                .byte 0
 0035           L58:
 0035 20202D202033203D2000      .byte 32,32,45,32,32,51,32,61,32,0
 003F           L56:
 003F 20202D202032203D2000      .byte 32,32,45,32,32,50,32,61,32,0
 0049           L55:
 0049 202020204D65732056616C75653A2031  .byte 32,32,32,32,'M,'e,'s,32,'V,'a,'l,'u,'e,58,32,49
 0059 203D2000          .byte 32,61,32,0
 005D           L54:
 005D 0A0D00            .byte 10,13,0
