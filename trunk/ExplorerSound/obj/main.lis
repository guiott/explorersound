 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _PortIndx::
 0000 00                .byte 0
 0001                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0001                   .dbsym e PortIndx _PortIndx c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _Tmr1::
 0000 0000              .word 0
 0002                   .dbsym e Tmr1 _Tmr1 i
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _Tmr2::
 0000 0000              .word 0
 0002                   .dbsym e Tmr2 _Tmr2 i
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _Time10ms::
 0000 00000000          .word 0,0
 0004                   .dbsym e Time10ms _Time10ms L
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _TmrFlag::
 0000 00                .byte 0
 0001                   .dbsym e TmrFlag _TmrFlag c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _GF::
 0000 F801              .byte 248,1
 0002 7802              .byte 'x,2
 0004 3804              .byte 56,4
 0006 1808              .byte 24,8
 0008 0810              .byte 8,16
 000A 1C18              .byte 28,24
 000C 0C30              .byte 12,48
 000E                   .dbsym e GF _GF A[14:7:2]c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _GainIndx::
 0000 0202              .byte 2,2
 0002 0202              .byte 2,2
 0004 0202              .byte 2,2
 0006                   .dbsym e GainIndx _GainIndx A[6:3:2]c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area text(rom, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;        PortNum -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3803              add SP,3
 0004                   .dbline 38
 0004           ; /* ////////////////////////////////////////////////////////////////////////////
 0004           ; ** Project:      ExplorerSound
 0004           ; ** Author:    Guido Ottaviani-->guido@guiott.com<--
 0004           ; ** Description: 
 0004           ; ** version 1.0   07-11-2010
 0004           ; **
 0004           ; ** Detailed descriptions are on file "Notes.txt" 
 0004           ; **
 0004           ; -------------------------------------------------------------------------------
 0004           ; Copyright 2010 Guido Ottaviani
 0004           ; guido@guiott.com
 0004           ; 
 0004           ;       ExplorerSound is free software: you can redistribute it and/or modify
 0004           ;     it under the terms of the GNU General Public License as published by
 0004           ;     the Free Software Foundation, either version 3 of the License, or
 0004           ;     (at your option) any later version.
 0004           ; 
 0004           ;     ExplorerSound is distributed in the hope that it will be useful,
 0004           ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
 0004           ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 0004           ;     GNU General Public License for more details.
 0004           ; 
 0004           ;     You should have received a copy of the GNU General Public License
 0004           ;     along with ExplorerSound.  If not, see <http://www.gnu.org/licenses/>.
 0004           ; -------------------------------------------------------------------------------      
 0004           ; /////////////////////////////////////////////////////////////////////////////*/
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include <stdlib.h>
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include "prototypes.h"
 0004           ; #include "definitions.h"
 0004           ; #include "delay.h"
 0004           ; 
 0004           ; #pragma interrupt_handler HB_Tmr_ISR_C // int handler for program clock
 0004           ; 
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 41
 0004           ;       BYTE PortNum[3];
 0004           ;       
 0004           ;       BlocksInit();
 0004 7C0A23            xcall _BlocksInit
 0007                   .dbline 43
 0007           ;       
 0007           ;       M8C_EnableGInt ;               // Turn on interrupts 
 0007 7101                      or  F, 01h
 0009           
 0009                   .dbline 45
 0009           ;       
 0009           ;       LED_2_On();
 0009 10                push X
 000A 7C0000            xcall _LED_2_On
 000D 20                pop X
 000E                   .dbline 46
 000E           ;       PortNum[0] = AMUX4_mic_PORT0_1;
 000E 560000            mov [X+0],0
 0011                   .dbline 47
 0011           ;       PortNum[1] = AMUX4_mic_PORT0_3;
 0011 560101            mov [X+1],1
 0014                   .dbline 48
 0014           ;       PortNum[2] = AMUX4_mic_PORT0_7;
 0014 560203            mov [X+2],3
 0017                   .dbline 50
 0017           ;       
 0017           ;       LedTest();
 0017 7C0B36            xcall _LedTest
 001A 8343              xjmp L5
 001C           L4:
 001C                   .dbline 54
 001C           ;       
 001C           ;       // Main loop=============================================================
 001C           ;       while (1)
 001C           ;       {
 001C                   .dbline 55
 001C           ;               if(ADCINCVR_pot_fIsDataAvailable() != 0)// Wait for data to be ready
 001C 10                push X
 001D 7C0000            xcall _ADCINCVR_pot_fIsDataAvailable
 0020 62D000            mov REG[0xd0],>__r0
 0023 20                pop X
 0024 3900              cmp A,0
 0026 A05F              jz L7
 0028                   .dbline 56
 0028           ;         {   
 0028                   .dbline 59
 0028           ;                       // Get Data, Clear data ready flag, in the range 0-1800
 0028           ;                       // multiplying by 256 is to have the same order of ADC_mes values
 0028           ;                       PotValue = (((long)ADCINCVR_pot_iGetDataClearFlag())+900) << 8;  
 0028 10                push X
 0029 7C0000            xcall _ADCINCVR_pot_iGetDataClearFlag
 002C 62D000            mov REG[0xd0],>__r0
 002F 5A00              mov [__r0],X
 0031 20                pop X
 0032 5300              mov [__r3],A
 0034 5100              mov A,[__r0]
 0036 5300              mov [__r2],A
 0038 470080            tst [__r2],-128
 003B A009              jz X1
 003D 5500FF            mov [__r1],-1
 0040 5500FF            mov [__r0],-1
 0043 800A              jmp X2
 0045           X1:
 0045 62D000            mov REG[0xd0],>__r0
 0048 550000            mov [__r1],0
 004B 550000            mov [__r0],0
 004E           X2:
 004E 62D000            mov REG[0xd0],>__r0
 0051 060084            add [__r3],-124
 0054 0E0003            adc [__r2],3
 0057 0E0000            adc [__r1],0
 005A 0E0000            adc [__r0],0
 005D 5008              mov A,8
 005F           X3:
 005F 62D000            mov REG[0xd0],>__r0
 0062 6500              asl [__r3]
 0064 6B00              rlc [__r2]
 0066 6B00              rlc [__r1]
 0068 6B00              rlc [__r0]
 006A 78                dec A
 006B BFF3              jnz X3
 006D 5100              mov A,[__r0]
 006F 08                push A
 0070 5100              mov A,[__r1]
 0072 08                push A
 0073 5100              mov A,[__r2]
 0075 08                push A
 0076 5100              mov A,[__r3]
 0078 62D000            mov REG[0xd0],>_PotValue
 007B 5303              mov [_PotValue+3],A
 007D 18                pop A
 007E 5302              mov [_PotValue+2],A
 0080 18                pop A
 0081 5301              mov [_PotValue+1],A
 0083 18                pop A
 0084 5300              mov [_PotValue],A
 0086                   .dbline 60
 0086           ;               }
 0086           L7:
 0086                   .dbline 62
 0086           ;         
 0086           ;               if (Tmr2>2) // every 30ms
 0086 62D000            mov REG[0xd0],>_Tmr2
 0089 5002              mov A,2
 008B 1201              sub A,[_Tmr2+1]
 008D 5000              mov A,0
 008F 1A00              sbb A,[_Tmr2]
 0091 D297              jnc L9
 0093           X4:
 0093                   .dbline 63
 0093           ;               {
 0093                   .dbline 64
 0093           ;                       Tmr2=0;
 0093 62D000            mov REG[0xd0],>_Tmr2
 0096 550100            mov [_Tmr2+1],0
 0099 550000            mov [_Tmr2],0
 009C                   .dbline 65
 009C           ;                       ADCINCVR_mes_GetSamples(1); // Start ADC to read once more
 009C 10                push X
 009D 5001              mov A,1
 009F 7C0000            xcall _ADCINCVR_mes_GetSamples
 00A2 20                pop X
 00A3           L11:
 00A3                   .dbline 66
 00A3           ;                       while(! ADCINCVR_mes_fIsDataAvailable());// Wait for data to be ready 
 00A3           L12:
 00A3                   .dbline 66
 00A3 10                push X
 00A4 7C0000            xcall _ADCINCVR_mes_fIsDataAvailable
 00A7 62D000            mov REG[0xd0],>__r0
 00AA 20                pop X
 00AB 3900              cmp A,0
 00AD AFF5              jz L11
 00AF                   .dbline 68
 00AF           ;                       // Get Data, Clear data ready flag
 00AF           ;                       MesValue[PortIndx][2]=((long)ADCINCVR_mes_iGetDataClearFlag()) << 8; // [1]
 00AF 10                push X
 00B0 7C0000            xcall _ADCINCVR_mes_iGetDataClearFlag
 00B3 62D000            mov REG[0xd0],>__r0
 00B6 5A00              mov [__r0],X
 00B8 20                pop X
 00B9 5300              mov [__r3],A
 00BB 5100              mov A,[__r0]
 00BD 5300              mov [__r2],A
 00BF 470080            tst [__r2],-128
 00C2 A009              jz X5
 00C4 5500FF            mov [__r1],-1
 00C7 5500FF            mov [__r0],-1
 00CA 800A              jmp X6
 00CC           X5:
 00CC 62D000            mov REG[0xd0],>__r0
 00CF 550000            mov [__r1],0
 00D2 550000            mov [__r0],0
 00D5           X6:
 00D5 62D000            mov REG[0xd0],>__r0
 00D8 5008              mov A,8
 00DA           X7:
 00DA 62D000            mov REG[0xd0],>__r0
 00DD 6500              asl [__r3]
 00DF 6B00              rlc [__r2]
 00E1 6B00              rlc [__r1]
 00E3 6B00              rlc [__r0]
 00E5 78                dec A
 00E6 BFF3              jnz X7
 00E8 62D000            mov REG[0xd0],>_PortIndx
 00EB 5100              mov A,[_PortIndx]
 00ED 62D000            mov REG[0xd0],>__r0
 00F0 5300              mov [__r5],A
 00F2 5000              mov A,0
 00F4 08                push A
 00F5 5100              mov A,[__r5]
 00F7 08                push A
 00F8 5000              mov A,0
 00FA 08                push A
 00FB 500C              mov A,12
 00FD 08                push A
 00FE 7C0000            xcall __mul16
 0101 38FC              add SP,-4
 0103 5100              mov A,[__rX]
 0105 5300              mov [__r5],A
 0107 5100              mov A,[__rY]
 0109 5300              mov [__r4],A
 010B 060008            add [__r5],<_MesValue+8
 010E 0E0008            adc [__r4],>_MesValue+8
 0111 5100              mov A,[__r4]
 0113 60D5              mov REG[0xd5],A
 0115 5100              mov A,[__r0]
 0117 3F00              mvi [__r5],A
 0119 5100              mov A,[__r1]
 011B 3F00              mvi [__r5],A
 011D 5100              mov A,[__r2]
 011F 3F00              mvi [__r5],A
 0121 5100              mov A,[__r3]
 0123 3F00              mvi [__r5],A
 0125                   .dbline 69
 0125           ;                       MesValue[PortIndx][1]=(MesValue[PortIndx][2])/GF[GainIndx[PortIndx][1]][1]; // [2]
 0125 62D000            mov REG[0xd0],>_PortIndx
 0128 5100              mov A,[_PortIndx]
 012A 62D000            mov REG[0xd0],>__r0
 012D 5300              mov [__r1],A
 012F 5000              mov A,0
 0131 08                push A
 0132 5100              mov A,[__r1]
 0134 08                push A
 0135 5000              mov A,0
 0137 08                push A
 0138 500C              mov A,12
 013A 08                push A
 013B 7C0000            xcall __mul16
 013E 38FC              add SP,-4
 0140 5100              mov A,[__rX]
 0142 5300              mov [__r1],A
 0144 5100              mov A,[__rY]
 0146 5300              mov [__r0],A
 0148 62D000            mov REG[0xd0],>_PortIndx
 014B 5100              mov A,[_PortIndx]
 014D 62D000            mov REG[0xd0],>__r0
 0150 5300              mov [__r3],A
 0152 550000            mov [__r2],0
 0155 6500              asl [__r3]
 0157 6B00              rlc [__r2]
 0159 060001            add [__r3],<_GainIndx+1
 015C 0E0001            adc [__r2],>_GainIndx+1
 015F 5100              mov A,[__r2]
 0161 60D4              mov REG[0xd4],A
 0163 3E00              mvi A,[__r3]
 0165 5300              mov [__r3],A
 0167 550000            mov [__r2],0
 016A 6500              asl [__r3]
 016C 6B00              rlc [__r2]
 016E 060001            add [__r3],<_GF+1
 0171 0E0001            adc [__r2],>_GF+1
 0174 5100              mov A,[__r2]
 0176 60D4              mov REG[0xd4],A
 0178 3E00              mvi A,[__r3]
 017A 5300              mov [__r7],A
 017C 5100              mov A,[__r1]
 017E 0108              add A,<_MesValue+8
 0180 5300              mov [__r3],A
 0182 5100              mov A,[__r0]
 0184 0908              adc A,>_MesValue+8
 0186 60D4              mov REG[0xd4],A
 0188 3E00              mvi A,[__r3]
 018A 5300              mov [__r8],A
 018C 3E00              mvi A,[__r3]
 018E 5300              mov [__r9],A
 0190 3E00              mvi A,[__r3]
 0192 5300              mov [__r10],A
 0194 3E00              mvi A,[__r3]
 0196 5300              mov [__r11],A
 0198 5000              mov A,0
 019A 08                push A
 019B 08                push A
 019C 08                push A
 019D 5100              mov A,[__r7]
 019F 08                push A
 01A0 5100              mov A,[__r8]
 01A2 08                push A
 01A3 5100              mov A,[__r9]
 01A5 08                push A
 01A6 5100              mov A,[__r10]
 01A8 08                push A
 01A9 5100              mov A,[__r11]
 01AB 08                push A
 01AC 7C0000            xcall __divmod_32X32_32
 01AF 18                pop A
 01B0 5300              mov [__r7],A
 01B2 18                pop A
 01B3 5300              mov [__r6],A
 01B5 18                pop A
 01B6 5300              mov [__r5],A
 01B8 18                pop A
 01B9 5300              mov [__r4],A
 01BB 38FC              add SP,-4
 01BD 060004            add [__r1],<_MesValue+4
 01C0 0E0004            adc [__r0],>_MesValue+4
 01C3 5100              mov A,[__r0]
 01C5 60D5              mov REG[0xd5],A
 01C7 5100              mov A,[__r4]
 01C9 3F00              mvi [__r1],A
 01CB 5100              mov A,[__r5]
 01CD 3F00              mvi [__r1],A
 01CF 5100              mov A,[__r6]
 01D1 3F00              mvi [__r1],A
 01D3 5100              mov A,[__r7]
 01D5 3F00              mvi [__r1],A
 01D7                   .dbline 70
 01D7           ;                       MesValue[PortIndx][0]=(MesValue[PortIndx][1])/GF[GainIndx[PortIndx][0]][1]; // [3]                      
 01D7 62D000            mov REG[0xd0],>_PortIndx
 01DA 5100              mov A,[_PortIndx]
 01DC 62D000            mov REG[0xd0],>__r0
 01DF 5300              mov [__r1],A
 01E1 5000              mov A,0
 01E3 08                push A
 01E4 5100              mov A,[__r1]
 01E6 08                push A
 01E7 5000              mov A,0
 01E9 08                push A
 01EA 500C              mov A,12
 01EC 08                push A
 01ED 7C0000            xcall __mul16
 01F0 38FC              add SP,-4
 01F2 5100              mov A,[__rX]
 01F4 5300              mov [__r1],A
 01F6 5100              mov A,[__rY]
 01F8 5300              mov [__r0],A
 01FA 62D000            mov REG[0xd0],>_PortIndx
 01FD 5100              mov A,[_PortIndx]
 01FF 62D000            mov REG[0xd0],>__r0
 0202 5300              mov [__r3],A
 0204 550000            mov [__r2],0
 0207 6500              asl [__r3]
 0209 6B00              rlc [__r2]
 020B 060000            add [__r3],<_GainIndx
 020E 0E0000            adc [__r2],>_GainIndx
 0211 5100              mov A,[__r2]
 0213 60D4              mov REG[0xd4],A
 0215 3E00              mvi A,[__r3]
 0217 5300              mov [__r3],A
 0219 550000            mov [__r2],0
 021C 6500              asl [__r3]
 021E 6B00              rlc [__r2]
 0220 060001            add [__r3],<_GF+1
 0223 0E0001            adc [__r2],>_GF+1
 0226 5100              mov A,[__r2]
 0228 60D4              mov REG[0xd4],A
 022A 3E00              mvi A,[__r3]
 022C 5300              mov [__r7],A
 022E 5100              mov A,[__r1]
 0230 0104              add A,<_MesValue+4
 0232 5300              mov [__r3],A
 0234 5100              mov A,[__r0]
 0236 0904              adc A,>_MesValue+4
 0238 60D4              mov REG[0xd4],A
 023A 3E00              mvi A,[__r3]
 023C 5300              mov [__r8],A
 023E 3E00              mvi A,[__r3]
 0240 5300              mov [__r9],A
 0242 3E00              mvi A,[__r3]
 0244 5300              mov [__r10],A
 0246 3E00              mvi A,[__r3]
 0248 5300              mov [__r11],A
 024A 5000              mov A,0
 024C 08                push A
 024D 08                push A
 024E 08                push A
 024F 5100              mov A,[__r7]
 0251 08                push A
 0252 5100              mov A,[__r8]
 0254 08                push A
 0255 5100              mov A,[__r9]
 0257 08                push A
 0258 5100              mov A,[__r10]
 025A 08                push A
 025B 5100              mov A,[__r11]
 025D 08                push A
 025E 7C0000            xcall __divmod_32X32_32
 0261 18                pop A
 0262 5300              mov [__r7],A
 0264 18                pop A
 0265 5300              mov [__r6],A
 0267 18                pop A
 0268 5300              mov [__r5],A
 026A 18                pop A
 026B 5300              mov [__r4],A
 026D 38FC              add SP,-4
 026F 060000            add [__r1],<_MesValue
 0272 0E0000            adc [__r0],>_MesValue
 0275 5100              mov A,[__r0]
 0277 60D5              mov REG[0xd5],A
 0279 5100              mov A,[__r4]
 027B 3F00              mvi [__r1],A
 027D 5100              mov A,[__r5]
 027F 3F00              mvi [__r1],A
 0281 5100              mov A,[__r6]
 0283 3F00              mvi [__r1],A
 0285 5100              mov A,[__r7]
 0287 3F00              mvi [__r1],A
 0289                   .dbline 71
 0289           ;                       I2C_Regs.I2C_MesValue[PortIndx]=MesValue[PortIndx][0]; // Expose data to I2C master
 0289 62D000            mov REG[0xd0],>_PortIndx
 028C 5100              mov A,[_PortIndx]
 028E 62D000            mov REG[0xd0],>__r0
 0291 5300              mov [__r1],A
 0293 5000              mov A,0
 0295 08                push A
 0296 5100              mov A,[__r1]
 0298 08                push A
 0299 5000              mov A,0
 029B 08                push A
 029C 500C              mov A,12
 029E 08                push A
 029F 7C0000            xcall __mul16
 02A2 38FC              add SP,-4
 02A4 5100              mov A,[__rX]
 02A6 5300              mov [__r1],A
 02A8 5100              mov A,[__rY]
 02AA 5300              mov [__r0],A
 02AC 060000            add [__r1],<_MesValue
 02AF 0E0000            adc [__r0],>_MesValue
 02B2 5100              mov A,[__r0]
 02B4 60D4              mov REG[0xd4],A
 02B6 3E00              mvi A,[__r1]
 02B8 5300              mov [__r4],A
 02BA 3E00              mvi A,[__r1]
 02BC 5300              mov [__r5],A
 02BE 3E00              mvi A,[__r1]
 02C0 5300              mov [__r6],A
 02C2 3E00              mvi A,[__r1]
 02C4 5300              mov [__r7],A
 02C6 62D000            mov REG[0xd0],>_PortIndx
 02C9 5100              mov A,[_PortIndx]
 02CB 62D000            mov REG[0xd0],>__r0
 02CE 5300              mov [__r1],A
 02D0 550000            mov [__r0],0
 02D3 6500              asl [__r1]
 02D5 6B00              rlc [__r0]
 02D7 6500              asl [__r1]
 02D9 6B00              rlc [__r0]
 02DB 060000            add [__r1],<_I2C_Regs
 02DE 0E0000            adc [__r0],>_I2C_Regs
 02E1 5100              mov A,[__r0]
 02E3 60D5              mov REG[0xd5],A
 02E5 5100              mov A,[__r4]
 02E7 3F00              mvi [__r1],A
 02E9 5100              mov A,[__r5]
 02EB 3F00              mvi [__r1],A
 02ED 5100              mov A,[__r6]
 02EF 3F00              mvi [__r1],A
 02F1 5100              mov A,[__r7]
 02F3 3F00              mvi [__r1],A
 02F5                   .dbline 73
 02F5           ; 
 02F5           ;                       AGC(); 
 02F5 906E              xcall _AGC
 02F7                   .dbline 75
 02F7           ;                       
 02F7           ;                       PortIndx++;
 02F7 62D000            mov REG[0xd0],>_PortIndx
 02FA 7600              inc [_PortIndx]
 02FC                   .dbline 76
 02FC           ;                       if(PortIndx > 2) 
 02FC 5002              mov A,2
 02FE 3A00              cmp A,[_PortIndx]
 0300 D007              jnc L21
 0302           X8:
 0302                   .dbline 77
 0302           ;                       {
 0302                   .dbline 78
 0302           ;                               PortIndx=0; // next mux port
 0302 62D000            mov REG[0xd0],>_PortIndx
 0305 550000            mov [_PortIndx],0
 0308                   .dbline 79
 0308           ;                       }
 0308           L21:
 0308                   .dbline 80
 0308           ;                       AMUX4_mic_InputSelect(PortNum[PortIndx]);
 0308 62D000            mov REG[0xd0],>__r0
 030B 550007            mov [__r0],7
 030E 5A00              mov [__r1],X
 0310 62D000            mov REG[0xd0],>_PortIndx
 0313 5100              mov A,[_PortIndx]
 0315 62D000            mov REG[0xd0],>__r0
 0318 0200              add A,[__r1]
 031A 5300              mov [__r1],A
 031C 5000              mov A,0
 031E 0A00              adc A,[__r0]
 0320 60D4              mov REG[0xd4],A
 0322 3E00              mvi A,[__r1]
 0324 10                push X
 0325 7C0000            xcall _AMUX4_mic_InputSelect
 0328 20                pop X
 0329                   .dbline 81
 0329           ;               }
 0329           L9:
 0329                   .dbline 83
 0329           ;               
 0329           ;               if (TmrFlag) // every 10ms
 0329 62D000            mov REG[0xd0],>_TmrFlag
 032C 3C0000            cmp [_TmrFlag],0
 032F A00B              jz L23
 0331                   .dbline 84
 0331           ;               {       
 0331                   .dbline 85
 0331           ;                       TmrFlag = 0;
 0331 550000            mov [_TmrFlag],0
 0334                   .dbline 86
 0334           ;                       ADCINCVR_pot_GetSamples(1);    // Start ADC to read 1 sample
 0334 10                push X
 0335 5001              mov A,1
 0337 7C0000            xcall _ADCINCVR_pot_GetSamples
 033A 20                pop X
 033B                   .dbline 87
 033B           ;               }
 033B           L23:
 033B                   .dbline 89
 033B           ;               
 033B           ;               if (Tmr1 > 9) // every 100ms
 033B 62D000            mov REG[0xd0],>_Tmr1
 033E 5009              mov A,9
 0340 1201              sub A,[_Tmr1+1]
 0342 5000              mov A,0
 0344 1A00              sbb A,[_Tmr1]
 0346 D017              jnc L25
 0348           X9:
 0348                   .dbline 90
 0348           ;               {
 0348                   .dbline 91
 0348           ;                       Tmr1 = 0;
 0348 62D000            mov REG[0xd0],>_Tmr1
 034B 550100            mov [_Tmr1+1],0
 034E 550000            mov [_Tmr1],0
 0351                   .dbline 92
 0351           ;                       Tmr2 = 0;
 0351 62D000            mov REG[0xd0],>_Tmr2
 0354 550100            mov [_Tmr2+1],0
 0357 550000            mov [_Tmr2],0
 035A                   .dbline 93
 035A           ;                       UartTxValues(); // debug
 035A 943E              xcall _UartTxValues
 035C                   .dbline 94
 035C           ;                       DigitalOut();
 035C 936A              xcall _DigitalOut
 035E                   .dbline 95
 035E           ;               }
 035E           L25:
 035E                   .dbline 96
 035E           ;       }// ========================================================== Main loop 
 035E           L5:
 035E                   .dbline 53
 035E 8CBD              xjmp L4
 0360           X0:
 0360                   .dbline -2
 0360           L1:
 0360 38FD              add SP,-3
 0362 20                pop X
 0363                   .dbline 0 ; func end
 0363 8FFF              jmp .
 0365                   .dbsym l PortNum 0 A[3:3]c
 0365                   .dbend
 0365                   .dbfunc e AGC _AGC fV
 0365           _AGC::
 0365                   .dbline -1
 0365                   .dbline 102
 0365           ; }
 0365           ; 
 0365           ; // Functions ***************************************************************
 0365           ; 
 0365           ; void AGC(void)
 0365           ; {// [5]
 0365                   .dbline 103
 0365           ;            if((MesValue[PortIndx][2] > V_MAX) && (GainIndx[PortIndx][1] > I_MIN))// PGA_out
 0365 62D000            mov REG[0xd0],>_PortIndx
 0368 5100              mov A,[_PortIndx]
 036A 62D000            mov REG[0xd0],>__r0
 036D 5300              mov [__r1],A
 036F 5000              mov A,0
 0371 08                push A
 0372 5100              mov A,[__r1]
 0374 08                push A
 0375 5000              mov A,0
 0377 08                push A
 0378 500C              mov A,12
 037A 08                push A
 037B 7C0000            xcall __mul16
 037E 38FC              add SP,-4
 0380 5100              mov A,[__rX]
 0382 5300              mov [__r1],A
 0384 5100              mov A,[__rY]
 0386 5300              mov [__r0],A
 0388 060008            add [__r1],<_MesValue+8
 038B 0E0008            adc [__r0],>_MesValue+8
 038E 5100              mov A,[__r0]
 0390 60D4              mov REG[0xd4],A
 0392 3E00              mvi A,[__r1]
 0394 5300              mov [__r4],A
 0396 3E00              mvi A,[__r1]
 0398 5300              mov [__r5],A
 039A 3E00              mvi A,[__r1]
 039C 5300              mov [__r6],A
 039E 3E00              mvi A,[__r1]
 03A0 5300              mov [__r7],A
 03A2 5040              mov A,64
 03A4 1200              sub A,[__r7]
 03A6 500D              mov A,13
 03A8 1A00              sbb A,[__r6]
 03AA 5003              mov A,3
 03AC 1A00              sbb A,[__r5]
 03AE 5100              mov A,[__r4]
 03B0 3180              xor A,-128
 03B2 5300              mov [__rX],A
 03B4 5080              mov A,(0 ^ 0x80)
 03B6 1A00              sbb A,[__rX]
 03B8 D08B              jnc L28
 03BA           X10:
 03BA 62D000            mov REG[0xd0],>_PortIndx
 03BD 5100              mov A,[_PortIndx]
 03BF 62D000            mov REG[0xd0],>__r0
 03C2 5300              mov [__r1],A
 03C4 550000            mov [__r0],0
 03C7 6500              asl [__r1]
 03C9 6B00              rlc [__r0]
 03CB 060001            add [__r1],<_GainIndx+1
 03CE 0E0001            adc [__r0],>_GainIndx+1
 03D1 5100              mov A,[__r0]
 03D3 60D4              mov REG[0xd4],A
 03D5 3E00              mvi A,[__r1]
 03D7 5300              mov [__r0],A
 03D9 5000              mov A,0
 03DB 3A00              cmp A,[__r0]
 03DD D066              jnc L28
 03DF           X11:
 03DF                   .dbline 104
 03DF           ;       {
 03DF                   .dbline 105
 03DF           ;               GainIndx[PortIndx][1]--;
 03DF 62D000            mov REG[0xd0],>_PortIndx
 03E2 5100              mov A,[_PortIndx]
 03E4 62D000            mov REG[0xd0],>__r0
 03E7 5300              mov [__r1],A
 03E9 550000            mov [__r0],0
 03EC 6500              asl [__r1]
 03EE 6B00              rlc [__r0]
 03F0 060001            add [__r1],<_GainIndx+1
 03F3 0E0001            adc [__r0],>_GainIndx+1
 03F6 5100              mov A,[__r0]
 03F8 60D4              mov REG[0xd4],A
 03FA 3E00              mvi A,[__r1]
 03FC 7A00              dec [__r1]
 03FE 5300              mov [__r2],A
 0400 160001            sub [__r2],1
 0403 5100              mov A,[__r0]
 0405 60D5              mov REG[0xd5],A
 0407 5100              mov A,[__r2]
 0409 3F00              mvi [__r1],A
 040B                   .dbline 106
 040B           ;               PGA_out_SetGain(GF[GainIndx[PortIndx][1]][0]); // set gain on PGA
 040B 62D000            mov REG[0xd0],>_PortIndx
 040E 5100              mov A,[_PortIndx]
 0410 62D000            mov REG[0xd0],>__r0
 0413 5300              mov [__r1],A
 0415 550000            mov [__r0],0
 0418 6500              asl [__r1]
 041A 6B00              rlc [__r0]
 041C 060001            add [__r1],<_GainIndx+1
 041F 0E0001            adc [__r0],>_GainIndx+1
 0422 5100              mov A,[__r0]
 0424 60D4              mov REG[0xd4],A
 0426 3E00              mvi A,[__r1]
 0428 5300              mov [__r1],A
 042A 550000            mov [__r0],0
 042D 6500              asl [__r1]
 042F 6B00              rlc [__r0]
 0431 060000            add [__r1],<_GF
 0434 0E0000            adc [__r0],>_GF
 0437 5100              mov A,[__r0]
 0439 60D4              mov REG[0xd4],A
 043B 3E00              mvi A,[__r1]
 043D 10                push X
 043E 7C0000            xcall _PGA_out_SetGain
 0441 20                pop X
 0442                   .dbline 107
 0442           ;       }
 0442 8284              xjmp L29
 0444           L28:
 0444                   .dbline 108
 0444           ;       else if((MesValue[PortIndx][1] > V_MAX) && (GainIndx[PortIndx][0] > I_MIN))// PGA_pre
 0444 62D000            mov REG[0xd0],>_PortIndx
 0447 5100              mov A,[_PortIndx]
 0449 62D000            mov REG[0xd0],>__r0
 044C 5300              mov [__r1],A
 044E 5000              mov A,0
 0450 08                push A
 0451 5100              mov A,[__r1]
 0453 08                push A
 0454 5000              mov A,0
 0456 08                push A
 0457 500C              mov A,12
 0459 08                push A
 045A 7C0000            xcall __mul16
 045D 38FC              add SP,-4
 045F 5100              mov A,[__rX]
 0461 5300              mov [__r1],A
 0463 5100              mov A,[__rY]
 0465 5300              mov [__r0],A
 0467 060004            add [__r1],<_MesValue+4
 046A 0E0004            adc [__r0],>_MesValue+4
 046D 5100              mov A,[__r0]
 046F 60D4              mov REG[0xd4],A
 0471 3E00              mvi A,[__r1]
 0473 5300              mov [__r4],A
 0475 3E00              mvi A,[__r1]
 0477 5300              mov [__r5],A
 0479 3E00              mvi A,[__r1]
 047B 5300              mov [__r6],A
 047D 3E00              mvi A,[__r1]
 047F 5300              mov [__r7],A
 0481 5040              mov A,64
 0483 1200              sub A,[__r7]
 0485 500D              mov A,13
 0487 1A00              sbb A,[__r6]
 0489 5003              mov A,3
 048B 1A00              sbb A,[__r5]
 048D 5100              mov A,[__r4]
 048F 3180              xor A,-128
 0491 5300              mov [__rX],A
 0493 5080              mov A,(0 ^ 0x80)
 0495 1A00              sbb A,[__rX]
 0497 D08B              jnc L34
 0499           X12:
 0499 62D000            mov REG[0xd0],>_PortIndx
 049C 5100              mov A,[_PortIndx]
 049E 62D000            mov REG[0xd0],>__r0
 04A1 5300              mov [__r1],A
 04A3 550000            mov [__r0],0
 04A6 6500              asl [__r1]
 04A8 6B00              rlc [__r0]
 04AA 060000            add [__r1],<_GainIndx
 04AD 0E0000            adc [__r0],>_GainIndx
 04B0 5100              mov A,[__r0]
 04B2 60D4              mov REG[0xd4],A
 04B4 3E00              mvi A,[__r1]
 04B6 5300              mov [__r0],A
 04B8 5000              mov A,0
 04BA 3A00              cmp A,[__r0]
 04BC D066              jnc L34
 04BE           X13:
 04BE                   .dbline 109
 04BE           ;       {
 04BE                   .dbline 110
 04BE           ;               GainIndx[PortIndx][0]--;
 04BE 62D000            mov REG[0xd0],>_PortIndx
 04C1 5100              mov A,[_PortIndx]
 04C3 62D000            mov REG[0xd0],>__r0
 04C6 5300              mov [__r1],A
 04C8 550000            mov [__r0],0
 04CB 6500              asl [__r1]
 04CD 6B00              rlc [__r0]
 04CF 060000            add [__r1],<_GainIndx
 04D2 0E0000            adc [__r0],>_GainIndx
 04D5 5100              mov A,[__r0]
 04D7 60D4              mov REG[0xd4],A
 04D9 3E00              mvi A,[__r1]
 04DB 7A00              dec [__r1]
 04DD 5300              mov [__r2],A
 04DF 160001            sub [__r2],1
 04E2 5100              mov A,[__r0]
 04E4 60D5              mov REG[0xd5],A
 04E6 5100              mov A,[__r2]
 04E8 3F00              mvi [__r1],A
 04EA                   .dbline 111
 04EA           ;               PGA_pre_SetGain(GF[GainIndx[PortIndx][0]][0]); // set gain on PGA
 04EA 62D000            mov REG[0xd0],>_PortIndx
 04ED 5100              mov A,[_PortIndx]
 04EF 62D000            mov REG[0xd0],>__r0
 04F2 5300              mov [__r1],A
 04F4 550000            mov [__r0],0
 04F7 6500              asl [__r1]
 04F9 6B00              rlc [__r0]
 04FB 060000            add [__r1],<_GainIndx
 04FE 0E0000            adc [__r0],>_GainIndx
 0501 5100              mov A,[__r0]
 0503 60D4              mov REG[0xd4],A
 0505 3E00              mvi A,[__r1]
 0507 5300              mov [__r1],A
 0509 550000            mov [__r0],0
 050C 6500              asl [__r1]
 050E 6B00              rlc [__r0]
 0510 060000            add [__r1],<_GF
 0513 0E0000            adc [__r0],>_GF
 0516 5100              mov A,[__r0]
 0518 60D4              mov REG[0xd4],A
 051A 3E00              mvi A,[__r1]
 051C 10                push X
 051D 7C0000            xcall _PGA_pre_SetGain
 0520 20                pop X
 0521                   .dbline 112
 0521           ;       }
 0521 81A5              xjmp L35
 0523           L34:
 0523                   .dbline 113
 0523           ;       else if((MesValue[PortIndx][2] < V_MIN) && (GainIndx[PortIndx][1] < I_MAX))// PGA_out
 0523 62D000            mov REG[0xd0],>_PortIndx
 0526 5100              mov A,[_PortIndx]
 0528 62D000            mov REG[0xd0],>__r0
 052B 5300              mov [__r1],A
 052D 5000              mov A,0
 052F 08                push A
 0530 5100              mov A,[__r1]
 0532 08                push A
 0533 5000              mov A,0
 0535 08                push A
 0536 500C              mov A,12
 0538 08                push A
 0539 7C0000            xcall __mul16
 053C 38FC              add SP,-4
 053E 5100              mov A,[__rX]
 0540 5300              mov [__r1],A
 0542 5100              mov A,[__rY]
 0544 5300              mov [__r0],A
 0546 060008            add [__r1],<_MesValue+8
 0549 0E0008            adc [__r0],>_MesValue+8
 054C 5100              mov A,[__r0]
 054E 60D4              mov REG[0xd4],A
 0550 3E00              mvi A,[__r1]
 0552 5300              mov [__r4],A
 0554 3E00              mvi A,[__r1]
 0556 5300              mov [__r5],A
 0558 3E00              mvi A,[__r1]
 055A 5300              mov [__r6],A
 055C 3E00              mvi A,[__r1]
 055E 1150              sub A,80
 0560 5100              mov A,[__r6]
 0562 19C3              sbb A,-61
 0564 5100              mov A,[__r5]
 0566 1900              sbb A,0
 0568 5100              mov A,[__r4]
 056A 3180              xor A,-128
 056C 1980              sbb A,(0 ^ 0x80)
 056E D087              jnc L37
 0570           X14:
 0570 62D000            mov REG[0xd0],>_PortIndx
 0573 5100              mov A,[_PortIndx]
 0575 62D000            mov REG[0xd0],>__r0
 0578 5300              mov [__r1],A
 057A 550000            mov [__r0],0
 057D 6500              asl [__r1]
 057F 6B00              rlc [__r0]
 0581 060001            add [__r1],<_GainIndx+1
 0584 0E0001            adc [__r0],>_GainIndx+1
 0587 5100              mov A,[__r0]
 0589 60D4              mov REG[0xd4],A
 058B 3E00              mvi A,[__r1]
 058D 3906              cmp A,6
 058F D066              jnc L37
 0591           X15:
 0591                   .dbline 114
 0591           ;       {
 0591                   .dbline 115
 0591           ;               GainIndx[PortIndx][1]++;
 0591 62D000            mov REG[0xd0],>_PortIndx
 0594 5100              mov A,[_PortIndx]
 0596 62D000            mov REG[0xd0],>__r0
 0599 5300              mov [__r1],A
 059B 550000            mov [__r0],0
 059E 6500              asl [__r1]
 05A0 6B00              rlc [__r0]
 05A2 060001            add [__r1],<_GainIndx+1
 05A5 0E0001            adc [__r0],>_GainIndx+1
 05A8 5100              mov A,[__r0]
 05AA 60D4              mov REG[0xd4],A
 05AC 3E00              mvi A,[__r1]
 05AE 7A00              dec [__r1]
 05B0 5300              mov [__r2],A
 05B2 060001            add [__r2],1
 05B5 5100              mov A,[__r0]
 05B7 60D5              mov REG[0xd5],A
 05B9 5100              mov A,[__r2]
 05BB 3F00              mvi [__r1],A
 05BD                   .dbline 116
 05BD           ;               PGA_out_SetGain(GF[GainIndx[PortIndx][1]][0]); // set gain on PGA
 05BD 62D000            mov REG[0xd0],>_PortIndx
 05C0 5100              mov A,[_PortIndx]
 05C2 62D000            mov REG[0xd0],>__r0
 05C5 5300              mov [__r1],A
 05C7 550000            mov [__r0],0
 05CA 6500              asl [__r1]
 05CC 6B00              rlc [__r0]
 05CE 060001            add [__r1],<_GainIndx+1
 05D1 0E0001            adc [__r0],>_GainIndx+1
 05D4 5100              mov A,[__r0]
 05D6 60D4              mov REG[0xd4],A
 05D8 3E00              mvi A,[__r1]
 05DA 5300              mov [__r1],A
 05DC 550000            mov [__r0],0
 05DF 6500              asl [__r1]
 05E1 6B00              rlc [__r0]
 05E3 060000            add [__r1],<_GF
 05E6 0E0000            adc [__r0],>_GF
 05E9 5100              mov A,[__r0]
 05EB 60D4              mov REG[0xd4],A
 05ED 3E00              mvi A,[__r1]
 05EF 10                push X
 05F0 7C0000            xcall _PGA_out_SetGain
 05F3 20                pop X
 05F4                   .dbline 117
 05F4           ;       }
 05F4 80D2              xjmp L38
 05F6           L37:
 05F6                   .dbline 118
 05F6           ;       else if((MesValue[PortIndx][1] < V_MIN) && (GainIndx[PortIndx][0] < I_MAX))// PGA_pre
 05F6 62D000            mov REG[0xd0],>_PortIndx
 05F9 5100              mov A,[_PortIndx]
 05FB 62D000            mov REG[0xd0],>__r0
 05FE 5300              mov [__r1],A
 0600 5000              mov A,0
 0602 08                push A
 0603 5100              mov A,[__r1]
 0605 08                push A
 0606 5000              mov A,0
 0608 08                push A
 0609 500C              mov A,12
 060B 08                push A
 060C 7C0000            xcall __mul16
 060F 38FC              add SP,-4
 0611 5100              mov A,[__rX]
 0613 5300              mov [__r1],A
 0615 5100              mov A,[__rY]
 0617 5300              mov [__r0],A
 0619 060004            add [__r1],<_MesValue+4
 061C 0E0004            adc [__r0],>_MesValue+4
 061F 5100              mov A,[__r0]
 0621 60D4              mov REG[0xd4],A
 0623 3E00              mvi A,[__r1]
 0625 5300              mov [__r4],A
 0627 3E00              mvi A,[__r1]
 0629 5300              mov [__r5],A
 062B 3E00              mvi A,[__r1]
 062D 5300              mov [__r6],A
 062F 3E00              mvi A,[__r1]
 0631 1150              sub A,80
 0633 5100              mov A,[__r6]
 0635 19C3              sbb A,-61
 0637 5100              mov A,[__r5]
 0639 1900              sbb A,0
 063B 5100              mov A,[__r4]
 063D 3180              xor A,-128
 063F 1980              sbb A,(0 ^ 0x80)
 0641 D085              jnc L43
 0643           X16:
 0643 62D000            mov REG[0xd0],>_PortIndx
 0646 5100              mov A,[_PortIndx]
 0648 62D000            mov REG[0xd0],>__r0
 064B 5300              mov [__r1],A
 064D 550000            mov [__r0],0
 0650 6500              asl [__r1]
 0652 6B00              rlc [__r0]
 0654 060000            add [__r1],<_GainIndx
 0657 0E0000            adc [__r0],>_GainIndx
 065A 5100              mov A,[__r0]
 065C 60D4              mov REG[0xd4],A
 065E 3E00              mvi A,[__r1]
 0660 3906              cmp A,6
 0662 D064              jnc L43
 0664           X17:
 0664                   .dbline 119
 0664           ;       {
 0664                   .dbline 120
 0664           ;               GainIndx[PortIndx][0]++;
 0664 62D000            mov REG[0xd0],>_PortIndx
 0667 5100              mov A,[_PortIndx]
 0669 62D000            mov REG[0xd0],>__r0
 066C 5300              mov [__r1],A
 066E 550000            mov [__r0],0
 0671 6500              asl [__r1]
 0673 6B00              rlc [__r0]
 0675 060000            add [__r1],<_GainIndx
 0678 0E0000            adc [__r0],>_GainIndx
 067B 5100              mov A,[__r0]
 067D 60D4              mov REG[0xd4],A
 067F 3E00              mvi A,[__r1]
 0681 7A00              dec [__r1]
 0683 5300              mov [__r2],A
 0685 060001            add [__r2],1
 0688 5100              mov A,[__r0]
 068A 60D5              mov REG[0xd5],A
 068C 5100              mov A,[__r2]
 068E 3F00              mvi [__r1],A
 0690                   .dbline 121
 0690           ;               PGA_pre_SetGain(GF[GainIndx[PortIndx][0]][0]); // set gain on PGA
 0690 62D000            mov REG[0xd0],>_PortIndx
 0693 5100              mov A,[_PortIndx]
 0695 62D000            mov REG[0xd0],>__r0
 0698 5300              mov [__r1],A
 069A 550000            mov [__r0],0
 069D 6500              asl [__r1]
 069F 6B00              rlc [__r0]
 06A1 060000            add [__r1],<_GainIndx
 06A4 0E0000            adc [__r0],>_GainIndx
 06A7 5100              mov A,[__r0]
 06A9 60D4              mov REG[0xd4],A
 06AB 3E00              mvi A,[__r1]
 06AD 5300              mov [__r1],A
 06AF 550000            mov [__r0],0
 06B2 6500              asl [__r1]
 06B4 6B00              rlc [__r0]
 06B6 060000            add [__r1],<_GF
 06B9 0E0000            adc [__r0],>_GF
 06BC 5100              mov A,[__r0]
 06BE 60D4              mov REG[0xd4],A
 06C0 3E00              mvi A,[__r1]
 06C2 10                push X
 06C3 7C0000            xcall _PGA_pre_SetGain
 06C6 20                pop X
 06C7                   .dbline 122
 06C7           ;       }       
 06C7           L43:
 06C7           L38:
 06C7           L35:
 06C7           L29:
 06C7                   .dbline -2
 06C7           L27:
 06C7                   .dbline 0 ; func end
 06C7 7F                ret
 06C8                   .dbend
 06C8                   .dbfunc e DigitalOut _DigitalOut fV
 06C8           _DigitalOut::
 06C8                   .dbline -1
 06C8                   .dbline 126
 06C8           ; }
 06C8           ; 
 06C8           ; void DigitalOut(void)
 06C8           ; {// Controls the outputs according to pot setting point
 06C8                   .dbline 127
 06C8           ;       DIGITAL_OUT_Off();
 06C8 10                push X
 06C9 7C0000            xcall _DIGITAL_OUT_Off
 06CC 20                pop X
 06CD                   .dbline 128
 06CD           ;       if (MesValue[0][0]>PotValue)
 06CD 62D000            mov REG[0xd0],>_PotValue
 06D0 5103              mov A,[_PotValue+3]
 06D2 62D000            mov REG[0xd0],>_MesValue
 06D5 1203              sub A,[_MesValue+3]
 06D7 62D000            mov REG[0xd0],>_PotValue
 06DA 5102              mov A,[_PotValue+2]
 06DC 62D000            mov REG[0xd0],>_MesValue
 06DF 1A02              sbb A,[_MesValue+2]
 06E1 62D000            mov REG[0xd0],>_PotValue
 06E4 5101              mov A,[_PotValue+1]
 06E6 62D000            mov REG[0xd0],>_MesValue
 06E9 1A01              sbb A,[_MesValue+1]
 06EB 5100              mov A,[_MesValue]
 06ED 3180              xor A,-128
 06EF 62D000            mov REG[0xd0],>__r0
 06F2 5300              mov [__rX],A
 06F4 62D000            mov REG[0xd0],>_PotValue
 06F7 5100              mov A,[_PotValue]
 06F9 3180              xor A,-128
 06FB 62D000            mov REG[0xd0],>__r0
 06FE 1A00              sbb A,[__rX]
 0700 D00B              jnc L47
 0702           X18:
 0702                   .dbline 129
 0702           ;       {
 0702                   .dbline 130
 0702           ;               DIGITAL_OUT_On();
 0702 10                push X
 0703 7C0000            xcall _DIGITAL_OUT_On
 0706                   .dbline 131
 0706           ;               LED_3_On();
 0706 7C0000            xcall _LED_3_On
 0709 20                pop X
 070A                   .dbline 132
 070A           ;       }
 070A 8006              xjmp L48
 070C           L47:
 070C                   .dbline 134
 070C           ;       else
 070C           ;       {
 070C                   .dbline 135
 070C           ;               LED_3_Off();
 070C 10                push X
 070D 7C0000            xcall _LED_3_Off
 0710 20                pop X
 0711                   .dbline 136
 0711           ;       }
 0711           L48:
 0711                   .dbline 138
 0711           ;               
 0711           ;       if (MesValue[1][0]>PotValue)
 0711 62D000            mov REG[0xd0],>_PotValue
 0714 5103              mov A,[_PotValue+3]
 0716 62D000            mov REG[0xd0],>_MesValue
 0719 120F              sub A,[_MesValue+12+3]
 071B 62D000            mov REG[0xd0],>_PotValue
 071E 5102              mov A,[_PotValue+2]
 0720 62D000            mov REG[0xd0],>_MesValue
 0723 1A0E              sbb A,[_MesValue+12+2]
 0725 62D000            mov REG[0xd0],>_PotValue
 0728 5101              mov A,[_PotValue+1]
 072A 62D000            mov REG[0xd0],>_MesValue
 072D 1A0D              sbb A,[_MesValue+12+1]
 072F 510C              mov A,[_MesValue+12]
 0731 3180              xor A,-128
 0733 62D000            mov REG[0xd0],>__r0
 0736 5300              mov [__rX],A
 0738 62D000            mov REG[0xd0],>_PotValue
 073B 5100              mov A,[_PotValue]
 073D 3180              xor A,-128
 073F 62D000            mov REG[0xd0],>__r0
 0742 1A00              sbb A,[__rX]
 0744 D00B              jnc L49
 0746           X19:
 0746                   .dbline 139
 0746           ;       {
 0746                   .dbline 140
 0746           ;               DIGITAL_OUT_On();
 0746 10                push X
 0747 7C0000            xcall _DIGITAL_OUT_On
 074A                   .dbline 141
 074A           ;               LED_2_On();
 074A 7C0000            xcall _LED_2_On
 074D 20                pop X
 074E                   .dbline 142
 074E           ;       }
 074E 8006              xjmp L50
 0750           L49:
 0750                   .dbline 144
 0750           ;       else
 0750           ;       {
 0750                   .dbline 145
 0750           ;               LED_2_Off();
 0750 10                push X
 0751 7C0000            xcall _LED_2_Off
 0754 20                pop X
 0755                   .dbline 146
 0755           ;       }
 0755           L50:
 0755                   .dbline 148
 0755           ;       
 0755           ;       if (MesValue[2][0]>PotValue)
 0755 62D000            mov REG[0xd0],>_PotValue
 0758 5103              mov A,[_PotValue+3]
 075A 62D000            mov REG[0xd0],>_MesValue
 075D 121B              sub A,[_MesValue+24+3]
 075F 62D000            mov REG[0xd0],>_PotValue
 0762 5102              mov A,[_PotValue+2]
 0764 62D000            mov REG[0xd0],>_MesValue
 0767 1A1A              sbb A,[_MesValue+24+2]
 0769 62D000            mov REG[0xd0],>_PotValue
 076C 5101              mov A,[_PotValue+1]
 076E 62D000            mov REG[0xd0],>_MesValue
 0771 1A19              sbb A,[_MesValue+24+1]
 0773 5118              mov A,[_MesValue+24]
 0775 3180              xor A,-128
 0777 62D000            mov REG[0xd0],>__r0
 077A 5300              mov [__rX],A
 077C 62D000            mov REG[0xd0],>_PotValue
 077F 5100              mov A,[_PotValue]
 0781 3180              xor A,-128
 0783 62D000            mov REG[0xd0],>__r0
 0786 1A00              sbb A,[__rX]
 0788 D00B              jnc L52
 078A           X20:
 078A                   .dbline 149
 078A           ;       {
 078A                   .dbline 150
 078A           ;               DIGITAL_OUT_On();
 078A 10                push X
 078B 7C0000            xcall _DIGITAL_OUT_On
 078E                   .dbline 151
 078E           ;               LED_1_On();
 078E 7C0000            xcall _LED_1_On
 0791 20                pop X
 0792                   .dbline 152
 0792           ;       }
 0792 8006              xjmp L53
 0794           L52:
 0794                   .dbline 154
 0794           ;       else
 0794           ;       {
 0794                   .dbline 155
 0794           ;               LED_1_Off();
 0794 10                push X
 0795 7C0000            xcall _LED_1_Off
 0798 20                pop X
 0799                   .dbline 156
 0799           ;       }
 0799           L53:
 0799                   .dbline -2
 0799           L46:
 0799                   .dbline 0 ; func end
 0799 7F                ret
 079A                   .dbend
 079A                   .dbfunc e UartTxValues _UartTxValues fV
 079A           _UartTxValues::
 079A                   .dbline -1
 079A                   .dbline 160
 079A           ; }
 079A           ; 
 079A           ; void UartTxValues(void)
 079A           ; {/* Transmit via UART the analog values read from various inputs.
 079A                   .dbline 165
 079A           ;       Usefull for debugging purposes, it could be converted in a
 079A           ;       command string using the same protocol used for dsNav if
 079A           ;       needed to output sound level values via serial comm
 079A           ; */
 079A           ;       TX8_CPutString("\n\r");
 079A 10                push X
 079B 5034              mov A,>L56
 079D 08                push A
 079E 5034              mov A,<L56
 07A0 5C                mov X,A
 07A1 18                pop A
 07A2 7C0000            xcall _TX8_CPutString
 07A5 20                pop X
 07A6                   .dbline 172
 07A6           ;       
 07A6           ; /*    TX8_CPutString("Pot Value = ");
 07A6           ;       itoa(str, PotValue,10);
 07A6           ;       TX8_PutString(str);
 07A6           ; */
 07A6           ; 
 07A6           ;       TX8_CPutString("Mes: 1 = ");
 07A6 10                push X
 07A7 502A              mov A,>L57
 07A9 08                push A
 07AA 502A              mov A,<L57
 07AC 5C                mov X,A
 07AD 18                pop A
 07AE 7C0000            xcall _TX8_CPutString
 07B1 20                pop X
 07B2                   .dbline 173
 07B2           ;       ltoa(str, MesValue[0][0],10);
 07B2 5000              mov A,0
 07B4 08                push A
 07B5 500A              mov A,10
 07B7 08                push A
 07B8 62D000            mov REG[0xd0],>_MesValue
 07BB 5100              mov A,[_MesValue]
 07BD 08                push A
 07BE 5101              mov A,[_MesValue+1]
 07C0 08                push A
 07C1 5102              mov A,[_MesValue+2]
 07C3 08                push A
 07C4 5103              mov A,[_MesValue+3]
 07C6 08                push A
 07C7 5000              mov A,>_str
 07C9 08                push A
 07CA 5000              mov A,<_str
 07CC 08                push A
 07CD 7C0000            xcall _ltoa
 07D0 38F8              add SP,-8
 07D2                   .dbline 174
 07D2           ;       TX8_PutString(str);
 07D2 10                push X
 07D3 5000              mov A,>_str
 07D5 08                push A
 07D6 5000              mov A,<_str
 07D8 5C                mov X,A
 07D9 18                pop A
 07DA 7C0000            xcall _TX8_PutString
 07DD 20                pop X
 07DE                   .dbline 175
 07DE           ;       TX8_CPutString("  -  2 = ");
 07DE 10                push X
 07DF 5020              mov A,>L58
 07E1 08                push A
 07E2 5020              mov A,<L58
 07E4 5C                mov X,A
 07E5 18                pop A
 07E6 7C0000            xcall _TX8_CPutString
 07E9 20                pop X
 07EA                   .dbline 176
 07EA           ;       ltoa(str, MesValue[1][0],10);
 07EA 5000              mov A,0
 07EC 08                push A
 07ED 500A              mov A,10
 07EF 08                push A
 07F0 62D000            mov REG[0xd0],>_MesValue
 07F3 510C              mov A,[_MesValue+12]
 07F5 08                push A
 07F6 510D              mov A,[_MesValue+12+1]
 07F8 08                push A
 07F9 510E              mov A,[_MesValue+12+2]
 07FB 08                push A
 07FC 510F              mov A,[_MesValue+12+3]
 07FE 08                push A
 07FF 5000              mov A,>_str
 0801 08                push A
 0802 5000              mov A,<_str
 0804 08                push A
 0805 7C0000            xcall _ltoa
 0808 38F8              add SP,-8
 080A                   .dbline 177
 080A           ;       TX8_PutString(str);
 080A 10                push X
 080B 5000              mov A,>_str
 080D 08                push A
 080E 5000              mov A,<_str
 0810 5C                mov X,A
 0811 18                pop A
 0812 7C0000            xcall _TX8_PutString
 0815 20                pop X
 0816                   .dbline 178
 0816           ;       TX8_CPutString("  -  3 = ");
 0816 10                push X
 0817 5016              mov A,>L60
 0819 08                push A
 081A 5016              mov A,<L60
 081C 5C                mov X,A
 081D 18                pop A
 081E 7C0000            xcall _TX8_CPutString
 0821 20                pop X
 0822                   .dbline 179
 0822           ;       ltoa(str, MesValue[2][0],10);
 0822 5000              mov A,0
 0824 08                push A
 0825 500A              mov A,10
 0827 08                push A
 0828 62D000            mov REG[0xd0],>_MesValue
 082B 5118              mov A,[_MesValue+24]
 082D 08                push A
 082E 5119              mov A,[_MesValue+24+1]
 0830 08                push A
 0831 511A              mov A,[_MesValue+24+2]
 0833 08                push A
 0834 511B              mov A,[_MesValue+24+3]
 0836 08                push A
 0837 5000              mov A,>_str
 0839 08                push A
 083A 5000              mov A,<_str
 083C 08                push A
 083D 7C0000            xcall _ltoa
 0840 38F8              add SP,-8
 0842                   .dbline 180
 0842           ;       TX8_PutString(str);
 0842 10                push X
 0843 5000              mov A,>_str
 0845 08                push A
 0846 5000              mov A,<_str
 0848 5C                mov X,A
 0849 18                pop A
 084A 7C0000            xcall _TX8_PutString
 084D 20                pop X
 084E                   .dbline 181
 084E           ;       TX8_CPutString(" Pre: 1 = ");
 084E 10                push X
 084F 500B              mov A,>L62
 0851 08                push A
 0852 500B              mov A,<L62
 0854 5C                mov X,A
 0855 18                pop A
 0856 7C0000            xcall _TX8_CPutString
 0859 20                pop X
 085A                   .dbline 182
 085A           ;       itoa(str, GF[GainIndx[0][0]][1], 10);
 085A 5000              mov A,0
 085C 08                push A
 085D 500A              mov A,10
 085F 08                push A
 0860 62D000            mov REG[0xd0],>_GainIndx
 0863 5100              mov A,[_GainIndx]
 0865 62D000            mov REG[0xd0],>__r0
 0868 5300              mov [__r1],A
 086A 550000            mov [__r0],0
 086D 6500              asl [__r1]
 086F 6B00              rlc [__r0]
 0871 060001            add [__r1],<_GF+1
 0874 0E0001            adc [__r0],>_GF+1
 0877 5100              mov A,[__r0]
 0879 60D4              mov REG[0xd4],A
 087B 3E00              mvi A,[__r1]
 087D 5300              mov [__r1],A
 087F 5000              mov A,0
 0881 08                push A
 0882 5100              mov A,[__r1]
 0884 08                push A
 0885 5000              mov A,>_str
 0887 08                push A
 0888 5000              mov A,<_str
 088A 08                push A
 088B 7C0000            xcall _itoa
 088E 38FA              add SP,-6
 0890                   .dbline 183
 0890           ;       TX8_PutString(str);
 0890 10                push X
 0891 5000              mov A,>_str
 0893 08                push A
 0894 5000              mov A,<_str
 0896 5C                mov X,A
 0897 18                pop A
 0898 7C0000            xcall _TX8_PutString
 089B 20                pop X
 089C                   .dbline 184
 089C           ;       TX8_CPutString("  -  2 = ");
 089C 10                push X
 089D 5020              mov A,>L58
 089F 08                push A
 08A0 5020              mov A,<L58
 08A2 5C                mov X,A
 08A3 18                pop A
 08A4 7C0000            xcall _TX8_CPutString
 08A7 20                pop X
 08A8                   .dbline 185
 08A8           ;       itoa(str, GF[GainIndx[1][0]][1], 10);
 08A8 5000              mov A,0
 08AA 08                push A
 08AB 500A              mov A,10
 08AD 08                push A
 08AE 62D000            mov REG[0xd0],>_GainIndx
 08B1 5102              mov A,[_GainIndx+2]
 08B3 62D000            mov REG[0xd0],>__r0
 08B6 5300              mov [__r1],A
 08B8 550000            mov [__r0],0
 08BB 6500              asl [__r1]
 08BD 6B00              rlc [__r0]
 08BF 060001            add [__r1],<_GF+1
 08C2 0E0001            adc [__r0],>_GF+1
 08C5 5100              mov A,[__r0]
 08C7 60D4              mov REG[0xd4],A
 08C9 3E00              mvi A,[__r1]
 08CB 5300              mov [__r1],A
 08CD 5000              mov A,0
 08CF 08                push A
 08D0 5100              mov A,[__r1]
 08D2 08                push A
 08D3 5000              mov A,>_str
 08D5 08                push A
 08D6 5000              mov A,<_str
 08D8 08                push A
 08D9 7C0000            xcall _itoa
 08DC 38FA              add SP,-6
 08DE                   .dbline 186
 08DE           ;       TX8_PutString(str);     
 08DE 10                push X
 08DF 5000              mov A,>_str
 08E1 08                push A
 08E2 5000              mov A,<_str
 08E4 5C                mov X,A
 08E5 18                pop A
 08E6 7C0000            xcall _TX8_PutString
 08E9 20                pop X
 08EA                   .dbline 187
 08EA           ;       TX8_CPutString("  -  3 = ");
 08EA 10                push X
 08EB 5016              mov A,>L60
 08ED 08                push A
 08EE 5016              mov A,<L60
 08F0 5C                mov X,A
 08F1 18                pop A
 08F2 7C0000            xcall _TX8_CPutString
 08F5 20                pop X
 08F6                   .dbline 188
 08F6           ;       itoa(str, GF[GainIndx[2][0]][1], 10);
 08F6 5000              mov A,0
 08F8 08                push A
 08F9 500A              mov A,10
 08FB 08                push A
 08FC 62D000            mov REG[0xd0],>_GainIndx
 08FF 5104              mov A,[_GainIndx+4]
 0901 62D000            mov REG[0xd0],>__r0
 0904 5300              mov [__r1],A
 0906 550000            mov [__r0],0
 0909 6500              asl [__r1]
 090B 6B00              rlc [__r0]
 090D 060001            add [__r1],<_GF+1
 0910 0E0001            adc [__r0],>_GF+1
 0913 5100              mov A,[__r0]
 0915 60D4              mov REG[0xd4],A
 0917 3E00              mvi A,[__r1]
 0919 5300              mov [__r1],A
 091B 5000              mov A,0
 091D 08                push A
 091E 5100              mov A,[__r1]
 0920 08                push A
 0921 5000              mov A,>_str
 0923 08                push A
 0924 5000              mov A,<_str
 0926 08                push A
 0927 7C0000            xcall _itoa
 092A 38FA              add SP,-6
 092C                   .dbline 189
 092C           ;       TX8_PutString(str);     
 092C 10                push X
 092D 5000              mov A,>_str
 092F 08                push A
 0930 5000              mov A,<_str
 0932 5C                mov X,A
 0933 18                pop A
 0934 7C0000            xcall _TX8_PutString
 0937 20                pop X
 0938                   .dbline 190
 0938           ;       TX8_CPutString(" Out: 1 = ");
 0938 10                push X
 0939 5000              mov A,>L68
 093B 08                push A
 093C 5000              mov A,<L68
 093E 5C                mov X,A
 093F 18                pop A
 0940 7C0000            xcall _TX8_CPutString
 0943 20                pop X
 0944                   .dbline 191
 0944           ;       itoa(str, GF[GainIndx[0][1]][1], 10);
 0944 5000              mov A,0
 0946 08                push A
 0947 500A              mov A,10
 0949 08                push A
 094A 62D000            mov REG[0xd0],>_GainIndx
 094D 5101              mov A,[_GainIndx+1]
 094F 62D000            mov REG[0xd0],>__r0
 0952 5300              mov [__r1],A
 0954 550000            mov [__r0],0
 0957 6500              asl [__r1]
 0959 6B00              rlc [__r0]
 095B 060001            add [__r1],<_GF+1
 095E 0E0001            adc [__r0],>_GF+1
 0961 5100              mov A,[__r0]
 0963 60D4              mov REG[0xd4],A
 0965 3E00              mvi A,[__r1]
 0967 5300              mov [__r1],A
 0969 5000              mov A,0
 096B 08                push A
 096C 5100              mov A,[__r1]
 096E 08                push A
 096F 5000              mov A,>_str
 0971 08                push A
 0972 5000              mov A,<_str
 0974 08                push A
 0975 7C0000            xcall _itoa
 0978 38FA              add SP,-6
 097A                   .dbline 192
 097A           ;       TX8_PutString(str);
 097A 10                push X
 097B 5000              mov A,>_str
 097D 08                push A
 097E 5000              mov A,<_str
 0980 5C                mov X,A
 0981 18                pop A
 0982 7C0000            xcall _TX8_PutString
 0985 20                pop X
 0986                   .dbline 193
 0986           ;       TX8_CPutString("  -  2 = ");
 0986 10                push X
 0987 5020              mov A,>L58
 0989 08                push A
 098A 5020              mov A,<L58
 098C 5C                mov X,A
 098D 18                pop A
 098E 7C0000            xcall _TX8_CPutString
 0991 20                pop X
 0992                   .dbline 194
 0992           ;       itoa(str, GF[GainIndx[1][1]][1], 10);
 0992 5000              mov A,0
 0994 08                push A
 0995 500A              mov A,10
 0997 08                push A
 0998 62D000            mov REG[0xd0],>_GainIndx
 099B 5103              mov A,[_GainIndx+2+1]
 099D 62D000            mov REG[0xd0],>__r0
 09A0 5300              mov [__r1],A
 09A2 550000            mov [__r0],0
 09A5 6500              asl [__r1]
 09A7 6B00              rlc [__r0]
 09A9 060001            add [__r1],<_GF+1
 09AC 0E0001            adc [__r0],>_GF+1
 09AF 5100              mov A,[__r0]
 09B1 60D4              mov REG[0xd4],A
 09B3 3E00              mvi A,[__r1]
 09B5 5300              mov [__r1],A
 09B7 5000              mov A,0
 09B9 08                push A
 09BA 5100              mov A,[__r1]
 09BC 08                push A
 09BD 5000              mov A,>_str
 09BF 08                push A
 09C0 5000              mov A,<_str
 09C2 08                push A
 09C3 7C0000            xcall _itoa
 09C6 38FA              add SP,-6
 09C8                   .dbline 195
 09C8           ;       TX8_PutString(str);     
 09C8 10                push X
 09C9 5000              mov A,>_str
 09CB 08                push A
 09CC 5000              mov A,<_str
 09CE 5C                mov X,A
 09CF 18                pop A
 09D0 7C0000            xcall _TX8_PutString
 09D3 20                pop X
 09D4                   .dbline 196
 09D4           ;       TX8_CPutString("  -  3 = ");
 09D4 10                push X
 09D5 5016              mov A,>L60
 09D7 08                push A
 09D8 5016              mov A,<L60
 09DA 5C                mov X,A
 09DB 18                pop A
 09DC 7C0000            xcall _TX8_CPutString
 09DF 20                pop X
 09E0                   .dbline 197
 09E0           ;       itoa(str, GF[GainIndx[2][1]][1], 10);
 09E0 5000              mov A,0
 09E2 08                push A
 09E3 500A              mov A,10
 09E5 08                push A
 09E6 62D000            mov REG[0xd0],>_GainIndx
 09E9 5105              mov A,[_GainIndx+4+1]
 09EB 62D000            mov REG[0xd0],>__r0
 09EE 5300              mov [__r1],A
 09F0 550000            mov [__r0],0
 09F3 6500              asl [__r1]
 09F5 6B00              rlc [__r0]
 09F7 060001            add [__r1],<_GF+1
 09FA 0E0001            adc [__r0],>_GF+1
 09FD 5100              mov A,[__r0]
 09FF 60D4              mov REG[0xd4],A
 0A01 3E00              mvi A,[__r1]
 0A03 5300              mov [__r1],A
 0A05 5000              mov A,0
 0A07 08                push A
 0A08 5100              mov A,[__r1]
 0A0A 08                push A
 0A0B 5000              mov A,>_str
 0A0D 08                push A
 0A0E 5000              mov A,<_str
 0A10 08                push A
 0A11 7C0000            xcall _itoa
 0A14 38FA              add SP,-6
 0A16                   .dbline 198
 0A16           ;       TX8_PutString(str);     
 0A16 10                push X
 0A17 5000              mov A,>_str
 0A19 08                push A
 0A1A 5000              mov A,<_str
 0A1C 5C                mov X,A
 0A1D 18                pop A
 0A1E 7C0000            xcall _TX8_PutString
 0A21 20                pop X
 0A22                   .dbline -2
 0A22           L55:
 0A22                   .dbline 0 ; func end
 0A22 7F                ret
 0A23                   .dbend
 0A23                   .dbfunc e BlocksInit _BlocksInit fV
 0A23           _BlocksInit::
 0A23                   .dbline -1
 0A23                   .dbline 220
 0A23           ;                               
 0A23           ; /*
 0A23           ;       TX8_CPutString("  --Pre = ");
 0A23           ;       itoa(str, MesValue[0][0], 10);
 0A23           ;       TX8_PutString(str);
 0A23           ;       
 0A23           ;       TX8_CPutString("  --Out = ");
 0A23           ;       itoa(str, MesValue[0][1], 10);
 0A23           ;       TX8_PutString(str);
 0A23           ;       
 0A23           ;       TX8_CPutString("  --Sum = ");
 0A23           ;       itoa(str, MesValueSum[0][0], 10);
 0A23           ;       TX8_PutString(str);
 0A23           ;       
 0A23           ;       TX8_CPutString("  --Count = ");
 0A23           ;       itoa(str, MesValueSum[0][1], 10);
 0A23           ;       TX8_PutString(str);
 0A23           ; */
 0A23           ; }
 0A23           ;       
 0A23           ; void BlocksInit(void)
 0A23           ; {// Analog and digital blocks inizialization
 0A23                   .dbline 221
 0A23           ;       ADCINCVR_pot_Start(ADCINCVR_pot_HIGHPOWER);     
 0A23 10                push X
 0A24 5003              mov A,3
 0A26 7C0000            xcall _ADCINCVR_pot_Start
 0A29 20                pop X
 0A2A                   .dbline 222
 0A2A           ;       ADCINCVR_mes_Start(ADCINCVR_mes_HIGHPOWER);
 0A2A 10                push X
 0A2B 5003              mov A,3
 0A2D 7C0000            xcall _ADCINCVR_mes_Start
 0A30                   .dbline 223
 0A30           ;       AMUX4_mic_Start();
 0A30 7C0000            xcall _AMUX4_mic_Start
 0A33 20                pop X
 0A34                   .dbline 224
 0A34           ;       BPF4_4KHz_Start(BPF4_4KHz_HIGHPOWER);
 0A34 10                push X
 0A35 5003              mov A,3
 0A37 7C0000            xcall _BPF4_4KHz_Start
 0A3A 20                pop X
 0A3B                   .dbline 227
 0A3B           ;       
 0A3B           ;        // Set up I2C RAM buffer  
 0A3B           ;       EzI2Cs_1_SetRamBuffer(sizeof(I2C_Regs), 0, (BYTE *) &I2C_Regs);
 0A3B 10                push X
 0A3C 5000              mov A,>_I2C_Regs
 0A3E 08                push A
 0A3F 5000              mov A,<_I2C_Regs
 0A41 08                push A
 0A42 5000              mov A,0
 0A44 08                push A
 0A45 500C              mov A,12
 0A47 08                push A
 0A48 7C0000            xcall _EzI2Cs_1_SetRamBuffer
 0A4B 38FC              add SP,-4
 0A4D                   .dbline 228
 0A4D           ;       EzI2Cs_1_Start(); // Turn on EzI2C 
 0A4D 7C0000            xcall _EzI2Cs_1_Start
 0A50 20                pop X
 0A51                   .dbline 230
 0A51           ;       
 0A51           ;       PGA_out_Start(PGA_out_HIGHPOWER);
 0A51 10                push X
 0A52 5003              mov A,3
 0A54 7C0000            xcall _PGA_out_Start
 0A57 20                pop X
 0A58                   .dbline 231
 0A58           ;       PGA_pre_Start(PGA_pre_HIGHPOWER); 
 0A58 10                push X
 0A59 5003              mov A,3
 0A5B 7C0000            xcall _PGA_pre_Start
 0A5E 20                pop X
 0A5F                   .dbline 232
 0A5F           ;       RefMux_1_Start(RefMux_1_HIGHPOWER);
 0A5F 10                push X
 0A60 5003              mov A,3
 0A62 7C0000            xcall _RefMux_1_Start
 0A65 20                pop X
 0A66                   .dbline 233
 0A66           ;     SCBLOCK_inbuff_Start(SCBLOCK_inbuff_HIGHPOWER);
 0A66 10                push X
 0A67 5003              mov A,3
 0A69 7C0000            xcall _SCBLOCK_inbuff_Start
 0A6C                   .dbline 234
 0A6C           ;       LED_1_Start();
 0A6C 7C0000            xcall _LED_1_Start
 0A6F                   .dbline 235
 0A6F           ;       LED_2_Start();
 0A6F 7C0000            xcall _LED_2_Start
 0A72                   .dbline 236
 0A72           ;       LED_3_Start();
 0A72 7C0000            xcall _LED_3_Start
 0A75                   .dbline 237
 0A75           ;       DIGITAL_OUT_Start();  
 0A75 7C0000            xcall _DIGITAL_OUT_Start
 0A78                   .dbline 239
 0A78           ;       
 0A78           ;       TX8_EnableInt();
 0A78 7C0000            xcall _TX8_EnableInt
 0A7B 20                pop X
 0A7C                   .dbline 240
 0A7C           ;       TX8_Start(TX8_PARITY_NONE);
 0A7C 10                push X
 0A7D 5000              mov A,0
 0A7F 7C0000            xcall _TX8_Start
 0A82 20                pop X
 0A83                   .dbline 242
 0A83           ;       
 0A83           ;       AMUX4_mic_InputSelect(AMUX4_mic_PORT0_1);
 0A83 10                push X
 0A84 5000              mov A,0
 0A86 7C0000            xcall _AMUX4_mic_InputSelect
 0A89 20                pop X
 0A8A                   .dbline 244
 0A8A           ; 
 0A8A           ;       PGA_pre_SetGain(GF[GainIndx[0][0]][0]);
 0A8A 62D000            mov REG[0xd0],>_GainIndx
 0A8D 5100              mov A,[_GainIndx]
 0A8F 62D000            mov REG[0xd0],>__r0
 0A92 5300              mov [__r1],A
 0A94 550000            mov [__r0],0
 0A97 6500              asl [__r1]
 0A99 6B00              rlc [__r0]
 0A9B 060000            add [__r1],<_GF
 0A9E 0E0000            adc [__r0],>_GF
 0AA1 5100              mov A,[__r0]
 0AA3 60D4              mov REG[0xd4],A
 0AA5 3E00              mvi A,[__r1]
 0AA7 10                push X
 0AA8 7C0000            xcall _PGA_pre_SetGain
 0AAB 20                pop X
 0AAC                   .dbline 245
 0AAC           ;       PGA_out_SetGain(GF[GainIndx[0][1]][0]);
 0AAC 62D000            mov REG[0xd0],>_GainIndx
 0AAF 5101              mov A,[_GainIndx+1]
 0AB1 62D000            mov REG[0xd0],>__r0
 0AB4 5300              mov [__r1],A
 0AB6 550000            mov [__r0],0
 0AB9 6500              asl [__r1]
 0ABB 6B00              rlc [__r0]
 0ABD 060000            add [__r1],<_GF
 0AC0 0E0000            adc [__r0],>_GF
 0AC3 5100              mov A,[__r0]
 0AC5 60D4              mov REG[0xd4],A
 0AC7 3E00              mvi A,[__r1]
 0AC9 10                push X
 0ACA 7C0000            xcall _PGA_out_SetGain
 0ACD                   .dbline 247
 0ACD           ;       
 0ACD           ;     HB_Tmr_EnableInt();  
 0ACD 7C0000            xcall _HB_Tmr_EnableInt
 0AD0                   .dbline 248
 0AD0           ;       HB_Tmr_Start();         
 0AD0 7C0000            xcall _HB_Tmr_Start
 0AD3 20                pop X
 0AD4                   .dbline -2
 0AD4           L77:
 0AD4                   .dbline 0 ; func end
 0AD4 7F                ret
 0AD5                   .dbend
 0AD5                   .dbfunc e HB_Tmr_ISR_C _HB_Tmr_ISR_C fV
 0AD5           _HB_Tmr_ISR_C::
 0AD5                   .dbline -1
 0AD5 71C0              or F,-64
 0AD7 08                push A
 0AD8 5DD0              mov A,REG[0xd0]
 0ADA 08                push A
 0ADB                   .dbline 252
 0ADB           ; }
 0ADB           ;       
 0ADB           ; void HB_Tmr_ISR_C(void)
 0ADB           ; {// Base clock for all of the timings in the program
 0ADB                   .dbline 253
 0ADB           ;       TmrFlag = 1;
 0ADB 62D000            mov REG[0xd0],>_TmrFlag
 0ADE 550001            mov [_TmrFlag],1
 0AE1                   .dbline 254
 0AE1           ;       Tmr1++;
 0AE1 62D000            mov REG[0xd0],>_Tmr1
 0AE4 7601              inc [_Tmr1+1]
 0AE6 0E0000            adc [_Tmr1],0
 0AE9                   .dbline 255
 0AE9           ;       Tmr2++;
 0AE9 62D000            mov REG[0xd0],>_Tmr2
 0AEC 7601              inc [_Tmr2+1]
 0AEE 0E0000            adc [_Tmr2],0
 0AF1                   .dbline 256
 0AF1           ;       Time10ms++;     
 0AF1 62D000            mov REG[0xd0],>_Time10ms
 0AF4 060301            add [_Time10ms+3],1
 0AF7 0E0200            adc [_Time10ms+2],0
 0AFA 0E0100            adc [_Time10ms+1],0
 0AFD 0E0000            adc [_Time10ms],0
 0B00                   .dbline -2
 0B00           L79:
 0B00 18                pop A
 0B01 60D0              mov REG[208],A
 0B03 18                pop A
 0B04                   .dbline 0 ; func end
 0B04 7E                reti
 0B05                   .dbend
 0B05                   .dbfunc e DelayMs _DelayMs fV
 0B05           ;              i -> X+0
 0B05           ;             Ms -> X-5
 0B05           _DelayMs::
 0B05                   .dbline -1
 0B05 10                push X
 0B06 4F                mov X,SP
 0B07 3802              add SP,2
 0B09                   .dbline 260
 0B09           ; }
 0B09           ; 
 0B09           ; void DelayMs(int Ms)
 0B09           ; {
 0B09                   .dbline 262
 0B09           ;       int i;
 0B09           ;       for (i=0; i<Ms; i++)
 0B09 560100            mov [X+1],0
 0B0C 560000            mov [X+0],0
 0B0F 800D              xjmp L84
 0B11           L81:
 0B11                   .dbline 263
 0B11           ;       {
 0B11                   .dbline 264
 0B11           ;               Delay50uTimes(20);
 0B11 10                push X
 0B12 5014              mov A,20
 0B14 7C0000            xcall _Delay50uTimes
 0B17 20                pop X
 0B18                   .dbline 265
 0B18           ;       }
 0B18           L82:
 0B18                   .dbline 262
 0B18 7701              inc [X+1]
 0B1A 0F0000            adc [X+0],0
 0B1D           L84:
 0B1D                   .dbline 262
 0B1D 5201              mov A,[X+1]
 0B1F 13FC              sub A,[X-4]
 0B21 52FB              mov A,[X-5]
 0B23 3180              xor A,-128
 0B25 62D000            mov REG[0xd0],>__r0
 0B28 5300              mov [__rX],A
 0B2A 5200              mov A,[X+0]
 0B2C 3180              xor A,-128
 0B2E 1A00              sbb A,[__rX]
 0B30 CFE0              jc L81
 0B32           X21:
 0B32                   .dbline -2
 0B32           L80:
 0B32 38FE              add SP,-2
 0B34 20                pop X
 0B35                   .dbline 0 ; func end
 0B35 7F                ret
 0B36                   .dbsym l i 0 I
 0B36                   .dbsym l Ms -5 I
 0B36                   .dbend
 0B36                   .dbfunc e LedTest _LedTest fV
 0B36           ;              i -> X+0
 0B36           _LedTest::
 0B36                   .dbline -1
 0B36 10                push X
 0B37 4F                mov X,SP
 0B38 3802              add SP,2
 0B3A                   .dbline 269
 0B3A           ; }
 0B3A           ; 
 0B3A           ; void LedTest(void)
 0B3A           ; {
 0B3A                   .dbline 271
 0B3A           ;       int i;
 0B3A           ;       LED_1_Off();
 0B3A 10                push X
 0B3B 7C0000            xcall _LED_1_Off
 0B3E                   .dbline 272
 0B3E           ;       LED_2_Off();
 0B3E 7C0000            xcall _LED_2_Off
 0B41                   .dbline 273
 0B41           ;       LED_3_Off();
 0B41 7C0000            xcall _LED_3_Off
 0B44 20                pop X
 0B45                   .dbline 275
 0B45           ;       
 0B45           ;       for (i=0; i<3; i++)
 0B45 560100            mov [X+1],0
 0B48 560000            mov [X+0],0
 0B4B           L86:
 0B4B                   .dbline 276
 0B4B           ;       {
 0B4B                   .dbline 277
 0B4B           ;               LED_1_On();
 0B4B 10                push X
 0B4C 7C0000            xcall _LED_1_On
 0B4F 20                pop X
 0B50                   .dbline 278
 0B50           ;               DelayMs(500);
 0B50 5001              mov A,1
 0B52 08                push A
 0B53 50F4              mov A,-12
 0B55 08                push A
 0B56 9FAD              xcall _DelayMs
 0B58 38FE              add SP,-2
 0B5A                   .dbline 279
 0B5A           ;               LED_1_Off();
 0B5A 10                push X
 0B5B 7C0000            xcall _LED_1_Off
 0B5E                   .dbline 280
 0B5E           ;               LED_2_On();
 0B5E 7C0000            xcall _LED_2_On
 0B61 20                pop X
 0B62                   .dbline 281
 0B62           ;               DelayMs(500);
 0B62 5001              mov A,1
 0B64 08                push A
 0B65 50F4              mov A,-12
 0B67 08                push A
 0B68 9F9B              xcall _DelayMs
 0B6A 38FE              add SP,-2
 0B6C                   .dbline 282
 0B6C           ;               LED_2_Off();
 0B6C 10                push X
 0B6D 7C0000            xcall _LED_2_Off
 0B70                   .dbline 283
 0B70           ;               LED_3_On();
 0B70 7C0000            xcall _LED_3_On
 0B73 20                pop X
 0B74                   .dbline 284
 0B74           ;               DelayMs(500);
 0B74 5001              mov A,1
 0B76 08                push A
 0B77 50F4              mov A,-12
 0B79 08                push A
 0B7A 9F89              xcall _DelayMs
 0B7C 38FE              add SP,-2
 0B7E                   .dbline 285
 0B7E           ;               LED_3_Off();
 0B7E 10                push X
 0B7F 7C0000            xcall _LED_3_Off
 0B82 20                pop X
 0B83                   .dbline 286
 0B83           ;       }
 0B83           L87:
 0B83                   .dbline 275
 0B83 7701              inc [X+1]
 0B85 0F0000            adc [X+0],0
 0B88                   .dbline 275
 0B88 5201              mov A,[X+1]
 0B8A 1103              sub A,3
 0B8C 5200              mov A,[X+0]
 0B8E 3180              xor A,-128
 0B90 1980              sbb A,(0 ^ 0x80)
 0B92 CFB8              jc L86
 0B94           X22:
 0B94                   .dbline -2
 0B94           L85:
 0B94 38FE              add SP,-2
 0B96 20                pop X
 0B97                   .dbline 0 ; func end
 0B97 7F                ret
 0B98                   .dbsym l i 0 I
 0B98                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\main.c
 0000           _str::
 0000 00000000000000    .byte 0,0,0,0,0,0,0
 0007                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0007                   .dbsym e str _str A[7:7]c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _i::
 0000 0000              .byte 0,0
 0002                   .dbsym e i _i i
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _I2C_Regs::
 0000 00000000000000000000      .word 0,0,0,0,0
 000A 0000              .byte 0,0
 000C                   .dbstruct 0 12 I2C_Struct
 000C                   .dbfield 0 I2C_MesValue A[12:3]L
 000C                   .dbend
 000C                   .dbsym e I2C_Regs _I2C_Regs S[I2C_Struct]
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _MesValue::
 0000 00000000000000000000      .word 0,0,0,0,0
 000A 00000000000000000000      .word 0,0,0,0,0
 0014 00000000000000000000      .word 0,0,0,0,0
 001E 000000000000      .byte 0,0,0,0,0,0
 0024                   .dbsym e MesValue _MesValue A[36:3:3]L
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _PotValue::
 0000 00000000          .byte 0,0,0,0
 0004                   .dbsym e PotValue _PotValue L
                        .area lit(rom, con, rel)
 0000           L68:
 0000 204F75743A2031203D2000    .byte 32,'O,'u,'t,58,32,49,32,61,32,0
 000B           L62:
 000B 205072653A2031203D2000    .byte 32,'P,'r,'e,58,32,49,32,61,32,0
 0016           L60:
 0016 20202D202033203D2000      .byte 32,32,45,32,32,51,32,61,32,0
 0020           L58:
 0020 20202D202032203D2000      .byte 32,32,45,32,32,50,32,61,32,0
 002A           L57:
 002A 4D65733A2031203D2000      .byte 'M,'e,'s,58,32,49,32,61,32,0
 0034           L56:
 0034 0A0D00            .byte 10,13,0
