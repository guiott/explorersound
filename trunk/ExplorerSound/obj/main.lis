 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _PortIndx::
 0000 00                .byte 0
 0001                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0001                   .dbsym e PortIndx _PortIndx c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _Tmr1::
 0000 0000              .word 0
 0002                   .dbsym e Tmr1 _Tmr1 i
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _Tmr2::
 0000 0000              .word 0
 0002                   .dbsym e Tmr2 _Tmr2 i
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _Time10ms::
 0000 00000000          .word 0,0
 0004                   .dbsym e Time10ms _Time10ms L
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _TmrFlag::
 0000 00                .byte 0
 0001                   .dbsym e TmrFlag _TmrFlag c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _GF::
 0000 F801              .byte 248,1
 0002 7802              .byte 'x,2
 0004 3804              .byte 56,4
 0006 1808              .byte 24,8
 0008 0810              .byte 8,16
 000A 1C18              .byte 28,24
 000C 0C30              .byte 12,48
 000E                   .dbsym e GF _GF A[14:7:2]c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _GainIndx::
 0000 0202              .byte 2,2
 0002 0202              .byte 2,2
 0004 0202              .byte 2,2
 0006                   .dbsym e GainIndx _GainIndx A[6:3:2]c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area text(rom, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;        PortNum -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3803              add SP,3
 0004                   .dbline 38
 0004           ; /* ////////////////////////////////////////////////////////////////////////////
 0004           ; ** Project:      ExplorerSound
 0004           ; ** Author:    Guido Ottaviani-->guido@guiott.com<--
 0004           ; ** Description: 
 0004           ; ** version 1.0   07-11-2010
 0004           ; **
 0004           ; ** Detailed descriptions are on file "Notes.txt" 
 0004           ; **
 0004           ; -------------------------------------------------------------------------------
 0004           ; Copyright 2010 Guido Ottaviani
 0004           ; guido@guiott.com
 0004           ; 
 0004           ;       ExplorerSound is free software: you can redistribute it and/or modify
 0004           ;     it under the terms of the GNU General Public License as published by
 0004           ;     the Free Software Foundation, either version 3 of the License, or
 0004           ;     (at your option) any later version.
 0004           ; 
 0004           ;     ExplorerSound is distributed in the hope that it will be useful,
 0004           ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
 0004           ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 0004           ;     GNU General Public License for more details.
 0004           ; 
 0004           ;     You should have received a copy of the GNU General Public License
 0004           ;     along with ExplorerSound.  If not, see <http://www.gnu.org/licenses/>.
 0004           ; -------------------------------------------------------------------------------      
 0004           ; /////////////////////////////////////////////////////////////////////////////*/
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include <stdlib.h>
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include "prototypes.h"
 0004           ; #include "definitions.h"
 0004           ; #include "delay.h"
 0004           ; 
 0004           ; #pragma interrupt_handler HB_Tmr_ISR_C // int handler for program clock
 0004           ; 
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 41
 0004           ;       BYTE PortNum[3];
 0004           ;       
 0004           ;       BlocksInit();
 0004 7C09B7            xcall _BlocksInit
 0007                   .dbline 43
 0007           ;       
 0007           ;       M8C_EnableGInt ;               // Turn on interrupts 
 0007 7101                      or  F, 01h
 0009           
 0009                   .dbline 45
 0009           ;       
 0009           ;       LED_2_On();
 0009 10                push X
 000A 7C0000            xcall _LED_2_On
 000D 20                pop X
 000E                   .dbline 46
 000E           ;       PortNum[0] = AMUX4_mic_PORT0_1;
 000E 560000            mov [X+0],0
 0011                   .dbline 47
 0011           ;       PortNum[1] = AMUX4_mic_PORT0_3;
 0011 560101            mov [X+1],1
 0014                   .dbline 48
 0014           ;       PortNum[2] = AMUX4_mic_PORT0_7;
 0014 560203            mov [X+2],3
 0017                   .dbline 50
 0017           ;       
 0017           ;       LedTest();
 0017 7C0AB7            xcall _LedTest
 001A 82D7              xjmp L5
 001C           L4:
 001C                   .dbline 54
 001C           ;       
 001C           ;       // Main loop=============================================================
 001C           ;       while (1)
 001C           ;       {
 001C                   .dbline 55
 001C           ;               if(ADCINCVR_pot_fIsDataAvailable() != 0)// Wait for data to be ready
 001C 10                push X
 001D 7C0000            xcall _ADCINCVR_pot_fIsDataAvailable
 0020 62D000            mov REG[0xd0],>__r0
 0023 20                pop X
 0024 3900              cmp A,0
 0026 A05F              jz L7
 0028                   .dbline 56
 0028           ;         {   
 0028                   .dbline 59
 0028           ;                       // Get Data, Clear data ready flag, in the range 0-1800
 0028           ;                       // multiplying by 256 is to have the same order of ADC_mes values
 0028           ;                       PotValue = (((long)ADCINCVR_pot_iGetDataClearFlag())+900) << 8;  
 0028 10                push X
 0029 7C0000            xcall _ADCINCVR_pot_iGetDataClearFlag
 002C 62D000            mov REG[0xd0],>__r0
 002F 5A00              mov [__r0],X
 0031 20                pop X
 0032 5300              mov [__r3],A
 0034 5100              mov A,[__r0]
 0036 5300              mov [__r2],A
 0038 470080            tst [__r2],-128
 003B A009              jz X1
 003D 5500FF            mov [__r1],-1
 0040 5500FF            mov [__r0],-1
 0043 800A              jmp X2
 0045           X1:
 0045 62D000            mov REG[0xd0],>__r0
 0048 550000            mov [__r1],0
 004B 550000            mov [__r0],0
 004E           X2:
 004E 62D000            mov REG[0xd0],>__r0
 0051 060084            add [__r3],-124
 0054 0E0003            adc [__r2],3
 0057 0E0000            adc [__r1],0
 005A 0E0000            adc [__r0],0
 005D 5008              mov A,8
 005F           X3:
 005F 62D000            mov REG[0xd0],>__r0
 0062 6500              asl [__r3]
 0064 6B00              rlc [__r2]
 0066 6B00              rlc [__r1]
 0068 6B00              rlc [__r0]
 006A 78                dec A
 006B BFF3              jnz X3
 006D 5100              mov A,[__r0]
 006F 08                push A
 0070 5100              mov A,[__r1]
 0072 08                push A
 0073 5100              mov A,[__r2]
 0075 08                push A
 0076 5100              mov A,[__r3]
 0078 62D000            mov REG[0xd0],>_PotValue
 007B 5303              mov [_PotValue+3],A
 007D 18                pop A
 007E 5302              mov [_PotValue+2],A
 0080 18                pop A
 0081 5301              mov [_PotValue+1],A
 0083 18                pop A
 0084 5300              mov [_PotValue],A
 0086                   .dbline 60
 0086           ;               }
 0086           L7:
 0086                   .dbline 62
 0086           ;         
 0086           ;               if (Tmr2>2) // every 30ms
 0086 62D000            mov REG[0xd0],>_Tmr2
 0089 5002              mov A,2
 008B 1201              sub A,[_Tmr2+1]
 008D 5000              mov A,0
 008F 1A00              sbb A,[_Tmr2]
 0091 D22B              jnc L9
 0093           X4:
 0093                   .dbline 63
 0093           ;               {
 0093                   .dbline 64
 0093           ;                       Tmr2=0;
 0093 62D000            mov REG[0xd0],>_Tmr2
 0096 550100            mov [_Tmr2+1],0
 0099 550000            mov [_Tmr2],0
 009C                   .dbline 65
 009C           ;                       ADCINCVR_mes_GetSamples(1); // Start ADC to read once more
 009C 10                push X
 009D 5001              mov A,1
 009F 7C0000            xcall _ADCINCVR_mes_GetSamples
 00A2 20                pop X
 00A3           L11:
 00A3                   .dbline 66
 00A3           ;                       while(! ADCINCVR_mes_fIsDataAvailable());// Wait for data to be ready 
 00A3           L12:
 00A3                   .dbline 66
 00A3 10                push X
 00A4 7C0000            xcall _ADCINCVR_mes_fIsDataAvailable
 00A7 62D000            mov REG[0xd0],>__r0
 00AA 20                pop X
 00AB 3900              cmp A,0
 00AD AFF5              jz L11
 00AF                   .dbline 68
 00AF           ;                       // Get Data, Clear data ready flag
 00AF           ;                       MesValue[PortIndx][2]=((long)ADCINCVR_mes_iGetDataClearFlag()) << 8; // [1]
 00AF 10                push X
 00B0 7C0000            xcall _ADCINCVR_mes_iGetDataClearFlag
 00B3 62D000            mov REG[0xd0],>__r0
 00B6 5A00              mov [__r0],X
 00B8 20                pop X
 00B9 5300              mov [__r3],A
 00BB 5100              mov A,[__r0]
 00BD 5300              mov [__r2],A
 00BF 470080            tst [__r2],-128
 00C2 A009              jz X5
 00C4 5500FF            mov [__r1],-1
 00C7 5500FF            mov [__r0],-1
 00CA 800A              jmp X6
 00CC           X5:
 00CC 62D000            mov REG[0xd0],>__r0
 00CF 550000            mov [__r1],0
 00D2 550000            mov [__r0],0
 00D5           X6:
 00D5 62D000            mov REG[0xd0],>__r0
 00D8 5008              mov A,8
 00DA           X7:
 00DA 62D000            mov REG[0xd0],>__r0
 00DD 6500              asl [__r3]
 00DF 6B00              rlc [__r2]
 00E1 6B00              rlc [__r1]
 00E3 6B00              rlc [__r0]
 00E5 78                dec A
 00E6 BFF3              jnz X7
 00E8 62D000            mov REG[0xd0],>_PortIndx
 00EB 5100              mov A,[_PortIndx]
 00ED 62D000            mov REG[0xd0],>__r0
 00F0 5300              mov [__r5],A
 00F2 5000              mov A,0
 00F4 08                push A
 00F5 5100              mov A,[__r5]
 00F7 08                push A
 00F8 5000              mov A,0
 00FA 08                push A
 00FB 500C              mov A,12
 00FD 08                push A
 00FE 7C0000            xcall __mul16
 0101 38FC              add SP,-4
 0103 5100              mov A,[__rX]
 0105 5300              mov [__r5],A
 0107 5100              mov A,[__rY]
 0109 5300              mov [__r4],A
 010B 060008            add [__r5],<_MesValue+8
 010E 0E0008            adc [__r4],>_MesValue+8
 0111 5100              mov A,[__r4]
 0113 60D5              mov REG[0xd5],A
 0115 5100              mov A,[__r0]
 0117 3F00              mvi [__r5],A
 0119 5100              mov A,[__r1]
 011B 3F00              mvi [__r5],A
 011D 5100              mov A,[__r2]
 011F 3F00              mvi [__r5],A
 0121 5100              mov A,[__r3]
 0123 3F00              mvi [__r5],A
 0125                   .dbline 69
 0125           ;                       MesValue[PortIndx][1]=(MesValue[PortIndx][2])/GF[GainIndx[PortIndx][1]][1]; // [2]
 0125 62D000            mov REG[0xd0],>_PortIndx
 0128 5100              mov A,[_PortIndx]
 012A 62D000            mov REG[0xd0],>__r0
 012D 5300              mov [__r1],A
 012F 5000              mov A,0
 0131 08                push A
 0132 5100              mov A,[__r1]
 0134 08                push A
 0135 5000              mov A,0
 0137 08                push A
 0138 500C              mov A,12
 013A 08                push A
 013B 7C0000            xcall __mul16
 013E 38FC              add SP,-4
 0140 5100              mov A,[__rX]
 0142 5300              mov [__r1],A
 0144 5100              mov A,[__rY]
 0146 5300              mov [__r0],A
 0148 62D000            mov REG[0xd0],>_PortIndx
 014B 5100              mov A,[_PortIndx]
 014D 62D000            mov REG[0xd0],>__r0
 0150 5300              mov [__r3],A
 0152 550000            mov [__r2],0
 0155 6500              asl [__r3]
 0157 6B00              rlc [__r2]
 0159 060001            add [__r3],<_GainIndx+1
 015C 0E0001            adc [__r2],>_GainIndx+1
 015F 5100              mov A,[__r2]
 0161 60D4              mov REG[0xd4],A
 0163 3E00              mvi A,[__r3]
 0165 5300              mov [__r3],A
 0167 550000            mov [__r2],0
 016A 6500              asl [__r3]
 016C 6B00              rlc [__r2]
 016E 060001            add [__r3],<_GF+1
 0171 0E0001            adc [__r2],>_GF+1
 0174 5100              mov A,[__r2]
 0176 60D4              mov REG[0xd4],A
 0178 3E00              mvi A,[__r3]
 017A 5300              mov [__r7],A
 017C 5100              mov A,[__r1]
 017E 0108              add A,<_MesValue+8
 0180 5300              mov [__r3],A
 0182 5100              mov A,[__r0]
 0184 0908              adc A,>_MesValue+8
 0186 60D4              mov REG[0xd4],A
 0188 3E00              mvi A,[__r3]
 018A 5300              mov [__r8],A
 018C 3E00              mvi A,[__r3]
 018E 5300              mov [__r9],A
 0190 3E00              mvi A,[__r3]
 0192 5300              mov [__r10],A
 0194 3E00              mvi A,[__r3]
 0196 5300              mov [__r11],A
 0198 5000              mov A,0
 019A 08                push A
 019B 08                push A
 019C 08                push A
 019D 5100              mov A,[__r7]
 019F 08                push A
 01A0 5100              mov A,[__r8]
 01A2 08                push A
 01A3 5100              mov A,[__r9]
 01A5 08                push A
 01A6 5100              mov A,[__r10]
 01A8 08                push A
 01A9 5100              mov A,[__r11]
 01AB 08                push A
 01AC 7C0000            xcall __divmod_32X32_32
 01AF 18                pop A
 01B0 5300              mov [__r7],A
 01B2 18                pop A
 01B3 5300              mov [__r6],A
 01B5 18                pop A
 01B6 5300              mov [__r5],A
 01B8 18                pop A
 01B9 5300              mov [__r4],A
 01BB 38FC              add SP,-4
 01BD 060004            add [__r1],<_MesValue+4
 01C0 0E0004            adc [__r0],>_MesValue+4
 01C3 5100              mov A,[__r0]
 01C5 60D5              mov REG[0xd5],A
 01C7 5100              mov A,[__r4]
 01C9 3F00              mvi [__r1],A
 01CB 5100              mov A,[__r5]
 01CD 3F00              mvi [__r1],A
 01CF 5100              mov A,[__r6]
 01D1 3F00              mvi [__r1],A
 01D3 5100              mov A,[__r7]
 01D5 3F00              mvi [__r1],A
 01D7                   .dbline 70
 01D7           ;                       MesValue[PortIndx][0]=(MesValue[PortIndx][1])/GF[GainIndx[PortIndx][0]][1]; // [3]                      
 01D7 62D000            mov REG[0xd0],>_PortIndx
 01DA 5100              mov A,[_PortIndx]
 01DC 62D000            mov REG[0xd0],>__r0
 01DF 5300              mov [__r1],A
 01E1 5000              mov A,0
 01E3 08                push A
 01E4 5100              mov A,[__r1]
 01E6 08                push A
 01E7 5000              mov A,0
 01E9 08                push A
 01EA 500C              mov A,12
 01EC 08                push A
 01ED 7C0000            xcall __mul16
 01F0 38FC              add SP,-4
 01F2 5100              mov A,[__rX]
 01F4 5300              mov [__r1],A
 01F6 5100              mov A,[__rY]
 01F8 5300              mov [__r0],A
 01FA 62D000            mov REG[0xd0],>_PortIndx
 01FD 5100              mov A,[_PortIndx]
 01FF 62D000            mov REG[0xd0],>__r0
 0202 5300              mov [__r3],A
 0204 550000            mov [__r2],0
 0207 6500              asl [__r3]
 0209 6B00              rlc [__r2]
 020B 060000            add [__r3],<_GainIndx
 020E 0E0000            adc [__r2],>_GainIndx
 0211 5100              mov A,[__r2]
 0213 60D4              mov REG[0xd4],A
 0215 3E00              mvi A,[__r3]
 0217 5300              mov [__r3],A
 0219 550000            mov [__r2],0
 021C 6500              asl [__r3]
 021E 6B00              rlc [__r2]
 0220 060001            add [__r3],<_GF+1
 0223 0E0001            adc [__r2],>_GF+1
 0226 5100              mov A,[__r2]
 0228 60D4              mov REG[0xd4],A
 022A 3E00              mvi A,[__r3]
 022C 5300              mov [__r7],A
 022E 5100              mov A,[__r1]
 0230 0104              add A,<_MesValue+4
 0232 5300              mov [__r3],A
 0234 5100              mov A,[__r0]
 0236 0904              adc A,>_MesValue+4
 0238 60D4              mov REG[0xd4],A
 023A 3E00              mvi A,[__r3]
 023C 5300              mov [__r8],A
 023E 3E00              mvi A,[__r3]
 0240 5300              mov [__r9],A
 0242 3E00              mvi A,[__r3]
 0244 5300              mov [__r10],A
 0246 3E00              mvi A,[__r3]
 0248 5300              mov [__r11],A
 024A 5000              mov A,0
 024C 08                push A
 024D 08                push A
 024E 08                push A
 024F 5100              mov A,[__r7]
 0251 08                push A
 0252 5100              mov A,[__r8]
 0254 08                push A
 0255 5100              mov A,[__r9]
 0257 08                push A
 0258 5100              mov A,[__r10]
 025A 08                push A
 025B 5100              mov A,[__r11]
 025D 08                push A
 025E 7C0000            xcall __divmod_32X32_32
 0261 18                pop A
 0262 5300              mov [__r7],A
 0264 18                pop A
 0265 5300              mov [__r6],A
 0267 18                pop A
 0268 5300              mov [__r5],A
 026A 18                pop A
 026B 5300              mov [__r4],A
 026D 38FC              add SP,-4
 026F 060000            add [__r1],<_MesValue
 0272 0E0000            adc [__r0],>_MesValue
 0275 5100              mov A,[__r0]
 0277 60D5              mov REG[0xd5],A
 0279 5100              mov A,[__r4]
 027B 3F00              mvi [__r1],A
 027D 5100              mov A,[__r5]
 027F 3F00              mvi [__r1],A
 0281 5100              mov A,[__r6]
 0283 3F00              mvi [__r1],A
 0285 5100              mov A,[__r7]
 0287 3F00              mvi [__r1],A
 0289                   .dbline 72
 0289           ;                       
 0289           ;                       AGC(); 
 0289 906E              xcall _AGC
 028B                   .dbline 74
 028B           ;                       
 028B           ;                       PortIndx++;
 028B 62D000            mov REG[0xd0],>_PortIndx
 028E 7600              inc [_PortIndx]
 0290                   .dbline 75
 0290           ;                       if(PortIndx > 2) 
 0290 5002              mov A,2
 0292 3A00              cmp A,[_PortIndx]
 0294 D007              jnc L21
 0296           X8:
 0296                   .dbline 76
 0296           ;                       {
 0296                   .dbline 77
 0296           ;                               PortIndx=0; // next mux port
 0296 62D000            mov REG[0xd0],>_PortIndx
 0299 550000            mov [_PortIndx],0
 029C                   .dbline 78
 029C           ;                       }
 029C           L21:
 029C                   .dbline 79
 029C           ;                       AMUX4_mic_InputSelect(PortNum[PortIndx]);
 029C 62D000            mov REG[0xd0],>__r0
 029F 550007            mov [__r0],7
 02A2 5A00              mov [__r1],X
 02A4 62D000            mov REG[0xd0],>_PortIndx
 02A7 5100              mov A,[_PortIndx]
 02A9 62D000            mov REG[0xd0],>__r0
 02AC 0200              add A,[__r1]
 02AE 5300              mov [__r1],A
 02B0 5000              mov A,0
 02B2 0A00              adc A,[__r0]
 02B4 60D4              mov REG[0xd4],A
 02B6 3E00              mvi A,[__r1]
 02B8 10                push X
 02B9 7C0000            xcall _AMUX4_mic_InputSelect
 02BC 20                pop X
 02BD                   .dbline 80
 02BD           ;               }
 02BD           L9:
 02BD                   .dbline 82
 02BD           ;               
 02BD           ;               if (TmrFlag) // every 10ms
 02BD 62D000            mov REG[0xd0],>_TmrFlag
 02C0 3C0000            cmp [_TmrFlag],0
 02C3 A00B              jz L23
 02C5                   .dbline 83
 02C5           ;               {       
 02C5                   .dbline 84
 02C5           ;                       TmrFlag = 0;
 02C5 550000            mov [_TmrFlag],0
 02C8                   .dbline 85
 02C8           ;                       ADCINCVR_pot_GetSamples(1);    // Start ADC to read 1 sample
 02C8 10                push X
 02C9 5001              mov A,1
 02CB 7C0000            xcall _ADCINCVR_pot_GetSamples
 02CE 20                pop X
 02CF                   .dbline 86
 02CF           ;               }
 02CF           L23:
 02CF                   .dbline 88
 02CF           ;               
 02CF           ;               if (Tmr1 > 9) // every 100ms
 02CF 62D000            mov REG[0xd0],>_Tmr1
 02D2 5009              mov A,9
 02D4 1201              sub A,[_Tmr1+1]
 02D6 5000              mov A,0
 02D8 1A00              sbb A,[_Tmr1]
 02DA D017              jnc L25
 02DC           X9:
 02DC                   .dbline 89
 02DC           ;               {
 02DC                   .dbline 90
 02DC           ;                       Tmr1 = 0;
 02DC 62D000            mov REG[0xd0],>_Tmr1
 02DF 550100            mov [_Tmr1+1],0
 02E2 550000            mov [_Tmr1],0
 02E5                   .dbline 91
 02E5           ;                       Tmr2 = 0;
 02E5 62D000            mov REG[0xd0],>_Tmr2
 02E8 550100            mov [_Tmr2+1],0
 02EB 550000            mov [_Tmr2],0
 02EE                   .dbline 92
 02EE           ;                       UartTxValues(); // debug
 02EE 943E              xcall _UartTxValues
 02F0                   .dbline 93
 02F0           ;                       DigitalOut();
 02F0 936A              xcall _DigitalOut
 02F2                   .dbline 94
 02F2           ;               }
 02F2           L25:
 02F2                   .dbline 95
 02F2           ;       }// ========================================================== Main loop 
 02F2           L5:
 02F2                   .dbline 53
 02F2 8D29              xjmp L4
 02F4           X0:
 02F4                   .dbline -2
 02F4           L1:
 02F4 38FD              add SP,-3
 02F6 20                pop X
 02F7                   .dbline 0 ; func end
 02F7 8FFF              jmp .
 02F9                   .dbsym l PortNum 0 A[3:3]c
 02F9                   .dbend
 02F9                   .dbfunc e AGC _AGC fV
 02F9           _AGC::
 02F9                   .dbline -1
 02F9                   .dbline 101
 02F9           ; }
 02F9           ; 
 02F9           ; // Functions ***************************************************************
 02F9           ; 
 02F9           ; void AGC(void)
 02F9           ; {// [5]
 02F9                   .dbline 102
 02F9           ;            if((MesValue[PortIndx][2] > V_MAX) && (GainIndx[PortIndx][1] > I_MIN))// PGA_out
 02F9 62D000            mov REG[0xd0],>_PortIndx
 02FC 5100              mov A,[_PortIndx]
 02FE 62D000            mov REG[0xd0],>__r0
 0301 5300              mov [__r1],A
 0303 5000              mov A,0
 0305 08                push A
 0306 5100              mov A,[__r1]
 0308 08                push A
 0309 5000              mov A,0
 030B 08                push A
 030C 500C              mov A,12
 030E 08                push A
 030F 7C0000            xcall __mul16
 0312 38FC              add SP,-4
 0314 5100              mov A,[__rX]
 0316 5300              mov [__r1],A
 0318 5100              mov A,[__rY]
 031A 5300              mov [__r0],A
 031C 060008            add [__r1],<_MesValue+8
 031F 0E0008            adc [__r0],>_MesValue+8
 0322 5100              mov A,[__r0]
 0324 60D4              mov REG[0xd4],A
 0326 3E00              mvi A,[__r1]
 0328 5300              mov [__r4],A
 032A 3E00              mvi A,[__r1]
 032C 5300              mov [__r5],A
 032E 3E00              mvi A,[__r1]
 0330 5300              mov [__r6],A
 0332 3E00              mvi A,[__r1]
 0334 5300              mov [__r7],A
 0336 5040              mov A,64
 0338 1200              sub A,[__r7]
 033A 500D              mov A,13
 033C 1A00              sbb A,[__r6]
 033E 5003              mov A,3
 0340 1A00              sbb A,[__r5]
 0342 5100              mov A,[__r4]
 0344 3180              xor A,-128
 0346 5300              mov [__rX],A
 0348 5080              mov A,(0 ^ 0x80)
 034A 1A00              sbb A,[__rX]
 034C D08B              jnc L28
 034E           X10:
 034E 62D000            mov REG[0xd0],>_PortIndx
 0351 5100              mov A,[_PortIndx]
 0353 62D000            mov REG[0xd0],>__r0
 0356 5300              mov [__r1],A
 0358 550000            mov [__r0],0
 035B 6500              asl [__r1]
 035D 6B00              rlc [__r0]
 035F 060001            add [__r1],<_GainIndx+1
 0362 0E0001            adc [__r0],>_GainIndx+1
 0365 5100              mov A,[__r0]
 0367 60D4              mov REG[0xd4],A
 0369 3E00              mvi A,[__r1]
 036B 5300              mov [__r0],A
 036D 5000              mov A,0
 036F 3A00              cmp A,[__r0]
 0371 D066              jnc L28
 0373           X11:
 0373                   .dbline 103
 0373           ;       {
 0373                   .dbline 104
 0373           ;               GainIndx[PortIndx][1]--;
 0373 62D000            mov REG[0xd0],>_PortIndx
 0376 5100              mov A,[_PortIndx]
 0378 62D000            mov REG[0xd0],>__r0
 037B 5300              mov [__r1],A
 037D 550000            mov [__r0],0
 0380 6500              asl [__r1]
 0382 6B00              rlc [__r0]
 0384 060001            add [__r1],<_GainIndx+1
 0387 0E0001            adc [__r0],>_GainIndx+1
 038A 5100              mov A,[__r0]
 038C 60D4              mov REG[0xd4],A
 038E 3E00              mvi A,[__r1]
 0390 7A00              dec [__r1]
 0392 5300              mov [__r2],A
 0394 160001            sub [__r2],1
 0397 5100              mov A,[__r0]
 0399 60D5              mov REG[0xd5],A
 039B 5100              mov A,[__r2]
 039D 3F00              mvi [__r1],A
 039F                   .dbline 105
 039F           ;               PGA_out_SetGain(GF[GainIndx[PortIndx][1]][0]); // set gain on PGA
 039F 62D000            mov REG[0xd0],>_PortIndx
 03A2 5100              mov A,[_PortIndx]
 03A4 62D000            mov REG[0xd0],>__r0
 03A7 5300              mov [__r1],A
 03A9 550000            mov [__r0],0
 03AC 6500              asl [__r1]
 03AE 6B00              rlc [__r0]
 03B0 060001            add [__r1],<_GainIndx+1
 03B3 0E0001            adc [__r0],>_GainIndx+1
 03B6 5100              mov A,[__r0]
 03B8 60D4              mov REG[0xd4],A
 03BA 3E00              mvi A,[__r1]
 03BC 5300              mov [__r1],A
 03BE 550000            mov [__r0],0
 03C1 6500              asl [__r1]
 03C3 6B00              rlc [__r0]
 03C5 060000            add [__r1],<_GF
 03C8 0E0000            adc [__r0],>_GF
 03CB 5100              mov A,[__r0]
 03CD 60D4              mov REG[0xd4],A
 03CF 3E00              mvi A,[__r1]
 03D1 10                push X
 03D2 7C0000            xcall _PGA_out_SetGain
 03D5 20                pop X
 03D6                   .dbline 106
 03D6           ;       }
 03D6 8284              xjmp L29
 03D8           L28:
 03D8                   .dbline 107
 03D8           ;       else if((MesValue[PortIndx][1] > V_MAX) && (GainIndx[PortIndx][0] > I_MIN))// PGA_pre
 03D8 62D000            mov REG[0xd0],>_PortIndx
 03DB 5100              mov A,[_PortIndx]
 03DD 62D000            mov REG[0xd0],>__r0
 03E0 5300              mov [__r1],A
 03E2 5000              mov A,0
 03E4 08                push A
 03E5 5100              mov A,[__r1]
 03E7 08                push A
 03E8 5000              mov A,0
 03EA 08                push A
 03EB 500C              mov A,12
 03ED 08                push A
 03EE 7C0000            xcall __mul16
 03F1 38FC              add SP,-4
 03F3 5100              mov A,[__rX]
 03F5 5300              mov [__r1],A
 03F7 5100              mov A,[__rY]
 03F9 5300              mov [__r0],A
 03FB 060004            add [__r1],<_MesValue+4
 03FE 0E0004            adc [__r0],>_MesValue+4
 0401 5100              mov A,[__r0]
 0403 60D4              mov REG[0xd4],A
 0405 3E00              mvi A,[__r1]
 0407 5300              mov [__r4],A
 0409 3E00              mvi A,[__r1]
 040B 5300              mov [__r5],A
 040D 3E00              mvi A,[__r1]
 040F 5300              mov [__r6],A
 0411 3E00              mvi A,[__r1]
 0413 5300              mov [__r7],A
 0415 5040              mov A,64
 0417 1200              sub A,[__r7]
 0419 500D              mov A,13
 041B 1A00              sbb A,[__r6]
 041D 5003              mov A,3
 041F 1A00              sbb A,[__r5]
 0421 5100              mov A,[__r4]
 0423 3180              xor A,-128
 0425 5300              mov [__rX],A
 0427 5080              mov A,(0 ^ 0x80)
 0429 1A00              sbb A,[__rX]
 042B D08B              jnc L34
 042D           X12:
 042D 62D000            mov REG[0xd0],>_PortIndx
 0430 5100              mov A,[_PortIndx]
 0432 62D000            mov REG[0xd0],>__r0
 0435 5300              mov [__r1],A
 0437 550000            mov [__r0],0
 043A 6500              asl [__r1]
 043C 6B00              rlc [__r0]
 043E 060000            add [__r1],<_GainIndx
 0441 0E0000            adc [__r0],>_GainIndx
 0444 5100              mov A,[__r0]
 0446 60D4              mov REG[0xd4],A
 0448 3E00              mvi A,[__r1]
 044A 5300              mov [__r0],A
 044C 5000              mov A,0
 044E 3A00              cmp A,[__r0]
 0450 D066              jnc L34
 0452           X13:
 0452                   .dbline 108
 0452           ;       {
 0452                   .dbline 109
 0452           ;               GainIndx[PortIndx][0]--;
 0452 62D000            mov REG[0xd0],>_PortIndx
 0455 5100              mov A,[_PortIndx]
 0457 62D000            mov REG[0xd0],>__r0
 045A 5300              mov [__r1],A
 045C 550000            mov [__r0],0
 045F 6500              asl [__r1]
 0461 6B00              rlc [__r0]
 0463 060000            add [__r1],<_GainIndx
 0466 0E0000            adc [__r0],>_GainIndx
 0469 5100              mov A,[__r0]
 046B 60D4              mov REG[0xd4],A
 046D 3E00              mvi A,[__r1]
 046F 7A00              dec [__r1]
 0471 5300              mov [__r2],A
 0473 160001            sub [__r2],1
 0476 5100              mov A,[__r0]
 0478 60D5              mov REG[0xd5],A
 047A 5100              mov A,[__r2]
 047C 3F00              mvi [__r1],A
 047E                   .dbline 110
 047E           ;               PGA_pre_SetGain(GF[GainIndx[PortIndx][0]][0]); // set gain on PGA
 047E 62D000            mov REG[0xd0],>_PortIndx
 0481 5100              mov A,[_PortIndx]
 0483 62D000            mov REG[0xd0],>__r0
 0486 5300              mov [__r1],A
 0488 550000            mov [__r0],0
 048B 6500              asl [__r1]
 048D 6B00              rlc [__r0]
 048F 060000            add [__r1],<_GainIndx
 0492 0E0000            adc [__r0],>_GainIndx
 0495 5100              mov A,[__r0]
 0497 60D4              mov REG[0xd4],A
 0499 3E00              mvi A,[__r1]
 049B 5300              mov [__r1],A
 049D 550000            mov [__r0],0
 04A0 6500              asl [__r1]
 04A2 6B00              rlc [__r0]
 04A4 060000            add [__r1],<_GF
 04A7 0E0000            adc [__r0],>_GF
 04AA 5100              mov A,[__r0]
 04AC 60D4              mov REG[0xd4],A
 04AE 3E00              mvi A,[__r1]
 04B0 10                push X
 04B1 7C0000            xcall _PGA_pre_SetGain
 04B4 20                pop X
 04B5                   .dbline 111
 04B5           ;       }
 04B5 81A5              xjmp L35
 04B7           L34:
 04B7                   .dbline 112
 04B7           ;       else if((MesValue[PortIndx][2] < V_MIN) && (GainIndx[PortIndx][1] < I_MAX))// PGA_out
 04B7 62D000            mov REG[0xd0],>_PortIndx
 04BA 5100              mov A,[_PortIndx]
 04BC 62D000            mov REG[0xd0],>__r0
 04BF 5300              mov [__r1],A
 04C1 5000              mov A,0
 04C3 08                push A
 04C4 5100              mov A,[__r1]
 04C6 08                push A
 04C7 5000              mov A,0
 04C9 08                push A
 04CA 500C              mov A,12
 04CC 08                push A
 04CD 7C0000            xcall __mul16
 04D0 38FC              add SP,-4
 04D2 5100              mov A,[__rX]
 04D4 5300              mov [__r1],A
 04D6 5100              mov A,[__rY]
 04D8 5300              mov [__r0],A
 04DA 060008            add [__r1],<_MesValue+8
 04DD 0E0008            adc [__r0],>_MesValue+8
 04E0 5100              mov A,[__r0]
 04E2 60D4              mov REG[0xd4],A
 04E4 3E00              mvi A,[__r1]
 04E6 5300              mov [__r4],A
 04E8 3E00              mvi A,[__r1]
 04EA 5300              mov [__r5],A
 04EC 3E00              mvi A,[__r1]
 04EE 5300              mov [__r6],A
 04F0 3E00              mvi A,[__r1]
 04F2 1150              sub A,80
 04F4 5100              mov A,[__r6]
 04F6 19C3              sbb A,-61
 04F8 5100              mov A,[__r5]
 04FA 1900              sbb A,0
 04FC 5100              mov A,[__r4]
 04FE 3180              xor A,-128
 0500 1980              sbb A,(0 ^ 0x80)
 0502 D087              jnc L37
 0504           X14:
 0504 62D000            mov REG[0xd0],>_PortIndx
 0507 5100              mov A,[_PortIndx]
 0509 62D000            mov REG[0xd0],>__r0
 050C 5300              mov [__r1],A
 050E 550000            mov [__r0],0
 0511 6500              asl [__r1]
 0513 6B00              rlc [__r0]
 0515 060001            add [__r1],<_GainIndx+1
 0518 0E0001            adc [__r0],>_GainIndx+1
 051B 5100              mov A,[__r0]
 051D 60D4              mov REG[0xd4],A
 051F 3E00              mvi A,[__r1]
 0521 3906              cmp A,6
 0523 D066              jnc L37
 0525           X15:
 0525                   .dbline 113
 0525           ;       {
 0525                   .dbline 114
 0525           ;               GainIndx[PortIndx][1]++;
 0525 62D000            mov REG[0xd0],>_PortIndx
 0528 5100              mov A,[_PortIndx]
 052A 62D000            mov REG[0xd0],>__r0
 052D 5300              mov [__r1],A
 052F 550000            mov [__r0],0
 0532 6500              asl [__r1]
 0534 6B00              rlc [__r0]
 0536 060001            add [__r1],<_GainIndx+1
 0539 0E0001            adc [__r0],>_GainIndx+1
 053C 5100              mov A,[__r0]
 053E 60D4              mov REG[0xd4],A
 0540 3E00              mvi A,[__r1]
 0542 7A00              dec [__r1]
 0544 5300              mov [__r2],A
 0546 060001            add [__r2],1
 0549 5100              mov A,[__r0]
 054B 60D5              mov REG[0xd5],A
 054D 5100              mov A,[__r2]
 054F 3F00              mvi [__r1],A
 0551                   .dbline 115
 0551           ;               PGA_out_SetGain(GF[GainIndx[PortIndx][1]][0]); // set gain on PGA
 0551 62D000            mov REG[0xd0],>_PortIndx
 0554 5100              mov A,[_PortIndx]
 0556 62D000            mov REG[0xd0],>__r0
 0559 5300              mov [__r1],A
 055B 550000            mov [__r0],0
 055E 6500              asl [__r1]
 0560 6B00              rlc [__r0]
 0562 060001            add [__r1],<_GainIndx+1
 0565 0E0001            adc [__r0],>_GainIndx+1
 0568 5100              mov A,[__r0]
 056A 60D4              mov REG[0xd4],A
 056C 3E00              mvi A,[__r1]
 056E 5300              mov [__r1],A
 0570 550000            mov [__r0],0
 0573 6500              asl [__r1]
 0575 6B00              rlc [__r0]
 0577 060000            add [__r1],<_GF
 057A 0E0000            adc [__r0],>_GF
 057D 5100              mov A,[__r0]
 057F 60D4              mov REG[0xd4],A
 0581 3E00              mvi A,[__r1]
 0583 10                push X
 0584 7C0000            xcall _PGA_out_SetGain
 0587 20                pop X
 0588                   .dbline 116
 0588           ;       }
 0588 80D2              xjmp L38
 058A           L37:
 058A                   .dbline 117
 058A           ;       else if((MesValue[PortIndx][1] < V_MIN) && (GainIndx[PortIndx][0] < I_MAX))// PGA_pre
 058A 62D000            mov REG[0xd0],>_PortIndx
 058D 5100              mov A,[_PortIndx]
 058F 62D000            mov REG[0xd0],>__r0
 0592 5300              mov [__r1],A
 0594 5000              mov A,0
 0596 08                push A
 0597 5100              mov A,[__r1]
 0599 08                push A
 059A 5000              mov A,0
 059C 08                push A
 059D 500C              mov A,12
 059F 08                push A
 05A0 7C0000            xcall __mul16
 05A3 38FC              add SP,-4
 05A5 5100              mov A,[__rX]
 05A7 5300              mov [__r1],A
 05A9 5100              mov A,[__rY]
 05AB 5300              mov [__r0],A
 05AD 060004            add [__r1],<_MesValue+4
 05B0 0E0004            adc [__r0],>_MesValue+4
 05B3 5100              mov A,[__r0]
 05B5 60D4              mov REG[0xd4],A
 05B7 3E00              mvi A,[__r1]
 05B9 5300              mov [__r4],A
 05BB 3E00              mvi A,[__r1]
 05BD 5300              mov [__r5],A
 05BF 3E00              mvi A,[__r1]
 05C1 5300              mov [__r6],A
 05C3 3E00              mvi A,[__r1]
 05C5 1150              sub A,80
 05C7 5100              mov A,[__r6]
 05C9 19C3              sbb A,-61
 05CB 5100              mov A,[__r5]
 05CD 1900              sbb A,0
 05CF 5100              mov A,[__r4]
 05D1 3180              xor A,-128
 05D3 1980              sbb A,(0 ^ 0x80)
 05D5 D085              jnc L43
 05D7           X16:
 05D7 62D000            mov REG[0xd0],>_PortIndx
 05DA 5100              mov A,[_PortIndx]
 05DC 62D000            mov REG[0xd0],>__r0
 05DF 5300              mov [__r1],A
 05E1 550000            mov [__r0],0
 05E4 6500              asl [__r1]
 05E6 6B00              rlc [__r0]
 05E8 060000            add [__r1],<_GainIndx
 05EB 0E0000            adc [__r0],>_GainIndx
 05EE 5100              mov A,[__r0]
 05F0 60D4              mov REG[0xd4],A
 05F2 3E00              mvi A,[__r1]
 05F4 3906              cmp A,6
 05F6 D064              jnc L43
 05F8           X17:
 05F8                   .dbline 118
 05F8           ;       {
 05F8                   .dbline 119
 05F8           ;               GainIndx[PortIndx][0]++;
 05F8 62D000            mov REG[0xd0],>_PortIndx
 05FB 5100              mov A,[_PortIndx]
 05FD 62D000            mov REG[0xd0],>__r0
 0600 5300              mov [__r1],A
 0602 550000            mov [__r0],0
 0605 6500              asl [__r1]
 0607 6B00              rlc [__r0]
 0609 060000            add [__r1],<_GainIndx
 060C 0E0000            adc [__r0],>_GainIndx
 060F 5100              mov A,[__r0]
 0611 60D4              mov REG[0xd4],A
 0613 3E00              mvi A,[__r1]
 0615 7A00              dec [__r1]
 0617 5300              mov [__r2],A
 0619 060001            add [__r2],1
 061C 5100              mov A,[__r0]
 061E 60D5              mov REG[0xd5],A
 0620 5100              mov A,[__r2]
 0622 3F00              mvi [__r1],A
 0624                   .dbline 120
 0624           ;               PGA_pre_SetGain(GF[GainIndx[PortIndx][0]][0]); // set gain on PGA
 0624 62D000            mov REG[0xd0],>_PortIndx
 0627 5100              mov A,[_PortIndx]
 0629 62D000            mov REG[0xd0],>__r0
 062C 5300              mov [__r1],A
 062E 550000            mov [__r0],0
 0631 6500              asl [__r1]
 0633 6B00              rlc [__r0]
 0635 060000            add [__r1],<_GainIndx
 0638 0E0000            adc [__r0],>_GainIndx
 063B 5100              mov A,[__r0]
 063D 60D4              mov REG[0xd4],A
 063F 3E00              mvi A,[__r1]
 0641 5300              mov [__r1],A
 0643 550000            mov [__r0],0
 0646 6500              asl [__r1]
 0648 6B00              rlc [__r0]
 064A 060000            add [__r1],<_GF
 064D 0E0000            adc [__r0],>_GF
 0650 5100              mov A,[__r0]
 0652 60D4              mov REG[0xd4],A
 0654 3E00              mvi A,[__r1]
 0656 10                push X
 0657 7C0000            xcall _PGA_pre_SetGain
 065A 20                pop X
 065B                   .dbline 121
 065B           ;       }       
 065B           L43:
 065B           L38:
 065B           L35:
 065B           L29:
 065B                   .dbline -2
 065B           L27:
 065B                   .dbline 0 ; func end
 065B 7F                ret
 065C                   .dbend
 065C                   .dbfunc e DigitalOut _DigitalOut fV
 065C           _DigitalOut::
 065C                   .dbline -1
 065C                   .dbline 125
 065C           ; }
 065C           ; 
 065C           ; void DigitalOut(void)
 065C           ; {// Controls the outputs according to pot setting point
 065C                   .dbline 126
 065C           ;       DIGITAL_OUT_Off();
 065C 10                push X
 065D 7C0000            xcall _DIGITAL_OUT_Off
 0660 20                pop X
 0661                   .dbline 127
 0661           ;       if (MesValue[0][0]>PotValue)
 0661 62D000            mov REG[0xd0],>_PotValue
 0664 5103              mov A,[_PotValue+3]
 0666 62D000            mov REG[0xd0],>_MesValue
 0669 1203              sub A,[_MesValue+3]
 066B 62D000            mov REG[0xd0],>_PotValue
 066E 5102              mov A,[_PotValue+2]
 0670 62D000            mov REG[0xd0],>_MesValue
 0673 1A02              sbb A,[_MesValue+2]
 0675 62D000            mov REG[0xd0],>_PotValue
 0678 5101              mov A,[_PotValue+1]
 067A 62D000            mov REG[0xd0],>_MesValue
 067D 1A01              sbb A,[_MesValue+1]
 067F 5100              mov A,[_MesValue]
 0681 3180              xor A,-128
 0683 62D000            mov REG[0xd0],>__r0
 0686 5300              mov [__rX],A
 0688 62D000            mov REG[0xd0],>_PotValue
 068B 5100              mov A,[_PotValue]
 068D 3180              xor A,-128
 068F 62D000            mov REG[0xd0],>__r0
 0692 1A00              sbb A,[__rX]
 0694 D00B              jnc L47
 0696           X18:
 0696                   .dbline 128
 0696           ;       {
 0696                   .dbline 129
 0696           ;               DIGITAL_OUT_On();
 0696 10                push X
 0697 7C0000            xcall _DIGITAL_OUT_On
 069A                   .dbline 130
 069A           ;               LED_3_On();
 069A 7C0000            xcall _LED_3_On
 069D 20                pop X
 069E                   .dbline 131
 069E           ;       }
 069E 8006              xjmp L48
 06A0           L47:
 06A0                   .dbline 133
 06A0           ;       else
 06A0           ;       {
 06A0                   .dbline 134
 06A0           ;               LED_3_Off();
 06A0 10                push X
 06A1 7C0000            xcall _LED_3_Off
 06A4 20                pop X
 06A5                   .dbline 135
 06A5           ;       }
 06A5           L48:
 06A5                   .dbline 137
 06A5           ;               
 06A5           ;       if (MesValue[1][0]>PotValue)
 06A5 62D000            mov REG[0xd0],>_PotValue
 06A8 5103              mov A,[_PotValue+3]
 06AA 62D000            mov REG[0xd0],>_MesValue
 06AD 120F              sub A,[_MesValue+12+3]
 06AF 62D000            mov REG[0xd0],>_PotValue
 06B2 5102              mov A,[_PotValue+2]
 06B4 62D000            mov REG[0xd0],>_MesValue
 06B7 1A0E              sbb A,[_MesValue+12+2]
 06B9 62D000            mov REG[0xd0],>_PotValue
 06BC 5101              mov A,[_PotValue+1]
 06BE 62D000            mov REG[0xd0],>_MesValue
 06C1 1A0D              sbb A,[_MesValue+12+1]
 06C3 510C              mov A,[_MesValue+12]
 06C5 3180              xor A,-128
 06C7 62D000            mov REG[0xd0],>__r0
 06CA 5300              mov [__rX],A
 06CC 62D000            mov REG[0xd0],>_PotValue
 06CF 5100              mov A,[_PotValue]
 06D1 3180              xor A,-128
 06D3 62D000            mov REG[0xd0],>__r0
 06D6 1A00              sbb A,[__rX]
 06D8 D00B              jnc L49
 06DA           X19:
 06DA                   .dbline 138
 06DA           ;       {
 06DA                   .dbline 139
 06DA           ;               DIGITAL_OUT_On();
 06DA 10                push X
 06DB 7C0000            xcall _DIGITAL_OUT_On
 06DE                   .dbline 140
 06DE           ;               LED_2_On();
 06DE 7C0000            xcall _LED_2_On
 06E1 20                pop X
 06E2                   .dbline 141
 06E2           ;       }
 06E2 8006              xjmp L50
 06E4           L49:
 06E4                   .dbline 143
 06E4           ;       else
 06E4           ;       {
 06E4                   .dbline 144
 06E4           ;               LED_2_Off();
 06E4 10                push X
 06E5 7C0000            xcall _LED_2_Off
 06E8 20                pop X
 06E9                   .dbline 145
 06E9           ;       }
 06E9           L50:
 06E9                   .dbline 147
 06E9           ;       
 06E9           ;       if (MesValue[2][0]>PotValue)
 06E9 62D000            mov REG[0xd0],>_PotValue
 06EC 5103              mov A,[_PotValue+3]
 06EE 62D000            mov REG[0xd0],>_MesValue
 06F1 121B              sub A,[_MesValue+24+3]
 06F3 62D000            mov REG[0xd0],>_PotValue
 06F6 5102              mov A,[_PotValue+2]
 06F8 62D000            mov REG[0xd0],>_MesValue
 06FB 1A1A              sbb A,[_MesValue+24+2]
 06FD 62D000            mov REG[0xd0],>_PotValue
 0700 5101              mov A,[_PotValue+1]
 0702 62D000            mov REG[0xd0],>_MesValue
 0705 1A19              sbb A,[_MesValue+24+1]
 0707 5118              mov A,[_MesValue+24]
 0709 3180              xor A,-128
 070B 62D000            mov REG[0xd0],>__r0
 070E 5300              mov [__rX],A
 0710 62D000            mov REG[0xd0],>_PotValue
 0713 5100              mov A,[_PotValue]
 0715 3180              xor A,-128
 0717 62D000            mov REG[0xd0],>__r0
 071A 1A00              sbb A,[__rX]
 071C D00B              jnc L52
 071E           X20:
 071E                   .dbline 148
 071E           ;       {
 071E                   .dbline 149
 071E           ;               DIGITAL_OUT_On();
 071E 10                push X
 071F 7C0000            xcall _DIGITAL_OUT_On
 0722                   .dbline 150
 0722           ;               LED_1_On();
 0722 7C0000            xcall _LED_1_On
 0725 20                pop X
 0726                   .dbline 151
 0726           ;       }
 0726 8006              xjmp L53
 0728           L52:
 0728                   .dbline 153
 0728           ;       else
 0728           ;       {
 0728                   .dbline 154
 0728           ;               LED_1_Off();
 0728 10                push X
 0729 7C0000            xcall _LED_1_Off
 072C 20                pop X
 072D                   .dbline 155
 072D           ;       }
 072D           L53:
 072D                   .dbline -2
 072D           L46:
 072D                   .dbline 0 ; func end
 072D 7F                ret
 072E                   .dbend
 072E                   .dbfunc e UartTxValues _UartTxValues fV
 072E           _UartTxValues::
 072E                   .dbline -1
 072E                   .dbline 159
 072E           ; }
 072E           ; 
 072E           ; void UartTxValues(void)
 072E           ; {/* Transmit via UART the analog values read from various inputs.
 072E                   .dbline 164
 072E           ;       Usefull for debugging purposes, it could be converted in a
 072E           ;       command string using the same protocol used for dsNav if
 072E           ;       needed to output sound level values via serial comm
 072E           ; */
 072E           ;       TX8_CPutString("\n\r");
 072E 10                push X
 072F 5034              mov A,>L56
 0731 08                push A
 0732 5034              mov A,<L56
 0734 5C                mov X,A
 0735 18                pop A
 0736 7C0000            xcall _TX8_CPutString
 0739 20                pop X
 073A                   .dbline 171
 073A           ;       
 073A           ; /*    TX8_CPutString("Pot Value = ");
 073A           ;       itoa(str, PotValue,10);
 073A           ;       TX8_PutString(str);
 073A           ; */
 073A           ; 
 073A           ;       TX8_CPutString("Mes: 1 = ");
 073A 10                push X
 073B 502A              mov A,>L57
 073D 08                push A
 073E 502A              mov A,<L57
 0740 5C                mov X,A
 0741 18                pop A
 0742 7C0000            xcall _TX8_CPutString
 0745 20                pop X
 0746                   .dbline 172
 0746           ;       ltoa(str, MesValue[0][0],10);
 0746 5000              mov A,0
 0748 08                push A
 0749 500A              mov A,10
 074B 08                push A
 074C 62D000            mov REG[0xd0],>_MesValue
 074F 5100              mov A,[_MesValue]
 0751 08                push A
 0752 5101              mov A,[_MesValue+1]
 0754 08                push A
 0755 5102              mov A,[_MesValue+2]
 0757 08                push A
 0758 5103              mov A,[_MesValue+3]
 075A 08                push A
 075B 5000              mov A,>_str
 075D 08                push A
 075E 5000              mov A,<_str
 0760 08                push A
 0761 7C0000            xcall _ltoa
 0764 38F8              add SP,-8
 0766                   .dbline 173
 0766           ;       TX8_PutString(str);
 0766 10                push X
 0767 5000              mov A,>_str
 0769 08                push A
 076A 5000              mov A,<_str
 076C 5C                mov X,A
 076D 18                pop A
 076E 7C0000            xcall _TX8_PutString
 0771 20                pop X
 0772                   .dbline 174
 0772           ;       TX8_CPutString("  -  2 = ");
 0772 10                push X
 0773 5020              mov A,>L58
 0775 08                push A
 0776 5020              mov A,<L58
 0778 5C                mov X,A
 0779 18                pop A
 077A 7C0000            xcall _TX8_CPutString
 077D 20                pop X
 077E                   .dbline 175
 077E           ;       ltoa(str, MesValue[1][0],10);
 077E 5000              mov A,0
 0780 08                push A
 0781 500A              mov A,10
 0783 08                push A
 0784 62D000            mov REG[0xd0],>_MesValue
 0787 510C              mov A,[_MesValue+12]
 0789 08                push A
 078A 510D              mov A,[_MesValue+12+1]
 078C 08                push A
 078D 510E              mov A,[_MesValue+12+2]
 078F 08                push A
 0790 510F              mov A,[_MesValue+12+3]
 0792 08                push A
 0793 5000              mov A,>_str
 0795 08                push A
 0796 5000              mov A,<_str
 0798 08                push A
 0799 7C0000            xcall _ltoa
 079C 38F8              add SP,-8
 079E                   .dbline 176
 079E           ;       TX8_PutString(str);
 079E 10                push X
 079F 5000              mov A,>_str
 07A1 08                push A
 07A2 5000              mov A,<_str
 07A4 5C                mov X,A
 07A5 18                pop A
 07A6 7C0000            xcall _TX8_PutString
 07A9 20                pop X
 07AA                   .dbline 177
 07AA           ;       TX8_CPutString("  -  3 = ");
 07AA 10                push X
 07AB 5016              mov A,>L60
 07AD 08                push A
 07AE 5016              mov A,<L60
 07B0 5C                mov X,A
 07B1 18                pop A
 07B2 7C0000            xcall _TX8_CPutString
 07B5 20                pop X
 07B6                   .dbline 178
 07B6           ;       ltoa(str, MesValue[2][0],10);
 07B6 5000              mov A,0
 07B8 08                push A
 07B9 500A              mov A,10
 07BB 08                push A
 07BC 62D000            mov REG[0xd0],>_MesValue
 07BF 5118              mov A,[_MesValue+24]
 07C1 08                push A
 07C2 5119              mov A,[_MesValue+24+1]
 07C4 08                push A
 07C5 511A              mov A,[_MesValue+24+2]
 07C7 08                push A
 07C8 511B              mov A,[_MesValue+24+3]
 07CA 08                push A
 07CB 5000              mov A,>_str
 07CD 08                push A
 07CE 5000              mov A,<_str
 07D0 08                push A
 07D1 7C0000            xcall _ltoa
 07D4 38F8              add SP,-8
 07D6                   .dbline 179
 07D6           ;       TX8_PutString(str);
 07D6 10                push X
 07D7 5000              mov A,>_str
 07D9 08                push A
 07DA 5000              mov A,<_str
 07DC 5C                mov X,A
 07DD 18                pop A
 07DE 7C0000            xcall _TX8_PutString
 07E1 20                pop X
 07E2                   .dbline 180
 07E2           ;       TX8_CPutString(" Pre: 1 = ");
 07E2 10                push X
 07E3 500B              mov A,>L62
 07E5 08                push A
 07E6 500B              mov A,<L62
 07E8 5C                mov X,A
 07E9 18                pop A
 07EA 7C0000            xcall _TX8_CPutString
 07ED 20                pop X
 07EE                   .dbline 181
 07EE           ;       itoa(str, GF[GainIndx[0][0]][1], 10);
 07EE 5000              mov A,0
 07F0 08                push A
 07F1 500A              mov A,10
 07F3 08                push A
 07F4 62D000            mov REG[0xd0],>_GainIndx
 07F7 5100              mov A,[_GainIndx]
 07F9 62D000            mov REG[0xd0],>__r0
 07FC 5300              mov [__r1],A
 07FE 550000            mov [__r0],0
 0801 6500              asl [__r1]
 0803 6B00              rlc [__r0]
 0805 060001            add [__r1],<_GF+1
 0808 0E0001            adc [__r0],>_GF+1
 080B 5100              mov A,[__r0]
 080D 60D4              mov REG[0xd4],A
 080F 3E00              mvi A,[__r1]
 0811 5300              mov [__r1],A
 0813 5000              mov A,0
 0815 08                push A
 0816 5100              mov A,[__r1]
 0818 08                push A
 0819 5000              mov A,>_str
 081B 08                push A
 081C 5000              mov A,<_str
 081E 08                push A
 081F 7C0000            xcall _itoa
 0822 38FA              add SP,-6
 0824                   .dbline 182
 0824           ;       TX8_PutString(str);
 0824 10                push X
 0825 5000              mov A,>_str
 0827 08                push A
 0828 5000              mov A,<_str
 082A 5C                mov X,A
 082B 18                pop A
 082C 7C0000            xcall _TX8_PutString
 082F 20                pop X
 0830                   .dbline 183
 0830           ;       TX8_CPutString("  -  2 = ");
 0830 10                push X
 0831 5020              mov A,>L58
 0833 08                push A
 0834 5020              mov A,<L58
 0836 5C                mov X,A
 0837 18                pop A
 0838 7C0000            xcall _TX8_CPutString
 083B 20                pop X
 083C                   .dbline 184
 083C           ;       itoa(str, GF[GainIndx[1][0]][1], 10);
 083C 5000              mov A,0
 083E 08                push A
 083F 500A              mov A,10
 0841 08                push A
 0842 62D000            mov REG[0xd0],>_GainIndx
 0845 5102              mov A,[_GainIndx+2]
 0847 62D000            mov REG[0xd0],>__r0
 084A 5300              mov [__r1],A
 084C 550000            mov [__r0],0
 084F 6500              asl [__r1]
 0851 6B00              rlc [__r0]
 0853 060001            add [__r1],<_GF+1
 0856 0E0001            adc [__r0],>_GF+1
 0859 5100              mov A,[__r0]
 085B 60D4              mov REG[0xd4],A
 085D 3E00              mvi A,[__r1]
 085F 5300              mov [__r1],A
 0861 5000              mov A,0
 0863 08                push A
 0864 5100              mov A,[__r1]
 0866 08                push A
 0867 5000              mov A,>_str
 0869 08                push A
 086A 5000              mov A,<_str
 086C 08                push A
 086D 7C0000            xcall _itoa
 0870 38FA              add SP,-6
 0872                   .dbline 185
 0872           ;       TX8_PutString(str);     
 0872 10                push X
 0873 5000              mov A,>_str
 0875 08                push A
 0876 5000              mov A,<_str
 0878 5C                mov X,A
 0879 18                pop A
 087A 7C0000            xcall _TX8_PutString
 087D 20                pop X
 087E                   .dbline 186
 087E           ;       TX8_CPutString("  -  3 = ");
 087E 10                push X
 087F 5016              mov A,>L60
 0881 08                push A
 0882 5016              mov A,<L60
 0884 5C                mov X,A
 0885 18                pop A
 0886 7C0000            xcall _TX8_CPutString
 0889 20                pop X
 088A                   .dbline 187
 088A           ;       itoa(str, GF[GainIndx[2][0]][1], 10);
 088A 5000              mov A,0
 088C 08                push A
 088D 500A              mov A,10
 088F 08                push A
 0890 62D000            mov REG[0xd0],>_GainIndx
 0893 5104              mov A,[_GainIndx+4]
 0895 62D000            mov REG[0xd0],>__r0
 0898 5300              mov [__r1],A
 089A 550000            mov [__r0],0
 089D 6500              asl [__r1]
 089F 6B00              rlc [__r0]
 08A1 060001            add [__r1],<_GF+1
 08A4 0E0001            adc [__r0],>_GF+1
 08A7 5100              mov A,[__r0]
 08A9 60D4              mov REG[0xd4],A
 08AB 3E00              mvi A,[__r1]
 08AD 5300              mov [__r1],A
 08AF 5000              mov A,0
 08B1 08                push A
 08B2 5100              mov A,[__r1]
 08B4 08                push A
 08B5 5000              mov A,>_str
 08B7 08                push A
 08B8 5000              mov A,<_str
 08BA 08                push A
 08BB 7C0000            xcall _itoa
 08BE 38FA              add SP,-6
 08C0                   .dbline 188
 08C0           ;       TX8_PutString(str);     
 08C0 10                push X
 08C1 5000              mov A,>_str
 08C3 08                push A
 08C4 5000              mov A,<_str
 08C6 5C                mov X,A
 08C7 18                pop A
 08C8 7C0000            xcall _TX8_PutString
 08CB 20                pop X
 08CC                   .dbline 189
 08CC           ;       TX8_CPutString(" Out: 1 = ");
 08CC 10                push X
 08CD 5000              mov A,>L68
 08CF 08                push A
 08D0 5000              mov A,<L68
 08D2 5C                mov X,A
 08D3 18                pop A
 08D4 7C0000            xcall _TX8_CPutString
 08D7 20                pop X
 08D8                   .dbline 190
 08D8           ;       itoa(str, GF[GainIndx[0][1]][1], 10);
 08D8 5000              mov A,0
 08DA 08                push A
 08DB 500A              mov A,10
 08DD 08                push A
 08DE 62D000            mov REG[0xd0],>_GainIndx
 08E1 5101              mov A,[_GainIndx+1]
 08E3 62D000            mov REG[0xd0],>__r0
 08E6 5300              mov [__r1],A
 08E8 550000            mov [__r0],0
 08EB 6500              asl [__r1]
 08ED 6B00              rlc [__r0]
 08EF 060001            add [__r1],<_GF+1
 08F2 0E0001            adc [__r0],>_GF+1
 08F5 5100              mov A,[__r0]
 08F7 60D4              mov REG[0xd4],A
 08F9 3E00              mvi A,[__r1]
 08FB 5300              mov [__r1],A
 08FD 5000              mov A,0
 08FF 08                push A
 0900 5100              mov A,[__r1]
 0902 08                push A
 0903 5000              mov A,>_str
 0905 08                push A
 0906 5000              mov A,<_str
 0908 08                push A
 0909 7C0000            xcall _itoa
 090C 38FA              add SP,-6
 090E                   .dbline 191
 090E           ;       TX8_PutString(str);
 090E 10                push X
 090F 5000              mov A,>_str
 0911 08                push A
 0912 5000              mov A,<_str
 0914 5C                mov X,A
 0915 18                pop A
 0916 7C0000            xcall _TX8_PutString
 0919 20                pop X
 091A                   .dbline 192
 091A           ;       TX8_CPutString("  -  2 = ");
 091A 10                push X
 091B 5020              mov A,>L58
 091D 08                push A
 091E 5020              mov A,<L58
 0920 5C                mov X,A
 0921 18                pop A
 0922 7C0000            xcall _TX8_CPutString
 0925 20                pop X
 0926                   .dbline 193
 0926           ;       itoa(str, GF[GainIndx[1][1]][1], 10);
 0926 5000              mov A,0
 0928 08                push A
 0929 500A              mov A,10
 092B 08                push A
 092C 62D000            mov REG[0xd0],>_GainIndx
 092F 5103              mov A,[_GainIndx+2+1]
 0931 62D000            mov REG[0xd0],>__r0
 0934 5300              mov [__r1],A
 0936 550000            mov [__r0],0
 0939 6500              asl [__r1]
 093B 6B00              rlc [__r0]
 093D 060001            add [__r1],<_GF+1
 0940 0E0001            adc [__r0],>_GF+1
 0943 5100              mov A,[__r0]
 0945 60D4              mov REG[0xd4],A
 0947 3E00              mvi A,[__r1]
 0949 5300              mov [__r1],A
 094B 5000              mov A,0
 094D 08                push A
 094E 5100              mov A,[__r1]
 0950 08                push A
 0951 5000              mov A,>_str
 0953 08                push A
 0954 5000              mov A,<_str
 0956 08                push A
 0957 7C0000            xcall _itoa
 095A 38FA              add SP,-6
 095C                   .dbline 194
 095C           ;       TX8_PutString(str);     
 095C 10                push X
 095D 5000              mov A,>_str
 095F 08                push A
 0960 5000              mov A,<_str
 0962 5C                mov X,A
 0963 18                pop A
 0964 7C0000            xcall _TX8_PutString
 0967 20                pop X
 0968                   .dbline 195
 0968           ;       TX8_CPutString("  -  3 = ");
 0968 10                push X
 0969 5016              mov A,>L60
 096B 08                push A
 096C 5016              mov A,<L60
 096E 5C                mov X,A
 096F 18                pop A
 0970 7C0000            xcall _TX8_CPutString
 0973 20                pop X
 0974                   .dbline 196
 0974           ;       itoa(str, GF[GainIndx[2][1]][1], 10);
 0974 5000              mov A,0
 0976 08                push A
 0977 500A              mov A,10
 0979 08                push A
 097A 62D000            mov REG[0xd0],>_GainIndx
 097D 5105              mov A,[_GainIndx+4+1]
 097F 62D000            mov REG[0xd0],>__r0
 0982 5300              mov [__r1],A
 0984 550000            mov [__r0],0
 0987 6500              asl [__r1]
 0989 6B00              rlc [__r0]
 098B 060001            add [__r1],<_GF+1
 098E 0E0001            adc [__r0],>_GF+1
 0991 5100              mov A,[__r0]
 0993 60D4              mov REG[0xd4],A
 0995 3E00              mvi A,[__r1]
 0997 5300              mov [__r1],A
 0999 5000              mov A,0
 099B 08                push A
 099C 5100              mov A,[__r1]
 099E 08                push A
 099F 5000              mov A,>_str
 09A1 08                push A
 09A2 5000              mov A,<_str
 09A4 08                push A
 09A5 7C0000            xcall _itoa
 09A8 38FA              add SP,-6
 09AA                   .dbline 197
 09AA           ;       TX8_PutString(str);     
 09AA 10                push X
 09AB 5000              mov A,>_str
 09AD 08                push A
 09AE 5000              mov A,<_str
 09B0 5C                mov X,A
 09B1 18                pop A
 09B2 7C0000            xcall _TX8_PutString
 09B5 20                pop X
 09B6                   .dbline -2
 09B6           L55:
 09B6                   .dbline 0 ; func end
 09B6 7F                ret
 09B7                   .dbend
 09B7                   .dbfunc e BlocksInit _BlocksInit fV
 09B7           _BlocksInit::
 09B7                   .dbline -1
 09B7                   .dbline 219
 09B7           ;                               
 09B7           ; /*
 09B7           ;       TX8_CPutString("  --Pre = ");
 09B7           ;       itoa(str, MesValue[0][0], 10);
 09B7           ;       TX8_PutString(str);
 09B7           ;       
 09B7           ;       TX8_CPutString("  --Out = ");
 09B7           ;       itoa(str, MesValue[0][1], 10);
 09B7           ;       TX8_PutString(str);
 09B7           ;       
 09B7           ;       TX8_CPutString("  --Sum = ");
 09B7           ;       itoa(str, MesValueSum[0][0], 10);
 09B7           ;       TX8_PutString(str);
 09B7           ;       
 09B7           ;       TX8_CPutString("  --Count = ");
 09B7           ;       itoa(str, MesValueSum[0][1], 10);
 09B7           ;       TX8_PutString(str);
 09B7           ; */
 09B7           ; }
 09B7           ;       
 09B7           ; void BlocksInit(void)
 09B7           ; {// Analog and digital blocks inizialization
 09B7                   .dbline 220
 09B7           ;       ADCINCVR_pot_Start(ADCINCVR_pot_HIGHPOWER);     
 09B7 10                push X
 09B8 5003              mov A,3
 09BA 7C0000            xcall _ADCINCVR_pot_Start
 09BD 20                pop X
 09BE                   .dbline 221
 09BE           ;       ADCINCVR_mes_Start(ADCINCVR_mes_HIGHPOWER);
 09BE 10                push X
 09BF 5003              mov A,3
 09C1 7C0000            xcall _ADCINCVR_mes_Start
 09C4                   .dbline 222
 09C4           ;       AMUX4_mic_Start();
 09C4 7C0000            xcall _AMUX4_mic_Start
 09C7 20                pop X
 09C8                   .dbline 223
 09C8           ;       BPF4_4KHz_Start(BPF4_4KHz_HIGHPOWER);
 09C8 10                push X
 09C9 5003              mov A,3
 09CB 7C0000            xcall _BPF4_4KHz_Start
 09CE                   .dbline 224
 09CE           ;       I2CHW_Start();
 09CE 7C0000            xcall _I2CHW_Start
 09D1 20                pop X
 09D2                   .dbline 225
 09D2           ;       PGA_out_Start(PGA_out_HIGHPOWER);
 09D2 10                push X
 09D3 5003              mov A,3
 09D5 7C0000            xcall _PGA_out_Start
 09D8 20                pop X
 09D9                   .dbline 226
 09D9           ;       PGA_pre_Start(PGA_pre_HIGHPOWER); 
 09D9 10                push X
 09DA 5003              mov A,3
 09DC 7C0000            xcall _PGA_pre_Start
 09DF 20                pop X
 09E0                   .dbline 227
 09E0           ;       RefMux_1_Start(RefMux_1_HIGHPOWER);
 09E0 10                push X
 09E1 5003              mov A,3
 09E3 7C0000            xcall _RefMux_1_Start
 09E6 20                pop X
 09E7                   .dbline 228
 09E7           ;     SCBLOCK_inbuff_Start(SCBLOCK_inbuff_HIGHPOWER);
 09E7 10                push X
 09E8 5003              mov A,3
 09EA 7C0000            xcall _SCBLOCK_inbuff_Start
 09ED                   .dbline 229
 09ED           ;       LED_1_Start();
 09ED 7C0000            xcall _LED_1_Start
 09F0                   .dbline 230
 09F0           ;       LED_2_Start();
 09F0 7C0000            xcall _LED_2_Start
 09F3                   .dbline 231
 09F3           ;       LED_3_Start();
 09F3 7C0000            xcall _LED_3_Start
 09F6                   .dbline 232
 09F6           ;       DIGITAL_OUT_Start();  
 09F6 7C0000            xcall _DIGITAL_OUT_Start
 09F9                   .dbline 234
 09F9           ;       
 09F9           ;       TX8_EnableInt();
 09F9 7C0000            xcall _TX8_EnableInt
 09FC 20                pop X
 09FD                   .dbline 235
 09FD           ;       TX8_Start(TX8_PARITY_NONE);
 09FD 10                push X
 09FE 5000              mov A,0
 0A00 7C0000            xcall _TX8_Start
 0A03 20                pop X
 0A04                   .dbline 237
 0A04           ;       
 0A04           ;       AMUX4_mic_InputSelect(AMUX4_mic_PORT0_1);
 0A04 10                push X
 0A05 5000              mov A,0
 0A07 7C0000            xcall _AMUX4_mic_InputSelect
 0A0A 20                pop X
 0A0B                   .dbline 239
 0A0B           ; 
 0A0B           ;       PGA_pre_SetGain(GF[GainIndx[0][0]][0]);
 0A0B 62D000            mov REG[0xd0],>_GainIndx
 0A0E 5100              mov A,[_GainIndx]
 0A10 62D000            mov REG[0xd0],>__r0
 0A13 5300              mov [__r1],A
 0A15 550000            mov [__r0],0
 0A18 6500              asl [__r1]
 0A1A 6B00              rlc [__r0]
 0A1C 060000            add [__r1],<_GF
 0A1F 0E0000            adc [__r0],>_GF
 0A22 5100              mov A,[__r0]
 0A24 60D4              mov REG[0xd4],A
 0A26 3E00              mvi A,[__r1]
 0A28 10                push X
 0A29 7C0000            xcall _PGA_pre_SetGain
 0A2C 20                pop X
 0A2D                   .dbline 240
 0A2D           ;       PGA_out_SetGain(GF[GainIndx[0][1]][0]);
 0A2D 62D000            mov REG[0xd0],>_GainIndx
 0A30 5101              mov A,[_GainIndx+1]
 0A32 62D000            mov REG[0xd0],>__r0
 0A35 5300              mov [__r1],A
 0A37 550000            mov [__r0],0
 0A3A 6500              asl [__r1]
 0A3C 6B00              rlc [__r0]
 0A3E 060000            add [__r1],<_GF
 0A41 0E0000            adc [__r0],>_GF
 0A44 5100              mov A,[__r0]
 0A46 60D4              mov REG[0xd4],A
 0A48 3E00              mvi A,[__r1]
 0A4A 10                push X
 0A4B 7C0000            xcall _PGA_out_SetGain
 0A4E                   .dbline 242
 0A4E           ;       
 0A4E           ;     HB_Tmr_EnableInt();  
 0A4E 7C0000            xcall _HB_Tmr_EnableInt
 0A51                   .dbline 243
 0A51           ;       HB_Tmr_Start();         
 0A51 7C0000            xcall _HB_Tmr_Start
 0A54 20                pop X
 0A55                   .dbline -2
 0A55           L77:
 0A55                   .dbline 0 ; func end
 0A55 7F                ret
 0A56                   .dbend
 0A56                   .dbfunc e HB_Tmr_ISR_C _HB_Tmr_ISR_C fV
 0A56           _HB_Tmr_ISR_C::
 0A56                   .dbline -1
 0A56 71C0              or F,-64
 0A58 08                push A
 0A59 5DD0              mov A,REG[0xd0]
 0A5B 08                push A
 0A5C                   .dbline 247
 0A5C           ; }
 0A5C           ;       
 0A5C           ; void HB_Tmr_ISR_C(void)
 0A5C           ; {// Base clock for all of the timings in the program
 0A5C                   .dbline 248
 0A5C           ;       TmrFlag = 1;
 0A5C 62D000            mov REG[0xd0],>_TmrFlag
 0A5F 550001            mov [_TmrFlag],1
 0A62                   .dbline 249
 0A62           ;       Tmr1++;
 0A62 62D000            mov REG[0xd0],>_Tmr1
 0A65 7601              inc [_Tmr1+1]
 0A67 0E0000            adc [_Tmr1],0
 0A6A                   .dbline 250
 0A6A           ;       Tmr2++;
 0A6A 62D000            mov REG[0xd0],>_Tmr2
 0A6D 7601              inc [_Tmr2+1]
 0A6F 0E0000            adc [_Tmr2],0
 0A72                   .dbline 251
 0A72           ;       Time10ms++;     
 0A72 62D000            mov REG[0xd0],>_Time10ms
 0A75 060301            add [_Time10ms+3],1
 0A78 0E0200            adc [_Time10ms+2],0
 0A7B 0E0100            adc [_Time10ms+1],0
 0A7E 0E0000            adc [_Time10ms],0
 0A81                   .dbline -2
 0A81           L79:
 0A81 18                pop A
 0A82 60D0              mov REG[208],A
 0A84 18                pop A
 0A85                   .dbline 0 ; func end
 0A85 7E                reti
 0A86                   .dbend
 0A86                   .dbfunc e DelayMs _DelayMs fV
 0A86           ;              i -> X+0
 0A86           ;             Ms -> X-5
 0A86           _DelayMs::
 0A86                   .dbline -1
 0A86 10                push X
 0A87 4F                mov X,SP
 0A88 3802              add SP,2
 0A8A                   .dbline 255
 0A8A           ; }
 0A8A           ; 
 0A8A           ; void DelayMs(int Ms)
 0A8A           ; {
 0A8A                   .dbline 257
 0A8A           ;       int i;
 0A8A           ;       for (i=0; i<Ms; i++)
 0A8A 560100            mov [X+1],0
 0A8D 560000            mov [X+0],0
 0A90 800D              xjmp L84
 0A92           L81:
 0A92                   .dbline 258
 0A92           ;       {
 0A92                   .dbline 259
 0A92           ;               Delay50uTimes(20);
 0A92 10                push X
 0A93 5014              mov A,20
 0A95 7C0000            xcall _Delay50uTimes
 0A98 20                pop X
 0A99                   .dbline 260
 0A99           ;       }
 0A99           L82:
 0A99                   .dbline 257
 0A99 7701              inc [X+1]
 0A9B 0F0000            adc [X+0],0
 0A9E           L84:
 0A9E                   .dbline 257
 0A9E 5201              mov A,[X+1]
 0AA0 13FC              sub A,[X-4]
 0AA2 52FB              mov A,[X-5]
 0AA4 3180              xor A,-128
 0AA6 62D000            mov REG[0xd0],>__r0
 0AA9 5300              mov [__rX],A
 0AAB 5200              mov A,[X+0]
 0AAD 3180              xor A,-128
 0AAF 1A00              sbb A,[__rX]
 0AB1 CFE0              jc L81
 0AB3           X21:
 0AB3                   .dbline -2
 0AB3           L80:
 0AB3 38FE              add SP,-2
 0AB5 20                pop X
 0AB6                   .dbline 0 ; func end
 0AB6 7F                ret
 0AB7                   .dbsym l i 0 I
 0AB7                   .dbsym l Ms -5 I
 0AB7                   .dbend
 0AB7                   .dbfunc e LedTest _LedTest fV
 0AB7           ;              i -> X+0
 0AB7           _LedTest::
 0AB7                   .dbline -1
 0AB7 10                push X
 0AB8 4F                mov X,SP
 0AB9 3802              add SP,2
 0ABB                   .dbline 264
 0ABB           ; }
 0ABB           ; 
 0ABB           ; void LedTest(void)
 0ABB           ; {
 0ABB                   .dbline 266
 0ABB           ;       int i;
 0ABB           ;       LED_1_Off();
 0ABB 10                push X
 0ABC 7C0000            xcall _LED_1_Off
 0ABF                   .dbline 267
 0ABF           ;       LED_2_Off();
 0ABF 7C0000            xcall _LED_2_Off
 0AC2                   .dbline 268
 0AC2           ;       LED_3_Off();
 0AC2 7C0000            xcall _LED_3_Off
 0AC5 20                pop X
 0AC6                   .dbline 270
 0AC6           ;       
 0AC6           ;       for (i=0; i<3; i++)
 0AC6 560100            mov [X+1],0
 0AC9 560000            mov [X+0],0
 0ACC           L86:
 0ACC                   .dbline 271
 0ACC           ;       {
 0ACC                   .dbline 272
 0ACC           ;               LED_1_On();
 0ACC 10                push X
 0ACD 7C0000            xcall _LED_1_On
 0AD0 20                pop X
 0AD1                   .dbline 273
 0AD1           ;               DelayMs(500);
 0AD1 5001              mov A,1
 0AD3 08                push A
 0AD4 50F4              mov A,-12
 0AD6 08                push A
 0AD7 9FAD              xcall _DelayMs
 0AD9 38FE              add SP,-2
 0ADB                   .dbline 274
 0ADB           ;               LED_1_Off();
 0ADB 10                push X
 0ADC 7C0000            xcall _LED_1_Off
 0ADF                   .dbline 275
 0ADF           ;               LED_2_On();
 0ADF 7C0000            xcall _LED_2_On
 0AE2 20                pop X
 0AE3                   .dbline 276
 0AE3           ;               DelayMs(500);
 0AE3 5001              mov A,1
 0AE5 08                push A
 0AE6 50F4              mov A,-12
 0AE8 08                push A
 0AE9 9F9B              xcall _DelayMs
 0AEB 38FE              add SP,-2
 0AED                   .dbline 277
 0AED           ;               LED_2_Off();
 0AED 10                push X
 0AEE 7C0000            xcall _LED_2_Off
 0AF1                   .dbline 278
 0AF1           ;               LED_3_On();
 0AF1 7C0000            xcall _LED_3_On
 0AF4 20                pop X
 0AF5                   .dbline 279
 0AF5           ;               DelayMs(500);
 0AF5 5001              mov A,1
 0AF7 08                push A
 0AF8 50F4              mov A,-12
 0AFA 08                push A
 0AFB 9F89              xcall _DelayMs
 0AFD 38FE              add SP,-2
 0AFF                   .dbline 280
 0AFF           ;               LED_3_Off();
 0AFF 10                push X
 0B00 7C0000            xcall _LED_3_Off
 0B03 20                pop X
 0B04                   .dbline 281
 0B04           ;       }
 0B04           L87:
 0B04                   .dbline 270
 0B04 7701              inc [X+1]
 0B06 0F0000            adc [X+0],0
 0B09                   .dbline 270
 0B09 5201              mov A,[X+1]
 0B0B 1103              sub A,3
 0B0D 5200              mov A,[X+0]
 0B0F 3180              xor A,-128
 0B11 1980              sbb A,(0 ^ 0x80)
 0B13 CFB8              jc L86
 0B15           X22:
 0B15                   .dbline -2
 0B15           L85:
 0B15 38FE              add SP,-2
 0B17 20                pop X
 0B18                   .dbline 0 ; func end
 0B18 7F                ret
 0B19                   .dbsym l i 0 I
 0B19                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\main.c
 0000           _str::
 0000 00000000000000    .byte 0,0,0,0,0,0,0
 0007                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0007                   .dbsym e str _str A[7:7]c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _i::
 0000 0000              .byte 0,0
 0002                   .dbsym e i _i i
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _MesValue::
 0000 00000000000000000000      .word 0,0,0,0,0
 000A 00000000000000000000      .word 0,0,0,0,0
 0014 00000000000000000000      .word 0,0,0,0,0
 001E 000000000000      .byte 0,0,0,0,0,0
 0024                   .dbsym e MesValue _MesValue A[36:3:3]L
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _PotValue::
 0000 00000000          .byte 0,0,0,0
 0004                   .dbsym e PotValue _PotValue L
                        .area lit(rom, con, rel)
 0000           L68:
 0000 204F75743A2031203D2000    .byte 32,'O,'u,'t,58,32,49,32,61,32,0
 000B           L62:
 000B 205072653A2031203D2000    .byte 32,'P,'r,'e,58,32,49,32,61,32,0
 0016           L60:
 0016 20202D202033203D2000      .byte 32,32,45,32,32,51,32,61,32,0
 0020           L58:
 0020 20202D202032203D2000      .byte 32,32,45,32,32,50,32,61,32,0
 002A           L57:
 002A 4D65733A2031203D2000      .byte 'M,'e,'s,58,32,49,32,61,32,0
 0034           L56:
 0034 0A0D00            .byte 10,13,0
