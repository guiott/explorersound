 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _MesValueSum::
 0000 00000000          .word 0,0
 0004 00000000          .word 0,0
 0008 00000000          .word 0,0
 000C 00000000          .word 0,0
 0010 00000000          .word 0,0
 0014 00000000          .word 0,0
 0018                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0018                   .dbsym e MesValueSum _MesValueSum A[24:3:2]L
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _TmrFlag::
 0000 00                .byte 0
 0001                   .dbsym e TmrFlag _TmrFlag c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _GF::
 0000 F801              .byte 248,1
 0002 7802              .byte 'x,2
 0004 3804              .byte 56,4
 0006 1808              .byte 24,8
 0008 0810              .byte 8,16
 000A                   .dbsym e GF _GF A[10:5:2]c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _GainIndx::
 0000 0202              .byte 2,2
 0002 0202              .byte 2,2
 0004 0202              .byte 2,2
 0006                   .dbsym e GainIndx _GainIndx A[6:3:2]c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
                        .area text(rom, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;        PortNum -> X+1
 0000           ;       PortIndx -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3804              add SP,4
 0004                   .dbline 38
 0004           ; /* ////////////////////////////////////////////////////////////////////////////
 0004           ; ** Project:      ExplorerSound
 0004           ; ** Author:    Guido Ottaviani-->guido@guiott.com<--
 0004           ; ** Description: 
 0004           ; ** version 0.3   15-10-2010
 0004           ; **
 0004           ; ** Detailed descriptions are on file "Notes.txt" 
 0004           ; **
 0004           ; -------------------------------------------------------------------------------
 0004           ; Copyright 2010 Guido Ottaviani
 0004           ; guido@guiott.com
 0004           ; 
 0004           ;       ExplorerSound is free software: you can redistribute it and/or modify
 0004           ;     it under the terms of the GNU General Public License as published by
 0004           ;     the Free Software Foundation, either version 3 of the License, or
 0004           ;     (at your option) any later version.
 0004           ; 
 0004           ;     ExplorerSound is distributed in the hope that it will be useful,
 0004           ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
 0004           ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 0004           ;     GNU General Public License for more details.
 0004           ; 
 0004           ;     You should have received a copy of the GNU General Public License
 0004           ;     along with ExplorerSound.  If not, see <http://www.gnu.org/licenses/>.
 0004           ; -------------------------------------------------------------------------------      
 0004           ; /////////////////////////////////////////////////////////////////////////////*/
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include <stdlib.h>
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include "prototypes.h"
 0004           ; #include "definitions.h"
 0004           ; #include "delay.h"
 0004           ; 
 0004           ; #pragma interrupt_handler HB_Tmr_ISR_C // int handler for program clock
 0004           ; 
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 40
 0004           ;       BYTE PortNum[3];
 0004           ;       BYTE PortIndx = 0;
 0004 560000            mov [X+0],0
 0007                   .dbline 42
 0007           ;       
 0007           ;       BlocksInit();
 0007 7C09DD            xcall _BlocksInit
 000A                   .dbline 44
 000A           ;       
 000A           ;       M8C_EnableGInt ;               // Turn on interrupts 
 000A 7101                      or  F, 01h
 000C           
 000C                   .dbline 46
 000C           ;       
 000C           ;       LED_2_On();
 000C 10                push X
 000D 7C0000            xcall _LED_2_On
 0010 20                pop X
 0011                   .dbline 47
 0011           ;       PortNum[0] = AMUX4_mic_PORT0_1;
 0011 560100            mov [X+1],0
 0014                   .dbline 48
 0014           ;       PortNum[1] = AMUX4_mic_PORT0_3;
 0014 560201            mov [X+2],1
 0017                   .dbline 49
 0017           ;       PortNum[2] = AMUX4_mic_PORT0_7;
 0017 560303            mov [X+3],3
 001A                   .dbline 51
 001A           ;       
 001A           ;       LedTest();
 001A 7C0AC6            xcall _LedTest
 001D 83A1              xjmp L5
 001F           L4:
 001F                   .dbline 55
 001F           ;       
 001F           ;       // Main loop=============================================================
 001F           ;       while (1)
 001F           ;       {
 001F                   .dbline 56
 001F           ;               if(ADCINCVR_pot_fIsDataAvailable() != 0)// Wait for data to be ready
 001F 10                push X
 0020 7C0000            xcall _ADCINCVR_pot_fIsDataAvailable
 0023 62D000            mov REG[0xd0],>__r0
 0026 20                pop X
 0027 3900              cmp A,0
 0029 A01E              jz L7
 002B                   .dbline 57
 002B           ;         {   
 002B                   .dbline 59
 002B           ;                       // Get Data, Clear data ready flag, in the range 0-1800
 002B           ;                       PotValue = ADCINCVR_pot_iGetDataClearFlag()+900;
 002B 10                push X
 002C 7C0000            xcall _ADCINCVR_pot_iGetDataClearFlag
 002F 62D000            mov REG[0xd0],>__r0
 0032 5A00              mov [__r0],X
 0034 20                pop X
 0035 0184              add A,-124
 0037 62D000            mov REG[0xd0],>_PotValue
 003A 5301              mov [_PotValue+1],A
 003C 62D000            mov REG[0xd0],>__r0
 003F 5100              mov A,[__r0]
 0041 0903              adc A,3
 0043 62D000            mov REG[0xd0],>_PotValue
 0046 5300              mov [_PotValue],A
 0048                   .dbline 60
 0048           ;               }
 0048           L7:
 0048                   .dbline 62
 0048           ;         
 0048           ;               if(ADCINCVR_mes_fIsDataAvailable() != 0)// Wait for data to be ready
 0048 10                push X
 0049 7C0000            xcall _ADCINCVR_mes_fIsDataAvailable
 004C 62D000            mov REG[0xd0],>__r0
 004F 20                pop X
 0050 3900              cmp A,0
 0052 A1F3              jz L9
 0054                   .dbline 63
 0054           ;         {   
 0054                   .dbline 66
 0054           ;                       // Get Data, Clear data ready flag
 0054           ;                       
 0054           ;                       MesValueOut = ADCINCVR_mes_iGetDataClearFlag(); // [1]
 0054 10                push X
 0055 7C0000            xcall _ADCINCVR_mes_iGetDataClearFlag
 0058 62D000            mov REG[0xd0],>__r0
 005B 5A00              mov [__r0],X
 005D 20                pop X
 005E 08                push A
 005F 5100              mov A,[__r0]
 0061 62D000            mov REG[0xd0],>_MesValueOut
 0064 5300              mov [_MesValueOut],A
 0066 18                pop A
 0067 5301              mov [_MesValueOut+1],A
 0069                   .dbline 67
 0069           ;                       MesValue[PortIndx][1] = MesValueOut >> GainIndx[PortIndx][1];                   // [2][4]
 0069 62D000            mov REG[0xd0],>__r0
 006C 5200              mov A,[X+0]
 006E 5300              mov [__r1],A
 0070 550000            mov [__r0],0
 0073 6500              asl [__r1]
 0075 6B00              rlc [__r0]
 0077 060001            add [__r1],<_GainIndx+1
 007A 0E0001            adc [__r0],>_GainIndx+1
 007D 5100              mov A,[__r0]
 007F 60D4              mov REG[0xd4],A
 0081 3E00              mvi A,[__r1]
 0083 5300              mov [__r1],A
 0085 62D000            mov REG[0xd0],>_MesValueOut
 0088 5101              mov A,[_MesValueOut+1]
 008A 08                push A
 008B 5100              mov A,[_MesValueOut]
 008D 62D000            mov REG[0xd0],>__r0
 0090 5300              mov [__r2],A
 0092 18                pop A
 0093 5300              mov [__r3],A
 0095 5100              mov A,[__r1]
 0097 210F              and A,15
 0099 A00B              jz X1
 009B           X2:
 009B 62D000            mov REG[0xd0],>__r0
 009E 6800              asr [__r2]
 00A0 6E00              rrc [__r3]
 00A2 78                dec A
 00A3 BFF7              jnz X2
 00A5           X1:
 00A5 62D000            mov REG[0xd0],>__r0
 00A8 5200              mov A,[X+0]
 00AA 5300              mov [__r1],A
 00AC 550000            mov [__r0],0
 00AF 6500              asl [__r1]
 00B1 6B00              rlc [__r0]
 00B3 6500              asl [__r1]
 00B5 6B00              rlc [__r0]
 00B7 060002            add [__r1],<_MesValue+2
 00BA 0E0002            adc [__r0],>_MesValue+2
 00BD 5100              mov A,[__r0]
 00BF 60D5              mov REG[0xd5],A
 00C1 5100              mov A,[__r2]
 00C3 3F00              mvi [__r1],A
 00C5 5100              mov A,[__r3]
 00C7 3F00              mvi [__r1],A
 00C9                   .dbline 68
 00C9           ;                       MesValue[PortIndx][0] = MesValue[PortIndx][1] >> GainIndx[PortIndx][0]; // [3][4]                       
 00C9 5200              mov A,[X+0]
 00CB 5300              mov [__r1],A
 00CD 550000            mov [__r0],0
 00D0 6500              asl [__r1]
 00D2 6B00              rlc [__r0]
 00D4 6500              asl [__r1]
 00D6 6B00              rlc [__r0]
 00D8 5200              mov A,[X+0]
 00DA 5300              mov [__r3],A
 00DC 550000            mov [__r2],0
 00DF 6500              asl [__r3]
 00E1 6B00              rlc [__r2]
 00E3 060000            add [__r3],<_GainIndx
 00E6 0E0000            adc [__r2],>_GainIndx
 00E9 5100              mov A,[__r2]
 00EB 60D4              mov REG[0xd4],A
 00ED 3E00              mvi A,[__r3]
 00EF 5300              mov [__r3],A
 00F1 5100              mov A,[__r1]
 00F3 0102              add A,<_MesValue+2
 00F5 5300              mov [__r5],A
 00F7 5100              mov A,[__r0]
 00F9 0902              adc A,>_MesValue+2
 00FB 60D4              mov REG[0xd4],A
 00FD 3E00              mvi A,[__r5]
 00FF 5300              mov [__r4],A
 0101 3E00              mvi A,[__r5]
 0103 5300              mov [__r5],A
 0105 5100              mov A,[__r3]
 0107 210F              and A,15
 0109 A00B              jz X3
 010B           X4:
 010B 62D000            mov REG[0xd0],>__r0
 010E 6800              asr [__r4]
 0110 6E00              rrc [__r5]
 0112 78                dec A
 0113 BFF7              jnz X4
 0115           X3:
 0115 62D000            mov REG[0xd0],>__r0
 0118 060000            add [__r1],<_MesValue
 011B 0E0000            adc [__r0],>_MesValue
 011E 5100              mov A,[__r0]
 0120 60D5              mov REG[0xd5],A
 0122 5100              mov A,[__r4]
 0124 3F00              mvi [__r1],A
 0126 5100              mov A,[__r5]
 0128 3F00              mvi [__r1],A
 012A                   .dbline 70
 012A           ;                       
 012A           ;                       AGC(PortIndx);
 012A 5200              mov A,[X+0]
 012C 08                push A
 012D 9297              xcall _AGC
 012F 38FF              add SP,-1
 0131                   .dbline 72
 0131           ;                                               
 0131           ;                       MesValueSum[PortIndx][0]+= MesValue[PortIndx][0]; // Cumulate readings
 0131 62D000            mov REG[0xd0],>__r0
 0134 5200              mov A,[X+0]
 0136 5300              mov [__r1],A
 0138 550000            mov [__r0],0
 013B 6500              asl [__r1]
 013D 6B00              rlc [__r0]
 013F 6500              asl [__r1]
 0141 6B00              rlc [__r0]
 0143 6500              asl [__r1]
 0145 6B00              rlc [__r0]
 0147 060000            add [__r1],<_MesValueSum
 014A 0E0000            adc [__r0],>_MesValueSum
 014D 5200              mov A,[X+0]
 014F 5300              mov [__r3],A
 0151 550000            mov [__r2],0
 0154 6500              asl [__r3]
 0156 6B00              rlc [__r2]
 0158 6500              asl [__r3]
 015A 6B00              rlc [__r2]
 015C 060000            add [__r3],<_MesValue
 015F 0E0000            adc [__r2],>_MesValue
 0162 5100              mov A,[__r2]
 0164 60D4              mov REG[0xd4],A
 0166 3E00              mvi A,[__r3]
 0168 5300              mov [__r2],A
 016A 3E00              mvi A,[__r3]
 016C 5300              mov [__r7],A
 016E 5100              mov A,[__r2]
 0170 5300              mov [__r6],A
 0172 470080            tst [__r6],-128
 0175 A009              jz X5
 0177 5500FF            mov [__r5],-1
 017A 5500FF            mov [__r4],-1
 017D 800A              jmp X6
 017F           X5:
 017F 62D000            mov REG[0xd0],>__r0
 0182 550000            mov [__r5],0
 0185 550000            mov [__r4],0
 0188           X6:
 0188 62D000            mov REG[0xd0],>__r0
 018B 5100              mov A,[__r0]
 018D 60D4              mov REG[0xd4],A
 018F 3E00              mvi A,[__r1]
 0191 5300              mov [__r8],A
 0193 3E00              mvi A,[__r1]
 0195 5300              mov [__r9],A
 0197 3E00              mvi A,[__r1]
 0199 5300              mov [__r10],A
 019B 3E00              mvi A,[__r1]
 019D 160004            sub [__r1],4
 01A0 0200              add A,[__r7]
 01A2 5300              mov [__r7],A
 01A4 5100              mov A,[__r10]
 01A6 0A00              adc A,[__r6]
 01A8 5300              mov [__r6],A
 01AA 5100              mov A,[__r9]
 01AC 0A00              adc A,[__r5]
 01AE 5300              mov [__r5],A
 01B0 5100              mov A,[__r8]
 01B2 0A00              adc A,[__r4]
 01B4 5300              mov [__r4],A
 01B6 5100              mov A,[__r0]
 01B8 60D5              mov REG[0xd5],A
 01BA 5100              mov A,[__r4]
 01BC 3F00              mvi [__r1],A
 01BE 5100              mov A,[__r5]
 01C0 3F00              mvi [__r1],A
 01C2 5100              mov A,[__r6]
 01C4 3F00              mvi [__r1],A
 01C6 5100              mov A,[__r7]
 01C8 3F00              mvi [__r1],A
 01CA                   .dbline 73
 01CA           ;                       MesValueSum[PortIndx][1]++; // count how many readings occurred
 01CA 5200              mov A,[X+0]
 01CC 5300              mov [__r1],A
 01CE 550000            mov [__r0],0
 01D1 6500              asl [__r1]
 01D3 6B00              rlc [__r0]
 01D5 6500              asl [__r1]
 01D7 6B00              rlc [__r0]
 01D9 6500              asl [__r1]
 01DB 6B00              rlc [__r0]
 01DD 060004            add [__r1],<_MesValueSum+4
 01E0 0E0004            adc [__r0],>_MesValueSum+4
 01E3 5100              mov A,[__r0]
 01E5 60D4              mov REG[0xd4],A
 01E7 3E00              mvi A,[__r1]
 01E9 5300              mov [__r4],A
 01EB 3E00              mvi A,[__r1]
 01ED 5300              mov [__r5],A
 01EF 3E00              mvi A,[__r1]
 01F1 5300              mov [__r6],A
 01F3 3E00              mvi A,[__r1]
 01F5 160004            sub [__r1],4
 01F8 5300              mov [__r7],A
 01FA 060001            add [__r7],1
 01FD 0E0000            adc [__r6],0
 0200 0E0000            adc [__r5],0
 0203 0E0000            adc [__r4],0
 0206 5100              mov A,[__r0]
 0208 60D5              mov REG[0xd5],A
 020A 5100              mov A,[__r4]
 020C 3F00              mvi [__r1],A
 020E 5100              mov A,[__r5]
 0210 3F00              mvi [__r1],A
 0212 5100              mov A,[__r6]
 0214 3F00              mvi [__r1],A
 0216 5100              mov A,[__r7]
 0218 3F00              mvi [__r1],A
 021A                   .dbline 75
 021A           ;                                                                                                                 
 021A           ;                       PortIndx++; // next mux port
 021A 7700              inc [X+0]
 021C                   .dbline 76
 021C           ;                       if (PortIndx <3)
 021C 3D0003            cmp [X+0],3
 021F D026              jnc L15
 0221           X7:
 0221                   .dbline 77
 0221           ;                       {
 0221                   .dbline 78
 0221           ;                               AMUX4_mic_InputSelect(PortNum[PortIndx]);
 0221 62D000            mov REG[0xd0],>__r0
 0224 550007            mov [__r0],7
 0227 5A00              mov [__r1],X
 0229 060001            add [__r1],1
 022C 5200              mov A,[X+0]
 022E 0200              add A,[__r1]
 0230 5300              mov [__r1],A
 0232 5000              mov A,0
 0234 0A00              adc A,[__r0]
 0236 60D4              mov REG[0xd4],A
 0238 3E00              mvi A,[__r1]
 023A 10                push X
 023B 7C0000            xcall _AMUX4_mic_InputSelect
 023E 20                pop X
 023F                   .dbline 79
 023F           ;                               ADCINCVR_mes_GetSamples(1); // Start ADC to read once more
 023F 10                push X
 0240 5001              mov A,1
 0242 7C0000            xcall _ADCINCVR_mes_GetSamples
 0245 20                pop X
 0246                   .dbline 80
 0246           ;                       }
 0246           L15:
 0246                   .dbline 81
 0246           ;               }
 0246           L9:
 0246                   .dbline 83
 0246           ;               
 0246           ;               if (TmrFlag) // every 10ms
 0246 62D000            mov REG[0xd0],>_TmrFlag
 0249 3C0000            cmp [_TmrFlag],0
 024C A033              jz L17
 024E                   .dbline 84
 024E           ;               {
 024E                   .dbline 85
 024E           ;                       TmrFlag = 0;
 024E 550000            mov [_TmrFlag],0
 0251                   .dbline 86
 0251           ;                       PortIndx= 0;
 0251 560000            mov [X+0],0
 0254                   .dbline 88
 0254           ;                               
 0254           ;                       AMUX4_mic_InputSelect(PortNum[PortIndx]);
 0254 62D000            mov REG[0xd0],>__r0
 0257 550007            mov [__r0],7
 025A 5A00              mov [__r1],X
 025C 060001            add [__r1],1
 025F 5200              mov A,[X+0]
 0261 0200              add A,[__r1]
 0263 5300              mov [__r1],A
 0265 5000              mov A,0
 0267 0A00              adc A,[__r0]
 0269 60D4              mov REG[0xd4],A
 026B 3E00              mvi A,[__r1]
 026D 10                push X
 026E 7C0000            xcall _AMUX4_mic_InputSelect
 0271 20                pop X
 0272                   .dbline 89
 0272           ;                       ADCINCVR_mes_GetSamples(1);    // Start ADC to read 1 sample
 0272 10                push X
 0273 5001              mov A,1
 0275 7C0000            xcall _ADCINCVR_mes_GetSamples
 0278 20                pop X
 0279                   .dbline 90
 0279           ;                       ADCINCVR_pot_GetSamples(1);    // Start ADC to read 1 sample 
 0279 10                push X
 027A 5001              mov A,1
 027C 7C0000            xcall _ADCINCVR_pot_GetSamples
 027F 20                pop X
 0280                   .dbline 91
 0280           ;               }
 0280           L17:
 0280                   .dbline 93
 0280           ;               
 0280           ;               if (Tmr1 >= 10) // every 100ms
 0280 62D000            mov REG[0xd0],>_Tmr1
 0283 5101              mov A,[_Tmr1+1]
 0285 110A              sub A,10
 0287 5100              mov A,[_Tmr1]
 0289 1900              sbb A,0
 028B C133              jc L19
 028D           X8:
 028D                   .dbline 94
 028D           ;               {
 028D                   .dbline 95
 028D           ;                       Tmr1 = 0;
 028D 62D000            mov REG[0xd0],>_Tmr1
 0290 550100            mov [_Tmr1+1],0
 0293 550000            mov [_Tmr1],0
 0296                   .dbline 97
 0296           ;                       // compute average value
 0296           ;                       for (i=0; i<3; i++)
 0296 62D000            mov REG[0xd0],>_i
 0299 550100            mov [_i+1],0
 029C 550000            mov [_i],0
 029F 810E              xjmp L24
 02A1           L21:
 02A1                   .dbline 98
 02A1           ;                       {
 02A1                   .dbline 99
 02A1           ;                               MesValueM[i]=MesValueSum[i][0]/MesValueSum[i][1];
 02A1 62D000            mov REG[0xd0],>_i
 02A4 5101              mov A,[_i+1]
 02A6 08                push A
 02A7 5100              mov A,[_i]
 02A9 62D000            mov REG[0xd0],>__r0
 02AC 5300              mov [__r0],A
 02AE 18                pop A
 02AF 5300              mov [__r1],A
 02B1 6500              asl [__r1]
 02B3 6B00              rlc [__r0]
 02B5 6500              asl [__r1]
 02B7 6B00              rlc [__r0]
 02B9 6500              asl [__r1]
 02BB 6B00              rlc [__r0]
 02BD 5100              mov A,[__r1]
 02BF 0104              add A,<_MesValueSum+4
 02C1 5300              mov [__r3],A
 02C3 5100              mov A,[__r0]
 02C5 0904              adc A,>_MesValueSum+4
 02C7 60D4              mov REG[0xd4],A
 02C9 3E00              mvi A,[__r3]
 02CB 5300              mov [__r4],A
 02CD 3E00              mvi A,[__r3]
 02CF 5300              mov [__r5],A
 02D1 3E00              mvi A,[__r3]
 02D3 5300              mov [__r6],A
 02D5 3E00              mvi A,[__r3]
 02D7 5300              mov [__r7],A
 02D9 060000            add [__r1],<_MesValueSum
 02DC 0E0000            adc [__r0],>_MesValueSum
 02DF 5100              mov A,[__r0]
 02E1 60D4              mov REG[0xd4],A
 02E3 3E00              mvi A,[__r1]
 02E5 5300              mov [__r8],A
 02E7 3E00              mvi A,[__r1]
 02E9 5300              mov [__r9],A
 02EB 3E00              mvi A,[__r1]
 02ED 5300              mov [__r10],A
 02EF 3E00              mvi A,[__r1]
 02F1 5300              mov [__r11],A
 02F3 5100              mov A,[__r4]
 02F5 08                push A
 02F6 5100              mov A,[__r5]
 02F8 08                push A
 02F9 5100              mov A,[__r6]
 02FB 08                push A
 02FC 5100              mov A,[__r7]
 02FE 08                push A
 02FF 5100              mov A,[__r8]
 0301 08                push A
 0302 5100              mov A,[__r9]
 0304 08                push A
 0305 5100              mov A,[__r10]
 0307 08                push A
 0308 5100              mov A,[__r11]
 030A 08                push A
 030B 7C0000            xcall __divmod_32X32_32
 030E 18                pop A
 030F 5300              mov [__r3],A
 0311 18                pop A
 0312 5300              mov [__r2],A
 0314 18                pop A
 0315 18                pop A
 0316 38FC              add SP,-4
 0318 5100              mov A,[__r3]
 031A 5300              mov [__r1],A
 031C 5100              mov A,[__r2]
 031E 5300              mov [__r0],A
 0320 62D000            mov REG[0xd0],>_i
 0323 5101              mov A,[_i+1]
 0325 08                push A
 0326 5100              mov A,[_i]
 0328 62D000            mov REG[0xd0],>__r0
 032B 5300              mov [__r2],A
 032D 18                pop A
 032E 5300              mov [__r3],A
 0330 6500              asl [__r3]
 0332 6B00              rlc [__r2]
 0334 060000            add [__r3],<_MesValueM
 0337 0E0000            adc [__r2],>_MesValueM
 033A 5100              mov A,[__r2]
 033C 60D5              mov REG[0xd5],A
 033E 5100              mov A,[__r0]
 0340 3F00              mvi [__r3],A
 0342 5100              mov A,[__r1]
 0344 3F00              mvi [__r3],A
 0346                   .dbline 100
 0346           ;                               MesValueSum[i][0]=0;
 0346 62D000            mov REG[0xd0],>_i
 0349 5101              mov A,[_i+1]
 034B 08                push A
 034C 5100              mov A,[_i]
 034E 62D000            mov REG[0xd0],>__r0
 0351 5300              mov [__r0],A
 0353 18                pop A
 0354 5300              mov [__r1],A
 0356 6500              asl [__r1]
 0358 6B00              rlc [__r0]
 035A 6500              asl [__r1]
 035C 6B00              rlc [__r0]
 035E 6500              asl [__r1]
 0360 6B00              rlc [__r0]
 0362 060000            add [__r1],<_MesValueSum
 0365 0E0000            adc [__r0],>_MesValueSum
 0368 5100              mov A,[__r0]
 036A 60D5              mov REG[0xd5],A
 036C 5000              mov A,0
 036E 3F00              mvi [__r1],A
 0370 3F00              mvi [__r1],A
 0372 3F00              mvi [__r1],A
 0374 3F00              mvi [__r1],A
 0376                   .dbline 101
 0376           ;                               MesValueSum[i][1]=0;
 0376 62D000            mov REG[0xd0],>_i
 0379 5101              mov A,[_i+1]
 037B 08                push A
 037C 5100              mov A,[_i]
 037E 62D000            mov REG[0xd0],>__r0
 0381 5300              mov [__r0],A
 0383 18                pop A
 0384 5300              mov [__r1],A
 0386 6500              asl [__r1]
 0388 6B00              rlc [__r0]
 038A 6500              asl [__r1]
 038C 6B00              rlc [__r0]
 038E 6500              asl [__r1]
 0390 6B00              rlc [__r0]
 0392 060004            add [__r1],<_MesValueSum+4
 0395 0E0004            adc [__r0],>_MesValueSum+4
 0398 5100              mov A,[__r0]
 039A 60D5              mov REG[0xd5],A
 039C 5000              mov A,0
 039E 3F00              mvi [__r1],A
 03A0 3F00              mvi [__r1],A
 03A2 3F00              mvi [__r1],A
 03A4 3F00              mvi [__r1],A
 03A6                   .dbline 102
 03A6           ;                       }
 03A6           L22:
 03A6                   .dbline 97
 03A6 62D000            mov REG[0xd0],>_i
 03A9 7601              inc [_i+1]
 03AB 0E0000            adc [_i],0
 03AE           L24:
 03AE                   .dbline 97
 03AE 62D000            mov REG[0xd0],>_i
 03B1 5101              mov A,[_i+1]
 03B3 1103              sub A,3
 03B5 5100              mov A,[_i]
 03B7 1900              sbb A,0
 03B9 CEE7              jc L21
 03BB           X9:
 03BB                   .dbline 103
 03BB           ;                       DigitalOut();
 03BB 92BB              xcall _DigitalOut
 03BD                   .dbline 104
 03BD           ;                       UartTxValues();
 03BD 934F              xcall _UartTxValues
 03BF                   .dbline 105
 03BF           ;               }
 03BF           L19:
 03BF                   .dbline 106
 03BF           ;       }// ========================================================== Main loop 
 03BF           L5:
 03BF                   .dbline 54
 03BF 8C5F              xjmp L4
 03C1           X0:
 03C1                   .dbline -2
 03C1           L1:
 03C1 38FC              add SP,-4
 03C3 20                pop X
 03C4                   .dbline 0 ; func end
 03C4 8FFF              jmp .
 03C6                   .dbsym l PortNum 1 A[3:3]c
 03C6                   .dbsym l PortIndx 0 c
 03C6                   .dbend
 03C6                   .dbfunc e AGC _AGC fV
 03C6           ;           Port -> X-4
 03C6           _AGC::
 03C6                   .dbline -1
 03C6 10                push X
 03C7 4F                mov X,SP
 03C8                   .dbline 112
 03C8           ; }
 03C8           ; 
 03C8           ; // Functions ***************************************************************
 03C8           ; 
 03C8           ; void AGC(BYTE Port)
 03C8           ; {// [5]
 03C8                   .dbline 113
 03C8           ;            if((MesValue[Port][1] > V_MAX) && (GainIndx[Port][1] > I_MIN))// PGA_out
 03C8 62D000            mov REG[0xd0],>__r0
 03CB 52FC              mov A,[X-4]
 03CD 5300              mov [__r1],A
 03CF 550000            mov [__r0],0
 03D2 6500              asl [__r1]
 03D4 6B00              rlc [__r0]
 03D6 6500              asl [__r1]
 03D8 6B00              rlc [__r0]
 03DA 060002            add [__r1],<_MesValue+2
 03DD 0E0002            adc [__r0],>_MesValue+2
 03E0 5100              mov A,[__r0]
 03E2 60D4              mov REG[0xd4],A
 03E4 3E00              mvi A,[__r1]
 03E6 5300              mov [__r0],A
 03E8 3E00              mvi A,[__r1]
 03EA 5300              mov [__r1],A
 03EC 50BC              mov A,-68
 03EE 1200              sub A,[__r1]
 03F0 5100              mov A,[__r0]
 03F2 3180              xor A,-128
 03F4 5300              mov [__rX],A
 03F6 5082              mov A,(2 ^ 0x80)
 03F8 1A00              sbb A,[__rX]
 03FA D07F              jnc L28
 03FC           X10:
 03FC 62D000            mov REG[0xd0],>__r0
 03FF 52FC              mov A,[X-4]
 0401 5300              mov [__r1],A
 0403 550000            mov [__r0],0
 0406 6500              asl [__r1]
 0408 6B00              rlc [__r0]
 040A 060001            add [__r1],<_GainIndx+1
 040D 0E0001            adc [__r0],>_GainIndx+1
 0410 5100              mov A,[__r0]
 0412 60D4              mov REG[0xd4],A
 0414 3E00              mvi A,[__r1]
 0416 5300              mov [__r0],A
 0418 5000              mov A,0
 041A 3A00              cmp A,[__r0]
 041C D05D              jnc L28
 041E           X11:
 041E                   .dbline 114
 041E           ;       {
 041E                   .dbline 115
 041E           ;               GainIndx[Port][1]--;
 041E 62D000            mov REG[0xd0],>__r0
 0421 52FC              mov A,[X-4]
 0423 5300              mov [__r1],A
 0425 550000            mov [__r0],0
 0428 6500              asl [__r1]
 042A 6B00              rlc [__r0]
 042C 060001            add [__r1],<_GainIndx+1
 042F 0E0001            adc [__r0],>_GainIndx+1
 0432 5100              mov A,[__r0]
 0434 60D4              mov REG[0xd4],A
 0436 3E00              mvi A,[__r1]
 0438 7A00              dec [__r1]
 043A 5300              mov [__r2],A
 043C 160001            sub [__r2],1
 043F 5100              mov A,[__r0]
 0441 60D5              mov REG[0xd5],A
 0443 5100              mov A,[__r2]
 0445 3F00              mvi [__r1],A
 0447                   .dbline 116
 0447           ;               PGA_out_SetGain(GF[GainIndx[Port][1]][0]); // set gain on PGA
 0447 52FC              mov A,[X-4]
 0449 5300              mov [__r1],A
 044B 550000            mov [__r0],0
 044E 6500              asl [__r1]
 0450 6B00              rlc [__r0]
 0452 060001            add [__r1],<_GainIndx+1
 0455 0E0001            adc [__r0],>_GainIndx+1
 0458 5100              mov A,[__r0]
 045A 60D4              mov REG[0xd4],A
 045C 3E00              mvi A,[__r1]
 045E 5300              mov [__r1],A
 0460 550000            mov [__r0],0
 0463 6500              asl [__r1]
 0465 6B00              rlc [__r0]
 0467 060000            add [__r1],<_GF
 046A 0E0000            adc [__r0],>_GF
 046D 5100              mov A,[__r0]
 046F 60D4              mov REG[0xd4],A
 0471 3E00              mvi A,[__r1]
 0473 10                push X
 0474 7C0000            xcall _PGA_out_SetGain
 0477 20                pop X
 0478                   .dbline 117
 0478           ;       }
 0478 81FD              xjmp L29
 047A           L28:
 047A                   .dbline 118
 047A           ;       else if((MesValue[Port][0] > V_MAX) && (GainIndx[Port][0] > I_MIN))// PGA_pre
 047A 62D000            mov REG[0xd0],>__r0
 047D 52FC              mov A,[X-4]
 047F 5300              mov [__r1],A
 0481 550000            mov [__r0],0
 0484 6500              asl [__r1]
 0486 6B00              rlc [__r0]
 0488 6500              asl [__r1]
 048A 6B00              rlc [__r0]
 048C 060000            add [__r1],<_MesValue
 048F 0E0000            adc [__r0],>_MesValue
 0492 5100              mov A,[__r0]
 0494 60D4              mov REG[0xd4],A
 0496 3E00              mvi A,[__r1]
 0498 5300              mov [__r0],A
 049A 3E00              mvi A,[__r1]
 049C 5300              mov [__r1],A
 049E 50BC              mov A,-68
 04A0 1200              sub A,[__r1]
 04A2 5100              mov A,[__r0]
 04A4 3180              xor A,-128
 04A6 5300              mov [__rX],A
 04A8 5082              mov A,(2 ^ 0x80)
 04AA 1A00              sbb A,[__rX]
 04AC D07F              jnc L34
 04AE           X12:
 04AE 62D000            mov REG[0xd0],>__r0
 04B1 52FC              mov A,[X-4]
 04B3 5300              mov [__r1],A
 04B5 550000            mov [__r0],0
 04B8 6500              asl [__r1]
 04BA 6B00              rlc [__r0]
 04BC 060000            add [__r1],<_GainIndx
 04BF 0E0000            adc [__r0],>_GainIndx
 04C2 5100              mov A,[__r0]
 04C4 60D4              mov REG[0xd4],A
 04C6 3E00              mvi A,[__r1]
 04C8 5300              mov [__r0],A
 04CA 5000              mov A,0
 04CC 3A00              cmp A,[__r0]
 04CE D05D              jnc L34
 04D0           X13:
 04D0                   .dbline 119
 04D0           ;       {
 04D0                   .dbline 120
 04D0           ;               GainIndx[Port][0]--;
 04D0 62D000            mov REG[0xd0],>__r0
 04D3 52FC              mov A,[X-4]
 04D5 5300              mov [__r1],A
 04D7 550000            mov [__r0],0
 04DA 6500              asl [__r1]
 04DC 6B00              rlc [__r0]
 04DE 060000            add [__r1],<_GainIndx
 04E1 0E0000            adc [__r0],>_GainIndx
 04E4 5100              mov A,[__r0]
 04E6 60D4              mov REG[0xd4],A
 04E8 3E00              mvi A,[__r1]
 04EA 7A00              dec [__r1]
 04EC 5300              mov [__r2],A
 04EE 160001            sub [__r2],1
 04F1 5100              mov A,[__r0]
 04F3 60D5              mov REG[0xd5],A
 04F5 5100              mov A,[__r2]
 04F7 3F00              mvi [__r1],A
 04F9                   .dbline 121
 04F9           ;               PGA_pre_SetGain(GF[GainIndx[Port][0]][0]); // set gain on PGA
 04F9 52FC              mov A,[X-4]
 04FB 5300              mov [__r1],A
 04FD 550000            mov [__r0],0
 0500 6500              asl [__r1]
 0502 6B00              rlc [__r0]
 0504 060000            add [__r1],<_GainIndx
 0507 0E0000            adc [__r0],>_GainIndx
 050A 5100              mov A,[__r0]
 050C 60D4              mov REG[0xd4],A
 050E 3E00              mvi A,[__r1]
 0510 5300              mov [__r1],A
 0512 550000            mov [__r0],0
 0515 6500              asl [__r1]
 0517 6B00              rlc [__r0]
 0519 060000            add [__r1],<_GF
 051C 0E0000            adc [__r0],>_GF
 051F 5100              mov A,[__r0]
 0521 60D4              mov REG[0xd4],A
 0523 3E00              mvi A,[__r1]
 0525 10                push X
 0526 7C0000            xcall _PGA_pre_SetGain
 0529 20                pop X
 052A                   .dbline 122
 052A           ;       }
 052A 814B              xjmp L35
 052C           L34:
 052C                   .dbline 123
 052C           ;       else if((MesValue[Port][1] < V_MIN) && (GainIndx[Port][1] < I_MAX))// PGA_out
 052C 62D000            mov REG[0xd0],>__r0
 052F 52FC              mov A,[X-4]
 0531 5300              mov [__r1],A
 0533 550000            mov [__r0],0
 0536 6500              asl [__r1]
 0538 6B00              rlc [__r0]
 053A 6500              asl [__r1]
 053C 6B00              rlc [__r0]
 053E 060002            add [__r1],<_MesValue+2
 0541 0E0002            adc [__r0],>_MesValue+2
 0544 5100              mov A,[__r0]
 0546 60D4              mov REG[0xd4],A
 0548 3E00              mvi A,[__r1]
 054A 5300              mov [__r0],A
 054C 3E00              mvi A,[__r1]
 054E 1164              sub A,100
 0550 5100              mov A,[__r0]
 0552 3180              xor A,-128
 0554 1980              sbb A,(0 ^ 0x80)
 0556 D07B              jnc L36
 0558           X14:
 0558 62D000            mov REG[0xd0],>__r0
 055B 52FC              mov A,[X-4]
 055D 5300              mov [__r1],A
 055F 550000            mov [__r0],0
 0562 6500              asl [__r1]
 0564 6B00              rlc [__r0]
 0566 060001            add [__r1],<_GainIndx+1
 0569 0E0001            adc [__r0],>_GainIndx+1
 056C 5100              mov A,[__r0]
 056E 60D4              mov REG[0xd4],A
 0570 3E00              mvi A,[__r1]
 0572 3904              cmp A,4
 0574 D05D              jnc L36
 0576           X15:
 0576                   .dbline 124
 0576           ;       {
 0576                   .dbline 125
 0576           ;               GainIndx[Port][1]++;
 0576 62D000            mov REG[0xd0],>__r0
 0579 52FC              mov A,[X-4]
 057B 5300              mov [__r1],A
 057D 550000            mov [__r0],0
 0580 6500              asl [__r1]
 0582 6B00              rlc [__r0]
 0584 060001            add [__r1],<_GainIndx+1
 0587 0E0001            adc [__r0],>_GainIndx+1
 058A 5100              mov A,[__r0]
 058C 60D4              mov REG[0xd4],A
 058E 3E00              mvi A,[__r1]
 0590 7A00              dec [__r1]
 0592 5300              mov [__r2],A
 0594 060001            add [__r2],1
 0597 5100              mov A,[__r0]
 0599 60D5              mov REG[0xd5],A
 059B 5100              mov A,[__r2]
 059D 3F00              mvi [__r1],A
 059F                   .dbline 126
 059F           ;               PGA_out_SetGain(GF[GainIndx[Port][1]][0]); // set gain on PGA
 059F 52FC              mov A,[X-4]
 05A1 5300              mov [__r1],A
 05A3 550000            mov [__r0],0
 05A6 6500              asl [__r1]
 05A8 6B00              rlc [__r0]
 05AA 060001            add [__r1],<_GainIndx+1
 05AD 0E0001            adc [__r0],>_GainIndx+1
 05B0 5100              mov A,[__r0]
 05B2 60D4              mov REG[0xd4],A
 05B4 3E00              mvi A,[__r1]
 05B6 5300              mov [__r1],A
 05B8 550000            mov [__r0],0
 05BB 6500              asl [__r1]
 05BD 6B00              rlc [__r0]
 05BF 060000            add [__r1],<_GF
 05C2 0E0000            adc [__r0],>_GF
 05C5 5100              mov A,[__r0]
 05C7 60D4              mov REG[0xd4],A
 05C9 3E00              mvi A,[__r1]
 05CB 10                push X
 05CC 7C0000            xcall _PGA_out_SetGain
 05CF 20                pop X
 05D0                   .dbline 127
 05D0           ;       }
 05D0 80A5              xjmp L37
 05D2           L36:
 05D2                   .dbline 128
 05D2           ;       else if((MesValue[Port][0] < V_MIN) && (GainIndx[Port][0] < I_MAX))// PGA_pre
 05D2 62D000            mov REG[0xd0],>__r0
 05D5 52FC              mov A,[X-4]
 05D7 5300              mov [__r1],A
 05D9 550000            mov [__r0],0
 05DC 6500              asl [__r1]
 05DE 6B00              rlc [__r0]
 05E0 6500              asl [__r1]
 05E2 6B00              rlc [__r0]
 05E4 060000            add [__r1],<_MesValue
 05E7 0E0000            adc [__r0],>_MesValue
 05EA 5100              mov A,[__r0]
 05EC 60D4              mov REG[0xd4],A
 05EE 3E00              mvi A,[__r1]
 05F0 5300              mov [__r0],A
 05F2 3E00              mvi A,[__r1]
 05F4 1164              sub A,100
 05F6 5100              mov A,[__r0]
 05F8 3180              xor A,-128
 05FA 1980              sbb A,(0 ^ 0x80)
 05FC D079              jnc L42
 05FE           X16:
 05FE 62D000            mov REG[0xd0],>__r0
 0601 52FC              mov A,[X-4]
 0603 5300              mov [__r1],A
 0605 550000            mov [__r0],0
 0608 6500              asl [__r1]
 060A 6B00              rlc [__r0]
 060C 060000            add [__r1],<_GainIndx
 060F 0E0000            adc [__r0],>_GainIndx
 0612 5100              mov A,[__r0]
 0614 60D4              mov REG[0xd4],A
 0616 3E00              mvi A,[__r1]
 0618 3904              cmp A,4
 061A D05B              jnc L42
 061C           X17:
 061C                   .dbline 129
 061C           ;       {
 061C                   .dbline 130
 061C           ;               GainIndx[Port][0]++;
 061C 62D000            mov REG[0xd0],>__r0
 061F 52FC              mov A,[X-4]
 0621 5300              mov [__r1],A
 0623 550000            mov [__r0],0
 0626 6500              asl [__r1]
 0628 6B00              rlc [__r0]
 062A 060000            add [__r1],<_GainIndx
 062D 0E0000            adc [__r0],>_GainIndx
 0630 5100              mov A,[__r0]
 0632 60D4              mov REG[0xd4],A
 0634 3E00              mvi A,[__r1]
 0636 7A00              dec [__r1]
 0638 5300              mov [__r2],A
 063A 060001            add [__r2],1
 063D 5100              mov A,[__r0]
 063F 60D5              mov REG[0xd5],A
 0641 5100              mov A,[__r2]
 0643 3F00              mvi [__r1],A
 0645                   .dbline 131
 0645           ;               PGA_pre_SetGain(GF[GainIndx[Port][0]][0]); // set gain on PGA
 0645 52FC              mov A,[X-4]
 0647 5300              mov [__r1],A
 0649 550000            mov [__r0],0
 064C 6500              asl [__r1]
 064E 6B00              rlc [__r0]
 0650 060000            add [__r1],<_GainIndx
 0653 0E0000            adc [__r0],>_GainIndx
 0656 5100              mov A,[__r0]
 0658 60D4              mov REG[0xd4],A
 065A 3E00              mvi A,[__r1]
 065C 5300              mov [__r1],A
 065E 550000            mov [__r0],0
 0661 6500              asl [__r1]
 0663 6B00              rlc [__r0]
 0665 060000            add [__r1],<_GF
 0668 0E0000            adc [__r0],>_GF
 066B 5100              mov A,[__r0]
 066D 60D4              mov REG[0xd4],A
 066F 3E00              mvi A,[__r1]
 0671 10                push X
 0672 7C0000            xcall _PGA_pre_SetGain
 0675 20                pop X
 0676                   .dbline 132
 0676           ;       }       
 0676           L42:
 0676           L37:
 0676           L35:
 0676           L29:
 0676                   .dbline -2
 0676           L27:
 0676 20                pop X
 0677                   .dbline 0 ; func end
 0677 7F                ret
 0678                   .dbsym l Port -4 c
 0678                   .dbend
 0678                   .dbfunc e DigitalOut _DigitalOut fV
 0678           _DigitalOut::
 0678                   .dbline -1
 0678                   .dbline 136
 0678           ; }
 0678           ; 
 0678           ; void DigitalOut(void)
 0678           ; {// Controls the outputs according to pot setting point
 0678                   .dbline 137
 0678           ;       DIGITAL_OUT_Off();
 0678 10                push X
 0679 7C0000            xcall _DIGITAL_OUT_Off
 067C 20                pop X
 067D                   .dbline 138
 067D           ;       if (MesValueM[0]>PotValue)
 067D 62D000            mov REG[0xd0],>_PotValue
 0680 5101              mov A,[_PotValue+1]
 0682 62D000            mov REG[0xd0],>_MesValueM
 0685 1201              sub A,[_MesValueM+1]
 0687 5100              mov A,[_MesValueM]
 0689 3180              xor A,-128
 068B 62D000            mov REG[0xd0],>__r0
 068E 5300              mov [__rX],A
 0690 62D000            mov REG[0xd0],>_PotValue
 0693 5100              mov A,[_PotValue]
 0695 3180              xor A,-128
 0697 62D000            mov REG[0xd0],>__r0
 069A 1A00              sbb A,[__rX]
 069C D00B              jnc L45
 069E           X18:
 069E                   .dbline 139
 069E           ;       {
 069E                   .dbline 140
 069E           ;               DIGITAL_OUT_On();
 069E 10                push X
 069F 7C0000            xcall _DIGITAL_OUT_On
 06A2                   .dbline 141
 06A2           ;               LED_1_On();
 06A2 7C0000            xcall _LED_1_On
 06A5 20                pop X
 06A6                   .dbline 142
 06A6           ;       }
 06A6 8006              xjmp L46
 06A8           L45:
 06A8                   .dbline 144
 06A8           ;       else
 06A8           ;       {
 06A8                   .dbline 145
 06A8           ;               LED_1_Off();
 06A8 10                push X
 06A9 7C0000            xcall _LED_1_Off
 06AC 20                pop X
 06AD                   .dbline 146
 06AD           ;       }
 06AD           L46:
 06AD                   .dbline 148
 06AD           ;               
 06AD           ;       if (MesValueM[1]>PotValue)
 06AD 62D000            mov REG[0xd0],>_PotValue
 06B0 5101              mov A,[_PotValue+1]
 06B2 62D000            mov REG[0xd0],>_MesValueM
 06B5 1203              sub A,[_MesValueM+2+1]
 06B7 5102              mov A,[_MesValueM+2]
 06B9 3180              xor A,-128
 06BB 62D000            mov REG[0xd0],>__r0
 06BE 5300              mov [__rX],A
 06C0 62D000            mov REG[0xd0],>_PotValue
 06C3 5100              mov A,[_PotValue]
 06C5 3180              xor A,-128
 06C7 62D000            mov REG[0xd0],>__r0
 06CA 1A00              sbb A,[__rX]
 06CC D00B              jnc L47
 06CE           X19:
 06CE                   .dbline 149
 06CE           ;       {
 06CE                   .dbline 150
 06CE           ;               DIGITAL_OUT_On();
 06CE 10                push X
 06CF 7C0000            xcall _DIGITAL_OUT_On
 06D2                   .dbline 151
 06D2           ;               LED_2_On();
 06D2 7C0000            xcall _LED_2_On
 06D5 20                pop X
 06D6                   .dbline 152
 06D6           ;       }
 06D6 8006              xjmp L48
 06D8           L47:
 06D8                   .dbline 154
 06D8           ;       else
 06D8           ;       {
 06D8                   .dbline 155
 06D8           ;               LED_2_Off();
 06D8 10                push X
 06D9 7C0000            xcall _LED_2_Off
 06DC 20                pop X
 06DD                   .dbline 156
 06DD           ;       }
 06DD           L48:
 06DD                   .dbline 158
 06DD           ;       
 06DD           ;       if (MesValueM[2]>PotValue)
 06DD 62D000            mov REG[0xd0],>_PotValue
 06E0 5101              mov A,[_PotValue+1]
 06E2 62D000            mov REG[0xd0],>_MesValueM
 06E5 1205              sub A,[_MesValueM+4+1]
 06E7 5104              mov A,[_MesValueM+4]
 06E9 3180              xor A,-128
 06EB 62D000            mov REG[0xd0],>__r0
 06EE 5300              mov [__rX],A
 06F0 62D000            mov REG[0xd0],>_PotValue
 06F3 5100              mov A,[_PotValue]
 06F5 3180              xor A,-128
 06F7 62D000            mov REG[0xd0],>__r0
 06FA 1A00              sbb A,[__rX]
 06FC D00B              jnc L50
 06FE           X20:
 06FE                   .dbline 159
 06FE           ;       {
 06FE                   .dbline 160
 06FE           ;               DIGITAL_OUT_On();
 06FE 10                push X
 06FF 7C0000            xcall _DIGITAL_OUT_On
 0702                   .dbline 161
 0702           ;               LED_3_On();
 0702 7C0000            xcall _LED_3_On
 0705 20                pop X
 0706                   .dbline 162
 0706           ;       }
 0706 8006              xjmp L51
 0708           L50:
 0708                   .dbline 164
 0708           ;       else
 0708           ;       {
 0708                   .dbline 165
 0708           ;               LED_3_Off();
 0708 10                push X
 0709 7C0000            xcall _LED_3_Off
 070C 20                pop X
 070D                   .dbline 166
 070D           ;       }
 070D           L51:
 070D                   .dbline -2
 070D           L44:
 070D                   .dbline 0 ; func end
 070D 7F                ret
 070E                   .dbend
 070E                   .dbfunc e UartTxValues _UartTxValues fV
 070E           _UartTxValues::
 070E                   .dbline -1
 070E                   .dbline 170
 070E           ; }
 070E           ; 
 070E           ; void UartTxValues(void)
 070E           ; {/* Transmit via UART the analog values read from various inputs.
 070E                   .dbline 175
 070E           ;       Usefull for debugging purposes, it could be converted in a
 070E           ;       command string using the same protocol used for dsNav if
 070E           ;       needed to output sound level values via serial comm
 070E           ; */
 070E           ;       TX8_CPutString("\n\rPot Value = ");
 070E 10                push X
 070F 5055              mov A,>L54
 0711 08                push A
 0712 5055              mov A,<L54
 0714 5C                mov X,A
 0715 18                pop A
 0716 7C0000            xcall _TX8_CPutString
 0719 20                pop X
 071A                   .dbline 176
 071A           ;       itoa(str, PotValue,10);
 071A 5000              mov A,0
 071C 08                push A
 071D 500A              mov A,10
 071F 08                push A
 0720 62D000            mov REG[0xd0],>_PotValue
 0723 5100              mov A,[_PotValue]
 0725 08                push A
 0726 5101              mov A,[_PotValue+1]
 0728 08                push A
 0729 5000              mov A,>_str
 072B 08                push A
 072C 5000              mov A,<_str
 072E 08                push A
 072F 7C0000            xcall _itoa
 0732 38FA              add SP,-6
 0734                   .dbline 177
 0734           ;       TX8_PutString(str);
 0734 10                push X
 0735 5000              mov A,>_str
 0737 08                push A
 0738 5000              mov A,<_str
 073A 5C                mov X,A
 073B 18                pop A
 073C 7C0000            xcall _TX8_PutString
 073F 20                pop X
 0740                   .dbline 178
 0740           ;       TX8_CPutString("    Mes Value: 1 = ");
 0740 10                push X
 0741 5041              mov A,>L55
 0743 08                push A
 0744 5041              mov A,<L55
 0746 5C                mov X,A
 0747 18                pop A
 0748 7C0000            xcall _TX8_CPutString
 074B 20                pop X
 074C                   .dbline 179
 074C           ;       itoa(str, MesValueM[0],10);
 074C 5000              mov A,0
 074E 08                push A
 074F 500A              mov A,10
 0751 08                push A
 0752 62D000            mov REG[0xd0],>_MesValueM
 0755 5100              mov A,[_MesValueM]
 0757 08                push A
 0758 5101              mov A,[_MesValueM+1]
 075A 08                push A
 075B 5000              mov A,>_str
 075D 08                push A
 075E 5000              mov A,<_str
 0760 08                push A
 0761 7C0000            xcall _itoa
 0764 38FA              add SP,-6
 0766                   .dbline 180
 0766           ;       TX8_PutString(str);
 0766 10                push X
 0767 5000              mov A,>_str
 0769 08                push A
 076A 5000              mov A,<_str
 076C 5C                mov X,A
 076D 18                pop A
 076E 7C0000            xcall _TX8_PutString
 0771 20                pop X
 0772                   .dbline 181
 0772           ;       TX8_CPutString("  -  2 = ");
 0772 10                push X
 0773 5037              mov A,>L56
 0775 08                push A
 0776 5037              mov A,<L56
 0778 5C                mov X,A
 0779 18                pop A
 077A 7C0000            xcall _TX8_CPutString
 077D 20                pop X
 077E                   .dbline 182
 077E           ;       itoa(str, MesValueM[1],10);
 077E 5000              mov A,0
 0780 08                push A
 0781 500A              mov A,10
 0783 08                push A
 0784 62D000            mov REG[0xd0],>_MesValueM
 0787 5102              mov A,[_MesValueM+2]
 0789 08                push A
 078A 5103              mov A,[_MesValueM+2+1]
 078C 08                push A
 078D 5000              mov A,>_str
 078F 08                push A
 0790 5000              mov A,<_str
 0792 08                push A
 0793 7C0000            xcall _itoa
 0796 38FA              add SP,-6
 0798                   .dbline 183
 0798           ;       TX8_PutString(str);
 0798 10                push X
 0799 5000              mov A,>_str
 079B 08                push A
 079C 5000              mov A,<_str
 079E 5C                mov X,A
 079F 18                pop A
 07A0 7C0000            xcall _TX8_PutString
 07A3 20                pop X
 07A4                   .dbline 184
 07A4           ;       TX8_CPutString("  -  3 = ");
 07A4 10                push X
 07A5 502D              mov A,>L58
 07A7 08                push A
 07A8 502D              mov A,<L58
 07AA 5C                mov X,A
 07AB 18                pop A
 07AC 7C0000            xcall _TX8_CPutString
 07AF 20                pop X
 07B0                   .dbline 185
 07B0           ;       itoa(str, MesValueM[2],10);
 07B0 5000              mov A,0
 07B2 08                push A
 07B3 500A              mov A,10
 07B5 08                push A
 07B6 62D000            mov REG[0xd0],>_MesValueM
 07B9 5104              mov A,[_MesValueM+4]
 07BB 08                push A
 07BC 5105              mov A,[_MesValueM+4+1]
 07BE 08                push A
 07BF 5000              mov A,>_str
 07C1 08                push A
 07C2 5000              mov A,<_str
 07C4 08                push A
 07C5 7C0000            xcall _itoa
 07C8 38FA              add SP,-6
 07CA                   .dbline 186
 07CA           ;       TX8_PutString(str);
 07CA 10                push X
 07CB 5000              mov A,>_str
 07CD 08                push A
 07CE 5000              mov A,<_str
 07D0 5C                mov X,A
 07D1 18                pop A
 07D2 7C0000            xcall _TX8_PutString
 07D5 20                pop X
 07D6                   .dbline 187
 07D6           ;       TX8_CPutString("  Gain Pre: 1 = ");
 07D6 10                push X
 07D7 501C              mov A,>L60
 07D9 08                push A
 07DA 501C              mov A,<L60
 07DC 5C                mov X,A
 07DD 18                pop A
 07DE 7C0000            xcall _TX8_CPutString
 07E1 20                pop X
 07E2                   .dbline 188
 07E2           ;       itoa(str, GF[GainIndx[0][0]][1], 10);
 07E2 5000              mov A,0
 07E4 08                push A
 07E5 500A              mov A,10
 07E7 08                push A
 07E8 62D000            mov REG[0xd0],>_GainIndx
 07EB 5100              mov A,[_GainIndx]
 07ED 62D000            mov REG[0xd0],>__r0
 07F0 5300              mov [__r1],A
 07F2 550000            mov [__r0],0
 07F5 6500              asl [__r1]
 07F7 6B00              rlc [__r0]
 07F9 060001            add [__r1],<_GF+1
 07FC 0E0001            adc [__r0],>_GF+1
 07FF 5100              mov A,[__r0]
 0801 60D4              mov REG[0xd4],A
 0803 3E00              mvi A,[__r1]
 0805 5300              mov [__r1],A
 0807 5000              mov A,0
 0809 08                push A
 080A 5100              mov A,[__r1]
 080C 08                push A
 080D 5000              mov A,>_str
 080F 08                push A
 0810 5000              mov A,<_str
 0812 08                push A
 0813 7C0000            xcall _itoa
 0816 38FA              add SP,-6
 0818                   .dbline 189
 0818           ;       TX8_PutString(str);
 0818 10                push X
 0819 5000              mov A,>_str
 081B 08                push A
 081C 5000              mov A,<_str
 081E 5C                mov X,A
 081F 18                pop A
 0820 7C0000            xcall _TX8_PutString
 0823 20                pop X
 0824                   .dbline 190
 0824           ;       TX8_CPutString("  -  2 = ");
 0824 10                push X
 0825 5037              mov A,>L56
 0827 08                push A
 0828 5037              mov A,<L56
 082A 5C                mov X,A
 082B 18                pop A
 082C 7C0000            xcall _TX8_CPutString
 082F 20                pop X
 0830                   .dbline 191
 0830           ;       itoa(str, GF[GainIndx[1][0]][1], 10);
 0830 5000              mov A,0
 0832 08                push A
 0833 500A              mov A,10
 0835 08                push A
 0836 62D000            mov REG[0xd0],>_GainIndx
 0839 5102              mov A,[_GainIndx+2]
 083B 62D000            mov REG[0xd0],>__r0
 083E 5300              mov [__r1],A
 0840 550000            mov [__r0],0
 0843 6500              asl [__r1]
 0845 6B00              rlc [__r0]
 0847 060001            add [__r1],<_GF+1
 084A 0E0001            adc [__r0],>_GF+1
 084D 5100              mov A,[__r0]
 084F 60D4              mov REG[0xd4],A
 0851 3E00              mvi A,[__r1]
 0853 5300              mov [__r1],A
 0855 5000              mov A,0
 0857 08                push A
 0858 5100              mov A,[__r1]
 085A 08                push A
 085B 5000              mov A,>_str
 085D 08                push A
 085E 5000              mov A,<_str
 0860 08                push A
 0861 7C0000            xcall _itoa
 0864 38FA              add SP,-6
 0866                   .dbline 192
 0866           ;       TX8_PutString(str);     
 0866 10                push X
 0867 5000              mov A,>_str
 0869 08                push A
 086A 5000              mov A,<_str
 086C 5C                mov X,A
 086D 18                pop A
 086E 7C0000            xcall _TX8_PutString
 0871 20                pop X
 0872                   .dbline 193
 0872           ;       TX8_CPutString("  -  3 = ");
 0872 10                push X
 0873 502D              mov A,>L58
 0875 08                push A
 0876 502D              mov A,<L58
 0878 5C                mov X,A
 0879 18                pop A
 087A 7C0000            xcall _TX8_CPutString
 087D 20                pop X
 087E                   .dbline 194
 087E           ;       itoa(str, GF[GainIndx[2][0]][1], 10);
 087E 5000              mov A,0
 0880 08                push A
 0881 500A              mov A,10
 0883 08                push A
 0884 62D000            mov REG[0xd0],>_GainIndx
 0887 5104              mov A,[_GainIndx+4]
 0889 62D000            mov REG[0xd0],>__r0
 088C 5300              mov [__r1],A
 088E 550000            mov [__r0],0
 0891 6500              asl [__r1]
 0893 6B00              rlc [__r0]
 0895 060001            add [__r1],<_GF+1
 0898 0E0001            adc [__r0],>_GF+1
 089B 5100              mov A,[__r0]
 089D 60D4              mov REG[0xd4],A
 089F 3E00              mvi A,[__r1]
 08A1 5300              mov [__r1],A
 08A3 5000              mov A,0
 08A5 08                push A
 08A6 5100              mov A,[__r1]
 08A8 08                push A
 08A9 5000              mov A,>_str
 08AB 08                push A
 08AC 5000              mov A,<_str
 08AE 08                push A
 08AF 7C0000            xcall _itoa
 08B2 38FA              add SP,-6
 08B4                   .dbline 195
 08B4           ;       TX8_PutString(str);     
 08B4 10                push X
 08B5 5000              mov A,>_str
 08B7 08                push A
 08B8 5000              mov A,<_str
 08BA 5C                mov X,A
 08BB 18                pop A
 08BC 7C0000            xcall _TX8_PutString
 08BF 20                pop X
 08C0                   .dbline 196
 08C0           ;       TX8_CPutString("  Gain Out: 1 = ");
 08C0 10                push X
 08C1 500B              mov A,>L66
 08C3 08                push A
 08C4 500B              mov A,<L66
 08C6 5C                mov X,A
 08C7 18                pop A
 08C8 7C0000            xcall _TX8_CPutString
 08CB 20                pop X
 08CC                   .dbline 197
 08CC           ;       itoa(str, GF[GainIndx[0][1]][1], 10);
 08CC 5000              mov A,0
 08CE 08                push A
 08CF 500A              mov A,10
 08D1 08                push A
 08D2 62D000            mov REG[0xd0],>_GainIndx
 08D5 5101              mov A,[_GainIndx+1]
 08D7 62D000            mov REG[0xd0],>__r0
 08DA 5300              mov [__r1],A
 08DC 550000            mov [__r0],0
 08DF 6500              asl [__r1]
 08E1 6B00              rlc [__r0]
 08E3 060001            add [__r1],<_GF+1
 08E6 0E0001            adc [__r0],>_GF+1
 08E9 5100              mov A,[__r0]
 08EB 60D4              mov REG[0xd4],A
 08ED 3E00              mvi A,[__r1]
 08EF 5300              mov [__r1],A
 08F1 5000              mov A,0
 08F3 08                push A
 08F4 5100              mov A,[__r1]
 08F6 08                push A
 08F7 5000              mov A,>_str
 08F9 08                push A
 08FA 5000              mov A,<_str
 08FC 08                push A
 08FD 7C0000            xcall _itoa
 0900 38FA              add SP,-6
 0902                   .dbline 198
 0902           ;       TX8_PutString(str);
 0902 10                push X
 0903 5000              mov A,>_str
 0905 08                push A
 0906 5000              mov A,<_str
 0908 5C                mov X,A
 0909 18                pop A
 090A 7C0000            xcall _TX8_PutString
 090D 20                pop X
 090E                   .dbline 199
 090E           ;       TX8_CPutString("  -  2 = ");
 090E 10                push X
 090F 5037              mov A,>L56
 0911 08                push A
 0912 5037              mov A,<L56
 0914 5C                mov X,A
 0915 18                pop A
 0916 7C0000            xcall _TX8_CPutString
 0919 20                pop X
 091A                   .dbline 200
 091A           ;       itoa(str, GF[GainIndx[1][1]][1], 10);
 091A 5000              mov A,0
 091C 08                push A
 091D 500A              mov A,10
 091F 08                push A
 0920 62D000            mov REG[0xd0],>_GainIndx
 0923 5103              mov A,[_GainIndx+2+1]
 0925 62D000            mov REG[0xd0],>__r0
 0928 5300              mov [__r1],A
 092A 550000            mov [__r0],0
 092D 6500              asl [__r1]
 092F 6B00              rlc [__r0]
 0931 060001            add [__r1],<_GF+1
 0934 0E0001            adc [__r0],>_GF+1
 0937 5100              mov A,[__r0]
 0939 60D4              mov REG[0xd4],A
 093B 3E00              mvi A,[__r1]
 093D 5300              mov [__r1],A
 093F 5000              mov A,0
 0941 08                push A
 0942 5100              mov A,[__r1]
 0944 08                push A
 0945 5000              mov A,>_str
 0947 08                push A
 0948 5000              mov A,<_str
 094A 08                push A
 094B 7C0000            xcall _itoa
 094E 38FA              add SP,-6
 0950                   .dbline 201
 0950           ;       TX8_PutString(str);     
 0950 10                push X
 0951 5000              mov A,>_str
 0953 08                push A
 0954 5000              mov A,<_str
 0956 5C                mov X,A
 0957 18                pop A
 0958 7C0000            xcall _TX8_PutString
 095B 20                pop X
 095C                   .dbline 202
 095C           ;       TX8_CPutString("  -  3 = ");
 095C 10                push X
 095D 502D              mov A,>L58
 095F 08                push A
 0960 502D              mov A,<L58
 0962 5C                mov X,A
 0963 18                pop A
 0964 7C0000            xcall _TX8_CPutString
 0967 20                pop X
 0968                   .dbline 203
 0968           ;       itoa(str, GF[GainIndx[2][1]][1], 10);
 0968 5000              mov A,0
 096A 08                push A
 096B 500A              mov A,10
 096D 08                push A
 096E 62D000            mov REG[0xd0],>_GainIndx
 0971 5105              mov A,[_GainIndx+4+1]
 0973 62D000            mov REG[0xd0],>__r0
 0976 5300              mov [__r1],A
 0978 550000            mov [__r0],0
 097B 6500              asl [__r1]
 097D 6B00              rlc [__r0]
 097F 060001            add [__r1],<_GF+1
 0982 0E0001            adc [__r0],>_GF+1
 0985 5100              mov A,[__r0]
 0987 60D4              mov REG[0xd4],A
 0989 3E00              mvi A,[__r1]
 098B 5300              mov [__r1],A
 098D 5000              mov A,0
 098F 08                push A
 0990 5100              mov A,[__r1]
 0992 08                push A
 0993 5000              mov A,>_str
 0995 08                push A
 0996 5000              mov A,<_str
 0998 08                push A
 0999 7C0000            xcall _itoa
 099C 38FA              add SP,-6
 099E                   .dbline 204
 099E           ;       TX8_PutString(str);     
 099E 10                push X
 099F 5000              mov A,>_str
 09A1 08                push A
 09A2 5000              mov A,<_str
 09A4 5C                mov X,A
 09A5 18                pop A
 09A6 7C0000            xcall _TX8_PutString
 09A9 20                pop X
 09AA                   .dbline 207
 09AA           ;       
 09AA           ;       
 09AA           ;       TX8_CPutString("  ----- = ");
 09AA 10                push X
 09AB 5000              mov A,>L75
 09AD 08                push A
 09AE 5000              mov A,<L75
 09B0 5C                mov X,A
 09B1 18                pop A
 09B2 7C0000            xcall _TX8_CPutString
 09B5 20                pop X
 09B6                   .dbline 208
 09B6           ;       itoa(str, MesValueOut, 10);
 09B6 5000              mov A,0
 09B8 08                push A
 09B9 500A              mov A,10
 09BB 08                push A
 09BC 62D000            mov REG[0xd0],>_MesValueOut
 09BF 5100              mov A,[_MesValueOut]
 09C1 08                push A
 09C2 5101              mov A,[_MesValueOut+1]
 09C4 08                push A
 09C5 5000              mov A,>_str
 09C7 08                push A
 09C8 5000              mov A,<_str
 09CA 08                push A
 09CB 7C0000            xcall _itoa
 09CE 38FA              add SP,-6
 09D0                   .dbline 209
 09D0           ;       TX8_PutString(str);     
 09D0 10                push X
 09D1 5000              mov A,>_str
 09D3 08                push A
 09D4 5000              mov A,<_str
 09D6 5C                mov X,A
 09D7 18                pop A
 09D8 7C0000            xcall _TX8_PutString
 09DB 20                pop X
 09DC                   .dbline -2
 09DC           L53:
 09DC                   .dbline 0 ; func end
 09DC 7F                ret
 09DD                   .dbend
 09DD                   .dbfunc e BlocksInit _BlocksInit fV
 09DD           _BlocksInit::
 09DD                   .dbline -1
 09DD                   .dbline 214
 09DD           ;       
 09DD           ; }
 09DD           ;       
 09DD           ; void BlocksInit(void)
 09DD           ; {// Analog and digital blocks inizialization
 09DD                   .dbline 215
 09DD           ;       ADCINCVR_pot_Start(ADCINCVR_pot_HIGHPOWER);     
 09DD 10                push X
 09DE 5003              mov A,3
 09E0 7C0000            xcall _ADCINCVR_pot_Start
 09E3 20                pop X
 09E4                   .dbline 216
 09E4           ;       ADCINCVR_mes_Start(ADCINCVR_mes_HIGHPOWER);
 09E4 10                push X
 09E5 5003              mov A,3
 09E7 7C0000            xcall _ADCINCVR_mes_Start
 09EA                   .dbline 217
 09EA           ;       AMUX4_mic_Start();
 09EA 7C0000            xcall _AMUX4_mic_Start
 09ED 20                pop X
 09EE                   .dbline 218
 09EE           ;       BPF4_4KHz_Start(BPF4_4KHz_HIGHPOWER);
 09EE 10                push X
 09EF 5003              mov A,3
 09F1 7C0000            xcall _BPF4_4KHz_Start
 09F4                   .dbline 219
 09F4           ;       I2CHW_Start();
 09F4 7C0000            xcall _I2CHW_Start
 09F7 20                pop X
 09F8                   .dbline 220
 09F8           ;       PGA_out_Start(PGA_out_HIGHPOWER);
 09F8 10                push X
 09F9 5003              mov A,3
 09FB 7C0000            xcall _PGA_out_Start
 09FE 20                pop X
 09FF                   .dbline 221
 09FF           ;       PGA_pre_Start(PGA_pre_HIGHPOWER); 
 09FF 10                push X
 0A00 5003              mov A,3
 0A02 7C0000            xcall _PGA_pre_Start
 0A05 20                pop X
 0A06                   .dbline 222
 0A06           ;       RefMux_1_Start(RefMux_1_HIGHPOWER);
 0A06 10                push X
 0A07 5003              mov A,3
 0A09 7C0000            xcall _RefMux_1_Start
 0A0C 20                pop X
 0A0D                   .dbline 223
 0A0D           ;     SCBLOCK_inbuff_Start(SCBLOCK_inbuff_HIGHPOWER);
 0A0D 10                push X
 0A0E 5003              mov A,3
 0A10 7C0000            xcall _SCBLOCK_inbuff_Start
 0A13                   .dbline 224
 0A13           ;       LED_1_Start();
 0A13 7C0000            xcall _LED_1_Start
 0A16                   .dbline 225
 0A16           ;       LED_2_Start();
 0A16 7C0000            xcall _LED_2_Start
 0A19                   .dbline 226
 0A19           ;       LED_3_Start();
 0A19 7C0000            xcall _LED_3_Start
 0A1C                   .dbline 227
 0A1C           ;       DIGITAL_OUT_Start();  
 0A1C 7C0000            xcall _DIGITAL_OUT_Start
 0A1F                   .dbline 229
 0A1F           ;       
 0A1F           ;       TX8_EnableInt();
 0A1F 7C0000            xcall _TX8_EnableInt
 0A22 20                pop X
 0A23                   .dbline 230
 0A23           ;       TX8_Start(TX8_PARITY_NONE);
 0A23 10                push X
 0A24 5000              mov A,0
 0A26 7C0000            xcall _TX8_Start
 0A29 20                pop X
 0A2A                   .dbline 232
 0A2A           ;       
 0A2A           ;       AMUX4_mic_InputSelect(AMUX4_mic_PORT0_1);
 0A2A 10                push X
 0A2B 5000              mov A,0
 0A2D 7C0000            xcall _AMUX4_mic_InputSelect
 0A30 20                pop X
 0A31                   .dbline 234
 0A31           ; 
 0A31           ;       PGA_pre_SetGain(GF[GainIndx[0][0]][0]);
 0A31 62D000            mov REG[0xd0],>_GainIndx
 0A34 5100              mov A,[_GainIndx]
 0A36 62D000            mov REG[0xd0],>__r0
 0A39 5300              mov [__r1],A
 0A3B 550000            mov [__r0],0
 0A3E 6500              asl [__r1]
 0A40 6B00              rlc [__r0]
 0A42 060000            add [__r1],<_GF
 0A45 0E0000            adc [__r0],>_GF
 0A48 5100              mov A,[__r0]
 0A4A 60D4              mov REG[0xd4],A
 0A4C 3E00              mvi A,[__r1]
 0A4E 10                push X
 0A4F 7C0000            xcall _PGA_pre_SetGain
 0A52 20                pop X
 0A53                   .dbline 235
 0A53           ;       PGA_out_SetGain(GF[GainIndx[0][1]][0]);
 0A53 62D000            mov REG[0xd0],>_GainIndx
 0A56 5101              mov A,[_GainIndx+1]
 0A58 62D000            mov REG[0xd0],>__r0
 0A5B 5300              mov [__r1],A
 0A5D 550000            mov [__r0],0
 0A60 6500              asl [__r1]
 0A62 6B00              rlc [__r0]
 0A64 060000            add [__r1],<_GF
 0A67 0E0000            adc [__r0],>_GF
 0A6A 5100              mov A,[__r0]
 0A6C 60D4              mov REG[0xd4],A
 0A6E 3E00              mvi A,[__r1]
 0A70 10                push X
 0A71 7C0000            xcall _PGA_out_SetGain
 0A74                   .dbline 237
 0A74           ;       
 0A74           ;     HB_Tmr_EnableInt();  
 0A74 7C0000            xcall _HB_Tmr_EnableInt
 0A77                   .dbline 238
 0A77           ;       HB_Tmr_Start();         
 0A77 7C0000            xcall _HB_Tmr_Start
 0A7A 20                pop X
 0A7B                   .dbline -2
 0A7B           L76:
 0A7B                   .dbline 0 ; func end
 0A7B 7F                ret
 0A7C                   .dbend
 0A7C                   .dbfunc e HB_Tmr_ISR_C _HB_Tmr_ISR_C fV
 0A7C           _HB_Tmr_ISR_C::
 0A7C                   .dbline -1
 0A7C 71C0              or F,-64
 0A7E 08                push A
 0A7F 5DD0              mov A,REG[0xd0]
 0A81 08                push A
 0A82                   .dbline 242
 0A82           ; }
 0A82           ;       
 0A82           ; void HB_Tmr_ISR_C(void)
 0A82           ; {// Base clock for all of the timings in the program
 0A82                   .dbline 243
 0A82           ;       TmrFlag = 1;
 0A82 62D000            mov REG[0xd0],>_TmrFlag
 0A85 550001            mov [_TmrFlag],1
 0A88                   .dbline 244
 0A88           ;       Tmr1++;
 0A88 62D000            mov REG[0xd0],>_Tmr1
 0A8B 7601              inc [_Tmr1+1]
 0A8D 0E0000            adc [_Tmr1],0
 0A90                   .dbline -2
 0A90           L78:
 0A90 18                pop A
 0A91 60D0              mov REG[208],A
 0A93 18                pop A
 0A94                   .dbline 0 ; func end
 0A94 7E                reti
 0A95                   .dbend
 0A95                   .dbfunc e DelayMs _DelayMs fV
 0A95           ;              i -> X+0
 0A95           ;             Ms -> X-5
 0A95           _DelayMs::
 0A95                   .dbline -1
 0A95 10                push X
 0A96 4F                mov X,SP
 0A97 3802              add SP,2
 0A99                   .dbline 248
 0A99           ; }
 0A99           ; 
 0A99           ; void DelayMs(int Ms)
 0A99           ; {
 0A99                   .dbline 250
 0A99           ;       int i;
 0A99           ;       for (i=0; i<Ms; i++)
 0A99 560100            mov [X+1],0
 0A9C 560000            mov [X+0],0
 0A9F 800D              xjmp L83
 0AA1           L80:
 0AA1                   .dbline 251
 0AA1           ;       {
 0AA1                   .dbline 252
 0AA1           ;               Delay50uTimes(20);
 0AA1 10                push X
 0AA2 5014              mov A,20
 0AA4 7C0000            xcall _Delay50uTimes
 0AA7 20                pop X
 0AA8                   .dbline 253
 0AA8           ;       }
 0AA8           L81:
 0AA8                   .dbline 250
 0AA8 7701              inc [X+1]
 0AAA 0F0000            adc [X+0],0
 0AAD           L83:
 0AAD                   .dbline 250
 0AAD 5201              mov A,[X+1]
 0AAF 13FC              sub A,[X-4]
 0AB1 52FB              mov A,[X-5]
 0AB3 3180              xor A,-128
 0AB5 62D000            mov REG[0xd0],>__r0
 0AB8 5300              mov [__rX],A
 0ABA 5200              mov A,[X+0]
 0ABC 3180              xor A,-128
 0ABE 1A00              sbb A,[__rX]
 0AC0 CFE0              jc L80
 0AC2           X21:
 0AC2                   .dbline -2
 0AC2           L79:
 0AC2 38FE              add SP,-2
 0AC4 20                pop X
 0AC5                   .dbline 0 ; func end
 0AC5 7F                ret
 0AC6                   .dbsym l i 0 I
 0AC6                   .dbsym l Ms -5 I
 0AC6                   .dbend
 0AC6                   .dbfunc e LedTest _LedTest fV
 0AC6           ;              i -> X+0
 0AC6           _LedTest::
 0AC6                   .dbline -1
 0AC6 10                push X
 0AC7 4F                mov X,SP
 0AC8 3802              add SP,2
 0ACA                   .dbline 257
 0ACA           ; }
 0ACA           ; 
 0ACA           ; void LedTest(void)
 0ACA           ; {
 0ACA                   .dbline 259
 0ACA           ;       int i;
 0ACA           ;       LED_1_Off();
 0ACA 10                push X
 0ACB 7C0000            xcall _LED_1_Off
 0ACE                   .dbline 260
 0ACE           ;       LED_2_Off();
 0ACE 7C0000            xcall _LED_2_Off
 0AD1                   .dbline 261
 0AD1           ;       LED_3_Off();
 0AD1 7C0000            xcall _LED_3_Off
 0AD4 20                pop X
 0AD5                   .dbline 263
 0AD5           ;       
 0AD5           ;       for (i=0; i<3; i++)
 0AD5 560100            mov [X+1],0
 0AD8 560000            mov [X+0],0
 0ADB           L85:
 0ADB                   .dbline 264
 0ADB           ;       {
 0ADB                   .dbline 265
 0ADB           ;               LED_1_On();
 0ADB 10                push X
 0ADC 7C0000            xcall _LED_1_On
 0ADF 20                pop X
 0AE0                   .dbline 266
 0AE0           ;               DelayMs(500);
 0AE0 5001              mov A,1
 0AE2 08                push A
 0AE3 50F4              mov A,-12
 0AE5 08                push A
 0AE6 9FAD              xcall _DelayMs
 0AE8 38FE              add SP,-2
 0AEA                   .dbline 267
 0AEA           ;               LED_1_Off();
 0AEA 10                push X
 0AEB 7C0000            xcall _LED_1_Off
 0AEE                   .dbline 268
 0AEE           ;               LED_2_On();
 0AEE 7C0000            xcall _LED_2_On
 0AF1 20                pop X
 0AF2                   .dbline 269
 0AF2           ;               DelayMs(500);
 0AF2 5001              mov A,1
 0AF4 08                push A
 0AF5 50F4              mov A,-12
 0AF7 08                push A
 0AF8 9F9B              xcall _DelayMs
 0AFA 38FE              add SP,-2
 0AFC                   .dbline 270
 0AFC           ;               LED_2_Off();
 0AFC 10                push X
 0AFD 7C0000            xcall _LED_2_Off
 0B00                   .dbline 271
 0B00           ;               LED_3_On();
 0B00 7C0000            xcall _LED_3_On
 0B03 20                pop X
 0B04                   .dbline 272
 0B04           ;               DelayMs(500);
 0B04 5001              mov A,1
 0B06 08                push A
 0B07 50F4              mov A,-12
 0B09 08                push A
 0B0A 9F89              xcall _DelayMs
 0B0C 38FE              add SP,-2
 0B0E                   .dbline 273
 0B0E           ;               LED_3_Off();
 0B0E 10                push X
 0B0F 7C0000            xcall _LED_3_Off
 0B12 20                pop X
 0B13                   .dbline 274
 0B13           ;       }
 0B13           L86:
 0B13                   .dbline 263
 0B13 7701              inc [X+1]
 0B15 0F0000            adc [X+0],0
 0B18                   .dbline 263
 0B18 5201              mov A,[X+1]
 0B1A 1103              sub A,3
 0B1C 5200              mov A,[X+0]
 0B1E 3180              xor A,-128
 0B20 1980              sbb A,(0 ^ 0x80)
 0B22 CFB8              jc L85
 0B24           X22:
 0B24                   .dbline -2
 0B24           L84:
 0B24 38FE              add SP,-2
 0B26 20                pop X
 0B27                   .dbline 0 ; func end
 0B27 7F                ret
 0B28                   .dbsym l i 0 I
 0B28                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\main.c
 0000           _str::
 0000 00000000000000    .byte 0,0,0,0,0,0,0
 0007                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0007                   .dbsym e str _str A[7:7]c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _Tmr1::
 0000 0000              .byte 0,0
 0002                   .dbsym e Tmr1 _Tmr1 i
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _i::
 0000 0000              .byte 0,0
 0002                   .dbsym e i _i i
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _MesValueM::
 0000 000000000000      .byte 0,0,0,0,0,0
 0006                   .dbsym e MesValueM _MesValueM A[6:3]I
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _MesValue::
 0000 00000000000000000000      .word 0,0,0,0,0
 000A 0000              .byte 0,0
 000C                   .dbsym e MesValue _MesValue A[12:3:2]I
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _MesValueOut::
 0000 0000              .byte 0,0
 0002                   .dbsym e MesValueOut _MesValueOut I
                        .area data(ram, con, rel)
 0000                   .dbfile D:\PROGRA~1\PSOCPR~1\EXPLOR~1\EXPLOR~1\definitions.h
 0000           _PotValue::
 0000 0000              .byte 0,0
 0002                   .dbsym e PotValue _PotValue I
                        .area lit(rom, con, rel)
 0000           L75:
 0000 20202D2D2D2D2D203D2000    .byte 32,32,45,45,45,45,45,32,61,32,0
 000B           L66:
 000B 20204761696E204F75743A2031203D20  .byte 32,32,'G,'a,'i,'n,32,'O,'u,'t,58,32,49,32,61,32
 001B 00                .byte 0
 001C           L60:
 001C 20204761696E205072653A2031203D20  .byte 32,32,'G,'a,'i,'n,32,'P,'r,'e,58,32,49,32,61,32
 002C 00                .byte 0
 002D           L58:
 002D 20202D202033203D2000      .byte 32,32,45,32,32,51,32,61,32,0
 0037           L56:
 0037 20202D202032203D2000      .byte 32,32,45,32,32,50,32,61,32,0
 0041           L55:
 0041 202020204D65732056616C75653A2031  .byte 32,32,32,32,'M,'e,'s,32,'V,'a,'l,'u,'e,58,32,49
 0051 203D2000          .byte 32,61,32,0
 0055           L54:
 0055 0A0D506F742056616C7565203D2000    .byte 10,13,'P,'o,'t,32,'V,'a,'l,'u,'e,32,61,32,0
