 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _MesValueSum::
 0000 00000000          .word 0,0
 0004 00000000          .word 0,0
 0008 00000000          .word 0,0
 000C 00000000          .word 0,0
 0010 00000000          .word 0,0
 0014 00000000          .word 0,0
 0018                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0018                   .dbsym e MesValueSum _MesValueSum A[24:3:2]L
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0000           _TmrFlag::
 0000 00                .byte 0
 0001                   .dbsym e TmrFlag _TmrFlag c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0000           _GF::
 0000 F801              .byte 248,1
 0002 7802              .byte 'x,2
 0004 3804              .byte 56,4
 0006 1808              .byte 24,8
 0008 0810              .byte 8,16
 000A                   .dbsym e GF _GF A[10:5:2]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0000           _GainIndx::
 0000 0303              .byte 3,3
 0002 0303              .byte 3,3
 0004 0303              .byte 3,3
 0006                   .dbsym e GainIndx _GainIndx A[6:3:2]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
                        .area text(rom, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;        PortNum -> X+1
 0000           ;       PortIndx -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3804              add SP,4
 0004                   .dbline 38
 0004           ; /* ////////////////////////////////////////////////////////////////////////////
 0004           ; ** Project:      ExplorerSound
 0004           ; ** Author:    Guido Ottaviani-->guido@guiott.com<--
 0004           ; ** Description: 
 0004           ; ** version 0.3   11-10-2010
 0004           ; **
 0004           ; ** Detailed descriptions are on file "Notes.txt" 
 0004           ; **
 0004           ; -------------------------------------------------------------------------------
 0004           ; Copyright 2010 Guido Ottaviani
 0004           ; guido@guiott.com
 0004           ; 
 0004           ;       ExplorerSound is free software: you can redistribute it and/or modify
 0004           ;     it under the terms of the GNU General Public License as published by
 0004           ;     the Free Software Foundation, either version 3 of the License, or
 0004           ;     (at your option) any later version.
 0004           ; 
 0004           ;     ExplorerSound is distributed in the hope that it will be useful,
 0004           ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
 0004           ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 0004           ;     GNU General Public License for more details.
 0004           ; 
 0004           ;     You should have received a copy of the GNU General Public License
 0004           ;     along with ExplorerSound.  If not, see <http://www.gnu.org/licenses/>.
 0004           ; -------------------------------------------------------------------------------      
 0004           ; /////////////////////////////////////////////////////////////////////////////*/
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include <stdlib.h>
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include "prototypes.h"
 0004           ; #include "definitions.h"
 0004           ; #include "delay.h"
 0004           ; 
 0004           ; #pragma interrupt_handler HB_Tmr_ISR_C // int handler for program clock
 0004           ; 
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 40
 0004           ;       BYTE PortNum[3];
 0004           ;       BYTE PortIndx = 0;
 0004 560000            mov [X+0],0
 0007                   .dbline 42
 0007           ;       
 0007           ;       BlocksInit();
 0007 96A8              xcall _BlocksInit
 0009                   .dbline 44
 0009           ;       
 0009           ;       M8C_EnableGInt ;               // Turn on interrupts 
 0009 7101                      or  F, 01h
 000B           
 000B                   .dbline 46
 000B           ;       
 000B           ;       LED_2_On();
 000B 10                push X
 000C 7C0000            xcall _LED_2_On
 000F 20                pop X
 0010                   .dbline 47
 0010           ;       PortNum[0] = AMUX4_mic_PORT0_1;
 0010 560100            mov [X+1],0
 0013                   .dbline 48
 0013           ;       PortNum[1] = AMUX4_mic_PORT0_3;
 0013 560201            mov [X+2],1
 0016                   .dbline 49
 0016           ;       PortNum[2] = AMUX4_mic_PORT0_7;
 0016 560303            mov [X+3],3
 0019                   .dbline 51
 0019           ;       
 0019           ;       LedTest();
 0019 977F              xcall _LedTest
 001B 835B              xjmp L5
 001D           L4:
 001D                   .dbline 55
 001D           ;       
 001D           ;       // Main loop=============================================================
 001D           ;       while (1)
 001D           ;       {
 001D                   .dbline 56
 001D           ;               if(ADCINCVR_pot_fIsDataAvailable() != 0)// Wait for data to be ready
 001D 10                push X
 001E 7C0000            xcall _ADCINCVR_pot_fIsDataAvailable
 0021 62D000            mov REG[0xd0],>__r0
 0024 20                pop X
 0025 3900              cmp A,0
 0027 A01E              jz L7
 0029                   .dbline 57
 0029           ;         {   
 0029                   .dbline 59
 0029           ;                       // Get Data, Clear data ready flag, in the range 0-1800
 0029           ;                       PotValue = ADCINCVR_pot_iGetDataClearFlag()+900;
 0029 10                push X
 002A 7C0000            xcall _ADCINCVR_pot_iGetDataClearFlag
 002D 62D000            mov REG[0xd0],>__r0
 0030 5A00              mov [__r0],X
 0032 20                pop X
 0033 0184              add A,-124
 0035 62D000            mov REG[0xd0],>_PotValue
 0038 5301              mov [_PotValue+1],A
 003A 62D000            mov REG[0xd0],>__r0
 003D 5100              mov A,[__r0]
 003F 0903              adc A,3
 0041 62D000            mov REG[0xd0],>_PotValue
 0044 5300              mov [_PotValue],A
 0046                   .dbline 60
 0046           ;               }
 0046           L7:
 0046                   .dbline 62
 0046           ;         
 0046           ;               if(ADCINCVR_mes_fIsDataAvailable() != 0)// Wait for data to be ready
 0046 10                push X
 0047 7C0000            xcall _ADCINCVR_mes_fIsDataAvailable
 004A 62D000            mov REG[0xd0],>__r0
 004D 20                pop X
 004E 3900              cmp A,0
 0050 A1CB              jz L9
 0052                   .dbline 63
 0052           ;         {   
 0052                   .dbline 66
 0052           ;                       // Get Data, Clear data ready flag
 0052           ;                       
 0052           ;                       MesValueOut = ADCINCVR_mes_iGetDataClearFlag(); // [1]
 0052 10                push X
 0053 7C0000            xcall _ADCINCVR_mes_iGetDataClearFlag
 0056 62D000            mov REG[0xd0],>__r0
 0059 5A00              mov [__r0],X
 005B 20                pop X
 005C 08                push A
 005D 5100              mov A,[__r0]
 005F 62D000            mov REG[0xd0],>_MesValueOut
 0062 5300              mov [_MesValueOut],A
 0064 18                pop A
 0065 5301              mov [_MesValueOut+1],A
 0067                   .dbline 67
 0067           ;                       MesValue[PortIndx][1] = MesValueOut >> GainIndx[PortIndx][1];                    // [2][4]
 0067 62D000            mov REG[0xd0],>__r0
 006A 5200              mov A,[X+0]
 006C 5300              mov [__r1],A
 006E 550000            mov [__r0],0
 0071 6500              asl [__r1]
 0073 6B00              rlc [__r0]
 0075 060001            add [__r1],<_GainIndx+1
 0078 0E0001            adc [__r0],>_GainIndx+1
 007B 5100              mov A,[__r0]
 007D 60D4              mov REG[0xd4],A
 007F 3E00              mvi A,[__r1]
 0081 5300              mov [__r1],A
 0083 62D000            mov REG[0xd0],>_MesValueOut
 0086 5101              mov A,[_MesValueOut+1]
 0088 08                push A
 0089 5100              mov A,[_MesValueOut]
 008B 62D000            mov REG[0xd0],>__r0
 008E 5300              mov [__r2],A
 0090 18                pop A
 0091 5300              mov [__r3],A
 0093 5100              mov A,[__r1]
 0095 210F              and A,15
 0097 A00B              jz X1
 0099           X2:
 0099 62D000            mov REG[0xd0],>__r0
 009C 6800              asr [__r2]
 009E 6E00              rrc [__r3]
 00A0 78                dec A
 00A1 BFF7              jnz X2
 00A3           X1:
 00A3 62D000            mov REG[0xd0],>__r0
 00A6 5200              mov A,[X+0]
 00A8 5300              mov [__r1],A
 00AA 550000            mov [__r0],0
 00AD 6500              asl [__r1]
 00AF 6B00              rlc [__r0]
 00B1 6500              asl [__r1]
 00B3 6B00              rlc [__r0]
 00B5 060002            add [__r1],<_MesValue+2
 00B8 0E0002            adc [__r0],>_MesValue+2
 00BB 5100              mov A,[__r0]
 00BD 60D5              mov REG[0xd5],A
 00BF 5100              mov A,[__r2]
 00C1 3F00              mvi [__r1],A
 00C3 5100              mov A,[__r3]
 00C5 3F00              mvi [__r1],A
 00C7                   .dbline 68
 00C7           ;                       MesValue[PortIndx][0] = MesValue[PortIndx][1] >> GainIndx[PortIndx][0]; // [3][4]                       
 00C7 5200              mov A,[X+0]
 00C9 5300              mov [__r1],A
 00CB 550000            mov [__r0],0
 00CE 6500              asl [__r1]
 00D0 6B00              rlc [__r0]
 00D2 6500              asl [__r1]
 00D4 6B00              rlc [__r0]
 00D6 5200              mov A,[X+0]
 00D8 5300              mov [__r3],A
 00DA 550000            mov [__r2],0
 00DD 6500              asl [__r3]
 00DF 6B00              rlc [__r2]
 00E1 060000            add [__r3],<_GainIndx
 00E4 0E0000            adc [__r2],>_GainIndx
 00E7 5100              mov A,[__r2]
 00E9 60D4              mov REG[0xd4],A
 00EB 3E00              mvi A,[__r3]
 00ED 5300              mov [__r3],A
 00EF 5100              mov A,[__r1]
 00F1 0102              add A,<_MesValue+2
 00F3 5300              mov [__r5],A
 00F5 5100              mov A,[__r0]
 00F7 0902              adc A,>_MesValue+2
 00F9 60D4              mov REG[0xd4],A
 00FB 3E00              mvi A,[__r5]
 00FD 5300              mov [__r4],A
 00FF 3E00              mvi A,[__r5]
 0101 5300              mov [__r5],A
 0103 5100              mov A,[__r3]
 0105 210F              and A,15
 0107 A00B              jz X3
 0109           X4:
 0109 62D000            mov REG[0xd0],>__r0
 010C 6800              asr [__r4]
 010E 6E00              rrc [__r5]
 0110 78                dec A
 0111 BFF7              jnz X4
 0113           X3:
 0113 62D000            mov REG[0xd0],>__r0
 0116 060000            add [__r1],<_MesValue
 0119 0E0000            adc [__r0],>_MesValue
 011C 5100              mov A,[__r0]
 011E 60D5              mov REG[0xd5],A
 0120 5100              mov A,[__r4]
 0122 3F00              mvi [__r1],A
 0124 5100              mov A,[__r5]
 0126 3F00              mvi [__r1],A
 0128                   .dbline 74
 0128           ;                       
 0128           ;                                               // ??????????????????????????????????? fare AGC
 0128           ;                                               
 0128           ;                                               // impostare guadagno GainIndx dopo AGC e PGA amplification
 0128           ;                                               
 0128           ;                       MesValueSum[PortIndx][0]+= MesValue[PortIndx][0]; // Cumulate readings
 0128 5200              mov A,[X+0]
 012A 5300              mov [__r1],A
 012C 550000            mov [__r0],0
 012F 6500              asl [__r1]
 0131 6B00              rlc [__r0]
 0133 6500              asl [__r1]
 0135 6B00              rlc [__r0]
 0137 6500              asl [__r1]
 0139 6B00              rlc [__r0]
 013B 060000            add [__r1],<_MesValueSum
 013E 0E0000            adc [__r0],>_MesValueSum
 0141 5200              mov A,[X+0]
 0143 5300              mov [__r3],A
 0145 550000            mov [__r2],0
 0148 6500              asl [__r3]
 014A 6B00              rlc [__r2]
 014C 6500              asl [__r3]
 014E 6B00              rlc [__r2]
 0150 060000            add [__r3],<_MesValue
 0153 0E0000            adc [__r2],>_MesValue
 0156 5100              mov A,[__r2]
 0158 60D4              mov REG[0xd4],A
 015A 3E00              mvi A,[__r3]
 015C 5300              mov [__r2],A
 015E 3E00              mvi A,[__r3]
 0160 5300              mov [__r7],A
 0162 5100              mov A,[__r2]
 0164 5300              mov [__r6],A
 0166 470080            tst [__r6],-128
 0169 A009              jz X5
 016B 5500FF            mov [__r5],-1
 016E 5500FF            mov [__r4],-1
 0171 800A              jmp X6
 0173           X5:
 0173 62D000            mov REG[0xd0],>__r0
 0176 550000            mov [__r5],0
 0179 550000            mov [__r4],0
 017C           X6:
 017C 62D000            mov REG[0xd0],>__r0
 017F 5100              mov A,[__r0]
 0181 60D4              mov REG[0xd4],A
 0183 3E00              mvi A,[__r1]
 0185 5300              mov [__r8],A
 0187 3E00              mvi A,[__r1]
 0189 5300              mov [__r9],A
 018B 3E00              mvi A,[__r1]
 018D 5300              mov [__r10],A
 018F 3E00              mvi A,[__r1]
 0191 160004            sub [__r1],4
 0194 0200              add A,[__r7]
 0196 5300              mov [__r7],A
 0198 5100              mov A,[__r10]
 019A 0A00              adc A,[__r6]
 019C 5300              mov [__r6],A
 019E 5100              mov A,[__r9]
 01A0 0A00              adc A,[__r5]
 01A2 5300              mov [__r5],A
 01A4 5100              mov A,[__r8]
 01A6 0A00              adc A,[__r4]
 01A8 5300              mov [__r4],A
 01AA 5100              mov A,[__r0]
 01AC 60D5              mov REG[0xd5],A
 01AE 5100              mov A,[__r4]
 01B0 3F00              mvi [__r1],A
 01B2 5100              mov A,[__r5]
 01B4 3F00              mvi [__r1],A
 01B6 5100              mov A,[__r6]
 01B8 3F00              mvi [__r1],A
 01BA 5100              mov A,[__r7]
 01BC 3F00              mvi [__r1],A
 01BE                   .dbline 75
 01BE           ;                       MesValueSum[PortIndx][1]++; // count how many readings occurred
 01BE 5200              mov A,[X+0]
 01C0 5300              mov [__r1],A
 01C2 550000            mov [__r0],0
 01C5 6500              asl [__r1]
 01C7 6B00              rlc [__r0]
 01C9 6500              asl [__r1]
 01CB 6B00              rlc [__r0]
 01CD 6500              asl [__r1]
 01CF 6B00              rlc [__r0]
 01D1 060004            add [__r1],<_MesValueSum+4
 01D4 0E0004            adc [__r0],>_MesValueSum+4
 01D7 5100              mov A,[__r0]
 01D9 60D4              mov REG[0xd4],A
 01DB 3E00              mvi A,[__r1]
 01DD 5300              mov [__r4],A
 01DF 3E00              mvi A,[__r1]
 01E1 5300              mov [__r5],A
 01E3 3E00              mvi A,[__r1]
 01E5 5300              mov [__r6],A
 01E7 3E00              mvi A,[__r1]
 01E9 160004            sub [__r1],4
 01EC 5300              mov [__r7],A
 01EE 060001            add [__r7],1
 01F1 0E0000            adc [__r6],0
 01F4 0E0000            adc [__r5],0
 01F7 0E0000            adc [__r4],0
 01FA 5100              mov A,[__r0]
 01FC 60D5              mov REG[0xd5],A
 01FE 5100              mov A,[__r4]
 0200 3F00              mvi [__r1],A
 0202 5100              mov A,[__r5]
 0204 3F00              mvi [__r1],A
 0206 5100              mov A,[__r6]
 0208 3F00              mvi [__r1],A
 020A 5100              mov A,[__r7]
 020C 3F00              mvi [__r1],A
 020E                   .dbline 77
 020E           ;                                                                                                                 
 020E           ;                       PortIndx++; // next mux port
 020E 7700              inc [X+0]
 0210                   .dbline 78
 0210           ;                       if (PortIndx <3)
 0210 3D0003            cmp [X+0],3
 0213 D008              jnc L15
 0215           X7:
 0215                   .dbline 79
 0215           ;                       {
 0215                   .dbline 81
 0215           ;                       //      AMUX4_mic_InputSelect(PortIndx); ???????????????????????????????????? togliere commento per ripristinare ciclo input
 0215           ;                               ADCINCVR_mes_GetSamples(1); // Start ADC to read once more
 0215 10                push X
 0216 5001              mov A,1
 0218 7C0000            xcall _ADCINCVR_mes_GetSamples
 021B 20                pop X
 021C                   .dbline 82
 021C           ;                       }
 021C           L15:
 021C                   .dbline 83
 021C           ;               }
 021C           L9:
 021C                   .dbline 85
 021C           ;               
 021C           ;               if (TmrFlag) // every 10ms
 021C 62D000            mov REG[0xd0],>_TmrFlag
 021F 3C0000            cmp [_TmrFlag],0
 0222 A015              jz L17
 0224                   .dbline 86
 0224           ;               {
 0224                   .dbline 87
 0224           ;                       TmrFlag = 0;
 0224 550000            mov [_TmrFlag],0
 0227                   .dbline 88
 0227           ;                       PortIndx= 0;
 0227 560000            mov [X+0],0
 022A                   .dbline 91
 022A           ;                               
 022A           ;               //      AMUX4_mic_InputSelect(PortIndx); ??????????????????????????????????????????? togliere commento per ripristinare ciclo input
 022A           ;                       ADCINCVR_mes_GetSamples(1);    // Start ADC to read 1 sample
 022A 10                push X
 022B 5001              mov A,1
 022D 7C0000            xcall _ADCINCVR_mes_GetSamples
 0230 20                pop X
 0231                   .dbline 92
 0231           ;                       ADCINCVR_pot_GetSamples(1);    // Start ADC to read 1 sample 
 0231 10                push X
 0232 5001              mov A,1
 0234 7C0000            xcall _ADCINCVR_pot_GetSamples
 0237 20                pop X
 0238                   .dbline 93
 0238           ;               }
 0238           L17:
 0238                   .dbline 95
 0238           ;               
 0238           ;               if (Tmr1) // every 100ms
 0238 62D000            mov REG[0xd0],>_Tmr1
 023B 3C0000            cmp [_Tmr1],0
 023E B006              jnz X8
 0240 3C0100            cmp [_Tmr1+1],0
 0243 A133              jz L19
 0245           X8:
 0245                   .dbline 96
 0245           ;               {
 0245                   .dbline 97
 0245           ;                       Tmr1 = 0;
 0245 62D000            mov REG[0xd0],>_Tmr1
 0248 550100            mov [_Tmr1+1],0
 024B 550000            mov [_Tmr1],0
 024E                   .dbline 99
 024E           ;                       // compute average value
 024E           ;                       for (i=0; i<3; i++)
 024E 62D000            mov REG[0xd0],>_i
 0251 550100            mov [_i+1],0
 0254 550000            mov [_i],0
 0257 810E              xjmp L24
 0259           L21:
 0259                   .dbline 100
 0259           ;                       {
 0259                   .dbline 101
 0259           ;                               MesValueM[i]=MesValueSum[i][0]/MesValueSum[i][1];
 0259 62D000            mov REG[0xd0],>_i
 025C 5101              mov A,[_i+1]
 025E 08                push A
 025F 5100              mov A,[_i]
 0261 62D000            mov REG[0xd0],>__r0
 0264 5300              mov [__r0],A
 0266 18                pop A
 0267 5300              mov [__r1],A
 0269 6500              asl [__r1]
 026B 6B00              rlc [__r0]
 026D 6500              asl [__r1]
 026F 6B00              rlc [__r0]
 0271 6500              asl [__r1]
 0273 6B00              rlc [__r0]
 0275 5100              mov A,[__r1]
 0277 0104              add A,<_MesValueSum+4
 0279 5300              mov [__r3],A
 027B 5100              mov A,[__r0]
 027D 0904              adc A,>_MesValueSum+4
 027F 60D4              mov REG[0xd4],A
 0281 3E00              mvi A,[__r3]
 0283 5300              mov [__r4],A
 0285 3E00              mvi A,[__r3]
 0287 5300              mov [__r5],A
 0289 3E00              mvi A,[__r3]
 028B 5300              mov [__r6],A
 028D 3E00              mvi A,[__r3]
 028F 5300              mov [__r7],A
 0291 060000            add [__r1],<_MesValueSum
 0294 0E0000            adc [__r0],>_MesValueSum
 0297 5100              mov A,[__r0]
 0299 60D4              mov REG[0xd4],A
 029B 3E00              mvi A,[__r1]
 029D 5300              mov [__r8],A
 029F 3E00              mvi A,[__r1]
 02A1 5300              mov [__r9],A
 02A3 3E00              mvi A,[__r1]
 02A5 5300              mov [__r10],A
 02A7 3E00              mvi A,[__r1]
 02A9 5300              mov [__r11],A
 02AB 5100              mov A,[__r4]
 02AD 08                push A
 02AE 5100              mov A,[__r5]
 02B0 08                push A
 02B1 5100              mov A,[__r6]
 02B3 08                push A
 02B4 5100              mov A,[__r7]
 02B6 08                push A
 02B7 5100              mov A,[__r8]
 02B9 08                push A
 02BA 5100              mov A,[__r9]
 02BC 08                push A
 02BD 5100              mov A,[__r10]
 02BF 08                push A
 02C0 5100              mov A,[__r11]
 02C2 08                push A
 02C3 7C0000            xcall __divmod_32X32_32
 02C6 18                pop A
 02C7 5300              mov [__r3],A
 02C9 18                pop A
 02CA 5300              mov [__r2],A
 02CC 18                pop A
 02CD 18                pop A
 02CE 38FC              add SP,-4
 02D0 5100              mov A,[__r3]
 02D2 5300              mov [__r1],A
 02D4 5100              mov A,[__r2]
 02D6 5300              mov [__r0],A
 02D8 62D000            mov REG[0xd0],>_i
 02DB 5101              mov A,[_i+1]
 02DD 08                push A
 02DE 5100              mov A,[_i]
 02E0 62D000            mov REG[0xd0],>__r0
 02E3 5300              mov [__r2],A
 02E5 18                pop A
 02E6 5300              mov [__r3],A
 02E8 6500              asl [__r3]
 02EA 6B00              rlc [__r2]
 02EC 060000            add [__r3],<_MesValueM
 02EF 0E0000            adc [__r2],>_MesValueM
 02F2 5100              mov A,[__r2]
 02F4 60D5              mov REG[0xd5],A
 02F6 5100              mov A,[__r0]
 02F8 3F00              mvi [__r3],A
 02FA 5100              mov A,[__r1]
 02FC 3F00              mvi [__r3],A
 02FE                   .dbline 102
 02FE           ;                               MesValueSum[i][0]=0;
 02FE 62D000            mov REG[0xd0],>_i
 0301 5101              mov A,[_i+1]
 0303 08                push A
 0304 5100              mov A,[_i]
 0306 62D000            mov REG[0xd0],>__r0
 0309 5300              mov [__r0],A
 030B 18                pop A
 030C 5300              mov [__r1],A
 030E 6500              asl [__r1]
 0310 6B00              rlc [__r0]
 0312 6500              asl [__r1]
 0314 6B00              rlc [__r0]
 0316 6500              asl [__r1]
 0318 6B00              rlc [__r0]
 031A 060000            add [__r1],<_MesValueSum
 031D 0E0000            adc [__r0],>_MesValueSum
 0320 5100              mov A,[__r0]
 0322 60D5              mov REG[0xd5],A
 0324 5000              mov A,0
 0326 3F00              mvi [__r1],A
 0328 3F00              mvi [__r1],A
 032A 3F00              mvi [__r1],A
 032C 3F00              mvi [__r1],A
 032E                   .dbline 103
 032E           ;                               MesValueSum[i][1]=0;
 032E 62D000            mov REG[0xd0],>_i
 0331 5101              mov A,[_i+1]
 0333 08                push A
 0334 5100              mov A,[_i]
 0336 62D000            mov REG[0xd0],>__r0
 0339 5300              mov [__r0],A
 033B 18                pop A
 033C 5300              mov [__r1],A
 033E 6500              asl [__r1]
 0340 6B00              rlc [__r0]
 0342 6500              asl [__r1]
 0344 6B00              rlc [__r0]
 0346 6500              asl [__r1]
 0348 6B00              rlc [__r0]
 034A 060004            add [__r1],<_MesValueSum+4
 034D 0E0004            adc [__r0],>_MesValueSum+4
 0350 5100              mov A,[__r0]
 0352 60D5              mov REG[0xd5],A
 0354 5000              mov A,0
 0356 3F00              mvi [__r1],A
 0358 3F00              mvi [__r1],A
 035A 3F00              mvi [__r1],A
 035C 3F00              mvi [__r1],A
 035E                   .dbline 104
 035E           ;                       }
 035E           L22:
 035E                   .dbline 99
 035E 62D000            mov REG[0xd0],>_i
 0361 7601              inc [_i+1]
 0363 0E0000            adc [_i],0
 0366           L24:
 0366                   .dbline 99
 0366 62D000            mov REG[0xd0],>_i
 0369 5101              mov A,[_i+1]
 036B 1103              sub A,3
 036D 5100              mov A,[_i]
 036F 1900              sbb A,0
 0371 CEE7              jc L21
 0373           X9:
 0373                   .dbline 105
 0373           ;                       DigitalOut();
 0373 9009              xcall _DigitalOut
 0375                   .dbline 106
 0375           ;                       UartTxValues();
 0375 909D              xcall _UartTxValues
 0377                   .dbline 107
 0377           ;               }
 0377           L19:
 0377                   .dbline 108
 0377           ;       }// ========================================================== Main loop 
 0377           L5:
 0377                   .dbline 54
 0377 8CA5              xjmp L4
 0379           X0:
 0379                   .dbline -2
 0379           L1:
 0379 38FC              add SP,-4
 037B 20                pop X
 037C                   .dbline 0 ; func end
 037C 8FFF              jmp .
 037E                   .dbsym l PortNum 1 A[3:3]c
 037E                   .dbsym l PortIndx 0 c
 037E                   .dbend
 037E                   .dbfunc e DigitalOut _DigitalOut fV
 037E           _DigitalOut::
 037E                   .dbline -1
 037E                   .dbline 114
 037E           ; }
 037E           ; 
 037E           ; // Functions ***************************************************************
 037E           ; 
 037E           ; void DigitalOut(void)
 037E           ; {// Controls the outputs according to pot setting point
 037E                   .dbline 115
 037E           ;       DIGITAL_OUT_Off();
 037E 10                push X
 037F 7C0000            xcall _DIGITAL_OUT_Off
 0382 20                pop X
 0383                   .dbline 116
 0383           ;       if (MesValueM[0]>PotValue)
 0383 62D000            mov REG[0xd0],>_PotValue
 0386 5101              mov A,[_PotValue+1]
 0388 62D000            mov REG[0xd0],>_MesValueM
 038B 1201              sub A,[_MesValueM+1]
 038D 5100              mov A,[_MesValueM]
 038F 3180              xor A,-128
 0391 62D000            mov REG[0xd0],>__r0
 0394 5300              mov [__rX],A
 0396 62D000            mov REG[0xd0],>_PotValue
 0399 5100              mov A,[_PotValue]
 039B 3180              xor A,-128
 039D 62D000            mov REG[0xd0],>__r0
 03A0 1A00              sbb A,[__rX]
 03A2 D00B              jnc L28
 03A4           X10:
 03A4                   .dbline 117
 03A4           ;       {
 03A4                   .dbline 118
 03A4           ;               DIGITAL_OUT_On();
 03A4 10                push X
 03A5 7C0000            xcall _DIGITAL_OUT_On
 03A8                   .dbline 119
 03A8           ;               LED_1_On();
 03A8 7C0000            xcall _LED_1_On
 03AB 20                pop X
 03AC                   .dbline 120
 03AC           ;       }
 03AC 8006              xjmp L29
 03AE           L28:
 03AE                   .dbline 122
 03AE           ;       else
 03AE           ;       {
 03AE                   .dbline 123
 03AE           ;               LED_1_Off();
 03AE 10                push X
 03AF 7C0000            xcall _LED_1_Off
 03B2 20                pop X
 03B3                   .dbline 124
 03B3           ;       }
 03B3           L29:
 03B3                   .dbline 126
 03B3           ;               
 03B3           ;       if (MesValueM[1]>PotValue)
 03B3 62D000            mov REG[0xd0],>_PotValue
 03B6 5101              mov A,[_PotValue+1]
 03B8 62D000            mov REG[0xd0],>_MesValueM
 03BB 1203              sub A,[_MesValueM+2+1]
 03BD 5102              mov A,[_MesValueM+2]
 03BF 3180              xor A,-128
 03C1 62D000            mov REG[0xd0],>__r0
 03C4 5300              mov [__rX],A
 03C6 62D000            mov REG[0xd0],>_PotValue
 03C9 5100              mov A,[_PotValue]
 03CB 3180              xor A,-128
 03CD 62D000            mov REG[0xd0],>__r0
 03D0 1A00              sbb A,[__rX]
 03D2 D00B              jnc L30
 03D4           X11:
 03D4                   .dbline 127
 03D4           ;       {
 03D4                   .dbline 128
 03D4           ;               DIGITAL_OUT_On();
 03D4 10                push X
 03D5 7C0000            xcall _DIGITAL_OUT_On
 03D8                   .dbline 129
 03D8           ;               LED_2_On();
 03D8 7C0000            xcall _LED_2_On
 03DB 20                pop X
 03DC                   .dbline 130
 03DC           ;       }
 03DC 8006              xjmp L31
 03DE           L30:
 03DE                   .dbline 132
 03DE           ;       else
 03DE           ;       {
 03DE                   .dbline 133
 03DE           ;               LED_2_Off();
 03DE 10                push X
 03DF 7C0000            xcall _LED_2_Off
 03E2 20                pop X
 03E3                   .dbline 134
 03E3           ;       }
 03E3           L31:
 03E3                   .dbline 136
 03E3           ;       
 03E3           ;       if (MesValueM[2]>PotValue)
 03E3 62D000            mov REG[0xd0],>_PotValue
 03E6 5101              mov A,[_PotValue+1]
 03E8 62D000            mov REG[0xd0],>_MesValueM
 03EB 1205              sub A,[_MesValueM+4+1]
 03ED 5104              mov A,[_MesValueM+4]
 03EF 3180              xor A,-128
 03F1 62D000            mov REG[0xd0],>__r0
 03F4 5300              mov [__rX],A
 03F6 62D000            mov REG[0xd0],>_PotValue
 03F9 5100              mov A,[_PotValue]
 03FB 3180              xor A,-128
 03FD 62D000            mov REG[0xd0],>__r0
 0400 1A00              sbb A,[__rX]
 0402 D00B              jnc L33
 0404           X12:
 0404                   .dbline 137
 0404           ;       {
 0404                   .dbline 138
 0404           ;               DIGITAL_OUT_On();
 0404 10                push X
 0405 7C0000            xcall _DIGITAL_OUT_On
 0408                   .dbline 139
 0408           ;               LED_3_On();
 0408 7C0000            xcall _LED_3_On
 040B 20                pop X
 040C                   .dbline 140
 040C           ;       }
 040C 8006              xjmp L34
 040E           L33:
 040E                   .dbline 142
 040E           ;       else
 040E           ;       {
 040E                   .dbline 143
 040E           ;               LED_3_Off();
 040E 10                push X
 040F 7C0000            xcall _LED_3_Off
 0412 20                pop X
 0413                   .dbline 144
 0413           ;       }
 0413           L34:
 0413                   .dbline -2
 0413           L27:
 0413                   .dbline 0 ; func end
 0413 7F                ret
 0414                   .dbend
 0414                   .dbfunc e UartTxValues _UartTxValues fV
 0414           _UartTxValues::
 0414                   .dbline -1
 0414                   .dbline 148
 0414           ; }
 0414           ; 
 0414           ; void UartTxValues(void)
 0414           ; {/* Transmit via UART the analog values read from various inputs.
 0414                   .dbline 153
 0414           ;       Usefull for debugging purposes, it could be converted in a
 0414           ;       command string using the same protocol used for dsNav if
 0414           ;       needed to output sound level values via serial comm
 0414           ; */
 0414           ;       TX8_CPutString("\n\rPot Value = ");
 0414 10                push X
 0415 504A              mov A,>L37
 0417 08                push A
 0418 504A              mov A,<L37
 041A 5C                mov X,A
 041B 18                pop A
 041C 7C0000            xcall _TX8_CPutString
 041F 20                pop X
 0420                   .dbline 154
 0420           ;       itoa(str, PotValue,10);
 0420 5000              mov A,0
 0422 08                push A
 0423 500A              mov A,10
 0425 08                push A
 0426 62D000            mov REG[0xd0],>_PotValue
 0429 5100              mov A,[_PotValue]
 042B 08                push A
 042C 5101              mov A,[_PotValue+1]
 042E 08                push A
 042F 5000              mov A,>_str
 0431 08                push A
 0432 5000              mov A,<_str
 0434 08                push A
 0435 7C0000            xcall _itoa
 0438 38FA              add SP,-6
 043A                   .dbline 155
 043A           ;       TX8_PutString(str);
 043A 10                push X
 043B 5000              mov A,>_str
 043D 08                push A
 043E 5000              mov A,<_str
 0440 5C                mov X,A
 0441 18                pop A
 0442 7C0000            xcall _TX8_PutString
 0445 20                pop X
 0446                   .dbline 156
 0446           ;       TX8_CPutString("    Mes Value: 1 = ");
 0446 10                push X
 0447 5036              mov A,>L38
 0449 08                push A
 044A 5036              mov A,<L38
 044C 5C                mov X,A
 044D 18                pop A
 044E 7C0000            xcall _TX8_CPutString
 0451 20                pop X
 0452                   .dbline 157
 0452           ;       itoa(str, MesValueM[0],10);
 0452 5000              mov A,0
 0454 08                push A
 0455 500A              mov A,10
 0457 08                push A
 0458 62D000            mov REG[0xd0],>_MesValueM
 045B 5100              mov A,[_MesValueM]
 045D 08                push A
 045E 5101              mov A,[_MesValueM+1]
 0460 08                push A
 0461 5000              mov A,>_str
 0463 08                push A
 0464 5000              mov A,<_str
 0466 08                push A
 0467 7C0000            xcall _itoa
 046A 38FA              add SP,-6
 046C                   .dbline 158
 046C           ;       TX8_PutString(str);
 046C 10                push X
 046D 5000              mov A,>_str
 046F 08                push A
 0470 5000              mov A,<_str
 0472 5C                mov X,A
 0473 18                pop A
 0474 7C0000            xcall _TX8_PutString
 0477 20                pop X
 0478                   .dbline 159
 0478           ;       TX8_CPutString("  -  2 = ");
 0478 10                push X
 0479 502C              mov A,>L39
 047B 08                push A
 047C 502C              mov A,<L39
 047E 5C                mov X,A
 047F 18                pop A
 0480 7C0000            xcall _TX8_CPutString
 0483 20                pop X
 0484                   .dbline 160
 0484           ;       itoa(str, MesValueM[1],10);
 0484 5000              mov A,0
 0486 08                push A
 0487 500A              mov A,10
 0489 08                push A
 048A 62D000            mov REG[0xd0],>_MesValueM
 048D 5102              mov A,[_MesValueM+2]
 048F 08                push A
 0490 5103              mov A,[_MesValueM+2+1]
 0492 08                push A
 0493 5000              mov A,>_str
 0495 08                push A
 0496 5000              mov A,<_str
 0498 08                push A
 0499 7C0000            xcall _itoa
 049C 38FA              add SP,-6
 049E                   .dbline 161
 049E           ;       TX8_PutString(str);
 049E 10                push X
 049F 5000              mov A,>_str
 04A1 08                push A
 04A2 5000              mov A,<_str
 04A4 5C                mov X,A
 04A5 18                pop A
 04A6 7C0000            xcall _TX8_PutString
 04A9 20                pop X
 04AA                   .dbline 162
 04AA           ;       TX8_CPutString("  -  3 = ");
 04AA 10                push X
 04AB 5022              mov A,>L41
 04AD 08                push A
 04AE 5022              mov A,<L41
 04B0 5C                mov X,A
 04B1 18                pop A
 04B2 7C0000            xcall _TX8_CPutString
 04B5 20                pop X
 04B6                   .dbline 163
 04B6           ;       itoa(str, MesValueM[2],10);
 04B6 5000              mov A,0
 04B8 08                push A
 04B9 500A              mov A,10
 04BB 08                push A
 04BC 62D000            mov REG[0xd0],>_MesValueM
 04BF 5104              mov A,[_MesValueM+4]
 04C1 08                push A
 04C2 5105              mov A,[_MesValueM+4+1]
 04C4 08                push A
 04C5 5000              mov A,>_str
 04C7 08                push A
 04C8 5000              mov A,<_str
 04CA 08                push A
 04CB 7C0000            xcall _itoa
 04CE 38FA              add SP,-6
 04D0                   .dbline 164
 04D0           ;       TX8_PutString(str);
 04D0 10                push X
 04D1 5000              mov A,>_str
 04D3 08                push A
 04D4 5000              mov A,<_str
 04D6 5C                mov X,A
 04D7 18                pop A
 04D8 7C0000            xcall _TX8_PutString
 04DB 20                pop X
 04DC                   .dbline 165
 04DC           ;       TX8_CPutString("  Gain Pre: 1 = ");
 04DC 10                push X
 04DD 5011              mov A,>L43
 04DF 08                push A
 04E0 5011              mov A,<L43
 04E2 5C                mov X,A
 04E3 18                pop A
 04E4 7C0000            xcall _TX8_CPutString
 04E7 20                pop X
 04E8                   .dbline 166
 04E8           ;       itoa(str, GF[GainIndx[0][0]][1], 10);
 04E8 5000              mov A,0
 04EA 08                push A
 04EB 500A              mov A,10
 04ED 08                push A
 04EE 62D000            mov REG[0xd0],>_GainIndx
 04F1 5100              mov A,[_GainIndx]
 04F3 62D000            mov REG[0xd0],>__r0
 04F6 5300              mov [__r1],A
 04F8 550000            mov [__r0],0
 04FB 6500              asl [__r1]
 04FD 6B00              rlc [__r0]
 04FF 060001            add [__r1],<_GF+1
 0502 0E0001            adc [__r0],>_GF+1
 0505 5100              mov A,[__r0]
 0507 60D4              mov REG[0xd4],A
 0509 3E00              mvi A,[__r1]
 050B 5300              mov [__r1],A
 050D 5000              mov A,0
 050F 08                push A
 0510 5100              mov A,[__r1]
 0512 08                push A
 0513 5000              mov A,>_str
 0515 08                push A
 0516 5000              mov A,<_str
 0518 08                push A
 0519 7C0000            xcall _itoa
 051C 38FA              add SP,-6
 051E                   .dbline 167
 051E           ;       TX8_PutString(str);
 051E 10                push X
 051F 5000              mov A,>_str
 0521 08                push A
 0522 5000              mov A,<_str
 0524 5C                mov X,A
 0525 18                pop A
 0526 7C0000            xcall _TX8_PutString
 0529 20                pop X
 052A                   .dbline 168
 052A           ;       TX8_CPutString("  -  2 = ");
 052A 10                push X
 052B 502C              mov A,>L39
 052D 08                push A
 052E 502C              mov A,<L39
 0530 5C                mov X,A
 0531 18                pop A
 0532 7C0000            xcall _TX8_CPutString
 0535 20                pop X
 0536                   .dbline 169
 0536           ;       itoa(str, GF[GainIndx[1][0]][1], 10);
 0536 5000              mov A,0
 0538 08                push A
 0539 500A              mov A,10
 053B 08                push A
 053C 62D000            mov REG[0xd0],>_GainIndx
 053F 5102              mov A,[_GainIndx+2]
 0541 62D000            mov REG[0xd0],>__r0
 0544 5300              mov [__r1],A
 0546 550000            mov [__r0],0
 0549 6500              asl [__r1]
 054B 6B00              rlc [__r0]
 054D 060001            add [__r1],<_GF+1
 0550 0E0001            adc [__r0],>_GF+1
 0553 5100              mov A,[__r0]
 0555 60D4              mov REG[0xd4],A
 0557 3E00              mvi A,[__r1]
 0559 5300              mov [__r1],A
 055B 5000              mov A,0
 055D 08                push A
 055E 5100              mov A,[__r1]
 0560 08                push A
 0561 5000              mov A,>_str
 0563 08                push A
 0564 5000              mov A,<_str
 0566 08                push A
 0567 7C0000            xcall _itoa
 056A 38FA              add SP,-6
 056C                   .dbline 170
 056C           ;       TX8_PutString(str);     
 056C 10                push X
 056D 5000              mov A,>_str
 056F 08                push A
 0570 5000              mov A,<_str
 0572 5C                mov X,A
 0573 18                pop A
 0574 7C0000            xcall _TX8_PutString
 0577 20                pop X
 0578                   .dbline 171
 0578           ;       TX8_CPutString("  -  3 = ");
 0578 10                push X
 0579 5022              mov A,>L41
 057B 08                push A
 057C 5022              mov A,<L41
 057E 5C                mov X,A
 057F 18                pop A
 0580 7C0000            xcall _TX8_CPutString
 0583 20                pop X
 0584                   .dbline 172
 0584           ;       itoa(str, GF[GainIndx[2][0]][1], 10);
 0584 5000              mov A,0
 0586 08                push A
 0587 500A              mov A,10
 0589 08                push A
 058A 62D000            mov REG[0xd0],>_GainIndx
 058D 5104              mov A,[_GainIndx+4]
 058F 62D000            mov REG[0xd0],>__r0
 0592 5300              mov [__r1],A
 0594 550000            mov [__r0],0
 0597 6500              asl [__r1]
 0599 6B00              rlc [__r0]
 059B 060001            add [__r1],<_GF+1
 059E 0E0001            adc [__r0],>_GF+1
 05A1 5100              mov A,[__r0]
 05A3 60D4              mov REG[0xd4],A
 05A5 3E00              mvi A,[__r1]
 05A7 5300              mov [__r1],A
 05A9 5000              mov A,0
 05AB 08                push A
 05AC 5100              mov A,[__r1]
 05AE 08                push A
 05AF 5000              mov A,>_str
 05B1 08                push A
 05B2 5000              mov A,<_str
 05B4 08                push A
 05B5 7C0000            xcall _itoa
 05B8 38FA              add SP,-6
 05BA                   .dbline 173
 05BA           ;       TX8_PutString(str);     
 05BA 10                push X
 05BB 5000              mov A,>_str
 05BD 08                push A
 05BE 5000              mov A,<_str
 05C0 5C                mov X,A
 05C1 18                pop A
 05C2 7C0000            xcall _TX8_PutString
 05C5 20                pop X
 05C6                   .dbline 174
 05C6           ;       TX8_CPutString("  Gain Out: 1 = ");
 05C6 10                push X
 05C7 5000              mov A,>L49
 05C9 08                push A
 05CA 5000              mov A,<L49
 05CC 5C                mov X,A
 05CD 18                pop A
 05CE 7C0000            xcall _TX8_CPutString
 05D1 20                pop X
 05D2                   .dbline 175
 05D2           ;       itoa(str, GF[GainIndx[0][1]][1], 10);
 05D2 5000              mov A,0
 05D4 08                push A
 05D5 500A              mov A,10
 05D7 08                push A
 05D8 62D000            mov REG[0xd0],>_GainIndx
 05DB 5101              mov A,[_GainIndx+1]
 05DD 62D000            mov REG[0xd0],>__r0
 05E0 5300              mov [__r1],A
 05E2 550000            mov [__r0],0
 05E5 6500              asl [__r1]
 05E7 6B00              rlc [__r0]
 05E9 060001            add [__r1],<_GF+1
 05EC 0E0001            adc [__r0],>_GF+1
 05EF 5100              mov A,[__r0]
 05F1 60D4              mov REG[0xd4],A
 05F3 3E00              mvi A,[__r1]
 05F5 5300              mov [__r1],A
 05F7 5000              mov A,0
 05F9 08                push A
 05FA 5100              mov A,[__r1]
 05FC 08                push A
 05FD 5000              mov A,>_str
 05FF 08                push A
 0600 5000              mov A,<_str
 0602 08                push A
 0603 7C0000            xcall _itoa
 0606 38FA              add SP,-6
 0608                   .dbline 176
 0608           ;       TX8_PutString(str);
 0608 10                push X
 0609 5000              mov A,>_str
 060B 08                push A
 060C 5000              mov A,<_str
 060E 5C                mov X,A
 060F 18                pop A
 0610 7C0000            xcall _TX8_PutString
 0613 20                pop X
 0614                   .dbline 177
 0614           ;       TX8_CPutString("  -  2 = ");
 0614 10                push X
 0615 502C              mov A,>L39
 0617 08                push A
 0618 502C              mov A,<L39
 061A 5C                mov X,A
 061B 18                pop A
 061C 7C0000            xcall _TX8_CPutString
 061F 20                pop X
 0620                   .dbline 178
 0620           ;       itoa(str, GF[GainIndx[1][1]][1], 10);
 0620 5000              mov A,0
 0622 08                push A
 0623 500A              mov A,10
 0625 08                push A
 0626 62D000            mov REG[0xd0],>_GainIndx
 0629 5103              mov A,[_GainIndx+2+1]
 062B 62D000            mov REG[0xd0],>__r0
 062E 5300              mov [__r1],A
 0630 550000            mov [__r0],0
 0633 6500              asl [__r1]
 0635 6B00              rlc [__r0]
 0637 060001            add [__r1],<_GF+1
 063A 0E0001            adc [__r0],>_GF+1
 063D 5100              mov A,[__r0]
 063F 60D4              mov REG[0xd4],A
 0641 3E00              mvi A,[__r1]
 0643 5300              mov [__r1],A
 0645 5000              mov A,0
 0647 08                push A
 0648 5100              mov A,[__r1]
 064A 08                push A
 064B 5000              mov A,>_str
 064D 08                push A
 064E 5000              mov A,<_str
 0650 08                push A
 0651 7C0000            xcall _itoa
 0654 38FA              add SP,-6
 0656                   .dbline 179
 0656           ;       TX8_PutString(str);     
 0656 10                push X
 0657 5000              mov A,>_str
 0659 08                push A
 065A 5000              mov A,<_str
 065C 5C                mov X,A
 065D 18                pop A
 065E 7C0000            xcall _TX8_PutString
 0661 20                pop X
 0662                   .dbline 180
 0662           ;       TX8_CPutString("  -  3 = ");
 0662 10                push X
 0663 5022              mov A,>L41
 0665 08                push A
 0666 5022              mov A,<L41
 0668 5C                mov X,A
 0669 18                pop A
 066A 7C0000            xcall _TX8_CPutString
 066D 20                pop X
 066E                   .dbline 181
 066E           ;       itoa(str, GF[GainIndx[2][1]][1], 10);
 066E 5000              mov A,0
 0670 08                push A
 0671 500A              mov A,10
 0673 08                push A
 0674 62D000            mov REG[0xd0],>_GainIndx
 0677 5105              mov A,[_GainIndx+4+1]
 0679 62D000            mov REG[0xd0],>__r0
 067C 5300              mov [__r1],A
 067E 550000            mov [__r0],0
 0681 6500              asl [__r1]
 0683 6B00              rlc [__r0]
 0685 060001            add [__r1],<_GF+1
 0688 0E0001            adc [__r0],>_GF+1
 068B 5100              mov A,[__r0]
 068D 60D4              mov REG[0xd4],A
 068F 3E00              mvi A,[__r1]
 0691 5300              mov [__r1],A
 0693 5000              mov A,0
 0695 08                push A
 0696 5100              mov A,[__r1]
 0698 08                push A
 0699 5000              mov A,>_str
 069B 08                push A
 069C 5000              mov A,<_str
 069E 08                push A
 069F 7C0000            xcall _itoa
 06A2 38FA              add SP,-6
 06A4                   .dbline 182
 06A4           ;       TX8_PutString(str);     
 06A4 10                push X
 06A5 5000              mov A,>_str
 06A7 08                push A
 06A8 5000              mov A,<_str
 06AA 5C                mov X,A
 06AB 18                pop A
 06AC 7C0000            xcall _TX8_PutString
 06AF 20                pop X
 06B0                   .dbline -2
 06B0           L36:
 06B0                   .dbline 0 ; func end
 06B0 7F                ret
 06B1                   .dbend
 06B1                   .dbfunc e BlocksInit _BlocksInit fV
 06B1           _BlocksInit::
 06B1                   .dbline -1
 06B1                   .dbline 186
 06B1           ; }
 06B1           ;       
 06B1           ; void BlocksInit(void)
 06B1           ; {// Analog and digital blocks inizialization
 06B1                   .dbline 187
 06B1           ;       ADCINCVR_pot_Start(ADCINCVR_pot_HIGHPOWER);     
 06B1 10                push X
 06B2 5003              mov A,3
 06B4 7C0000            xcall _ADCINCVR_pot_Start
 06B7 20                pop X
 06B8                   .dbline 188
 06B8           ;       ADCINCVR_mes_Start(ADCINCVR_mes_HIGHPOWER);
 06B8 10                push X
 06B9 5003              mov A,3
 06BB 7C0000            xcall _ADCINCVR_mes_Start
 06BE                   .dbline 189
 06BE           ;       AMUX4_mic_Start();
 06BE 7C0000            xcall _AMUX4_mic_Start
 06C1 20                pop X
 06C2                   .dbline 190
 06C2           ;       BPF4_4KHz_Start(BPF4_4KHz_HIGHPOWER);
 06C2 10                push X
 06C3 5003              mov A,3
 06C5 7C0000            xcall _BPF4_4KHz_Start
 06C8                   .dbline 191
 06C8           ;       I2CHW_Start();
 06C8 7C0000            xcall _I2CHW_Start
 06CB 20                pop X
 06CC                   .dbline 192
 06CC           ;       PGA_out_Start(PGA_out_HIGHPOWER);
 06CC 10                push X
 06CD 5003              mov A,3
 06CF 7C0000            xcall _PGA_out_Start
 06D2 20                pop X
 06D3                   .dbline 193
 06D3           ;       PGA_pre_Start(PGA_pre_HIGHPOWER); 
 06D3 10                push X
 06D4 5003              mov A,3
 06D6 7C0000            xcall _PGA_pre_Start
 06D9 20                pop X
 06DA                   .dbline 194
 06DA           ;       RefMux_1_Start(RefMux_1_HIGHPOWER);
 06DA 10                push X
 06DB 5003              mov A,3
 06DD 7C0000            xcall _RefMux_1_Start
 06E0 20                pop X
 06E1                   .dbline 195
 06E1           ;     SCBLOCK_inbuff_Start(SCBLOCK_inbuff_HIGHPOWER);
 06E1 10                push X
 06E2 5003              mov A,3
 06E4 7C0000            xcall _SCBLOCK_inbuff_Start
 06E7                   .dbline 196
 06E7           ;       LED_1_Start();
 06E7 7C0000            xcall _LED_1_Start
 06EA                   .dbline 197
 06EA           ;       LED_2_Start();
 06EA 7C0000            xcall _LED_2_Start
 06ED                   .dbline 198
 06ED           ;       LED_3_Start();
 06ED 7C0000            xcall _LED_3_Start
 06F0                   .dbline 199
 06F0           ;       DIGITAL_OUT_Start();  
 06F0 7C0000            xcall _DIGITAL_OUT_Start
 06F3                   .dbline 201
 06F3           ;       
 06F3           ;       TX8_EnableInt();
 06F3 7C0000            xcall _TX8_EnableInt
 06F6 20                pop X
 06F7                   .dbline 202
 06F7           ;       TX8_Start(TX8_PARITY_NONE);
 06F7 10                push X
 06F8 5000              mov A,0
 06FA 7C0000            xcall _TX8_Start
 06FD 20                pop X
 06FE                   .dbline 204
 06FE           ;       
 06FE           ;       AMUX4_mic_InputSelect(AMUX4_mic_PORT0_1);
 06FE 10                push X
 06FF 5000              mov A,0
 0701 7C0000            xcall _AMUX4_mic_InputSelect
 0704 20                pop X
 0705                   .dbline 206
 0705           ; 
 0705           ;       PGA_pre_SetGain(GF[GainIndx[0][0]][0]);
 0705 62D000            mov REG[0xd0],>_GainIndx
 0708 5100              mov A,[_GainIndx]
 070A 62D000            mov REG[0xd0],>__r0
 070D 5300              mov [__r1],A
 070F 550000            mov [__r0],0
 0712 6500              asl [__r1]
 0714 6B00              rlc [__r0]
 0716 060000            add [__r1],<_GF
 0719 0E0000            adc [__r0],>_GF
 071C 5100              mov A,[__r0]
 071E 60D4              mov REG[0xd4],A
 0720 3E00              mvi A,[__r1]
 0722 10                push X
 0723 7C0000            xcall _PGA_pre_SetGain
 0726 20                pop X
 0727                   .dbline 207
 0727           ;       PGA_out_SetGain(GF[GainIndx[0][1]][0]);
 0727 62D000            mov REG[0xd0],>_GainIndx
 072A 5101              mov A,[_GainIndx+1]
 072C 62D000            mov REG[0xd0],>__r0
 072F 5300              mov [__r1],A
 0731 550000            mov [__r0],0
 0734 6500              asl [__r1]
 0736 6B00              rlc [__r0]
 0738 060000            add [__r1],<_GF
 073B 0E0000            adc [__r0],>_GF
 073E 5100              mov A,[__r0]
 0740 60D4              mov REG[0xd4],A
 0742 3E00              mvi A,[__r1]
 0744 10                push X
 0745 7C0000            xcall _PGA_out_SetGain
 0748                   .dbline 209
 0748           ;       
 0748           ;     HB_Tmr_EnableInt();  
 0748 7C0000            xcall _HB_Tmr_EnableInt
 074B                   .dbline 210
 074B           ;       HB_Tmr_Start();         
 074B 7C0000            xcall _HB_Tmr_Start
 074E 20                pop X
 074F                   .dbline -2
 074F           L58:
 074F                   .dbline 0 ; func end
 074F 7F                ret
 0750                   .dbend
 0750                   .dbfunc e HB_Tmr_ISR_C _HB_Tmr_ISR_C fV
 0750           _HB_Tmr_ISR_C::
 0750                   .dbline -1
 0750 71C0              or F,-64
 0752 08                push A
 0753 5DD0              mov A,REG[0xd0]
 0755 08                push A
 0756                   .dbline 214
 0756           ; }
 0756           ;       
 0756           ; void HB_Tmr_ISR_C(void)
 0756           ; {// Base clock for all of the timings in the program
 0756                   .dbline 215
 0756           ;       TmrFlag = 1;
 0756 62D000            mov REG[0xd0],>_TmrFlag
 0759 550001            mov [_TmrFlag],1
 075C                   .dbline 216
 075C           ;       Tmr1++;
 075C 62D000            mov REG[0xd0],>_Tmr1
 075F 7601              inc [_Tmr1+1]
 0761 0E0000            adc [_Tmr1],0
 0764                   .dbline -2
 0764           L60:
 0764 18                pop A
 0765 60D0              mov REG[208],A
 0767 18                pop A
 0768                   .dbline 0 ; func end
 0768 7E                reti
 0769                   .dbend
 0769                   .dbfunc e DelayMs _DelayMs fV
 0769           ;              i -> X+0
 0769           ;             Ms -> X-5
 0769           _DelayMs::
 0769                   .dbline -1
 0769 10                push X
 076A 4F                mov X,SP
 076B 3802              add SP,2
 076D                   .dbline 220
 076D           ; }
 076D           ; 
 076D           ; void DelayMs(int Ms)
 076D           ; {
 076D                   .dbline 222
 076D           ;       int i;
 076D           ;       for (i=0; i<Ms; i++)
 076D 560100            mov [X+1],0
 0770 560000            mov [X+0],0
 0773 800D              xjmp L65
 0775           L62:
 0775                   .dbline 223
 0775           ;       {
 0775                   .dbline 224
 0775           ;               Delay50uTimes(20);
 0775 10                push X
 0776 5014              mov A,20
 0778 7C0000            xcall _Delay50uTimes
 077B 20                pop X
 077C                   .dbline 225
 077C           ;       }
 077C           L63:
 077C                   .dbline 222
 077C 7701              inc [X+1]
 077E 0F0000            adc [X+0],0
 0781           L65:
 0781                   .dbline 222
 0781 5201              mov A,[X+1]
 0783 13FC              sub A,[X-4]
 0785 52FB              mov A,[X-5]
 0787 3180              xor A,-128
 0789 62D000            mov REG[0xd0],>__r0
 078C 5300              mov [__rX],A
 078E 5200              mov A,[X+0]
 0790 3180              xor A,-128
 0792 1A00              sbb A,[__rX]
 0794 CFE0              jc L62
 0796           X13:
 0796                   .dbline -2
 0796           L61:
 0796 38FE              add SP,-2
 0798 20                pop X
 0799                   .dbline 0 ; func end
 0799 7F                ret
 079A                   .dbsym l i 0 I
 079A                   .dbsym l Ms -5 I
 079A                   .dbend
 079A                   .dbfunc e LedTest _LedTest fV
 079A           ;              i -> X+0
 079A           _LedTest::
 079A                   .dbline -1
 079A 10                push X
 079B 4F                mov X,SP
 079C 3802              add SP,2
 079E                   .dbline 229
 079E           ; }
 079E           ; 
 079E           ; void LedTest(void)
 079E           ; {
 079E                   .dbline 231
 079E           ;       int i;
 079E           ;       LED_1_Off();
 079E 10                push X
 079F 7C0000            xcall _LED_1_Off
 07A2                   .dbline 232
 07A2           ;       LED_2_Off();
 07A2 7C0000            xcall _LED_2_Off
 07A5                   .dbline 233
 07A5           ;       LED_3_Off();
 07A5 7C0000            xcall _LED_3_Off
 07A8 20                pop X
 07A9                   .dbline 235
 07A9           ;       
 07A9           ;       for (i=0; i<3; i++)
 07A9 560100            mov [X+1],0
 07AC 560000            mov [X+0],0
 07AF           L67:
 07AF                   .dbline 236
 07AF           ;       {
 07AF                   .dbline 237
 07AF           ;               LED_1_On();
 07AF 10                push X
 07B0 7C0000            xcall _LED_1_On
 07B3 20                pop X
 07B4                   .dbline 238
 07B4           ;               DelayMs(500);
 07B4 5001              mov A,1
 07B6 08                push A
 07B7 50F4              mov A,-12
 07B9 08                push A
 07BA 9FAD              xcall _DelayMs
 07BC 38FE              add SP,-2
 07BE                   .dbline 239
 07BE           ;               LED_1_Off();
 07BE 10                push X
 07BF 7C0000            xcall _LED_1_Off
 07C2                   .dbline 240
 07C2           ;               LED_2_On();
 07C2 7C0000            xcall _LED_2_On
 07C5 20                pop X
 07C6                   .dbline 241
 07C6           ;               DelayMs(500);
 07C6 5001              mov A,1
 07C8 08                push A
 07C9 50F4              mov A,-12
 07CB 08                push A
 07CC 9F9B              xcall _DelayMs
 07CE 38FE              add SP,-2
 07D0                   .dbline 242
 07D0           ;               LED_2_Off();
 07D0 10                push X
 07D1 7C0000            xcall _LED_2_Off
 07D4                   .dbline 243
 07D4           ;               LED_3_On();
 07D4 7C0000            xcall _LED_3_On
 07D7 20                pop X
 07D8                   .dbline 244
 07D8           ;               DelayMs(500);
 07D8 5001              mov A,1
 07DA 08                push A
 07DB 50F4              mov A,-12
 07DD 08                push A
 07DE 9F89              xcall _DelayMs
 07E0 38FE              add SP,-2
 07E2                   .dbline 245
 07E2           ;               LED_3_Off();
 07E2 10                push X
 07E3 7C0000            xcall _LED_3_Off
 07E6 20                pop X
 07E7                   .dbline 246
 07E7           ;       }
 07E7           L68:
 07E7                   .dbline 235
 07E7 7701              inc [X+1]
 07E9 0F0000            adc [X+0],0
 07EC                   .dbline 235
 07EC 5201              mov A,[X+1]
 07EE 1103              sub A,3
 07F0 5200              mov A,[X+0]
 07F2 3180              xor A,-128
 07F4 1980              sbb A,(0 ^ 0x80)
 07F6 CFB8              jc L67
 07F8           X14:
 07F8                   .dbline -2
 07F8           L66:
 07F8 38FE              add SP,-2
 07FA 20                pop X
 07FB                   .dbline 0 ; func end
 07FB 7F                ret
 07FC                   .dbsym l i 0 I
 07FC                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\main.c
 0000           _str::
 0000 00000000000000    .byte 0,0,0,0,0,0,0
 0007                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0007                   .dbsym e str _str A[7:7]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0000           _Tmr1::
 0000 0000              .byte 0,0
 0002                   .dbsym e Tmr1 _Tmr1 i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0000           _i::
 0000 0000              .byte 0,0
 0002                   .dbsym e i _i i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0000           _MesValueM::
 0000 000000000000      .byte 0,0,0,0,0,0
 0006                   .dbsym e MesValueM _MesValueM A[6:3]I
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0000           _MesValue::
 0000 00000000000000000000      .word 0,0,0,0,0
 000A 0000              .byte 0,0
 000C                   .dbsym e MesValue _MesValue A[12:3:2]I
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0000           _MesValueOut::
 0000 0000              .byte 0,0
 0002                   .dbsym e MesValueOut _MesValueOut I
                        .area data(ram, con, rel)
 0000                   .dbfile C:\PSOC_P~1\EXPLOR~3\EXPLOR~1\definitions.h
 0000           _PotValue::
 0000 0000              .byte 0,0
 0002                   .dbsym e PotValue _PotValue I
                        .area lit(rom, con, rel)
 0000           L49:
 0000 20204761696E204F75743A2031203D20  .byte 32,32,'G,'a,'i,'n,32,'O,'u,'t,58,32,49,32,61,32
 0010 00                .byte 0
 0011           L43:
 0011 20204761696E205072653A2031203D20  .byte 32,32,'G,'a,'i,'n,32,'P,'r,'e,58,32,49,32,61,32
 0021 00                .byte 0
 0022           L41:
 0022 20202D202033203D2000      .byte 32,32,45,32,32,51,32,61,32,0
 002C           L39:
 002C 20202D202032203D2000      .byte 32,32,45,32,32,50,32,61,32,0
 0036           L38:
 0036 202020204D65732056616C75653A2031  .byte 32,32,32,32,'M,'e,'s,32,'V,'a,'l,'u,'e,58,32,49
 0046 203D2000          .byte 32,61,32,0
 004A           L37:
 004A 0A0D506F742056616C7565203D2000    .byte 10,13,'P,'o,'t,32,'V,'a,'l,'u,'e,32,61,32,0
