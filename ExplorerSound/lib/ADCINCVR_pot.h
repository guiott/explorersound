//*****************************************************************************
//*****************************************************************************
//  FILENAME:  ADCINCVR_pot.h
//  Version: 3.1, Updated on 2009/10/15 at 17:11:37
//  Generated by PSoC Designer 5.0.1127.0
//
//  DESCRIPTION:  ADCINCVR User Module C Language interface file.
//-----------------------------------------------------------------------------
//      Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************

#include <m8C.h>

//-------------------------------------------------
// Defines for ADCINCVR_pot API's.
//-------------------------------------------------

// Power Setting Constants
#define ADCINCVR_pot_OFF            0
#define ADCINCVR_pot_LOWPOWER       1
#define ADCINCVR_pot_MEDPOWER       2
#define ADCINCVR_pot_HIGHPOWER      3

// Function Fastcall Pragmas
#pragma fastcall16 ADCINCVR_pot_Start
#pragma fastcall16 ADCINCVR_pot_SetPower
#pragma fastcall16 ADCINCVR_pot_GetSamples
#pragma fastcall16 ADCINCVR_pot_StopAD
#pragma fastcall16 ADCINCVR_pot_Stop
#pragma fastcall16 ADCINCVR_pot_fIsData
#pragma fastcall16 ADCINCVR_pot_fIsDataAvailable
#pragma fastcall16 ADCINCVR_pot_iGetData
#pragma fastcall16 ADCINCVR_pot_iGetDataClearFlag
#pragma fastcall16 ADCINCVR_pot_ClearFlag
#pragma fastcall16 ADCINCVR_pot_SetResolution

//-------------------------------------------------
// Prototypes of the ADCINCVR_pot API.
//-------------------------------------------------

extern void ADCINCVR_pot_Start(BYTE bPower);
extern void ADCINCVR_pot_SetPower(BYTE bPower);
extern void ADCINCVR_pot_GetSamples(BYTE bNumSamples);
extern void ADCINCVR_pot_StopAD(void);
extern void ADCINCVR_pot_Stop(void);
extern CHAR ADCINCVR_pot_fIsData(void);
extern CHAR ADCINCVR_pot_fIsDataAvailable(void);
extern INT  ADCINCVR_pot_iGetData(void);
extern INT  ADCINCVR_pot_iGetDataClearFlag(void);
extern void ADCINCVR_pot_ClearFlag(void);

extern void ADCINCVR_pot_SetResolution(BYTE bResolution);

#define ADCINCVR_pot_bNUMBITS  0x0b

//-------------------------------------------------
// Hardware Register Definitions
//-------------------------------------------------

// Integrator Block Register Definitions
#pragma ioport  ADCINCVR_pot_bfAtoDcr0: 0x098
BYTE            ADCINCVR_pot_bfAtoDcr0;
#pragma ioport  ADCINCVR_pot_bfAtoDcr1: 0x099
BYTE            ADCINCVR_pot_bfAtoDcr1;
#pragma ioport  ADCINCVR_pot_bfAtoDcr2: 0x09a
BYTE            ADCINCVR_pot_bfAtoDcr2;
#pragma ioport  ADCINCVR_pot_bfAtoDcr3: 0x09b
BYTE            ADCINCVR_pot_bfAtoDcr3;

// Counter Block Register Definitions
#pragma ioport  ADCINCVR_pot_fCounterFN:    0x12c
BYTE            ADCINCVR_pot_fCounterFN;
#pragma ioport  ADCINCVR_pot_fCounterSL:    0x12d
BYTE            ADCINCVR_pot_fCounterSL;
#pragma ioport  ADCINCVR_pot_fCounterOS:    0x12e
BYTE            ADCINCVR_pot_fCounterOS;
#pragma ioport  ADCINCVR_pot_bCount:    0x02c
BYTE            ADCINCVR_pot_bCount;
#pragma ioport  ADCINCVR_pot_bPeriod:   0x02d
BYTE            ADCINCVR_pot_bPeriod;
#pragma ioport  ADCINCVR_pot_bCompare:  0x02e
BYTE            ADCINCVR_pot_bCompare;
#pragma ioport  ADCINCVR_pot_bCounter_CR0:  0x02f
BYTE            ADCINCVR_pot_bCounter_CR0;


// PWM16 Block Register Definitions
#pragma ioport  ADCINCVR_pot_bfPWM_LSB_FN:  0x130
BYTE            ADCINCVR_pot_bfPWM_LSB_FN;
#pragma ioport  ADCINCVR_pot_bfPWM_MSB_FN:  0x134
BYTE            ADCINCVR_pot_bfPWM_MSB_FN;
#pragma ioport  ADCINCVR_pot_fPWM_LSB_CR0:  0x033
BYTE            ADCINCVR_pot_fPWM_LSB_CR0;
#pragma ioport  ADCINCVR_pot_fPWM_MSB_CR0:  0x037
BYTE            ADCINCVR_pot_fPWM_MSB_CR0;
#pragma ioport  ADCINCVR_pot_bPWM_Count_MSB:    0x034
BYTE            ADCINCVR_pot_bPWM_Count_MSB;
#pragma ioport  ADCINCVR_pot_bPWM_Count_LSB:    0x030
BYTE            ADCINCVR_pot_bPWM_Count_LSB;
#pragma ioport  ADCINCVR_pot_bPWM_Period_MSB:   0x035
BYTE            ADCINCVR_pot_bPWM_Period_MSB;
#pragma ioport  ADCINCVR_pot_bPWM_Period_LSB:   0x031
BYTE            ADCINCVR_pot_bPWM_Period_LSB;
#pragma ioport  ADCINCVR_pot_bPWM_IntTime_MSB:  0x036
BYTE            ADCINCVR_pot_bPWM_IntTime_MSB;
#pragma ioport  ADCINCVR_pot_bPWM_IntTime_LSB:  0x032
BYTE            ADCINCVR_pot_bPWM_IntTime_LSB;
#pragma ioport  ADCINCVR_pot_bfPWM_LSB_FN:  0x130
BYTE            ADCINCVR_pot_bfPWM_LSB_FN;
#pragma ioport  ADCINCVR_pot_bfPWM_MSB_FN:  0x134
BYTE            ADCINCVR_pot_bfPWM_MSB_FN;

// end of file ADCINCVR_pot.h
